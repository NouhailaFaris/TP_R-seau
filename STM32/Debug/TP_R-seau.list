
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006690  08006690  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006698  08006698  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080066a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08006708  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006708  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ca  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f6  00000000  00000000  00016662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00018958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c3  00000000  00000000  000195e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023001  00000000  00000000  00019fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010af7  00000000  00000000  0003cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf9c6  00000000  00000000  0004daa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  0011d4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00121138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064cc 	.word	0x080064cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080064cc 	.word	0x080064cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <BMP280_get_trimming>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

void BMP280_get_trimming() {
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af04      	add	r7, sp, #16
    uint8_t calib_data[24];
    HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, 1, calib_data, 24, HAL_MAX_DELAY);
 8000646:	23ee      	movs	r3, #238	@ 0xee
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	2318      	movs	r3, #24
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	463b      	mov	r3, r7
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	2288      	movs	r2, #136	@ 0x88
 800065c:	483b      	ldr	r0, [pc, #236]	@ (800074c <BMP280_get_trimming+0x10c>)
 800065e:	f002 faaf 	bl	8002bc0 <HAL_I2C_Mem_Read>

    dig_T1 = (calib_data[1] << 8) | calib_data[0];
 8000662:	787b      	ldrb	r3, [r7, #1]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b21a      	sxth	r2, r3
 8000668:	783b      	ldrb	r3, [r7, #0]
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21b      	sxth	r3, r3
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <BMP280_get_trimming+0x110>)
 8000674:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib_data[3] << 8) | calib_data[2];
 8000676:	78fb      	ldrb	r3, [r7, #3]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	b21a      	sxth	r2, r3
 800067c:	78bb      	ldrb	r3, [r7, #2]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	4b33      	ldr	r3, [pc, #204]	@ (8000754 <BMP280_get_trimming+0x114>)
 8000686:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	793b      	ldrb	r3, [r7, #4]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <BMP280_get_trimming+0x118>)
 8000698:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calib_data[7] << 8) | calib_data[6];
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <BMP280_get_trimming+0x11c>)
 80006ac:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calib_data[9] << 8) | calib_data[8];
 80006ae:	7a7b      	ldrb	r3, [r7, #9]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	7a3b      	ldrb	r3, [r7, #8]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <BMP280_get_trimming+0x120>)
 80006be:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calib_data[11] << 8) | calib_data[10];
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	7abb      	ldrb	r3, [r7, #10]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <BMP280_get_trimming+0x124>)
 80006d0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calib_data[13] << 8) | calib_data[12];
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <BMP280_get_trimming+0x128>)
 80006e2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calib_data[15] << 8) | calib_data[14];
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <BMP280_get_trimming+0x12c>)
 80006f4:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calib_data[17] << 8) | calib_data[16];
 80006f6:	7c7b      	ldrb	r3, [r7, #17]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	7c3b      	ldrb	r3, [r7, #16]
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <BMP280_get_trimming+0x130>)
 8000706:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calib_data[19] << 8) | calib_data[18];
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	7cbb      	ldrb	r3, [r7, #18]
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <BMP280_get_trimming+0x134>)
 8000718:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calib_data[21] << 8) | calib_data[20];
 800071a:	7d7b      	ldrb	r3, [r7, #21]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	7d3b      	ldrb	r3, [r7, #20]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <BMP280_get_trimming+0x138>)
 800072a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calib_data[23] << 8) | calib_data[22];
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	7dbb      	ldrb	r3, [r7, #22]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <BMP280_get_trimming+0x13c>)
 800073c:	801a      	strh	r2, [r3, #0]

    printf("Calibration parameters read successfully.\n");
 800073e:	4810      	ldr	r0, [pc, #64]	@ (8000780 <BMP280_get_trimming+0x140>)
 8000740:	f005 f90e 	bl	8005960 <puts>
}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000c8 	.word	0x200000c8
 8000750:	20000084 	.word	0x20000084
 8000754:	20000086 	.word	0x20000086
 8000758:	20000088 	.word	0x20000088
 800075c:	2000008a 	.word	0x2000008a
 8000760:	2000008c 	.word	0x2000008c
 8000764:	2000008e 	.word	0x2000008e
 8000768:	20000090 	.word	0x20000090
 800076c:	20000092 	.word	0x20000092
 8000770:	20000094 	.word	0x20000094
 8000774:	20000096 	.word	0x20000096
 8000778:	20000098 	.word	0x20000098
 800077c:	2000009a 	.word	0x2000009a
 8000780:	080064e4 	.word	0x080064e4

08000784 <BMP280_check>:


int BMP280_check() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 800078a:	23d0      	movs	r3, #208	@ 0xd0
 800078c:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800078e:	23ee      	movs	r3, #238	@ 0xee
 8000790:	4619      	mov	r1, r3
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	481a      	ldr	r0, [pc, #104]	@ (8000808 <BMP280_check+0x84>)
 800079e:	f001 fedf 	bl	8002560 <HAL_I2C_Master_Transmit>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80007ac:	4817      	ldr	r0, [pc, #92]	@ (800080c <BMP280_check+0x88>)
 80007ae:	f005 f8d7 	bl	8005960 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80007b2:	23ee      	movs	r3, #238	@ 0xee
 80007b4:	4619      	mov	r1, r3
 80007b6:	2301      	movs	r3, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	1d3a      	adds	r2, r7, #4
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4603      	mov	r3, r0
 80007c4:	4810      	ldr	r0, [pc, #64]	@ (8000808 <BMP280_check+0x84>)
 80007c6:	f001 ffc9 	bl	800275c <HAL_I2C_Master_Receive>
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 80007d4:	480e      	ldr	r0, [pc, #56]	@ (8000810 <BMP280_check+0x8c>)
 80007d6:	f005 f8c3 	bl	8005960 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80007da:	793b      	ldrb	r3, [r7, #4]
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <BMP280_check+0x90>)
 80007e0:	f005 f856 	bl	8005890 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	2258      	movs	r2, #88	@ 0x58
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d104      	bne.n	80007f6 <BMP280_check+0x72>
		printf("Ok\r\n");
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <BMP280_check+0x94>)
 80007ee:	f005 f8b7 	bl	8005960 <puts>
		return 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e003      	b.n	80007fe <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 80007f6:	4809      	ldr	r0, [pc, #36]	@ (800081c <BMP280_check+0x98>)
 80007f8:	f005 f8b2 	bl	8005960 <puts>
		return 1;
 80007fc:	2301      	movs	r3, #1
	}
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000c8 	.word	0x200000c8
 800080c:	08006510 	.word	0x08006510
 8000810:	08006534 	.word	0x08006534
 8000814:	08006558 	.word	0x08006558
 8000818:	08006564 	.word	0x08006564
 800081c:	08006568 	.word	0x08006568

08000820 <BMP280_init>:

int BMP280_init() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000826:	2357      	movs	r3, #87	@ 0x57
 8000828:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 800082a:	480e      	ldr	r0, [pc, #56]	@ (8000864 <BMP280_init+0x44>)
 800082c:	f005 f898 	bl	8005960 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	4610      	mov	r0, r2
 8000838:	f000 f81a 	bl	8000870 <BMP280_Write_Reg>
 800083c:	4603      	mov	r3, r0
 800083e:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <BMP280_init+0x34>
		printf("Config Ok\r\n");
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <BMP280_init+0x48>)
 8000848:	f005 f88a 	bl	8005960 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 800084c:	f7ff fef8 	bl	8000640 <BMP280_get_trimming>
	return 0;
 8000850:	2300      	movs	r3, #0
 8000852:	e003      	b.n	800085c <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <BMP280_init+0x4c>)
 8000856:	f005 f883 	bl	8005960 <puts>
		return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08006574 	.word	0x08006574
 8000868:	08006584 	.word	0x08006584
 800086c:	08006590 	.word	0x08006590

08000870 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000888:	23ee      	movs	r3, #238	@ 0xee
 800088a:	4619      	mov	r1, r3
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2302      	movs	r3, #2
 8000898:	4814      	ldr	r0, [pc, #80]	@ (80008ec <BMP280_Write_Reg+0x7c>)
 800089a:	f001 fe61 	bl	8002560 <HAL_I2C_Master_Transmit>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80008a8:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <BMP280_Write_Reg+0x80>)
 80008aa:	f005 f859 	bl	8005960 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80008ae:	23ee      	movs	r3, #238	@ 0xee
 80008b0:	4619      	mov	r1, r3
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <BMP280_Write_Reg+0x7c>)
 80008c0:	f001 ff4c 	bl	800275c <HAL_I2C_Master_Receive>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <BMP280_Write_Reg+0x84>)
 80008d0:	f005 f846 	bl	8005960 <puts>
	}

	if (buf[0] == value) {
 80008d4:	7b3b      	ldrb	r3, [r7, #12]
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d101      	bne.n	80008e0 <BMP280_Write_Reg+0x70>
		return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80008e0:	2301      	movs	r3, #1
	}
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	080065a0 	.word	0x080065a0
 80008f4:	080065bc 	.word	0x080065bc

080008f8 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000908:	23ee      	movs	r3, #238	@ 0xee
 800090a:	4619      	mov	r1, r3
 800090c:	1dfa      	adds	r2, r7, #7
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	4814      	ldr	r0, [pc, #80]	@ (8000968 <BMP280_Read_Reg+0x70>)
 8000918:	f001 fe22 	bl	8002560 <HAL_I2C_Master_Transmit>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8000926:	4811      	ldr	r0, [pc, #68]	@ (800096c <BMP280_Read_Reg+0x74>)
 8000928:	f005 f81a 	bl	8005960 <puts>
	}

	buf = (uint8_t*) malloc(length);
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fe2e 	bl	8005590 <malloc>
 8000934:	4603      	mov	r3, r0
 8000936:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000938:	23ee      	movs	r3, #238	@ 0xee
 800093a:	4619      	mov	r1, r3
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	b29b      	uxth	r3, r3
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	9200      	str	r2, [sp, #0]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <BMP280_Read_Reg+0x70>)
 800094a:	f001 ff07 	bl	800275c <HAL_I2C_Master_Receive>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <BMP280_Read_Reg+0x78>)
 800095a:	f005 f801 	bl	8005960 <puts>
	}

	return buf;
 800095e:	68bb      	ldr	r3, [r7, #8]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000c8 	.word	0x200000c8
 800096c:	080065a0 	.word	0x080065a0
 8000970:	080065bc 	.word	0x080065bc

08000974 <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    BMP280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	10da      	asrs	r2, r3, #3
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <bmp280_compensate_T_int32+0x74>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <bmp280_compensate_T_int32+0x78>)
 800098a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	12db      	asrs	r3, r3, #11
 8000994:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	111b      	asrs	r3, r3, #4
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <bmp280_compensate_T_int32+0x74>)
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	1112      	asrs	r2, r2, #4
 80009a4:	4910      	ldr	r1, [pc, #64]	@ (80009e8 <bmp280_compensate_T_int32+0x74>)
 80009a6:	8809      	ldrh	r1, [r1, #0]
 80009a8:	1a52      	subs	r2, r2, r1
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	131b      	asrs	r3, r3, #12
            ((BMP280_S32_t)dig_T3)) >> 14;
 80009b0:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <bmp280_compensate_T_int32+0x7c>)
 80009b2:	f9b2 2000 	ldrsh.w	r2, [r2]
    var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80009b6:	fb02 f303 	mul.w	r3, r2, r3
 80009ba:	139b      	asrs	r3, r3, #14
 80009bc:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <bmp280_compensate_T_int32+0x80>)
 80009c6:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <bmp280_compensate_T_int32+0x80>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	3380      	adds	r3, #128	@ 0x80
 80009d4:	121b      	asrs	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
    return T;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000084 	.word	0x20000084
 80009ec:	20000086 	.word	0x20000086
 80009f0:	20000088 	.word	0x20000088
 80009f4:	2000009c 	.word	0x2000009c

080009f8 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 80009f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009fc:	b0ca      	sub	sp, #296	@ 0x128
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    BMP280_S64_t var1, var2, p;
    var1 = ((BMP280_S64_t)t_fine) - 128000;
 8000a04:	4baf      	ldr	r3, [pc, #700]	@ (8000cc4 <bmp280_compensate_P_int64+0x2cc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	17da      	asrs	r2, r3, #31
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a12:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000a16:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8000a1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a22:	fb03 f102 	mul.w	r1, r3, r2
 8000a26:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	18ca      	adds	r2, r1, r3
 8000a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a38:	fba3 8903 	umull	r8, r9, r3, r3
 8000a3c:	eb02 0309 	add.w	r3, r2, r9
 8000a40:	4699      	mov	r9, r3
 8000a42:	4ba1      	ldr	r3, [pc, #644]	@ (8000cc8 <bmp280_compensate_P_int64+0x2d0>)
 8000a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	17da      	asrs	r2, r3, #31
 8000a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a54:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a58:	4603      	mov	r3, r0
 8000a5a:	fb03 f209 	mul.w	r2, r3, r9
 8000a5e:	460b      	mov	r3, r1
 8000a60:	fb08 f303 	mul.w	r3, r8, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	4602      	mov	r2, r0
 8000a68:	fba8 1202 	umull	r1, r2, r8, r2
 8000a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a70:	460a      	mov	r2, r1
 8000a72:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a80:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a84:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a88:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 8000a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8000ccc <bmp280_compensate_P_int64+0x2d4>)
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	17da      	asrs	r2, r3, #31
 8000a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a9a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000aa2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000aa6:	462a      	mov	r2, r5
 8000aa8:	fb02 f203 	mul.w	r2, r2, r3
 8000aac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000abc:	4621      	mov	r1, r4
 8000abe:	fba3 1301 	umull	r1, r3, r3, r1
 8000ac2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	f04f 0100 	mov.w	r1, #0
 8000ade:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ae2:	462b      	mov	r3, r5
 8000ae4:	0459      	lsls	r1, r3, #17
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000aec:	4623      	mov	r3, r4
 8000aee:	0458      	lsls	r0, r3, #17
 8000af0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000af4:	1814      	adds	r4, r2, r0
 8000af6:	643c      	str	r4, [r7, #64]	@ 0x40
 8000af8:	414b      	adcs	r3, r1
 8000afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8000afc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000b00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8000b04:	4b72      	ldr	r3, [pc, #456]	@ (8000cd0 <bmp280_compensate_P_int64+0x2d8>)
 8000b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	17da      	asrs	r2, r3, #31
 8000b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b12:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	f04f 0100 	mov.w	r1, #0
 8000b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b22:	00d9      	lsls	r1, r3, #3
 8000b24:	2000      	movs	r0, #0
 8000b26:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000b2a:	1814      	adds	r4, r2, r0
 8000b2c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b2e:	414b      	adcs	r3, r1
 8000b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b32:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b36:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 8000b3a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b42:	fb03 f102 	mul.w	r1, r3, r2
 8000b46:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	18ca      	adds	r2, r1, r3
 8000b54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b58:	fba3 1303 	umull	r1, r3, r3, r3
 8000b5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b60:	460b      	mov	r3, r1
 8000b62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b6a:	18d3      	adds	r3, r2, r3
 8000b6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b70:	4b58      	ldr	r3, [pc, #352]	@ (8000cd4 <bmp280_compensate_P_int64+0x2dc>)
 8000b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	17da      	asrs	r2, r3, #31
 8000b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b82:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b86:	462b      	mov	r3, r5
 8000b88:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	fb02 f203 	mul.w	r2, r2, r3
 8000b92:	464b      	mov	r3, r9
 8000b94:	4621      	mov	r1, r4
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4622      	mov	r2, r4
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	fba2 1201 	umull	r1, r2, r2, r1
 8000ba4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000ba8:	460a      	mov	r2, r1
 8000baa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000bae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	f04f 0100 	mov.w	r1, #0
 8000bc0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	0a18      	lsrs	r0, r3, #8
 8000bc8:	462b      	mov	r3, r5
 8000bca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bce:	462b      	mov	r3, r5
 8000bd0:	1219      	asrs	r1, r3, #8
 8000bd2:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <bmp280_compensate_P_int64+0x2e0>)
 8000bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	17da      	asrs	r2, r3, #31
 8000bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000be0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000be4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000be8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bec:	464a      	mov	r2, r9
 8000bee:	fb02 f203 	mul.w	r2, r2, r3
 8000bf2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bf6:	4644      	mov	r4, r8
 8000bf8:	fb04 f303 	mul.w	r3, r4, r3
 8000bfc:	441a      	add	r2, r3
 8000bfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c02:	4644      	mov	r4, r8
 8000c04:	fba3 4304 	umull	r4, r3, r3, r4
 8000c08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000c12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c16:	18d3      	adds	r3, r2, r3
 8000c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000c28:	464c      	mov	r4, r9
 8000c2a:	0323      	lsls	r3, r4, #12
 8000c2c:	4644      	mov	r4, r8
 8000c2e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c32:	4644      	mov	r4, r8
 8000c34:	0322      	lsls	r2, r4, #12
 8000c36:	1884      	adds	r4, r0, r2
 8000c38:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c3a:	eb41 0303 	adc.w	r3, r1, r3
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c44:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 8000c48:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c4c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c50:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <bmp280_compensate_P_int64+0x2e4>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c68:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c6c:	462b      	mov	r3, r5
 8000c6e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c72:	4642      	mov	r2, r8
 8000c74:	fb02 f203 	mul.w	r2, r2, r3
 8000c78:	464b      	mov	r3, r9
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	4622      	mov	r2, r4
 8000c84:	4641      	mov	r1, r8
 8000c86:	fba2 1201 	umull	r1, r2, r2, r1
 8000c8a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c8e:	460a      	mov	r2, r1
 8000c90:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c94:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c98:	4413      	add	r3, r2
 8000c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000caa:	4629      	mov	r1, r5
 8000cac:	104a      	asrs	r2, r1, #1
 8000cae:	4629      	mov	r1, r5
 8000cb0:	17cb      	asrs	r3, r1, #31
 8000cb2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0)
 8000cb6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	d110      	bne.n	8000ce0 <bmp280_compensate_P_int64+0x2e8>
    {
        return 0; // avoid exception caused by division by zero
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e154      	b.n	8000f6c <bmp280_compensate_P_int64+0x574>
 8000cc2:	bf00      	nop
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	20000094 	.word	0x20000094
 8000ccc:	20000092 	.word	0x20000092
 8000cd0:	20000090 	.word	0x20000090
 8000cd4:	2000008e 	.word	0x2000008e
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	2000008a 	.word	0x2000008a
    }

    p = 1048576 - adc_P;
 8000ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ce4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000ce8:	17da      	asrs	r2, r3, #31
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cf2:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8000cf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cfa:	105b      	asrs	r3, r3, #1
 8000cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d04:	07db      	lsls	r3, r3, #31
 8000d06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000d0e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d12:	4621      	mov	r1, r4
 8000d14:	1a89      	subs	r1, r1, r2
 8000d16:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000d18:	4629      	mov	r1, r5
 8000d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d20:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000d24:	4622      	mov	r2, r4
 8000d26:	462b      	mov	r3, r5
 8000d28:	1891      	adds	r1, r2, r2
 8000d2a:	6239      	str	r1, [r7, #32]
 8000d2c:	415b      	adcs	r3, r3
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d34:	4621      	mov	r1, r4
 8000d36:	1851      	adds	r1, r2, r1
 8000d38:	61b9      	str	r1, [r7, #24]
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	414b      	adcs	r3, r1
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	018b      	lsls	r3, r1, #6
 8000d50:	4641      	mov	r1, r8
 8000d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d56:	4641      	mov	r1, r8
 8000d58:	018a      	lsls	r2, r1, #6
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	1889      	adds	r1, r1, r2
 8000d5e:	6139      	str	r1, [r7, #16]
 8000d60:	4649      	mov	r1, r9
 8000d62:	eb43 0101 	adc.w	r1, r3, r1
 8000d66:	6179      	str	r1, [r7, #20]
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d74:	4649      	mov	r1, r9
 8000d76:	008b      	lsls	r3, r1, #2
 8000d78:	4641      	mov	r1, r8
 8000d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d7e:	4641      	mov	r1, r8
 8000d80:	008a      	lsls	r2, r1, #2
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	4622      	mov	r2, r4
 8000d8a:	189b      	adds	r3, r3, r2
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	462a      	mov	r2, r5
 8000d92:	eb42 0303 	adc.w	r3, r2, r3
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000da4:	4649      	mov	r1, r9
 8000da6:	008b      	lsls	r3, r1, #2
 8000da8:	4641      	mov	r1, r8
 8000daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dae:	4641      	mov	r1, r8
 8000db0:	008a      	lsls	r2, r1, #2
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	4622      	mov	r2, r4
 8000dba:	189b      	adds	r3, r3, r2
 8000dbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000dbe:	462b      	mov	r3, r5
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	eb42 0303 	adc.w	r3, r2, r3
 8000dc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dc8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000dcc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000dd0:	f7ff fa6e 	bl	80002b0 <__aeabi_ldivmod>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000ddc:	4b66      	ldr	r3, [pc, #408]	@ (8000f78 <bmp280_compensate_P_int64+0x580>)
 8000dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	17da      	asrs	r2, r3, #31
 8000de6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000de8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dee:	f04f 0000 	mov.w	r0, #0
 8000df2:	f04f 0100 	mov.w	r1, #0
 8000df6:	0b50      	lsrs	r0, r2, #13
 8000df8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dfc:	1359      	asrs	r1, r3, #13
 8000dfe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000e02:	462b      	mov	r3, r5
 8000e04:	fb00 f203 	mul.w	r2, r0, r3
 8000e08:	4623      	mov	r3, r4
 8000e0a:	fb03 f301 	mul.w	r3, r3, r1
 8000e0e:	4413      	add	r3, r2
 8000e10:	4622      	mov	r2, r4
 8000e12:	fba2 1200 	umull	r1, r2, r2, r0
 8000e16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000e20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e24:	4413      	add	r3, r2
 8000e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000e2a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	f04f 0100 	mov.w	r1, #0
 8000e36:	0b50      	lsrs	r0, r2, #13
 8000e38:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e3c:	1359      	asrs	r1, r3, #13
 8000e3e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e42:	462b      	mov	r3, r5
 8000e44:	fb00 f203 	mul.w	r2, r0, r3
 8000e48:	4623      	mov	r3, r4
 8000e4a:	fb03 f301 	mul.w	r3, r3, r1
 8000e4e:	4413      	add	r3, r2
 8000e50:	4622      	mov	r2, r4
 8000e52:	fba2 1200 	umull	r1, r2, r2, r0
 8000e56:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e64:	4413      	add	r3, r2
 8000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e76:	4621      	mov	r1, r4
 8000e78:	0e4a      	lsrs	r2, r1, #25
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e80:	4629      	mov	r1, r5
 8000e82:	164b      	asrs	r3, r1, #25
 8000e84:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <bmp280_compensate_P_int64+0x584>)
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	17da      	asrs	r2, r3, #31
 8000e92:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e94:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e9e:	462a      	mov	r2, r5
 8000ea0:	fb02 f203 	mul.w	r2, r2, r3
 8000ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	fba2 1201 	umull	r1, r2, r2, r1
 8000eba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000ec4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000ec8:	4413      	add	r3, r2
 8000eca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eda:	4621      	mov	r1, r4
 8000edc:	0cca      	lsrs	r2, r1, #19
 8000ede:	4629      	mov	r1, r5
 8000ee0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	14cb      	asrs	r3, r1, #19
 8000ee8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = (((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7) << 4));
 8000eec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ef0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ef4:	1884      	adds	r4, r0, r2
 8000ef6:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ef8:	eb41 0303 	adc.w	r3, r1, r3
 8000efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000efe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f02:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000f06:	4621      	mov	r1, r4
 8000f08:	1889      	adds	r1, r1, r2
 8000f0a:	6539      	str	r1, [r7, #80]	@ 0x50
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	eb43 0101 	adc.w	r1, r3, r1
 8000f12:	6579      	str	r1, [r7, #84]	@ 0x54
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	f04f 0100 	mov.w	r1, #0
 8000f1c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000f20:	4623      	mov	r3, r4
 8000f22:	0a18      	lsrs	r0, r3, #8
 8000f24:	462b      	mov	r3, r5
 8000f26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f2a:	462b      	mov	r3, r5
 8000f2c:	1219      	asrs	r1, r3, #8
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <bmp280_compensate_P_int64+0x588>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	17da      	asrs	r2, r3, #31
 8000f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f48:	464c      	mov	r4, r9
 8000f4a:	0123      	lsls	r3, r4, #4
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f52:	4644      	mov	r4, r8
 8000f54:	0122      	lsls	r2, r4, #4
 8000f56:	1884      	adds	r4, r0, r2
 8000f58:	603c      	str	r4, [r7, #0]
 8000f5a:	eb41 0303 	adc.w	r3, r1, r3
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f64:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (BMP280_U32_t)p;
 8000f68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f72:	46bd      	mov	sp, r7
 8000f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f78:	2000009a 	.word	0x2000009a
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	20000096 	.word	0x20000096

08000f84 <BMP280_get_temperature>:
BMP280_S32_t BMP280_get_temperature() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
    uint8_t *buf;
    BMP280_S32_t adc_T;

    buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000f8a:	23fa      	movs	r3, #250	@ 0xfa
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fcb1 	bl	80008f8 <BMP280_Read_Reg>
 8000f96:	6078      	str	r0, [r7, #4]

    adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	031a      	lsls	r2, r3, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4313      	orrs	r3, r2
            | ((BMP280_S32_t)(buf[2]) >> 4);
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3202      	adds	r2, #2
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	0912      	lsrs	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
    adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	603b      	str	r3, [r7, #0]

    free(buf);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f004 faf2 	bl	80055a0 <free>

    return adc_T;
 8000fbc:	683b      	ldr	r3, [r7, #0]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
    uint8_t *buf;
    BMP280_S32_t adc_P;

    buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000fcc:	23f7      	movs	r3, #247	@ 0xf7
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fc90 	bl	80008f8 <BMP280_Read_Reg>
 8000fd8:	6078      	str	r0, [r7, #4]

    adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	031a      	lsls	r2, r3, #12
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4313      	orrs	r3, r2
            | ((BMP280_S32_t)(buf[2]) >> 4);
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3202      	adds	r2, #2
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	0912      	lsrs	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
    adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	603b      	str	r3, [r7, #0]

    free(buf);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f004 fad1 	bl	80055a0 <free>

    return adc_P;
 8000ffe:	683b      	ldr	r3, [r7, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100e:	f000 fc3b 	bl	8001888 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001012:	f000 f837 	bl	8001084 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001016:	f000 f95b 	bl	80012d0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800101a:	f000 f92f 	bl	800127c <MX_USART2_UART_Init>
	MX_UART4_Init();
 800101e:	f000 f903 	bl	8001228 <MX_UART4_Init>
	MX_CAN1_Init();
 8001022:	f000 f89d 	bl	8001160 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001026:	f000 f8d1 	bl	80011cc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	BMP280_S32_t raw_temp, raw_press;
	BMP280_S32_t comp_temp;
	BMP280_U32_t comp_press;
	printf("======= Démarrage du système =======\r\n");
 800102a:	4812      	ldr	r0, [pc, #72]	@ (8001074 <main+0x6c>)
 800102c:	f004 fc98 	bl	8005960 <puts>
	BMP280_check();
 8001030:	f7ff fba8 	bl	8000784 <BMP280_check>
	BMP280_init();
 8001034:	f7ff fbf4 	bl	8000820 <BMP280_init>
	HAL_CAN_Start(&hcan1);
 8001038:	480f      	ldr	r0, [pc, #60]	@ (8001078 <main+0x70>)
 800103a:	f000 fdb6 	bl	8001baa <HAL_CAN_Start>

	// Activation de la réception UART
	HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 800103e:	2207      	movs	r2, #7
 8001040:	490e      	ldr	r1, [pc, #56]	@ (800107c <main+0x74>)
 8001042:	480f      	ldr	r0, [pc, #60]	@ (8001080 <main+0x78>)
 8001044:	f003 fb1f 	bl	8004686 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		raw_temp = BMP280_get_temperature();
 8001048:	f7ff ff9c 	bl	8000f84 <BMP280_get_temperature>
 800104c:	60f8      	str	r0, [r7, #12]
		raw_press = BMP280_get_pressure();
 800104e:	f7ff ffba 	bl	8000fc6 <BMP280_get_pressure>
 8001052:	60b8      	str	r0, [r7, #8]

		// Compensation des valeurs
		comp_temp = bmp280_compensate_T_int32(raw_temp);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fc8d 	bl	8000974 <bmp280_compensate_T_int32>
 800105a:	6078      	str	r0, [r7, #4]
		comp_press = bmp280_compensate_P_int64(raw_press);
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff fccb 	bl	80009f8 <bmp280_compensate_P_int64>
 8001062:	4603      	mov	r3, r0
 8001064:	603b      	str	r3, [r7, #0]

		// Faire tourner le moteur avec l'angle calculé
		rotate_motor_dynamic(angle, 0); // 0 pour sens horaire*/

		// Attendre un peu avant de refaire le calcul
		HAL_Delay(1000);
 8001066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106a:	f000 fc7f 	bl	800196c <HAL_Delay>
	{
 800106e:	bf00      	nop
 8001070:	e7ea      	b.n	8001048 <main+0x40>
 8001072:	bf00      	nop
 8001074:	0800661c 	.word	0x0800661c
 8001078:	200000a0 	.word	0x200000a0
 800107c:	200001ac 	.word	0x200001ac
 8001080:	2000011c 	.word	0x2000011c

08001084 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2234      	movs	r2, #52	@ 0x34
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fd44 	bl	8005b20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <SystemClock_Config+0xd4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <SystemClock_Config+0xd4>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <SystemClock_Config+0xd4>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <SystemClock_Config+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010d0:	4a22      	ldr	r2, [pc, #136]	@ (800115c <SystemClock_Config+0xd8>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b20      	ldr	r3, [pc, #128]	@ (800115c <SystemClock_Config+0xd8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	2310      	movs	r3, #16
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f0:	2302      	movs	r3, #2
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80010f8:	2310      	movs	r3, #16
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80010fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001100:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001102:	2304      	movs	r3, #4
 8001104:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4618      	mov	r0, r3
 8001114:	f002 ff3e 	bl	8003f94 <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800111e:	f000 f945 	bl	80013ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	230f      	movs	r3, #15
 8001124:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2302      	movs	r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fbde 	bl	8003900 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800114a:	f000 f92f 	bl	80013ac <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	@ 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_CAN1_Init+0x64>)
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <MX_CAN1_Init+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_CAN1_Init+0x64>)
 800116c:	2206      	movs	r2, #6
 800116e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_CAN1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_CAN1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_CAN1_Init+0x64>)
 800117e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001182:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_CAN1_Init+0x64>)
 8001186:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800118a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <MX_CAN1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_CAN1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_CAN1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_CAN1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_CAN1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_CAN1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_CAN1_Init+0x64>)
 80011b2:	f000 fbff 	bl	80019b4 <HAL_CAN_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80011bc:	f000 f8f6 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	40006400 	.word	0x40006400

080011cc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_I2C1_Init+0x50>)
 800120a:	f001 f865 	bl	80022d8 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001214:	f000 f8ca 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000c8 	.word	0x200000c8
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_UART4_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <MX_UART4_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MX_UART4_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_UART4_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_UART4_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_UART4_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_UART4_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_UART4_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_UART4_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_UART4_Init+0x4c>)
 8001260:	f003 f936 	bl	80044d0 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 800126a:	f000 f89f 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000011c 	.word	0x2000011c
 8001278:	40004c00 	.word	0x40004c00

0800127c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <MX_USART2_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f003 f90c 	bl	80044d0 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80012be:	f000 f875 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000164 	.word	0x20000164
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a2c      	ldr	r2, [pc, #176]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2120      	movs	r1, #32
 800135a:	4812      	ldr	r0, [pc, #72]	@ (80013a4 <MX_GPIO_Init+0xd4>)
 800135c:	f000 ffa2 	bl	80022a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001366:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800136a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <MX_GPIO_Init+0xd8>)
 8001378:	f000 fe00 	bl	8001f7c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_GPIO_Init+0xd4>)
 8001394:	f000 fdf2 	bl	8001f7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	@ 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020800 	.word	0x40020800

080013ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f000 fcec 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_CAN_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 8001434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_CAN_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001462:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001474:	2309      	movs	r3, #9
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_CAN_MspInit+0x8c>)
 8001480:	f000 fd7c 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40006400 	.word	0x40006400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	@ (800151c <HAL_I2C_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e6:	2304      	movs	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f000 fd43 	bl	8001f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005400 	.word	0x40005400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	@ 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <HAL_UART_MspInit+0xf8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d134      	bne.n	80015b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a34      	ldr	r2, [pc, #208]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 8001554:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001582:	2303      	movs	r3, #3
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001592:	2308      	movs	r3, #8
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4822      	ldr	r0, [pc, #136]	@ (8001628 <HAL_UART_MspInit+0x100>)
 800159e:	f000 fced 	bl	8001f7c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2034      	movs	r0, #52	@ 0x34
 80015a8:	f000 fc1f 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015ac:	2034      	movs	r0, #52	@ 0x34
 80015ae:	f000 fc38 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b2:	e030      	b.n	8001616 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <HAL_UART_MspInit+0x104>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_UART_MspInit+0xfc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f6:	230c      	movs	r3, #12
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001606:	2307      	movs	r3, #7
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_UART_MspInit+0x100>)
 8001612:	f000 fcb3 	bl	8001f7c <HAL_GPIO_Init>
}
 8001616:	bf00      	nop
 8001618:	3730      	adds	r7, #48	@ 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004c00 	.word	0x40004c00
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40004400 	.word	0x40004400

08001630 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001638:	1d39      	adds	r1, r7, #4
 800163a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163e:	2201      	movs	r2, #1
 8001640:	4803      	ldr	r0, [pc, #12]	@ (8001650 <__io_putchar+0x20>)
 8001642:	f002 ff95 	bl	8004570 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000164 	.word	0x20000164

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <UsageFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 f93f 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <UART4_IRQHandler+0x10>)
 80016ba:	f003 f809 	bl	80046d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000011c 	.word	0x2000011c

080016c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff87 	bl	8001630 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
  }
  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f004 fa02 	bl	8005bdc <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	200001b4 	.word	0x200001b4
 800180c:	20000308 	.word	0x20000308

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001862:	f004 f9c1 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fbcf 	bl	8001008 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001878:	080066a0 	.word	0x080066a0
  ldr r2, =_sbss
 800187c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001880:	20000308 	.word	0x20000308

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 fa8f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fd7c 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 faa7 	bl	8001e3e <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 fa6f 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	200001b8 	.word	0x200001b8

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	200001b8 	.word	0x200001b8

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0ed      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fd18 	bl	8001408 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e8:	f7ff ffb4 	bl	8001954 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ee:	e012      	b.n	8001a16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f0:	f7ff ffb0 	bl	8001954 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d90b      	bls.n	8001a16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0c5      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0e5      	beq.n	80019f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0202 	bic.w	r2, r2, #2
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff ff8e 	bl	8001954 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a3a:	e012      	b.n	8001a62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a3c:	f7ff ff8a 	bl	8001954 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b0a      	cmp	r3, #10
 8001a48:	d90b      	bls.n	8001a62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e09f      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e5      	bne.n	8001a3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7e1b      	ldrb	r3, [r3, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d108      	bne.n	8001a8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e007      	b.n	8001a9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e5b      	ldrb	r3, [r3, #25]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e007      	b.n	8001ac4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e9b      	ldrb	r3, [r3, #26]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d108      	bne.n	8001ade <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e007      	b.n	8001aee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0220 	bic.w	r2, r2, #32
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7edb      	ldrb	r3, [r3, #27]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0210 	bic.w	r2, r2, #16
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e007      	b.n	8001b18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0210 	orr.w	r2, r2, #16
 8001b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7f1b      	ldrb	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d108      	bne.n	8001b32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7f5b      	ldrb	r3, [r3, #29]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0204 	orr.w	r2, r2, #4
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	ea42 0103 	orr.w	r1, r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12e      	bne.n	8001c1c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff febd 	bl	8001954 <HAL_GetTick>
 8001bda:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bdc:	e012      	b.n	8001c04 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bde:	f7ff feb9 	bl	8001954 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b0a      	cmp	r3, #10
 8001bea:	d90b      	bls.n	8001c04 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e012      	b.n	8001c2a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1e5      	bne.n	8001bde <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e006      	b.n	8001c2a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	@ (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fd76 	bl	8001954 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d008      	beq.n	8001e88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2280      	movs	r2, #128	@ 0x80
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e052      	b.n	8001f2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0216 	bic.w	r2, r2, #22
 8001e96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <HAL_DMA_Abort+0x62>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0208 	bic.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	e013      	b.n	8001f02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eda:	f7ff fd3b 	bl	8001954 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d90c      	bls.n	8001f02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e015      	b.n	8001f2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e4      	bne.n	8001eda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	223f      	movs	r2, #63	@ 0x3f
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d004      	beq.n	8001f54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e00c      	b.n	8001f6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2205      	movs	r2, #5
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e165      	b.n	8002264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8154 	bne.w	800225e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80ae 	beq.w	800225e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b5d      	ldr	r3, [pc, #372]	@ (800227c <HAL_GPIO_Init+0x300>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a5c      	ldr	r2, [pc, #368]	@ (800227c <HAL_GPIO_Init+0x300>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b5a      	ldr	r3, [pc, #360]	@ (800227c <HAL_GPIO_Init+0x300>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a58      	ldr	r2, [pc, #352]	@ (8002280 <HAL_GPIO_Init+0x304>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	@ (8002284 <HAL_GPIO_Init+0x308>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x21a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4e      	ldr	r2, [pc, #312]	@ (8002288 <HAL_GPIO_Init+0x30c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x216>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4d      	ldr	r2, [pc, #308]	@ (800228c <HAL_GPIO_Init+0x310>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x212>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4c      	ldr	r2, [pc, #304]	@ (8002290 <HAL_GPIO_Init+0x314>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4b      	ldr	r2, [pc, #300]	@ (8002294 <HAL_GPIO_Init+0x318>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x20a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <HAL_GPIO_Init+0x31c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x206>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a49      	ldr	r2, [pc, #292]	@ (800229c <HAL_GPIO_Init+0x320>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x202>
 800217a:	2306      	movs	r3, #6
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800217e:	2307      	movs	r3, #7
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a31      	ldr	r2, [pc, #196]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002258:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae96 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	@ 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e12b      	b.n	8002542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff f8ca 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	@ 0x24
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800232a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800233a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800233c:	f001 fbd2 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8002340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a81      	ldr	r2, [pc, #516]	@ (800254c <HAL_I2C_Init+0x274>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d807      	bhi.n	800235c <HAL_I2C_Init+0x84>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a80      	ldr	r2, [pc, #512]	@ (8002550 <HAL_I2C_Init+0x278>)
 8002350:	4293      	cmp	r3, r2
 8002352:	bf94      	ite	ls
 8002354:	2301      	movls	r3, #1
 8002356:	2300      	movhi	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e006      	b.n	800236a <HAL_I2C_Init+0x92>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a7d      	ldr	r2, [pc, #500]	@ (8002554 <HAL_I2C_Init+0x27c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0e7      	b.n	8002542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a78      	ldr	r2, [pc, #480]	@ (8002558 <HAL_I2C_Init+0x280>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9b      	lsrs	r3, r3, #18
 800237c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a6a      	ldr	r2, [pc, #424]	@ (800254c <HAL_I2C_Init+0x274>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d802      	bhi.n	80023ac <HAL_I2C_Init+0xd4>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	e009      	b.n	80023c0 <HAL_I2C_Init+0xe8>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	4a69      	ldr	r2, [pc, #420]	@ (800255c <HAL_I2C_Init+0x284>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	3301      	adds	r3, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	495c      	ldr	r1, [pc, #368]	@ (800254c <HAL_I2C_Init+0x274>)
 80023dc:	428b      	cmp	r3, r1
 80023de:	d819      	bhi.n	8002414 <HAL_I2C_Init+0x13c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e59      	subs	r1, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023f4:	400b      	ands	r3, r1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_I2C_Init+0x138>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e59      	subs	r1, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fbb1 f3f3 	udiv	r3, r1, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240e:	e051      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002410:	2304      	movs	r3, #4
 8002412:	e04f      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d111      	bne.n	8002440 <HAL_I2C_Init+0x168>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e012      	b.n	8002466 <HAL_I2C_Init+0x18e>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e58      	subs	r0, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	0099      	lsls	r1, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	fbb0 f3f3 	udiv	r3, r0, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x196>
 800246a:	2301      	movs	r3, #1
 800246c:	e022      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10e      	bne.n	8002494 <HAL_I2C_Init+0x1bc>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e58      	subs	r0, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	440b      	add	r3, r1
 8002484:	fbb0 f3f3 	udiv	r3, r0, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002492:	e00f      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	0099      	lsls	r1, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	6809      	ldr	r1, [r1, #0]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6911      	ldr	r1, [r2, #16]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	000186a0 	.word	0x000186a0
 8002550:	001e847f 	.word	0x001e847f
 8002554:	003d08ff 	.word	0x003d08ff
 8002558:	431bde83 	.word	0x431bde83
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	460b      	mov	r3, r1
 800256e:	817b      	strh	r3, [r7, #10]
 8002570:	4613      	mov	r3, r2
 8002572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff f9ee 	bl	8001954 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	f040 80e0 	bne.w	8002748 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	4970      	ldr	r1, [pc, #448]	@ (8002754 <HAL_I2C_Master_Transmit+0x1f4>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 ff7e 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	e0d3      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x50>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0cc      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d007      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	@ 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2210      	movs	r2, #16
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	893a      	ldrh	r2, [r7, #8]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a50      	ldr	r2, [pc, #320]	@ (8002758 <HAL_I2C_Master_Transmit+0x1f8>)
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fd00 	bl	8003024 <I2C_MasterRequestWrite>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e08d      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002644:	e066      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f001 f83c 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	2b04      	cmp	r3, #4
 800265c:	d107      	bne.n	800266e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d11b      	bne.n	80026e8 <HAL_I2C_Master_Transmit+0x188>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d017      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6a39      	ldr	r1, [r7, #32]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f001 f833 	bl	8003758 <I2C_WaitOnBTFFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d107      	bne.n	8002710 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01a      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d194      	bne.n	8002646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	00100002 	.word	0x00100002
 8002758:	ffff0000 	.word	0xffff0000

0800275c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	@ 0x30
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	460b      	mov	r3, r1
 800276a:	817b      	strh	r3, [r7, #10]
 800276c:	4613      	mov	r3, r2
 800276e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff f8f0 	bl	8001954 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 8217 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	497c      	ldr	r1, [pc, #496]	@ (8002980 <HAL_I2C_Master_Receive+0x224>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fe80 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	e20a      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_I2C_Master_Receive+0x50>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e203      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d007      	beq.n	80027d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2222      	movs	r2, #34	@ 0x22
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2210      	movs	r2, #16
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a5c      	ldr	r2, [pc, #368]	@ (8002984 <HAL_I2C_Master_Receive+0x228>)
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fc84 	bl	8003128 <I2C_MasterRequestRead>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1c4      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e198      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b01      	cmp	r3, #1
 8002860:	d11b      	bne.n	800289a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e178      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d11b      	bne.n	80028da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	e158      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002900:	e144      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	2b03      	cmp	r3, #3
 8002908:	f200 80f1 	bhi.w	8002aee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	2b01      	cmp	r3, #1
 8002912:	d123      	bne.n	800295c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 ff65 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e145      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800295a:	e117      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b02      	cmp	r3, #2
 8002962:	d14e      	bne.n	8002a02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	2200      	movs	r2, #0
 800296c:	4906      	ldr	r1, [pc, #24]	@ (8002988 <HAL_I2C_Master_Receive+0x22c>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fd90 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e11a      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
 800297e:	bf00      	nop
 8002980:	00100002 	.word	0x00100002
 8002984:	ffff0000 	.word	0xffff0000
 8002988:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a00:	e0c4      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	496c      	ldr	r1, [pc, #432]	@ (8002bbc <HAL_I2C_Master_Receive+0x460>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fd41 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0cb      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	4955      	ldr	r1, [pc, #340]	@ (8002bbc <HAL_I2C_Master_Receive+0x460>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fd13 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e09d      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aec:	e04e      	b.n	8002b8c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fe78 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e058      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d124      	bne.n	8002b8c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f aeb6 	bne.w	8002902 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3728      	adds	r7, #40	@ 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	00010004 	.word	0x00010004

08002bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	@ 0x30
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7fe febb 	bl	8001954 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 8214 	bne.w	8003016 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	497b      	ldr	r1, [pc, #492]	@ (8002de4 <HAL_I2C_Mem_Read+0x224>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fc4b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e207      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x56>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e200      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2222      	movs	r2, #34	@ 0x22
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002de8 <HAL_I2C_Mem_Read+0x228>)
 8002c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7e:	88f8      	ldrh	r0, [r7, #6]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fb18 	bl	80032c4 <I2C_RequestMemoryRead>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1bc      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e190      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d11b      	bne.n	8002d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e170      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d11b      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	e150      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d64:	e144      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	f200 80f1 	bhi.w	8002f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d123      	bne.n	8002dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fd33 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e145      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dbe:	e117      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d14e      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4906      	ldr	r1, [pc, #24]	@ (8002dec <HAL_I2C_Mem_Read+0x22c>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fb5e 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e11a      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000
 8002dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e64:	e0c4      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	496c      	ldr	r1, [pc, #432]	@ (8003020 <HAL_I2C_Mem_Read+0x460>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb0f 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cb      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4955      	ldr	r1, [pc, #340]	@ (8003020 <HAL_I2C_Mem_Read+0x460>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fae1 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e09d      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f50:	e04e      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fc46 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e058      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d124      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f47f aeb6 	bne.w	8002d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3728      	adds	r7, #40	@ 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00010004 	.word	0x00010004

08003024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d006      	beq.n	800304e <I2C_MasterRequestWrite+0x2a>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <I2C_MasterRequestWrite+0x2a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800304c:	d108      	bne.n	8003060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00b      	b.n	8003078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	2b12      	cmp	r3, #18
 8003066:	d107      	bne.n	8003078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fa05 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309e:	d103      	bne.n	80030a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e035      	b.n	8003118 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b4:	d108      	bne.n	80030c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	e01b      	b.n	8003100 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c8:	897b      	ldrh	r3, [r7, #10]
 80030ca:	11db      	asrs	r3, r3, #7
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0306 	and.w	r3, r3, #6
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f063 030f 	orn	r3, r3, #15
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	490e      	ldr	r1, [pc, #56]	@ (8003120 <I2C_MasterRequestWrite+0xfc>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa4e 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e010      	b.n	8003118 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <I2C_MasterRequestWrite+0x100>)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa3e 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00010008 	.word	0x00010008
 8003124:	00010002 	.word	0x00010002

08003128 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800314c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d006      	beq.n	8003162 <I2C_MasterRequestRead+0x3a>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d003      	beq.n	8003162 <I2C_MasterRequestRead+0x3a>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003160:	d108      	bne.n	8003174 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e00b      	b.n	800318c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	2b11      	cmp	r3, #17
 800317a:	d107      	bne.n	800318c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f97b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b2:	d103      	bne.n	80031bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e079      	b.n	80032b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c8:	d108      	bne.n	80031dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	611a      	str	r2, [r3, #16]
 80031da:	e05f      	b.n	800329c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031dc:	897b      	ldrh	r3, [r7, #10]
 80031de:	11db      	asrs	r3, r3, #7
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0306 	and.w	r3, r3, #6
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f063 030f 	orn	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4930      	ldr	r1, [pc, #192]	@ (80032bc <I2C_MasterRequestRead+0x194>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f9c4 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e054      	b.n	80032b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4929      	ldr	r1, [pc, #164]	@ (80032c0 <I2C_MasterRequestRead+0x198>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f9b4 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e044      	b.n	80032b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800324e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f919 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003276:	d103      	bne.n	8003280 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e017      	b.n	80032b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	11db      	asrs	r3, r3, #7
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 0306 	and.w	r3, r3, #6
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f063 030e 	orn	r3, r3, #14
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4907      	ldr	r1, [pc, #28]	@ (80032c0 <I2C_MasterRequestRead+0x198>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f970 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	00010008 	.word	0x00010008
 80032c0:	00010002 	.word	0x00010002

080032c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	2200      	movs	r2, #0
 8003306:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8c2 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003324:	d103      	bne.n	800332e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0aa      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	4952      	ldr	r1, [pc, #328]	@ (8003490 <I2C_RequestMemoryRead+0x1cc>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f91d 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e097      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9a8 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b04      	cmp	r3, #4
 8003384:	d107      	bne.n	8003396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e076      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a0:	893b      	ldrh	r3, [r7, #8]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e021      	b.n	80033f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033bc:	6a39      	ldr	r1, [r7, #32]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f982 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d107      	bne.n	80033e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e050      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e6:	893b      	ldrh	r3, [r7, #8]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	6a39      	ldr	r1, [r7, #32]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f967 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2b04      	cmp	r3, #4
 8003406:	d107      	bne.n	8003418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e035      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2200      	movs	r2, #0
 8003434:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f82b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003452:	d103      	bne.n	800345c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e013      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003460:	897b      	ldrh	r3, [r7, #10]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	6a3a      	ldr	r2, [r7, #32]
 8003474:	4906      	ldr	r1, [pc, #24]	@ (8003490 <I2C_RequestMemoryRead+0x1cc>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f886 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	e048      	b.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d044      	beq.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fa51 	bl	8001954 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d139      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	e00c      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d116      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e023      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	e00c      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d093      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003596:	e071      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a6:	d123      	bne.n	80035f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e067      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d041      	beq.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f8:	f7fe f9ac 	bl	8001954 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d136      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10c      	bne.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf14      	ite	ne
 800362a:	2301      	movne	r3, #1
 800362c:	2300      	moveq	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e00b      	b.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	43da      	mvns	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e021      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10c      	bne.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e00b      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af6d 	bne.w	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8e3 	bl	80038a2 <I2C_IsAcknowledgeFailed>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e034      	b.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d028      	beq.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fe f931 	bl	8001954 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d016      	beq.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b80      	cmp	r3, #128	@ 0x80
 800374c:	d1c3      	bne.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f89b 	bl	80038a2 <I2C_IsAcknowledgeFailed>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e034      	b.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d028      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe f8e9 	bl	8001954 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11d      	bne.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d016      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d1c3      	bne.n	8003766 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f4:	e049      	b.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d119      	bne.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e030      	b.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe f88c 	bl	8001954 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d016      	beq.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e007      	b.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b40      	cmp	r3, #64	@ 0x40
 8003896:	d1ae      	bne.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b8:	d11b      	bne.n	80038f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0cc      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003914:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d90c      	bls.n	800393c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b63      	ldr	r3, [pc, #396]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b8      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003954:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a58      	ldr	r2, [pc, #352]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800395e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800396c:	4b53      	ldr	r3, [pc, #332]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a52      	ldr	r2, [pc, #328]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b50      	ldr	r3, [pc, #320]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	494d      	ldr	r1, [pc, #308]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d044      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b47      	ldr	r3, [pc, #284]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d119      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e06f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e067      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4934      	ldr	r1, [pc, #208]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f0:	f7fd ffb0 	bl	8001954 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fd ffac 	bl	8001954 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 020c 	and.w	r2, r3, #12
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1eb      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d20c      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e032      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4916      	ldr	r1, [pc, #88]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a86:	f000 f855 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	490a      	ldr	r1, [pc, #40]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	5ccb      	ldrb	r3, [r1, r3]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd ff10 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08006644 	.word	0x08006644
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000004 	.word	0x20000004

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff0 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	08006654 	.word	0x08006654

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b10:	f7ff ffdc 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0b5b      	lsrs	r3, r3, #13
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08006654 	.word	0x08006654

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b0ae      	sub	sp, #184	@ 0xb8
 8003b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5a:	4bcb      	ldr	r3, [pc, #812]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	f200 8206 	bhi.w	8003f74 <HAL_RCC_GetSysClockFreq+0x440>
 8003b68:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003f75 	.word	0x08003f75
 8003b78:	08003f75 	.word	0x08003f75
 8003b7c:	08003f75 	.word	0x08003f75
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003f75 	.word	0x08003f75
 8003b88:	08003f75 	.word	0x08003f75
 8003b8c:	08003f75 	.word	0x08003f75
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003f75 	.word	0x08003f75
 8003b98:	08003f75 	.word	0x08003f75
 8003b9c:	08003f75 	.word	0x08003f75
 8003ba0:	08003da5 	.word	0x08003da5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4bb9      	ldr	r3, [pc, #740]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x358>)
 8003ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003baa:	e1e7      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bac:	4bb8      	ldr	r3, [pc, #736]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bb2:	e1e3      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4bb4      	ldr	r3, [pc, #720]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc0:	4bb1      	ldr	r3, [pc, #708]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d071      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bcc:	4bae      	ldr	r3, [pc, #696]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bd8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	f04f 0000 	mov.w	r0, #0
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	0159      	lsls	r1, r3, #5
 8003c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c04:	0150      	lsls	r0, r2, #5
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	1a51      	subs	r1, r2, r1
 8003c0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c10:	4629      	mov	r1, r5
 8003c12:	eb63 0301 	sbc.w	r3, r3, r1
 8003c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c24:	4649      	mov	r1, r9
 8003c26:	018b      	lsls	r3, r1, #6
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c2e:	4641      	mov	r1, r8
 8003c30:	018a      	lsls	r2, r1, #6
 8003c32:	4641      	mov	r1, r8
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c38:	4649      	mov	r1, r9
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	00cb      	lsls	r3, r1, #3
 8003c50:	4641      	mov	r1, r8
 8003c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c56:	4641      	mov	r1, r8
 8003c58:	00ca      	lsls	r2, r1, #3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4622      	mov	r2, r4
 8003c62:	189b      	adds	r3, r3, r2
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c66:	462b      	mov	r3, r5
 8003c68:	460a      	mov	r2, r1
 8003c6a:	eb42 0303 	adc.w	r3, r2, r3
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	024b      	lsls	r3, r1, #9
 8003c80:	4621      	mov	r1, r4
 8003c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c86:	4621      	mov	r1, r4
 8003c88:	024a      	lsls	r2, r1, #9
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ca0:	f7fc fb56 	bl	8000350 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cae:	e067      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4b75      	ldr	r3, [pc, #468]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cca:	2300      	movs	r3, #0
 8003ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	0159      	lsls	r1, r3, #5
 8003ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce4:	0150      	lsls	r0, r2, #5
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4621      	mov	r1, r4
 8003cec:	1a51      	subs	r1, r2, r1
 8003cee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d04:	4649      	mov	r1, r9
 8003d06:	018b      	lsls	r3, r1, #6
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0e:	4641      	mov	r1, r8
 8003d10:	018a      	lsls	r2, r1, #6
 8003d12:	4641      	mov	r1, r8
 8003d14:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d18:	4649      	mov	r1, r9
 8003d1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d32:	4692      	mov	sl, r2
 8003d34:	469b      	mov	fp, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	eb1a 0303 	adds.w	r3, sl, r3
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	462b      	mov	r3, r5
 8003d40:	eb4b 0303 	adc.w	r3, fp, r3
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d68:	2200      	movs	r2, #0
 8003d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d72:	f7fc faed 	bl	8000350 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d80:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003da2:	e0eb      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da4:	4b38      	ldr	r3, [pc, #224]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db0:	4b35      	ldr	r3, [pc, #212]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d06b      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbc:	4b32      	ldr	r3, [pc, #200]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dd8:	4622      	mov	r2, r4
 8003dda:	462b      	mov	r3, r5
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	0159      	lsls	r1, r3, #5
 8003de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dea:	0150      	lsls	r0, r2, #5
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4621      	mov	r1, r4
 8003df2:	1a51      	subs	r1, r2, r1
 8003df4:	61b9      	str	r1, [r7, #24]
 8003df6:	4629      	mov	r1, r5
 8003df8:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e0a:	4659      	mov	r1, fp
 8003e0c:	018b      	lsls	r3, r1, #6
 8003e0e:	4651      	mov	r1, sl
 8003e10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e14:	4651      	mov	r1, sl
 8003e16:	018a      	lsls	r2, r1, #6
 8003e18:	4651      	mov	r1, sl
 8003e1a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e1e:	4659      	mov	r1, fp
 8003e20:	eb63 0901 	sbc.w	r9, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e38:	4690      	mov	r8, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	eb18 0303 	adds.w	r3, r8, r3
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	462b      	mov	r3, r5
 8003e46:	eb49 0303 	adc.w	r3, r9, r3
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e58:	4629      	mov	r1, r5
 8003e5a:	024b      	lsls	r3, r1, #9
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e62:	4621      	mov	r1, r4
 8003e64:	024a      	lsls	r2, r1, #9
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6e:	2200      	movs	r2, #0
 8003e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e78:	f7fc fa6a 	bl	8000350 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e86:	e065      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x420>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e94:	4b3d      	ldr	r3, [pc, #244]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003eae:	4642      	mov	r2, r8
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	4649      	mov	r1, r9
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4651      	mov	r1, sl
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4651      	mov	r1, sl
 8003ef0:	1a54      	subs	r4, r2, r1
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	464b      	mov	r3, r9
 8003f14:	eb45 0303 	adc.w	r3, r5, r3
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f46:	f7fc fa03 	bl	8000350 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f54:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0f1b      	lsrs	r3, r3, #28
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f72:	e003      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	37b8      	adds	r7, #184	@ 0xb8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e28d      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8083 	beq.w	80040ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fb4:	4b94      	ldr	r3, [pc, #592]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d019      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fc0:	4b91      	ldr	r3, [pc, #580]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b8b      	ldr	r3, [pc, #556]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d112      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ff2:	d10b      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	4b84      	ldr	r3, [pc, #528]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <HAL_RCC_OscConfig+0x124>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d157      	bne.n	80040b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e25a      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x90>
 8004016:	4b7c      	ldr	r3, [pc, #496]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xcc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xb4>
 800402e:	4b76      	ldr	r3, [pc, #472]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xcc>
 8004048:	4b6f      	ldr	r3, [pc, #444]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd fc74 	bl	8001954 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fc70 	bl	8001954 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e21f      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xdc>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fc60 	bl	8001954 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fc5c 	bl	8001954 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e20b      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x104>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06f      	beq.n	80041a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040de:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b44      	ldr	r3, [pc, #272]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x186>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1d3      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b3b      	ldr	r3, [pc, #236]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4937      	ldr	r1, [pc, #220]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <HAL_RCC_OscConfig+0x278>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fc09 	bl	8001954 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fd fc05 	bl	8001954 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1b4      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4925      	ldr	r1, [pc, #148]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <HAL_RCC_OscConfig+0x278>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fbe8 	bl	8001954 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fd fbe4 	bl	8001954 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e193      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d036      	beq.n	8004220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fbc8 	bl	8001954 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fd fbc4 	bl	8001954 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e173      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80041dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x234>
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fbb1 	bl	8001954 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00e      	b.n	8004214 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fd fbad 	bl	8001954 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d907      	bls.n	8004214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e15c      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
 8004208:	40023800 	.word	0x40023800
 800420c:	42470000 	.word	0x42470000
 8004210:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	4b8a      	ldr	r3, [pc, #552]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ea      	bne.n	80041f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8097 	beq.w	800435c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b83      	ldr	r3, [pc, #524]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	4a7e      	ldr	r2, [pc, #504]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	@ 0x40
 800424e:	4b7c      	ldr	r3, [pc, #496]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b79      	ldr	r3, [pc, #484]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d118      	bne.n	800429c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b76      	ldr	r3, [pc, #472]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a75      	ldr	r2, [pc, #468]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fd fb6d 	bl	8001954 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fd fb69 	bl	8001954 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e118      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	4b6c      	ldr	r3, [pc, #432]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x31e>
 80042a4:	4b66      	ldr	r3, [pc, #408]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a8:	4a65      	ldr	r2, [pc, #404]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b0:	e01c      	b.n	80042ec <HAL_RCC_OscConfig+0x358>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x340>
 80042ba:	4b61      	ldr	r3, [pc, #388]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a60      	ldr	r2, [pc, #384]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0x358>
 80042d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a59      	ldr	r2, [pc, #356]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	4b57      	ldr	r3, [pc, #348]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fd fb2e 	bl	8001954 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fd fb2a 	bl	8001954 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0d7      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	4b4b      	ldr	r3, [pc, #300]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <HAL_RCC_OscConfig+0x368>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fd fb18 	bl	8001954 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fd fb14 	bl	8001954 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0c1      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433e:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ee      	bne.n	8004328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	4a3a      	ldr	r2, [pc, #232]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80ad 	beq.w	80044c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004366:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d060      	beq.n	8004434 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d145      	bne.n	8004406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fae8 	bl	8001954 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd fae4 	bl	8001954 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e093      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	491b      	ldr	r1, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fd fab9 	bl	8001954 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fd fab5 	bl	8001954 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e064      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x452>
 8004404:	e05c      	b.n	80044c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd faa2 	bl	8001954 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fd fa9e 	bl	8001954 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04d      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x480>
 8004432:	e045      	b.n	80044c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e040      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
 8004440:	40023800 	.word	0x40023800
 8004444:	40007000 	.word	0x40007000
 8004448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800444c:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <HAL_RCC_OscConfig+0x538>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d030      	beq.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d129      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d122      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	4293      	cmp	r3, r2
 8004486:	d119      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d10f      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800

080044d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e042      	b.n	8004568 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f816 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	@ 0x24
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fdc7 	bl	80050a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	d175      	bne.n	800467c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Transmit+0x2c>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e06e      	b.n	800467e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2221      	movs	r2, #33	@ 0x21
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ae:	f7fd f9d1 	bl	8001954 <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c8:	d108      	bne.n	80045dc <HAL_UART_Transmit+0x6c>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045e4:	e02e      	b.n	8004644 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2180      	movs	r1, #128	@ 0x80
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fb29 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e03a      	b.n	800467e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800461c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3302      	adds	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e007      	b.n	8004636 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1cb      	bne.n	80045e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2140      	movs	r1, #64	@ 0x40
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 faf5 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e006      	b.n	800467e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d112      	bne.n	80046c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Receive_IT+0x26>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e00b      	b.n	80046c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fb1c 	bl	8004cfa <UART_Start_Receive_IT>
 80046c2:	4603      	mov	r3, r0
 80046c4:	e000      	b.n	80046c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b0ba      	sub	sp, #232	@ 0xe8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
 8004722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fbfc 	bl	8004f2c <UART_Receive_IT>
      return;
 8004734:	e25b      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80de 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
 8004740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80d1 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
 80047ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	f043 0208 	orr.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 81f2 	beq.w	8004be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb87 	bl	8004f2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_UART_IRQHandler+0x17a>
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa8f 	bl	8004d6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d141      	bne.n	80048e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800488a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800488e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1d9      	bne.n	800485e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ab0 <HAL_UART_IRQHandler+0x3e0>)
 80048b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fb39 	bl	8001f36 <HAL_DMA_Abort_IT>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00e      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f99e 	bl	8004c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e00a      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f99a 	bl	8004c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	e006      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f996 	bl	8004c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048f6:	e175      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	bf00      	nop
    return;
 80048fa:	e173      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 814f 	bne.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8148 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8141 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	f040 80b6 	bne.w	8004ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8145 	beq.w	8004be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004966:	429a      	cmp	r2, r3
 8004968:	f080 813e 	bcs.w	8004be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497e:	f000 8088 	beq.w	8004a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800499c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e1      	bne.n	80049ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd f9e2 	bl	8001e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8c1 	bl	8004c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aae:	e09b      	b.n	8004be8 <HAL_UART_IRQHandler+0x518>
 8004ab0:	08004e35 	.word	0x08004e35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 808e 	beq.w	8004bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8089 	beq.w	8004bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e3      	bne.n	8004ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	623b      	str	r3, [r7, #32]
   return(result);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3314      	adds	r3, #20
 8004b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e3      	bne.n	8004b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
 8004b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b7c:	61fa      	str	r2, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e3      	bne.n	8004b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f847 	bl	8004c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ba2:	e023      	b.n	8004bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x4f4>
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f94d 	bl	8004e5c <UART_Transmit_IT>
    return;
 8004bc2:	e014      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <HAL_UART_IRQHandler+0x51e>
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f98d 	bl	8004efc <UART_EndTransmit_IT>
    return;
 8004be2:	e004      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
    return;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
      return;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
      return;
 8004bec:	bf00      	nop
  }
}
 8004bee:	37e8      	adds	r7, #232	@ 0xe8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	e03b      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d037      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c62:	f7fc fe77 	bl	8001954 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e03a      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d023      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b80      	cmp	r3, #128	@ 0x80
 8004c8e:	d020      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b40      	cmp	r3, #64	@ 0x40
 8004c94:	d01d      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d116      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f857 	bl	8004d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e00f      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0b4      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2222      	movs	r2, #34	@ 0x22
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0220 	orr.w	r2, r2, #32
 8004d5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b095      	sub	sp, #84	@ 0x54
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d96:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e5      	bne.n	8004d76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d119      	bne.n	8004e1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0310 	bic.w	r3, r3, #16
 8004dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e06:	61ba      	str	r2, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	613b      	str	r3, [r7, #16]
   return(result);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e28:	bf00      	nop
 8004e2a:	3754      	adds	r7, #84	@ 0x54
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fee4 	bl	8004c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b21      	cmp	r3, #33	@ 0x21
 8004e6e:	d13e      	bne.n	8004eee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e78:	d114      	bne.n	8004ea4 <UART_Transmit_IT+0x48>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d110      	bne.n	8004ea4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	1c9a      	adds	r2, r3, #2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]
 8004ea2:	e008      	b.n	8004eb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6211      	str	r1, [r2, #32]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fe69 	bl	8004bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	@ 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b22      	cmp	r3, #34	@ 0x22
 8004f3e:	f040 80ae 	bne.w	800509e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	d117      	bne.n	8004f7c <UART_Receive_IT+0x50>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d113      	bne.n	8004f7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	1c9a      	adds	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f7a:	e026      	b.n	8004fca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8e:	d007      	beq.n	8004fa0 <UART_Receive_IT+0x74>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <UART_Receive_IT+0x82>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e008      	b.n	8004fc0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d15d      	bne.n	800509a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0220 	bic.w	r2, r2, #32
 8004fec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	2b01      	cmp	r3, #1
 8005022:	d135      	bne.n	8005090 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	613b      	str	r3, [r7, #16]
   return(result);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f023 0310 	bic.w	r3, r3, #16
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504a:	623a      	str	r2, [r7, #32]
 800504c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	69f9      	ldr	r1, [r7, #28]
 8005050:	6a3a      	ldr	r2, [r7, #32]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	61bb      	str	r3, [r7, #24]
   return(result);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d10a      	bne.n	8005082 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fdd1 	bl	8004c30 <HAL_UARTEx_RxEventCallback>
 800508e:	e002      	b.n	8005096 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fdb9 	bl	8004c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e002      	b.n	80050a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3730      	adds	r7, #48	@ 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ac:	b0c0      	sub	sp, #256	@ 0x100
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	68d9      	ldr	r1, [r3, #12]
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	ea40 0301 	orr.w	r3, r0, r1
 80050d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	431a      	orrs	r2, r3
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005100:	f021 010c 	bic.w	r1, r1, #12
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800510e:	430b      	orrs	r3, r1
 8005110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	6999      	ldr	r1, [r3, #24]
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	ea40 0301 	orr.w	r3, r0, r1
 800512e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b8f      	ldr	r3, [pc, #572]	@ (8005374 <UART_SetConfig+0x2cc>)
 8005138:	429a      	cmp	r2, r3
 800513a:	d005      	beq.n	8005148 <UART_SetConfig+0xa0>
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b8d      	ldr	r3, [pc, #564]	@ (8005378 <UART_SetConfig+0x2d0>)
 8005144:	429a      	cmp	r2, r3
 8005146:	d104      	bne.n	8005152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fe fce0 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 800514c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005150:	e003      	b.n	800515a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005152:	f7fe fcc7 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8005156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005164:	f040 810c 	bne.w	8005380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	1891      	adds	r1, r2, r2
 8005180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005182:	415b      	adcs	r3, r3
 8005184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800518a:	4621      	mov	r1, r4
 800518c:	eb12 0801 	adds.w	r8, r2, r1
 8005190:	4629      	mov	r1, r5
 8005192:	eb43 0901 	adc.w	r9, r3, r1
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051aa:	4690      	mov	r8, r2
 80051ac:	4699      	mov	r9, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	eb18 0303 	adds.w	r3, r8, r3
 80051b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051b8:	462b      	mov	r3, r5
 80051ba:	eb49 0303 	adc.w	r3, r9, r3
 80051be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051d6:	460b      	mov	r3, r1
 80051d8:	18db      	adds	r3, r3, r3
 80051da:	653b      	str	r3, [r7, #80]	@ 0x50
 80051dc:	4613      	mov	r3, r2
 80051de:	eb42 0303 	adc.w	r3, r2, r3
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80051e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051ec:	f7fb f8b0 	bl	8000350 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4b61      	ldr	r3, [pc, #388]	@ (800537c <UART_SetConfig+0x2d4>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	011c      	lsls	r4, r3, #4
 80051fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800520c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005218:	415b      	adcs	r3, r3
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005220:	4641      	mov	r1, r8
 8005222:	eb12 0a01 	adds.w	sl, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb43 0b01 	adc.w	fp, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800523c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005240:	4692      	mov	sl, r2
 8005242:	469b      	mov	fp, r3
 8005244:	4643      	mov	r3, r8
 8005246:	eb1a 0303 	adds.w	r3, sl, r3
 800524a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800524e:	464b      	mov	r3, r9
 8005250:	eb4b 0303 	adc.w	r3, fp, r3
 8005254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800526c:	460b      	mov	r3, r1
 800526e:	18db      	adds	r3, r3, r3
 8005270:	643b      	str	r3, [r7, #64]	@ 0x40
 8005272:	4613      	mov	r3, r2
 8005274:	eb42 0303 	adc.w	r3, r2, r3
 8005278:	647b      	str	r3, [r7, #68]	@ 0x44
 800527a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800527e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005282:	f7fb f865 	bl	8000350 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4611      	mov	r1, r2
 800528c:	4b3b      	ldr	r3, [pc, #236]	@ (800537c <UART_SetConfig+0x2d4>)
 800528e:	fba3 2301 	umull	r2, r3, r3, r1
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2264      	movs	r2, #100	@ 0x64
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	1acb      	subs	r3, r1, r3
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052a2:	4b36      	ldr	r3, [pc, #216]	@ (800537c <UART_SetConfig+0x2d4>)
 80052a4:	fba3 2302 	umull	r2, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052b0:	441c      	add	r4, r3
 80052b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	1891      	adds	r1, r2, r2
 80052ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052cc:	415b      	adcs	r3, r3
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052d4:	4641      	mov	r1, r8
 80052d6:	1851      	adds	r1, r2, r1
 80052d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80052da:	4649      	mov	r1, r9
 80052dc:	414b      	adcs	r3, r1
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052ec:	4659      	mov	r1, fp
 80052ee:	00cb      	lsls	r3, r1, #3
 80052f0:	4651      	mov	r1, sl
 80052f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f6:	4651      	mov	r1, sl
 80052f8:	00ca      	lsls	r2, r1, #3
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	4603      	mov	r3, r0
 8005300:	4642      	mov	r2, r8
 8005302:	189b      	adds	r3, r3, r2
 8005304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005308:	464b      	mov	r3, r9
 800530a:	460a      	mov	r2, r1
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005328:	460b      	mov	r3, r1
 800532a:	18db      	adds	r3, r3, r3
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800532e:	4613      	mov	r3, r2
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800533a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800533e:	f7fb f807 	bl	8000350 <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <UART_SetConfig+0x2d4>)
 8005348:	fba3 1302 	umull	r1, r3, r3, r2
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	2164      	movs	r1, #100	@ 0x64
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3332      	adds	r3, #50	@ 0x32
 800535a:	4a08      	ldr	r2, [pc, #32]	@ (800537c <UART_SetConfig+0x2d4>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	f003 0207 	and.w	r2, r3, #7
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4422      	add	r2, r4
 800536e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005370:	e106      	b.n	8005580 <UART_SetConfig+0x4d8>
 8005372:	bf00      	nop
 8005374:	40011000 	.word	0x40011000
 8005378:	40011400 	.word	0x40011400
 800537c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005384:	2200      	movs	r2, #0
 8005386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800538a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800538e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005392:	4642      	mov	r2, r8
 8005394:	464b      	mov	r3, r9
 8005396:	1891      	adds	r1, r2, r2
 8005398:	6239      	str	r1, [r7, #32]
 800539a:	415b      	adcs	r3, r3
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
 800539e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053a2:	4641      	mov	r1, r8
 80053a4:	1854      	adds	r4, r2, r1
 80053a6:	4649      	mov	r1, r9
 80053a8:	eb43 0501 	adc.w	r5, r3, r1
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	00eb      	lsls	r3, r5, #3
 80053b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ba:	00e2      	lsls	r2, r4, #3
 80053bc:	4614      	mov	r4, r2
 80053be:	461d      	mov	r5, r3
 80053c0:	4643      	mov	r3, r8
 80053c2:	18e3      	adds	r3, r4, r3
 80053c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053c8:	464b      	mov	r3, r9
 80053ca:	eb45 0303 	adc.w	r3, r5, r3
 80053ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053ee:	4629      	mov	r1, r5
 80053f0:	008b      	lsls	r3, r1, #2
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f8:	4621      	mov	r1, r4
 80053fa:	008a      	lsls	r2, r1, #2
 80053fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005400:	f7fa ffa6 	bl	8000350 <__aeabi_uldivmod>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4b60      	ldr	r3, [pc, #384]	@ (800558c <UART_SetConfig+0x4e4>)
 800540a:	fba3 2302 	umull	r2, r3, r3, r2
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	011c      	lsls	r4, r3, #4
 8005412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800541c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	1891      	adds	r1, r2, r2
 800542a:	61b9      	str	r1, [r7, #24]
 800542c:	415b      	adcs	r3, r3
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005434:	4641      	mov	r1, r8
 8005436:	1851      	adds	r1, r2, r1
 8005438:	6139      	str	r1, [r7, #16]
 800543a:	4649      	mov	r1, r9
 800543c:	414b      	adcs	r3, r1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800544c:	4659      	mov	r1, fp
 800544e:	00cb      	lsls	r3, r1, #3
 8005450:	4651      	mov	r1, sl
 8005452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005456:	4651      	mov	r1, sl
 8005458:	00ca      	lsls	r2, r1, #3
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	4603      	mov	r3, r0
 8005460:	4642      	mov	r2, r8
 8005462:	189b      	adds	r3, r3, r2
 8005464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005468:	464b      	mov	r3, r9
 800546a:	460a      	mov	r2, r1
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800547e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800548c:	4649      	mov	r1, r9
 800548e:	008b      	lsls	r3, r1, #2
 8005490:	4641      	mov	r1, r8
 8005492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005496:	4641      	mov	r1, r8
 8005498:	008a      	lsls	r2, r1, #2
 800549a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800549e:	f7fa ff57 	bl	8000350 <__aeabi_uldivmod>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	4b38      	ldr	r3, [pc, #224]	@ (800558c <UART_SetConfig+0x4e4>)
 80054aa:	fba3 2301 	umull	r2, r3, r3, r1
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2264      	movs	r2, #100	@ 0x64
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	1acb      	subs	r3, r1, r3
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	3332      	adds	r3, #50	@ 0x32
 80054bc:	4a33      	ldr	r2, [pc, #204]	@ (800558c <UART_SetConfig+0x4e4>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054c8:	441c      	add	r4, r3
 80054ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ce:	2200      	movs	r2, #0
 80054d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80054d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80054d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	415b      	adcs	r3, r3
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e8:	4641      	mov	r1, r8
 80054ea:	1851      	adds	r1, r2, r1
 80054ec:	6039      	str	r1, [r7, #0]
 80054ee:	4649      	mov	r1, r9
 80054f0:	414b      	adcs	r3, r1
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005500:	4659      	mov	r1, fp
 8005502:	00cb      	lsls	r3, r1, #3
 8005504:	4651      	mov	r1, sl
 8005506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800550a:	4651      	mov	r1, sl
 800550c:	00ca      	lsls	r2, r1, #3
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	4603      	mov	r3, r0
 8005514:	4642      	mov	r2, r8
 8005516:	189b      	adds	r3, r3, r2
 8005518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800551a:	464b      	mov	r3, r9
 800551c:	460a      	mov	r2, r1
 800551e:	eb42 0303 	adc.w	r3, r2, r3
 8005522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	663b      	str	r3, [r7, #96]	@ 0x60
 800552e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800553c:	4649      	mov	r1, r9
 800553e:	008b      	lsls	r3, r1, #2
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005546:	4641      	mov	r1, r8
 8005548:	008a      	lsls	r2, r1, #2
 800554a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800554e:	f7fa feff 	bl	8000350 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <UART_SetConfig+0x4e4>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	@ 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	3332      	adds	r3, #50	@ 0x32
 800556a:	4a08      	ldr	r2, [pc, #32]	@ (800558c <UART_SetConfig+0x4e4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f003 020f 	and.w	r2, r3, #15
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4422      	add	r2, r4
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005586:	46bd      	mov	sp, r7
 8005588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558c:	51eb851f 	.word	0x51eb851f

08005590 <malloc>:
 8005590:	4b02      	ldr	r3, [pc, #8]	@ (800559c <malloc+0xc>)
 8005592:	4601      	mov	r1, r0
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	f000 b82d 	b.w	80055f4 <_malloc_r>
 800559a:	bf00      	nop
 800559c:	20000018 	.word	0x20000018

080055a0 <free>:
 80055a0:	4b02      	ldr	r3, [pc, #8]	@ (80055ac <free+0xc>)
 80055a2:	4601      	mov	r1, r0
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f000 bb47 	b.w	8005c38 <_free_r>
 80055aa:	bf00      	nop
 80055ac:	20000018 	.word	0x20000018

080055b0 <sbrk_aligned>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4e0f      	ldr	r6, [pc, #60]	@ (80055f0 <sbrk_aligned+0x40>)
 80055b4:	460c      	mov	r4, r1
 80055b6:	6831      	ldr	r1, [r6, #0]
 80055b8:	4605      	mov	r5, r0
 80055ba:	b911      	cbnz	r1, 80055c2 <sbrk_aligned+0x12>
 80055bc:	f000 faec 	bl	8005b98 <_sbrk_r>
 80055c0:	6030      	str	r0, [r6, #0]
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fae7 	bl	8005b98 <_sbrk_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d103      	bne.n	80055d6 <sbrk_aligned+0x26>
 80055ce:	f04f 34ff 	mov.w	r4, #4294967295
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	1cc4      	adds	r4, r0, #3
 80055d8:	f024 0403 	bic.w	r4, r4, #3
 80055dc:	42a0      	cmp	r0, r4
 80055de:	d0f8      	beq.n	80055d2 <sbrk_aligned+0x22>
 80055e0:	1a21      	subs	r1, r4, r0
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 fad8 	bl	8005b98 <_sbrk_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d1f2      	bne.n	80055d2 <sbrk_aligned+0x22>
 80055ec:	e7ef      	b.n	80055ce <sbrk_aligned+0x1e>
 80055ee:	bf00      	nop
 80055f0:	200001bc 	.word	0x200001bc

080055f4 <_malloc_r>:
 80055f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f8:	1ccd      	adds	r5, r1, #3
 80055fa:	f025 0503 	bic.w	r5, r5, #3
 80055fe:	3508      	adds	r5, #8
 8005600:	2d0c      	cmp	r5, #12
 8005602:	bf38      	it	cc
 8005604:	250c      	movcc	r5, #12
 8005606:	2d00      	cmp	r5, #0
 8005608:	4606      	mov	r6, r0
 800560a:	db01      	blt.n	8005610 <_malloc_r+0x1c>
 800560c:	42a9      	cmp	r1, r5
 800560e:	d904      	bls.n	800561a <_malloc_r+0x26>
 8005610:	230c      	movs	r3, #12
 8005612:	6033      	str	r3, [r6, #0]
 8005614:	2000      	movs	r0, #0
 8005616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056f0 <_malloc_r+0xfc>
 800561e:	f000 f869 	bl	80056f4 <__malloc_lock>
 8005622:	f8d8 3000 	ldr.w	r3, [r8]
 8005626:	461c      	mov	r4, r3
 8005628:	bb44      	cbnz	r4, 800567c <_malloc_r+0x88>
 800562a:	4629      	mov	r1, r5
 800562c:	4630      	mov	r0, r6
 800562e:	f7ff ffbf 	bl	80055b0 <sbrk_aligned>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	4604      	mov	r4, r0
 8005636:	d158      	bne.n	80056ea <_malloc_r+0xf6>
 8005638:	f8d8 4000 	ldr.w	r4, [r8]
 800563c:	4627      	mov	r7, r4
 800563e:	2f00      	cmp	r7, #0
 8005640:	d143      	bne.n	80056ca <_malloc_r+0xd6>
 8005642:	2c00      	cmp	r4, #0
 8005644:	d04b      	beq.n	80056de <_malloc_r+0xea>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	4639      	mov	r1, r7
 800564a:	4630      	mov	r0, r6
 800564c:	eb04 0903 	add.w	r9, r4, r3
 8005650:	f000 faa2 	bl	8005b98 <_sbrk_r>
 8005654:	4581      	cmp	r9, r0
 8005656:	d142      	bne.n	80056de <_malloc_r+0xea>
 8005658:	6821      	ldr	r1, [r4, #0]
 800565a:	1a6d      	subs	r5, r5, r1
 800565c:	4629      	mov	r1, r5
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff ffa6 	bl	80055b0 <sbrk_aligned>
 8005664:	3001      	adds	r0, #1
 8005666:	d03a      	beq.n	80056de <_malloc_r+0xea>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	442b      	add	r3, r5
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	f8d8 3000 	ldr.w	r3, [r8]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	bb62      	cbnz	r2, 80056d0 <_malloc_r+0xdc>
 8005676:	f8c8 7000 	str.w	r7, [r8]
 800567a:	e00f      	b.n	800569c <_malloc_r+0xa8>
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	1b52      	subs	r2, r2, r5
 8005680:	d420      	bmi.n	80056c4 <_malloc_r+0xd0>
 8005682:	2a0b      	cmp	r2, #11
 8005684:	d917      	bls.n	80056b6 <_malloc_r+0xc2>
 8005686:	1961      	adds	r1, r4, r5
 8005688:	42a3      	cmp	r3, r4
 800568a:	6025      	str	r5, [r4, #0]
 800568c:	bf18      	it	ne
 800568e:	6059      	strne	r1, [r3, #4]
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	bf08      	it	eq
 8005694:	f8c8 1000 	streq.w	r1, [r8]
 8005698:	5162      	str	r2, [r4, r5]
 800569a:	604b      	str	r3, [r1, #4]
 800569c:	4630      	mov	r0, r6
 800569e:	f000 f82f 	bl	8005700 <__malloc_unlock>
 80056a2:	f104 000b 	add.w	r0, r4, #11
 80056a6:	1d23      	adds	r3, r4, #4
 80056a8:	f020 0007 	bic.w	r0, r0, #7
 80056ac:	1ac2      	subs	r2, r0, r3
 80056ae:	bf1c      	itt	ne
 80056b0:	1a1b      	subne	r3, r3, r0
 80056b2:	50a3      	strne	r3, [r4, r2]
 80056b4:	e7af      	b.n	8005616 <_malloc_r+0x22>
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	bf0c      	ite	eq
 80056bc:	f8c8 2000 	streq.w	r2, [r8]
 80056c0:	605a      	strne	r2, [r3, #4]
 80056c2:	e7eb      	b.n	800569c <_malloc_r+0xa8>
 80056c4:	4623      	mov	r3, r4
 80056c6:	6864      	ldr	r4, [r4, #4]
 80056c8:	e7ae      	b.n	8005628 <_malloc_r+0x34>
 80056ca:	463c      	mov	r4, r7
 80056cc:	687f      	ldr	r7, [r7, #4]
 80056ce:	e7b6      	b.n	800563e <_malloc_r+0x4a>
 80056d0:	461a      	mov	r2, r3
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d1fb      	bne.n	80056d0 <_malloc_r+0xdc>
 80056d8:	2300      	movs	r3, #0
 80056da:	6053      	str	r3, [r2, #4]
 80056dc:	e7de      	b.n	800569c <_malloc_r+0xa8>
 80056de:	230c      	movs	r3, #12
 80056e0:	6033      	str	r3, [r6, #0]
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f80c 	bl	8005700 <__malloc_unlock>
 80056e8:	e794      	b.n	8005614 <_malloc_r+0x20>
 80056ea:	6005      	str	r5, [r0, #0]
 80056ec:	e7d6      	b.n	800569c <_malloc_r+0xa8>
 80056ee:	bf00      	nop
 80056f0:	200001c0 	.word	0x200001c0

080056f4 <__malloc_lock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	@ (80056fc <__malloc_lock+0x8>)
 80056f6:	f000 ba9c 	b.w	8005c32 <__retarget_lock_acquire_recursive>
 80056fa:	bf00      	nop
 80056fc:	20000304 	.word	0x20000304

08005700 <__malloc_unlock>:
 8005700:	4801      	ldr	r0, [pc, #4]	@ (8005708 <__malloc_unlock+0x8>)
 8005702:	f000 ba97 	b.w	8005c34 <__retarget_lock_release_recursive>
 8005706:	bf00      	nop
 8005708:	20000304 	.word	0x20000304

0800570c <std>:
 800570c:	2300      	movs	r3, #0
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
 8005712:	e9c0 3300 	strd	r3, r3, [r0]
 8005716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800571a:	6083      	str	r3, [r0, #8]
 800571c:	8181      	strh	r1, [r0, #12]
 800571e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005720:	81c2      	strh	r2, [r0, #14]
 8005722:	6183      	str	r3, [r0, #24]
 8005724:	4619      	mov	r1, r3
 8005726:	2208      	movs	r2, #8
 8005728:	305c      	adds	r0, #92	@ 0x5c
 800572a:	f000 f9f9 	bl	8005b20 <memset>
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <std+0x58>)
 8005730:	6263      	str	r3, [r4, #36]	@ 0x24
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <std+0x5c>)
 8005734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <std+0x60>)
 8005738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <std+0x64>)
 800573c:	6323      	str	r3, [r4, #48]	@ 0x30
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <std+0x68>)
 8005740:	6224      	str	r4, [r4, #32]
 8005742:	429c      	cmp	r4, r3
 8005744:	d006      	beq.n	8005754 <std+0x48>
 8005746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800574a:	4294      	cmp	r4, r2
 800574c:	d002      	beq.n	8005754 <std+0x48>
 800574e:	33d0      	adds	r3, #208	@ 0xd0
 8005750:	429c      	cmp	r4, r3
 8005752:	d105      	bne.n	8005760 <std+0x54>
 8005754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f000 ba68 	b.w	8005c30 <__retarget_lock_init_recursive>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	bf00      	nop
 8005764:	08005971 	.word	0x08005971
 8005768:	08005993 	.word	0x08005993
 800576c:	080059cb 	.word	0x080059cb
 8005770:	080059ef 	.word	0x080059ef
 8005774:	200001c4 	.word	0x200001c4

08005778 <stdio_exit_handler>:
 8005778:	4a02      	ldr	r2, [pc, #8]	@ (8005784 <stdio_exit_handler+0xc>)
 800577a:	4903      	ldr	r1, [pc, #12]	@ (8005788 <stdio_exit_handler+0x10>)
 800577c:	4803      	ldr	r0, [pc, #12]	@ (800578c <stdio_exit_handler+0x14>)
 800577e:	f000 b869 	b.w	8005854 <_fwalk_sglue>
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
 8005788:	08006375 	.word	0x08006375
 800578c:	2000001c 	.word	0x2000001c

08005790 <cleanup_stdio>:
 8005790:	6841      	ldr	r1, [r0, #4]
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <cleanup_stdio+0x34>)
 8005794:	4299      	cmp	r1, r3
 8005796:	b510      	push	{r4, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	d001      	beq.n	80057a0 <cleanup_stdio+0x10>
 800579c:	f000 fdea 	bl	8006374 <_fflush_r>
 80057a0:	68a1      	ldr	r1, [r4, #8]
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <cleanup_stdio+0x38>)
 80057a4:	4299      	cmp	r1, r3
 80057a6:	d002      	beq.n	80057ae <cleanup_stdio+0x1e>
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fde3 	bl	8006374 <_fflush_r>
 80057ae:	68e1      	ldr	r1, [r4, #12]
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <cleanup_stdio+0x3c>)
 80057b2:	4299      	cmp	r1, r3
 80057b4:	d004      	beq.n	80057c0 <cleanup_stdio+0x30>
 80057b6:	4620      	mov	r0, r4
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057bc:	f000 bdda 	b.w	8006374 <_fflush_r>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	200001c4 	.word	0x200001c4
 80057c8:	2000022c 	.word	0x2000022c
 80057cc:	20000294 	.word	0x20000294

080057d0 <global_stdio_init.part.0>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <global_stdio_init.part.0+0x30>)
 80057d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005804 <global_stdio_init.part.0+0x34>)
 80057d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005808 <global_stdio_init.part.0+0x38>)
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	4620      	mov	r0, r4
 80057dc:	2200      	movs	r2, #0
 80057de:	2104      	movs	r1, #4
 80057e0:	f7ff ff94 	bl	800570c <std>
 80057e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057e8:	2201      	movs	r2, #1
 80057ea:	2109      	movs	r1, #9
 80057ec:	f7ff ff8e 	bl	800570c <std>
 80057f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057f4:	2202      	movs	r2, #2
 80057f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fa:	2112      	movs	r1, #18
 80057fc:	f7ff bf86 	b.w	800570c <std>
 8005800:	200002fc 	.word	0x200002fc
 8005804:	200001c4 	.word	0x200001c4
 8005808:	08005779 	.word	0x08005779

0800580c <__sfp_lock_acquire>:
 800580c:	4801      	ldr	r0, [pc, #4]	@ (8005814 <__sfp_lock_acquire+0x8>)
 800580e:	f000 ba10 	b.w	8005c32 <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	20000305 	.word	0x20000305

08005818 <__sfp_lock_release>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__sfp_lock_release+0x8>)
 800581a:	f000 ba0b 	b.w	8005c34 <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	20000305 	.word	0x20000305

08005824 <__sinit>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	f7ff fff0 	bl	800580c <__sfp_lock_acquire>
 800582c:	6a23      	ldr	r3, [r4, #32]
 800582e:	b11b      	cbz	r3, 8005838 <__sinit+0x14>
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f7ff bff0 	b.w	8005818 <__sfp_lock_release>
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <__sinit+0x28>)
 800583a:	6223      	str	r3, [r4, #32]
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__sinit+0x2c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f5      	bne.n	8005830 <__sinit+0xc>
 8005844:	f7ff ffc4 	bl	80057d0 <global_stdio_init.part.0>
 8005848:	e7f2      	b.n	8005830 <__sinit+0xc>
 800584a:	bf00      	nop
 800584c:	08005791 	.word	0x08005791
 8005850:	200002fc 	.word	0x200002fc

08005854 <_fwalk_sglue>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	4607      	mov	r7, r0
 800585a:	4688      	mov	r8, r1
 800585c:	4614      	mov	r4, r2
 800585e:	2600      	movs	r6, #0
 8005860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005864:	f1b9 0901 	subs.w	r9, r9, #1
 8005868:	d505      	bpl.n	8005876 <_fwalk_sglue+0x22>
 800586a:	6824      	ldr	r4, [r4, #0]
 800586c:	2c00      	cmp	r4, #0
 800586e:	d1f7      	bne.n	8005860 <_fwalk_sglue+0xc>
 8005870:	4630      	mov	r0, r6
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d907      	bls.n	800588c <_fwalk_sglue+0x38>
 800587c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005880:	3301      	adds	r3, #1
 8005882:	d003      	beq.n	800588c <_fwalk_sglue+0x38>
 8005884:	4629      	mov	r1, r5
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	4306      	orrs	r6, r0
 800588c:	3568      	adds	r5, #104	@ 0x68
 800588e:	e7e9      	b.n	8005864 <_fwalk_sglue+0x10>

08005890 <iprintf>:
 8005890:	b40f      	push	{r0, r1, r2, r3}
 8005892:	b507      	push	{r0, r1, r2, lr}
 8005894:	4906      	ldr	r1, [pc, #24]	@ (80058b0 <iprintf+0x20>)
 8005896:	ab04      	add	r3, sp, #16
 8005898:	6808      	ldr	r0, [r1, #0]
 800589a:	f853 2b04 	ldr.w	r2, [r3], #4
 800589e:	6881      	ldr	r1, [r0, #8]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	f000 fa3d 	bl	8005d20 <_vfiprintf_r>
 80058a6:	b003      	add	sp, #12
 80058a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ac:	b004      	add	sp, #16
 80058ae:	4770      	bx	lr
 80058b0:	20000018 	.word	0x20000018

080058b4 <_puts_r>:
 80058b4:	6a03      	ldr	r3, [r0, #32]
 80058b6:	b570      	push	{r4, r5, r6, lr}
 80058b8:	6884      	ldr	r4, [r0, #8]
 80058ba:	4605      	mov	r5, r0
 80058bc:	460e      	mov	r6, r1
 80058be:	b90b      	cbnz	r3, 80058c4 <_puts_r+0x10>
 80058c0:	f7ff ffb0 	bl	8005824 <__sinit>
 80058c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058c6:	07db      	lsls	r3, r3, #31
 80058c8:	d405      	bmi.n	80058d6 <_puts_r+0x22>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	0598      	lsls	r0, r3, #22
 80058ce:	d402      	bmi.n	80058d6 <_puts_r+0x22>
 80058d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058d2:	f000 f9ae 	bl	8005c32 <__retarget_lock_acquire_recursive>
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	0719      	lsls	r1, r3, #28
 80058da:	d502      	bpl.n	80058e2 <_puts_r+0x2e>
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d135      	bne.n	800594e <_puts_r+0x9a>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f8c5 	bl	8005a74 <__swsetup_r>
 80058ea:	b380      	cbz	r0, 800594e <_puts_r+0x9a>
 80058ec:	f04f 35ff 	mov.w	r5, #4294967295
 80058f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058f2:	07da      	lsls	r2, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_puts_r+0x4e>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	059b      	lsls	r3, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_puts_r+0x4e>
 80058fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058fe:	f000 f999 	bl	8005c34 <__retarget_lock_release_recursive>
 8005902:	4628      	mov	r0, r5
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	2b00      	cmp	r3, #0
 8005908:	da04      	bge.n	8005914 <_puts_r+0x60>
 800590a:	69a2      	ldr	r2, [r4, #24]
 800590c:	429a      	cmp	r2, r3
 800590e:	dc17      	bgt.n	8005940 <_puts_r+0x8c>
 8005910:	290a      	cmp	r1, #10
 8005912:	d015      	beq.n	8005940 <_puts_r+0x8c>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	6022      	str	r2, [r4, #0]
 800591a:	7019      	strb	r1, [r3, #0]
 800591c:	68a3      	ldr	r3, [r4, #8]
 800591e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005922:	3b01      	subs	r3, #1
 8005924:	60a3      	str	r3, [r4, #8]
 8005926:	2900      	cmp	r1, #0
 8005928:	d1ed      	bne.n	8005906 <_puts_r+0x52>
 800592a:	2b00      	cmp	r3, #0
 800592c:	da11      	bge.n	8005952 <_puts_r+0x9e>
 800592e:	4622      	mov	r2, r4
 8005930:	210a      	movs	r1, #10
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f85f 	bl	80059f6 <__swbuf_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d0d7      	beq.n	80058ec <_puts_r+0x38>
 800593c:	250a      	movs	r5, #10
 800593e:	e7d7      	b.n	80058f0 <_puts_r+0x3c>
 8005940:	4622      	mov	r2, r4
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f857 	bl	80059f6 <__swbuf_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d1e7      	bne.n	800591c <_puts_r+0x68>
 800594c:	e7ce      	b.n	80058ec <_puts_r+0x38>
 800594e:	3e01      	subs	r6, #1
 8005950:	e7e4      	b.n	800591c <_puts_r+0x68>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	6022      	str	r2, [r4, #0]
 8005958:	220a      	movs	r2, #10
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e7ee      	b.n	800593c <_puts_r+0x88>
	...

08005960 <puts>:
 8005960:	4b02      	ldr	r3, [pc, #8]	@ (800596c <puts+0xc>)
 8005962:	4601      	mov	r1, r0
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	f7ff bfa5 	b.w	80058b4 <_puts_r>
 800596a:	bf00      	nop
 800596c:	20000018 	.word	0x20000018

08005970 <__sread>:
 8005970:	b510      	push	{r4, lr}
 8005972:	460c      	mov	r4, r1
 8005974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005978:	f000 f8fc 	bl	8005b74 <_read_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	bfab      	itete	ge
 8005980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005982:	89a3      	ldrhlt	r3, [r4, #12]
 8005984:	181b      	addge	r3, r3, r0
 8005986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800598a:	bfac      	ite	ge
 800598c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800598e:	81a3      	strhlt	r3, [r4, #12]
 8005990:	bd10      	pop	{r4, pc}

08005992 <__swrite>:
 8005992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005996:	461f      	mov	r7, r3
 8005998:	898b      	ldrh	r3, [r1, #12]
 800599a:	05db      	lsls	r3, r3, #23
 800599c:	4605      	mov	r5, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	4616      	mov	r6, r2
 80059a2:	d505      	bpl.n	80059b0 <__swrite+0x1e>
 80059a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a8:	2302      	movs	r3, #2
 80059aa:	2200      	movs	r2, #0
 80059ac:	f000 f8d0 	bl	8005b50 <_lseek_r>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	4632      	mov	r2, r6
 80059be:	463b      	mov	r3, r7
 80059c0:	4628      	mov	r0, r5
 80059c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	f000 b8f7 	b.w	8005bb8 <_write_r>

080059ca <__sseek>:
 80059ca:	b510      	push	{r4, lr}
 80059cc:	460c      	mov	r4, r1
 80059ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d2:	f000 f8bd 	bl	8005b50 <_lseek_r>
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	bf15      	itete	ne
 80059dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059e6:	81a3      	strheq	r3, [r4, #12]
 80059e8:	bf18      	it	ne
 80059ea:	81a3      	strhne	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__sclose>:
 80059ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f2:	f000 b89d 	b.w	8005b30 <_close_r>

080059f6 <__swbuf_r>:
 80059f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f8:	460e      	mov	r6, r1
 80059fa:	4614      	mov	r4, r2
 80059fc:	4605      	mov	r5, r0
 80059fe:	b118      	cbz	r0, 8005a08 <__swbuf_r+0x12>
 8005a00:	6a03      	ldr	r3, [r0, #32]
 8005a02:	b90b      	cbnz	r3, 8005a08 <__swbuf_r+0x12>
 8005a04:	f7ff ff0e 	bl	8005824 <__sinit>
 8005a08:	69a3      	ldr	r3, [r4, #24]
 8005a0a:	60a3      	str	r3, [r4, #8]
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	071a      	lsls	r2, r3, #28
 8005a10:	d501      	bpl.n	8005a16 <__swbuf_r+0x20>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	b943      	cbnz	r3, 8005a28 <__swbuf_r+0x32>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f82b 	bl	8005a74 <__swsetup_r>
 8005a1e:	b118      	cbz	r0, 8005a28 <__swbuf_r+0x32>
 8005a20:	f04f 37ff 	mov.w	r7, #4294967295
 8005a24:	4638      	mov	r0, r7
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	1a98      	subs	r0, r3, r2
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	b2f6      	uxtb	r6, r6
 8005a32:	4283      	cmp	r3, r0
 8005a34:	4637      	mov	r7, r6
 8005a36:	dc05      	bgt.n	8005a44 <__swbuf_r+0x4e>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 fc9a 	bl	8006374 <_fflush_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d1ed      	bne.n	8005a20 <__swbuf_r+0x2a>
 8005a44:	68a3      	ldr	r3, [r4, #8]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	60a3      	str	r3, [r4, #8]
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	701e      	strb	r6, [r3, #0]
 8005a52:	6962      	ldr	r2, [r4, #20]
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d004      	beq.n	8005a64 <__swbuf_r+0x6e>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	07db      	lsls	r3, r3, #31
 8005a5e:	d5e1      	bpl.n	8005a24 <__swbuf_r+0x2e>
 8005a60:	2e0a      	cmp	r6, #10
 8005a62:	d1df      	bne.n	8005a24 <__swbuf_r+0x2e>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fc84 	bl	8006374 <_fflush_r>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d0d9      	beq.n	8005a24 <__swbuf_r+0x2e>
 8005a70:	e7d6      	b.n	8005a20 <__swbuf_r+0x2a>
	...

08005a74 <__swsetup_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <__swsetup_r+0xa8>)
 8005a78:	4605      	mov	r5, r0
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	b118      	cbz	r0, 8005a88 <__swsetup_r+0x14>
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	b90b      	cbnz	r3, 8005a88 <__swsetup_r+0x14>
 8005a84:	f7ff fece 	bl	8005824 <__sinit>
 8005a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8c:	0719      	lsls	r1, r3, #28
 8005a8e:	d422      	bmi.n	8005ad6 <__swsetup_r+0x62>
 8005a90:	06da      	lsls	r2, r3, #27
 8005a92:	d407      	bmi.n	8005aa4 <__swsetup_r+0x30>
 8005a94:	2209      	movs	r2, #9
 8005a96:	602a      	str	r2, [r5, #0]
 8005a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa2:	e033      	b.n	8005b0c <__swsetup_r+0x98>
 8005aa4:	0758      	lsls	r0, r3, #29
 8005aa6:	d512      	bpl.n	8005ace <__swsetup_r+0x5a>
 8005aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aaa:	b141      	cbz	r1, 8005abe <__swsetup_r+0x4a>
 8005aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d002      	beq.n	8005aba <__swsetup_r+0x46>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f8bf 	bl	8005c38 <_free_r>
 8005aba:	2300      	movs	r3, #0
 8005abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	b94b      	cbnz	r3, 8005aee <__swsetup_r+0x7a>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae4:	d003      	beq.n	8005aee <__swsetup_r+0x7a>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 fc91 	bl	8006410 <__smakebuf_r>
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	f013 0201 	ands.w	r2, r3, #1
 8005af6:	d00a      	beq.n	8005b0e <__swsetup_r+0x9a>
 8005af8:	2200      	movs	r2, #0
 8005afa:	60a2      	str	r2, [r4, #8]
 8005afc:	6962      	ldr	r2, [r4, #20]
 8005afe:	4252      	negs	r2, r2
 8005b00:	61a2      	str	r2, [r4, #24]
 8005b02:	6922      	ldr	r2, [r4, #16]
 8005b04:	b942      	cbnz	r2, 8005b18 <__swsetup_r+0xa4>
 8005b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b0a:	d1c5      	bne.n	8005a98 <__swsetup_r+0x24>
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	0799      	lsls	r1, r3, #30
 8005b10:	bf58      	it	pl
 8005b12:	6962      	ldrpl	r2, [r4, #20]
 8005b14:	60a2      	str	r2, [r4, #8]
 8005b16:	e7f4      	b.n	8005b02 <__swsetup_r+0x8e>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e7f7      	b.n	8005b0c <__swsetup_r+0x98>
 8005b1c:	20000018 	.word	0x20000018

08005b20 <memset>:
 8005b20:	4402      	add	r2, r0
 8005b22:	4603      	mov	r3, r0
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d100      	bne.n	8005b2a <memset+0xa>
 8005b28:	4770      	bx	lr
 8005b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2e:	e7f9      	b.n	8005b24 <memset+0x4>

08005b30 <_close_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d06      	ldr	r5, [pc, #24]	@ (8005b4c <_close_r+0x1c>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fb fdfd 	bl	800173a <_close>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_close_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_close_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000300 	.word	0x20000300

08005b50 <_lseek_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	@ (8005b70 <_lseek_r+0x20>)
 8005b54:	4604      	mov	r4, r0
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fb fe12 	bl	8001788 <_lseek>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_lseek_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_lseek_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	20000300 	.word	0x20000300

08005b74 <_read_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	@ (8005b94 <_read_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fb fda0 	bl	80016c8 <_read>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_read_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_read_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20000300 	.word	0x20000300

08005b98 <_sbrk_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	@ (8005bb4 <_sbrk_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fb fdfe 	bl	80017a4 <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_sbrk_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_sbrk_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20000300 	.word	0x20000300

08005bb8 <_write_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	@ (8005bd8 <_write_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fb fd9b 	bl	8001702 <_write>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_write_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_write_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20000300 	.word	0x20000300

08005bdc <__errno>:
 8005bdc:	4b01      	ldr	r3, [pc, #4]	@ (8005be4 <__errno+0x8>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000018 	.word	0x20000018

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4d0d      	ldr	r5, [pc, #52]	@ (8005c20 <__libc_init_array+0x38>)
 8005bec:	4c0d      	ldr	r4, [pc, #52]	@ (8005c24 <__libc_init_array+0x3c>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8005c28 <__libc_init_array+0x40>)
 8005bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8005c2c <__libc_init_array+0x44>)
 8005bfc:	f000 fc66 	bl	80064cc <_init>
 8005c00:	1b64      	subs	r4, r4, r5
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	2600      	movs	r6, #0
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	08006698 	.word	0x08006698
 8005c24:	08006698 	.word	0x08006698
 8005c28:	08006698 	.word	0x08006698
 8005c2c:	0800669c 	.word	0x0800669c

08005c30 <__retarget_lock_init_recursive>:
 8005c30:	4770      	bx	lr

08005c32 <__retarget_lock_acquire_recursive>:
 8005c32:	4770      	bx	lr

08005c34 <__retarget_lock_release_recursive>:
 8005c34:	4770      	bx	lr
	...

08005c38 <_free_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d041      	beq.n	8005cc4 <_free_r+0x8c>
 8005c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c44:	1f0c      	subs	r4, r1, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bfb8      	it	lt
 8005c4a:	18e4      	addlt	r4, r4, r3
 8005c4c:	f7ff fd52 	bl	80056f4 <__malloc_lock>
 8005c50:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc8 <_free_r+0x90>)
 8005c52:	6813      	ldr	r3, [r2, #0]
 8005c54:	b933      	cbnz	r3, 8005c64 <_free_r+0x2c>
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	6014      	str	r4, [r2, #0]
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c60:	f7ff bd4e 	b.w	8005700 <__malloc_unlock>
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	d908      	bls.n	8005c7a <_free_r+0x42>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	1821      	adds	r1, r4, r0
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf01      	itttt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	1809      	addeq	r1, r1, r0
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	e7ed      	b.n	8005c56 <_free_r+0x1e>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	b10b      	cbz	r3, 8005c84 <_free_r+0x4c>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d9fa      	bls.n	8005c7a <_free_r+0x42>
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	1850      	adds	r0, r2, r1
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d10b      	bne.n	8005ca4 <_free_r+0x6c>
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	4401      	add	r1, r0
 8005c90:	1850      	adds	r0, r2, r1
 8005c92:	4283      	cmp	r3, r0
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	d1e0      	bne.n	8005c5a <_free_r+0x22>
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	6053      	str	r3, [r2, #4]
 8005c9e:	4408      	add	r0, r1
 8005ca0:	6010      	str	r0, [r2, #0]
 8005ca2:	e7da      	b.n	8005c5a <_free_r+0x22>
 8005ca4:	d902      	bls.n	8005cac <_free_r+0x74>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	e7d6      	b.n	8005c5a <_free_r+0x22>
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	1821      	adds	r1, r4, r0
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	bf04      	itt	eq
 8005cb4:	6819      	ldreq	r1, [r3, #0]
 8005cb6:	685b      	ldreq	r3, [r3, #4]
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	bf04      	itt	eq
 8005cbc:	1809      	addeq	r1, r1, r0
 8005cbe:	6021      	streq	r1, [r4, #0]
 8005cc0:	6054      	str	r4, [r2, #4]
 8005cc2:	e7ca      	b.n	8005c5a <_free_r+0x22>
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200001c0 	.word	0x200001c0

08005ccc <__sfputc_r>:
 8005ccc:	6893      	ldr	r3, [r2, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	b410      	push	{r4}
 8005cd4:	6093      	str	r3, [r2, #8]
 8005cd6:	da08      	bge.n	8005cea <__sfputc_r+0x1e>
 8005cd8:	6994      	ldr	r4, [r2, #24]
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	db01      	blt.n	8005ce2 <__sfputc_r+0x16>
 8005cde:	290a      	cmp	r1, #10
 8005ce0:	d103      	bne.n	8005cea <__sfputc_r+0x1e>
 8005ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce6:	f7ff be86 	b.w	80059f6 <__swbuf_r>
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	1c58      	adds	r0, r3, #1
 8005cee:	6010      	str	r0, [r2, #0]
 8005cf0:	7019      	strb	r1, [r3, #0]
 8005cf2:	4608      	mov	r0, r1
 8005cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <__sfputs_r>:
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	460f      	mov	r7, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	18d5      	adds	r5, r2, r3
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	d101      	bne.n	8005d0c <__sfputs_r+0x12>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e007      	b.n	8005d1c <__sfputs_r+0x22>
 8005d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d10:	463a      	mov	r2, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ffda 	bl	8005ccc <__sfputc_r>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d1f3      	bne.n	8005d04 <__sfputs_r+0xa>
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d20 <_vfiprintf_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	460d      	mov	r5, r1
 8005d26:	b09d      	sub	sp, #116	@ 0x74
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	b118      	cbz	r0, 8005d38 <_vfiprintf_r+0x18>
 8005d30:	6a03      	ldr	r3, [r0, #32]
 8005d32:	b90b      	cbnz	r3, 8005d38 <_vfiprintf_r+0x18>
 8005d34:	f7ff fd76 	bl	8005824 <__sinit>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d46:	f7ff ff74 	bl	8005c32 <__retarget_lock_acquire_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <_vfiprintf_r+0x34>
 8005d50:	692b      	ldr	r3, [r5, #16]
 8005d52:	b99b      	cbnz	r3, 8005d7c <_vfiprintf_r+0x5c>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff fe8c 	bl	8005a74 <__swsetup_r>
 8005d5c:	b170      	cbz	r0, 8005d7c <_vfiprintf_r+0x5c>
 8005d5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d60:	07dc      	lsls	r4, r3, #31
 8005d62:	d504      	bpl.n	8005d6e <_vfiprintf_r+0x4e>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b01d      	add	sp, #116	@ 0x74
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	0598      	lsls	r0, r3, #22
 8005d72:	d4f7      	bmi.n	8005d64 <_vfiprintf_r+0x44>
 8005d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d76:	f7ff ff5d 	bl	8005c34 <__retarget_lock_release_recursive>
 8005d7a:	e7f3      	b.n	8005d64 <_vfiprintf_r+0x44>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d80:	2320      	movs	r3, #32
 8005d82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8a:	2330      	movs	r3, #48	@ 0x30
 8005d8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f3c <_vfiprintf_r+0x21c>
 8005d90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d94:	f04f 0901 	mov.w	r9, #1
 8005d98:	4623      	mov	r3, r4
 8005d9a:	469a      	mov	sl, r3
 8005d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da0:	b10a      	cbz	r2, 8005da6 <_vfiprintf_r+0x86>
 8005da2:	2a25      	cmp	r2, #37	@ 0x25
 8005da4:	d1f9      	bne.n	8005d9a <_vfiprintf_r+0x7a>
 8005da6:	ebba 0b04 	subs.w	fp, sl, r4
 8005daa:	d00b      	beq.n	8005dc4 <_vfiprintf_r+0xa4>
 8005dac:	465b      	mov	r3, fp
 8005dae:	4622      	mov	r2, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ffa1 	bl	8005cfa <__sfputs_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f000 80a7 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc0:	445a      	add	r2, fp
 8005dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 809f 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd8:	f10a 0a01 	add.w	sl, sl, #1
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005de6:	4654      	mov	r4, sl
 8005de8:	2205      	movs	r2, #5
 8005dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dee:	4853      	ldr	r0, [pc, #332]	@ (8005f3c <_vfiprintf_r+0x21c>)
 8005df0:	f7fa fa0e 	bl	8000210 <memchr>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	b9d8      	cbnz	r0, 8005e30 <_vfiprintf_r+0x110>
 8005df8:	06d1      	lsls	r1, r2, #27
 8005dfa:	bf44      	itt	mi
 8005dfc:	2320      	movmi	r3, #32
 8005dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e02:	0713      	lsls	r3, r2, #28
 8005e04:	bf44      	itt	mi
 8005e06:	232b      	movmi	r3, #43	@ 0x2b
 8005e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e12:	d015      	beq.n	8005e40 <_vfiprintf_r+0x120>
 8005e14:	9a07      	ldr	r2, [sp, #28]
 8005e16:	4654      	mov	r4, sl
 8005e18:	2000      	movs	r0, #0
 8005e1a:	f04f 0c0a 	mov.w	ip, #10
 8005e1e:	4621      	mov	r1, r4
 8005e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e24:	3b30      	subs	r3, #48	@ 0x30
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d94b      	bls.n	8005ec2 <_vfiprintf_r+0x1a2>
 8005e2a:	b1b0      	cbz	r0, 8005e5a <_vfiprintf_r+0x13a>
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	e014      	b.n	8005e5a <_vfiprintf_r+0x13a>
 8005e30:	eba0 0308 	sub.w	r3, r0, r8
 8005e34:	fa09 f303 	lsl.w	r3, r9, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	46a2      	mov	sl, r4
 8005e3e:	e7d2      	b.n	8005de6 <_vfiprintf_r+0xc6>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	1d19      	adds	r1, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	9103      	str	r1, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfbb      	ittet	lt
 8005e4c:	425b      	neglt	r3, r3
 8005e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e52:	9307      	strge	r3, [sp, #28]
 8005e54:	9307      	strlt	r3, [sp, #28]
 8005e56:	bfb8      	it	lt
 8005e58:	9204      	strlt	r2, [sp, #16]
 8005e5a:	7823      	ldrb	r3, [r4, #0]
 8005e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e5e:	d10a      	bne.n	8005e76 <_vfiprintf_r+0x156>
 8005e60:	7863      	ldrb	r3, [r4, #1]
 8005e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e64:	d132      	bne.n	8005ecc <_vfiprintf_r+0x1ac>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e72:	3402      	adds	r4, #2
 8005e74:	9305      	str	r3, [sp, #20]
 8005e76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f4c <_vfiprintf_r+0x22c>
 8005e7a:	7821      	ldrb	r1, [r4, #0]
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f7fa f9c6 	bl	8000210 <memchr>
 8005e84:	b138      	cbz	r0, 8005e96 <_vfiprintf_r+0x176>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	eba0 000a 	sub.w	r0, r0, sl
 8005e8c:	2240      	movs	r2, #64	@ 0x40
 8005e8e:	4082      	lsls	r2, r0
 8005e90:	4313      	orrs	r3, r2
 8005e92:	3401      	adds	r4, #1
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9a:	4829      	ldr	r0, [pc, #164]	@ (8005f40 <_vfiprintf_r+0x220>)
 8005e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ea0:	2206      	movs	r2, #6
 8005ea2:	f7fa f9b5 	bl	8000210 <memchr>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d03f      	beq.n	8005f2a <_vfiprintf_r+0x20a>
 8005eaa:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <_vfiprintf_r+0x224>)
 8005eac:	bb1b      	cbnz	r3, 8005ef6 <_vfiprintf_r+0x1d6>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	f023 0307 	bic.w	r3, r3, #7
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	443b      	add	r3, r7
 8005ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec0:	e76a      	b.n	8005d98 <_vfiprintf_r+0x78>
 8005ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	2001      	movs	r0, #1
 8005eca:	e7a8      	b.n	8005e1e <_vfiprintf_r+0xfe>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	3401      	adds	r4, #1
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 0c0a 	mov.w	ip, #10
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ede:	3a30      	subs	r2, #48	@ 0x30
 8005ee0:	2a09      	cmp	r2, #9
 8005ee2:	d903      	bls.n	8005eec <_vfiprintf_r+0x1cc>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0c6      	beq.n	8005e76 <_vfiprintf_r+0x156>
 8005ee8:	9105      	str	r1, [sp, #20]
 8005eea:	e7c4      	b.n	8005e76 <_vfiprintf_r+0x156>
 8005eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e7f0      	b.n	8005ed8 <_vfiprintf_r+0x1b8>
 8005ef6:	ab03      	add	r3, sp, #12
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	462a      	mov	r2, r5
 8005efc:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <_vfiprintf_r+0x228>)
 8005efe:	a904      	add	r1, sp, #16
 8005f00:	4630      	mov	r0, r6
 8005f02:	f3af 8000 	nop.w
 8005f06:	4607      	mov	r7, r0
 8005f08:	1c78      	adds	r0, r7, #1
 8005f0a:	d1d6      	bne.n	8005eba <_vfiprintf_r+0x19a>
 8005f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f0e:	07d9      	lsls	r1, r3, #31
 8005f10:	d405      	bmi.n	8005f1e <_vfiprintf_r+0x1fe>
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	059a      	lsls	r2, r3, #22
 8005f16:	d402      	bmi.n	8005f1e <_vfiprintf_r+0x1fe>
 8005f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1a:	f7ff fe8b 	bl	8005c34 <__retarget_lock_release_recursive>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	065b      	lsls	r3, r3, #25
 8005f22:	f53f af1f 	bmi.w	8005d64 <_vfiprintf_r+0x44>
 8005f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f28:	e71e      	b.n	8005d68 <_vfiprintf_r+0x48>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b05      	ldr	r3, [pc, #20]	@ (8005f48 <_vfiprintf_r+0x228>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 f879 	bl	800602c <_printf_i>
 8005f3a:	e7e4      	b.n	8005f06 <_vfiprintf_r+0x1e6>
 8005f3c:	0800665c 	.word	0x0800665c
 8005f40:	08006666 	.word	0x08006666
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005cfb 	.word	0x08005cfb
 8005f4c:	08006662 	.word	0x08006662

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	4698      	mov	r8, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	b10a      	cbz	r2, 8005f76 <_printf_common+0x26>
 8005f72:	3301      	adds	r3, #1
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	6833      	ldrmi	r3, [r6, #0]
 8005f7e:	3302      	addmi	r3, #2
 8005f80:	6033      	strmi	r3, [r6, #0]
 8005f82:	6825      	ldr	r5, [r4, #0]
 8005f84:	f015 0506 	ands.w	r5, r5, #6
 8005f88:	d106      	bne.n	8005f98 <_printf_common+0x48>
 8005f8a:	f104 0a19 	add.w	sl, r4, #25
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc26      	bgt.n	8005fe6 <_printf_common+0x96>
 8005f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	3b00      	subs	r3, #0
 8005fa0:	bf18      	it	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d42b      	bmi.n	8006000 <_printf_common+0xb0>
 8005fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d01e      	beq.n	8005ff4 <_printf_common+0xa4>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	6922      	ldr	r2, [r4, #16]
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	bf02      	ittt	eq
 8005fc2:	68e5      	ldreq	r5, [r4, #12]
 8005fc4:	6833      	ldreq	r3, [r6, #0]
 8005fc6:	1aed      	subeq	r5, r5, r3
 8005fc8:	68a3      	ldr	r3, [r4, #8]
 8005fca:	bf0c      	ite	eq
 8005fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd0:	2500      	movne	r5, #0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bfc4      	itt	gt
 8005fd6:	1a9b      	subgt	r3, r3, r2
 8005fd8:	18ed      	addgt	r5, r5, r3
 8005fda:	2600      	movs	r6, #0
 8005fdc:	341a      	adds	r4, #26
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d11a      	bne.n	8006018 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e008      	b.n	8005ff8 <_printf_common+0xa8>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4641      	mov	r1, r8
 8005fec:	4638      	mov	r0, r7
 8005fee:	47c8      	blx	r9
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_printf_common+0xac>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7c6      	b.n	8005f8e <_printf_common+0x3e>
 8006000:	18e1      	adds	r1, r4, r3
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	2030      	movs	r0, #48	@ 0x30
 8006006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600a:	4422      	add	r2, r4
 800600c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006014:	3302      	adds	r3, #2
 8006016:	e7c7      	b.n	8005fa8 <_printf_common+0x58>
 8006018:	2301      	movs	r3, #1
 800601a:	4622      	mov	r2, r4
 800601c:	4641      	mov	r1, r8
 800601e:	4638      	mov	r0, r7
 8006020:	47c8      	blx	r9
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa4>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d9      	b.n	8005fde <_printf_common+0x8e>
	...

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006034:	2f78      	cmp	r7, #120	@ 0x78
 8006036:	4691      	mov	r9, r2
 8006038:	4680      	mov	r8, r0
 800603a:	460c      	mov	r4, r1
 800603c:	469a      	mov	sl, r3
 800603e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	@ 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d2 	beq.w	80061f2 <_printf_i+0x1c6>
 800604e:	2f58      	cmp	r7, #88	@ 0x58
 8006050:	f000 80b9 	beq.w	80061c6 <_printf_i+0x19a>
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	@ (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061d9 	.word	0x080061d9
 800609c:	08006103 	.word	0x08006103
 80060a0:	08006193 	.word	0x08006193
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	080061fb 	.word	0x080061fb
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006103 	.word	0x08006103
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e09d      	b.n	8006214 <_printf_i+0x1e8>
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	6031      	str	r1, [r6, #0]
 80060e0:	0606      	lsls	r6, r0, #24
 80060e2:	d501      	bpl.n	80060e8 <_printf_i+0xbc>
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	e003      	b.n	80060f0 <_printf_i+0xc4>
 80060e8:	0645      	lsls	r5, r0, #25
 80060ea:	d5fb      	bpl.n	80060e4 <_printf_i+0xb8>
 80060ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	da03      	bge.n	80060fc <_printf_i+0xd0>
 80060f4:	232d      	movs	r3, #45	@ 0x2d
 80060f6:	426d      	negs	r5, r5
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060fc:	4859      	ldr	r0, [pc, #356]	@ (8006264 <_printf_i+0x238>)
 80060fe:	230a      	movs	r3, #10
 8006100:	e011      	b.n	8006126 <_printf_i+0xfa>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	0608      	lsls	r0, r1, #24
 8006108:	f853 5b04 	ldr.w	r5, [r3], #4
 800610c:	d402      	bmi.n	8006114 <_printf_i+0xe8>
 800610e:	0649      	lsls	r1, r1, #25
 8006110:	bf48      	it	mi
 8006112:	b2ad      	uxthmi	r5, r5
 8006114:	2f6f      	cmp	r7, #111	@ 0x6f
 8006116:	4853      	ldr	r0, [pc, #332]	@ (8006264 <_printf_i+0x238>)
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	bf14      	ite	ne
 800611c:	230a      	movne	r3, #10
 800611e:	2308      	moveq	r3, #8
 8006120:	2100      	movs	r1, #0
 8006122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	60a6      	str	r6, [r4, #8]
 800612a:	2e00      	cmp	r6, #0
 800612c:	bfa2      	ittt	ge
 800612e:	6821      	ldrge	r1, [r4, #0]
 8006130:	f021 0104 	bicge.w	r1, r1, #4
 8006134:	6021      	strge	r1, [r4, #0]
 8006136:	b90d      	cbnz	r5, 800613c <_printf_i+0x110>
 8006138:	2e00      	cmp	r6, #0
 800613a:	d04b      	beq.n	80061d4 <_printf_i+0x1a8>
 800613c:	4616      	mov	r6, r2
 800613e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006142:	fb03 5711 	mls	r7, r3, r1, r5
 8006146:	5dc7      	ldrb	r7, [r0, r7]
 8006148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614c:	462f      	mov	r7, r5
 800614e:	42bb      	cmp	r3, r7
 8006150:	460d      	mov	r5, r1
 8006152:	d9f4      	bls.n	800613e <_printf_i+0x112>
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10b      	bne.n	8006170 <_printf_i+0x144>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07df      	lsls	r7, r3, #31
 800615c:	d508      	bpl.n	8006170 <_printf_i+0x144>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6861      	ldr	r1, [r4, #4]
 8006162:	4299      	cmp	r1, r3
 8006164:	bfde      	ittt	le
 8006166:	2330      	movle	r3, #48	@ 0x30
 8006168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006170:	1b92      	subs	r2, r2, r6
 8006172:	6122      	str	r2, [r4, #16]
 8006174:	f8cd a000 	str.w	sl, [sp]
 8006178:	464b      	mov	r3, r9
 800617a:	aa03      	add	r2, sp, #12
 800617c:	4621      	mov	r1, r4
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff fee6 	bl	8005f50 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	d14a      	bne.n	800621e <_printf_i+0x1f2>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	b004      	add	sp, #16
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	4833      	ldr	r0, [pc, #204]	@ (8006268 <_printf_i+0x23c>)
 800619c:	2778      	movs	r7, #120	@ 0x78
 800619e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6831      	ldr	r1, [r6, #0]
 80061a6:	061f      	lsls	r7, r3, #24
 80061a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80061ac:	d402      	bmi.n	80061b4 <_printf_i+0x188>
 80061ae:	065f      	lsls	r7, r3, #25
 80061b0:	bf48      	it	mi
 80061b2:	b2ad      	uxthmi	r5, r5
 80061b4:	6031      	str	r1, [r6, #0]
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	bf44      	itt	mi
 80061ba:	f043 0320 	orrmi.w	r3, r3, #32
 80061be:	6023      	strmi	r3, [r4, #0]
 80061c0:	b11d      	cbz	r5, 80061ca <_printf_i+0x19e>
 80061c2:	2310      	movs	r3, #16
 80061c4:	e7ac      	b.n	8006120 <_printf_i+0xf4>
 80061c6:	4827      	ldr	r0, [pc, #156]	@ (8006264 <_printf_i+0x238>)
 80061c8:	e7e9      	b.n	800619e <_printf_i+0x172>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f023 0320 	bic.w	r3, r3, #32
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	e7f6      	b.n	80061c2 <_printf_i+0x196>
 80061d4:	4616      	mov	r6, r2
 80061d6:	e7bd      	b.n	8006154 <_printf_i+0x128>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	6961      	ldr	r1, [r4, #20]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	062e      	lsls	r6, r5, #24
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0x1c0>
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0x1c6>
 80061ec:	0668      	lsls	r0, r5, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0x1bc>
 80061f0:	8019      	strh	r1, [r3, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	4616      	mov	r6, r2
 80061f8:	e7bc      	b.n	8006174 <_printf_i+0x148>
 80061fa:	6833      	ldr	r3, [r6, #0]
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	6032      	str	r2, [r6, #0]
 8006200:	681e      	ldr	r6, [r3, #0]
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	4630      	mov	r0, r6
 8006208:	f7fa f802 	bl	8000210 <memchr>
 800620c:	b108      	cbz	r0, 8006212 <_printf_i+0x1e6>
 800620e:	1b80      	subs	r0, r0, r6
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	2300      	movs	r3, #0
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621c:	e7aa      	b.n	8006174 <_printf_i+0x148>
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d0ad      	beq.n	8006188 <_printf_i+0x15c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	079b      	lsls	r3, r3, #30
 8006230:	d413      	bmi.n	800625a <_printf_i+0x22e>
 8006232:	68e0      	ldr	r0, [r4, #12]
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	4298      	cmp	r0, r3
 8006238:	bfb8      	it	lt
 800623a:	4618      	movlt	r0, r3
 800623c:	e7a6      	b.n	800618c <_printf_i+0x160>
 800623e:	2301      	movs	r3, #1
 8006240:	4632      	mov	r2, r6
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d09d      	beq.n	8006188 <_printf_i+0x15c>
 800624c:	3501      	adds	r5, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	9903      	ldr	r1, [sp, #12]
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	42ab      	cmp	r3, r5
 8006256:	dcf2      	bgt.n	800623e <_printf_i+0x212>
 8006258:	e7eb      	b.n	8006232 <_printf_i+0x206>
 800625a:	2500      	movs	r5, #0
 800625c:	f104 0619 	add.w	r6, r4, #25
 8006260:	e7f5      	b.n	800624e <_printf_i+0x222>
 8006262:	bf00      	nop
 8006264:	0800666d 	.word	0x0800666d
 8006268:	0800667e 	.word	0x0800667e

0800626c <__sflush_r>:
 800626c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	0716      	lsls	r6, r2, #28
 8006276:	4605      	mov	r5, r0
 8006278:	460c      	mov	r4, r1
 800627a:	d454      	bmi.n	8006326 <__sflush_r+0xba>
 800627c:	684b      	ldr	r3, [r1, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dc02      	bgt.n	8006288 <__sflush_r+0x1c>
 8006282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	dd48      	ble.n	800631a <__sflush_r+0xae>
 8006288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800628a:	2e00      	cmp	r6, #0
 800628c:	d045      	beq.n	800631a <__sflush_r+0xae>
 800628e:	2300      	movs	r3, #0
 8006290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006294:	682f      	ldr	r7, [r5, #0]
 8006296:	6a21      	ldr	r1, [r4, #32]
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	d030      	beq.n	80062fe <__sflush_r+0x92>
 800629c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	0759      	lsls	r1, r3, #29
 80062a2:	d505      	bpl.n	80062b0 <__sflush_r+0x44>
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062aa:	b10b      	cbz	r3, 80062b0 <__sflush_r+0x44>
 80062ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b0      	blx	r6
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	d106      	bne.n	80062ce <__sflush_r+0x62>
 80062c0:	6829      	ldr	r1, [r5, #0]
 80062c2:	291d      	cmp	r1, #29
 80062c4:	d82b      	bhi.n	800631e <__sflush_r+0xb2>
 80062c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <__sflush_r+0x104>)
 80062c8:	410a      	asrs	r2, r1
 80062ca:	07d6      	lsls	r6, r2, #31
 80062cc:	d427      	bmi.n	800631e <__sflush_r+0xb2>
 80062ce:	2200      	movs	r2, #0
 80062d0:	6062      	str	r2, [r4, #4]
 80062d2:	04d9      	lsls	r1, r3, #19
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	d504      	bpl.n	80062e4 <__sflush_r+0x78>
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	d101      	bne.n	80062e2 <__sflush_r+0x76>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	b903      	cbnz	r3, 80062e4 <__sflush_r+0x78>
 80062e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062e6:	602f      	str	r7, [r5, #0]
 80062e8:	b1b9      	cbz	r1, 800631a <__sflush_r+0xae>
 80062ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ee:	4299      	cmp	r1, r3
 80062f0:	d002      	beq.n	80062f8 <__sflush_r+0x8c>
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff fca0 	bl	8005c38 <_free_r>
 80062f8:	2300      	movs	r3, #0
 80062fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80062fc:	e00d      	b.n	800631a <__sflush_r+0xae>
 80062fe:	2301      	movs	r3, #1
 8006300:	4628      	mov	r0, r5
 8006302:	47b0      	blx	r6
 8006304:	4602      	mov	r2, r0
 8006306:	1c50      	adds	r0, r2, #1
 8006308:	d1c9      	bne.n	800629e <__sflush_r+0x32>
 800630a:	682b      	ldr	r3, [r5, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0c6      	beq.n	800629e <__sflush_r+0x32>
 8006310:	2b1d      	cmp	r3, #29
 8006312:	d001      	beq.n	8006318 <__sflush_r+0xac>
 8006314:	2b16      	cmp	r3, #22
 8006316:	d11e      	bne.n	8006356 <__sflush_r+0xea>
 8006318:	602f      	str	r7, [r5, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	e022      	b.n	8006364 <__sflush_r+0xf8>
 800631e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006322:	b21b      	sxth	r3, r3
 8006324:	e01b      	b.n	800635e <__sflush_r+0xf2>
 8006326:	690f      	ldr	r7, [r1, #16]
 8006328:	2f00      	cmp	r7, #0
 800632a:	d0f6      	beq.n	800631a <__sflush_r+0xae>
 800632c:	0793      	lsls	r3, r2, #30
 800632e:	680e      	ldr	r6, [r1, #0]
 8006330:	bf08      	it	eq
 8006332:	694b      	ldreq	r3, [r1, #20]
 8006334:	600f      	str	r7, [r1, #0]
 8006336:	bf18      	it	ne
 8006338:	2300      	movne	r3, #0
 800633a:	eba6 0807 	sub.w	r8, r6, r7
 800633e:	608b      	str	r3, [r1, #8]
 8006340:	f1b8 0f00 	cmp.w	r8, #0
 8006344:	dde9      	ble.n	800631a <__sflush_r+0xae>
 8006346:	6a21      	ldr	r1, [r4, #32]
 8006348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800634a:	4643      	mov	r3, r8
 800634c:	463a      	mov	r2, r7
 800634e:	4628      	mov	r0, r5
 8006350:	47b0      	blx	r6
 8006352:	2800      	cmp	r0, #0
 8006354:	dc08      	bgt.n	8006368 <__sflush_r+0xfc>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4407      	add	r7, r0
 800636a:	eba8 0800 	sub.w	r8, r8, r0
 800636e:	e7e7      	b.n	8006340 <__sflush_r+0xd4>
 8006370:	dfbffffe 	.word	0xdfbffffe

08006374 <_fflush_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	690b      	ldr	r3, [r1, #16]
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b913      	cbnz	r3, 8006384 <_fflush_r+0x10>
 800637e:	2500      	movs	r5, #0
 8006380:	4628      	mov	r0, r5
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	b118      	cbz	r0, 800638e <_fflush_r+0x1a>
 8006386:	6a03      	ldr	r3, [r0, #32]
 8006388:	b90b      	cbnz	r3, 800638e <_fflush_r+0x1a>
 800638a:	f7ff fa4b 	bl	8005824 <__sinit>
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f3      	beq.n	800637e <_fflush_r+0xa>
 8006396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006398:	07d0      	lsls	r0, r2, #31
 800639a:	d404      	bmi.n	80063a6 <_fflush_r+0x32>
 800639c:	0599      	lsls	r1, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_fflush_r+0x32>
 80063a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063a2:	f7ff fc46 	bl	8005c32 <__retarget_lock_acquire_recursive>
 80063a6:	4628      	mov	r0, r5
 80063a8:	4621      	mov	r1, r4
 80063aa:	f7ff ff5f 	bl	800626c <__sflush_r>
 80063ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b0:	07da      	lsls	r2, r3, #31
 80063b2:	4605      	mov	r5, r0
 80063b4:	d4e4      	bmi.n	8006380 <_fflush_r+0xc>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	d4e1      	bmi.n	8006380 <_fflush_r+0xc>
 80063bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063be:	f7ff fc39 	bl	8005c34 <__retarget_lock_release_recursive>
 80063c2:	e7dd      	b.n	8006380 <_fflush_r+0xc>

080063c4 <__swhatbuf_r>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	2900      	cmp	r1, #0
 80063ce:	b096      	sub	sp, #88	@ 0x58
 80063d0:	4615      	mov	r5, r2
 80063d2:	461e      	mov	r6, r3
 80063d4:	da0d      	bge.n	80063f2 <__swhatbuf_r+0x2e>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	bf14      	ite	ne
 80063e2:	2340      	movne	r3, #64	@ 0x40
 80063e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063e8:	2000      	movs	r0, #0
 80063ea:	6031      	str	r1, [r6, #0]
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	b016      	add	sp, #88	@ 0x58
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	466a      	mov	r2, sp
 80063f4:	f000 f848 	bl	8006488 <_fstat_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	dbec      	blt.n	80063d6 <__swhatbuf_r+0x12>
 80063fc:	9901      	ldr	r1, [sp, #4]
 80063fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006402:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006406:	4259      	negs	r1, r3
 8006408:	4159      	adcs	r1, r3
 800640a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800640e:	e7eb      	b.n	80063e8 <__swhatbuf_r+0x24>

08006410 <__smakebuf_r>:
 8006410:	898b      	ldrh	r3, [r1, #12]
 8006412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006414:	079d      	lsls	r5, r3, #30
 8006416:	4606      	mov	r6, r0
 8006418:	460c      	mov	r4, r1
 800641a:	d507      	bpl.n	800642c <__smakebuf_r+0x1c>
 800641c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	2301      	movs	r3, #1
 8006426:	6163      	str	r3, [r4, #20]
 8006428:	b003      	add	sp, #12
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	ab01      	add	r3, sp, #4
 800642e:	466a      	mov	r2, sp
 8006430:	f7ff ffc8 	bl	80063c4 <__swhatbuf_r>
 8006434:	9f00      	ldr	r7, [sp, #0]
 8006436:	4605      	mov	r5, r0
 8006438:	4639      	mov	r1, r7
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff f8da 	bl	80055f4 <_malloc_r>
 8006440:	b948      	cbnz	r0, 8006456 <__smakebuf_r+0x46>
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	059a      	lsls	r2, r3, #22
 8006448:	d4ee      	bmi.n	8006428 <__smakebuf_r+0x18>
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	f043 0302 	orr.w	r3, r3, #2
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	e7e2      	b.n	800641c <__smakebuf_r+0xc>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	6020      	str	r0, [r4, #0]
 800645a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006466:	b15b      	cbz	r3, 8006480 <__smakebuf_r+0x70>
 8006468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646c:	4630      	mov	r0, r6
 800646e:	f000 f81d 	bl	80064ac <_isatty_r>
 8006472:	b128      	cbz	r0, 8006480 <__smakebuf_r+0x70>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	81a3      	strh	r3, [r4, #12]
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	431d      	orrs	r5, r3
 8006484:	81a5      	strh	r5, [r4, #12]
 8006486:	e7cf      	b.n	8006428 <__smakebuf_r+0x18>

08006488 <_fstat_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d07      	ldr	r5, [pc, #28]	@ (80064a8 <_fstat_r+0x20>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fb f95c 	bl	8001752 <_fstat>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_fstat_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_fstat_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	20000300 	.word	0x20000300

080064ac <_isatty_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d06      	ldr	r5, [pc, #24]	@ (80064c8 <_isatty_r+0x1c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb f95b 	bl	8001772 <_isatty>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_isatty_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_isatty_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	20000300 	.word	0x20000300

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
