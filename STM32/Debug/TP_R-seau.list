
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005358  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  080053c0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080053c0  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d889  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b1  00000000  00000000  00014921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000169d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000970  00000000  00000000  000175f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c8a  00000000  00000000  00017f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe6f  00000000  00000000  0001abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf793  00000000  00000000  0002aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000fa238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fdc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005290 	.word	0x08005290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005290 	.word	0x08005290

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fc41 	bl	8000e2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f83d 	bl	8000628 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f961 	bl	8000874 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f935 	bl	8000820 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80005b6:	f000 f909 	bl	80007cc <MX_UART4_Init>
	MX_CAN1_Init();
 80005ba:	f000 f8a3 	bl	8000704 <MX_CAN1_Init>
	MX_I2C1_Init();
 80005be:	f000 f8d7 	bl	8000770 <MX_I2C1_Init>
		BMP280_init();
		HAL_CAN_Start(&hcan1);

		// Activation de la réception UART
		HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);*/
	printf("=======demarage Systeme=======\r\n");
 80005c2:	4816      	ldr	r0, [pc, #88]	@ (800061c <main+0x7c>)
 80005c4:	f004 f8ae 	bl	8004724 <puts>
		uint8_t bmp280_ctrl =0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
		uint8_t reg1 = BMP280_CTRL_MES_REG;
 80005cc:	23f4      	movs	r3, #244	@ 0xf4
 80005ce:	71bb      	strb	r3, [r7, #6]

		uint8_t buf[2];

		buf[1]=reg1;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	717b      	strb	r3, [r7, #5]

		buf[2]=0x57;
 80005d4:	2357      	movs	r3, #87	@ 0x57
 80005d6:	71bb      	strb	r3, [r7, #6]

		HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS, buf, 2, HAL_MAX_DELAY);
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2302      	movs	r3, #2
 80005e2:	21ee      	movs	r1, #238	@ 0xee
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <main+0x80>)
 80005e6:	f001 fa25 	bl	8001a34 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS, &reg1, 1, HAL_MAX_DELAY);
 80005ea:	1dba      	adds	r2, r7, #6
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	21ee      	movs	r1, #238	@ 0xee
 80005f6:	480a      	ldr	r0, [pc, #40]	@ (8000620 <main+0x80>)
 80005f8:	f001 fa1c 	bl	8001a34 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDRESS, &bmp280_ctrl, 1, HAL_MAX_DELAY);
 80005fc:	1dfa      	adds	r2, r7, #7
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	21ee      	movs	r1, #238	@ 0xee
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x80>)
 800060a:	f001 fb11 	bl	8001c30 <HAL_I2C_Master_Receive>

		printf("Valeur du registre de contrôle (0xF4) : 0x%02X\r\n", bmp280_ctrl);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <main+0x84>)
 8000614:	f004 f81e 	bl	8004654 <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x78>
 800061c:	080052a8 	.word	0x080052a8
 8000620:	200000ac 	.word	0x200000ac
 8000624:	080052c8 	.word	0x080052c8

08000628 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	@ 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f954 	bl	80048e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a29      	ldr	r2, [pc, #164]	@ (80006fc <SystemClock_Config+0xd4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <SystemClock_Config+0xd8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fbbc 	bl	8002e34 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80006c2:	f000 f945 	bl	8000950 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f85c 	bl	80027a0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80006ee:	f000 f92f 	bl	8000950 <Error_Handler>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_CAN1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_CAN1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000710:	2206      	movs	r2, #6
 8000712:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000722:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000726:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_CAN1_Init+0x64>)
 800072a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800072e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_CAN1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_CAN1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_CAN1_Init+0x64>)
 8000756:	f000 fbdb 	bl	8000f10 <HAL_CAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000760:	f000 f8f6 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000084 	.word	0x20000084
 800076c:	40006400 	.word	0x40006400

08000770 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000792:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f000 fffd 	bl	80017ac <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007b8:	f000 f8ca 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000ac 	.word	0x200000ac
 80007c4:	40005400 	.word	0x40005400
 80007c8:	000186a0 	.word	0x000186a0

080007cc <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_UART4_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_UART4_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_UART4_Init+0x4c>)
 8000804:	f002 fdb4 	bl	8003370 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 800080e:	f000 f89f 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	40004c00 	.word	0x40004c00

08000820 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fd8a 	bl	8003370 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000862:	f000 f875 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000148 	.word	0x20000148
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a2c      	ldr	r2, [pc, #176]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4812      	ldr	r0, [pc, #72]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000900:	f000 ff3a 	bl	8001778 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_GPIO_Init+0xd8>)
 800091c:	f000 fd98 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000938:	f000 fd8a 	bl	8001450 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020800 	.word	0x40020800

08000950 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fc84 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <HAL_CAN_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12c      	bne.n	8000a28 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_CAN_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <HAL_CAN_MspInit+0x8c>)
 8000a24:	f000 fd14 	bl	8001450 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40006400 	.word	0x40006400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_I2C_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12b      	bne.n	8000ab6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7a:	23c0      	movs	r3, #192	@ 0xc0
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <HAL_I2C_MspInit+0x8c>)
 8000a96:	f000 fcdb 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a36      	ldr	r2, [pc, #216]	@ (8000bc4 <HAL_UART_MspInit+0xf8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d134      	bne.n	8000b58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4b35      	ldr	r3, [pc, #212]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a34      	ldr	r2, [pc, #208]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b32      	ldr	r3, [pc, #200]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b36:	2308      	movs	r3, #8
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4822      	ldr	r0, [pc, #136]	@ (8000bcc <HAL_UART_MspInit+0x100>)
 8000b42:	f000 fc85 	bl	8001450 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2034      	movs	r0, #52	@ 0x34
 8000b4c:	f000 fbb7 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b50:	2034      	movs	r0, #52	@ 0x34
 8000b52:	f000 fbd0 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b56:	e030      	b.n	8000bba <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd0 <HAL_UART_MspInit+0x104>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_UART_MspInit+0xfc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_UART_MspInit+0x100>)
 8000bb6:	f000 fc4b 	bl	8001450 <HAL_GPIO_Init>
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	@ 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004c00 	.word	0x40004c00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000bdc:	1d39      	adds	r1, r7, #4
 8000bde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <__io_putchar+0x20>)
 8000be6:	f002 fc13 	bl	8003410 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000148 	.word	0x20000148

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f93f 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <UART4_IRQHandler+0x10>)
 8000c5e:	f002 fc63 	bl	8003528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000100 	.word	0x20000100

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff87 	bl	8000bd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
  }
  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f003 fe12 	bl	80049a0 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000190 	.word	0x20000190
 8000db0:	200002e8 	.word	0x200002e8

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f003 fdd1 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fbc9 	bl	80005a0 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e1c:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8000e20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e24:	200002e4 	.word	0x200002e4

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 fa27 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fd7c 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fa3f 	bl	8001312 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 fa07 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000194 	.word	0x20000194

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000194 	.word	0x20000194

08000f10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e0ed      	b.n	80010fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fd3c 	bl	80009ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0201 	orr.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f44:	f7ff ffd8 	bl	8000ef8 <HAL_GetTick>
 8000f48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f4a:	e012      	b.n	8000f72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f4c:	f7ff ffd4 	bl	8000ef8 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b0a      	cmp	r3, #10
 8000f58:	d90b      	bls.n	8000f72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2205      	movs	r2, #5
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0c5      	b.n	80010fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0e5      	beq.n	8000f4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0202 	bic.w	r2, r2, #2
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f90:	f7ff ffb2 	bl	8000ef8 <HAL_GetTick>
 8000f94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f96:	e012      	b.n	8000fbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f98:	f7ff ffae 	bl	8000ef8 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	d90b      	bls.n	8000fbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e09f      	b.n	80010fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e5      	bne.n	8000f98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7e1b      	ldrb	r3, [r3, #24]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	e007      	b.n	8000ff6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7e5b      	ldrb	r3, [r3, #25]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d108      	bne.n	8001010 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e007      	b.n	8001020 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800101e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e9b      	ldrb	r3, [r3, #26]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d108      	bne.n	800103a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0220 	orr.w	r2, r2, #32
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e007      	b.n	800104a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0220 	bic.w	r2, r2, #32
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7edb      	ldrb	r3, [r3, #27]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0210 	bic.w	r2, r2, #16
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e007      	b.n	8001074 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0210 	orr.w	r2, r2, #16
 8001072:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7f1b      	ldrb	r3, [r3, #28]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d108      	bne.n	800108e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0208 	orr.w	r2, r2, #8
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e007      	b.n	800109e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7f5b      	ldrb	r3, [r3, #29]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d108      	bne.n	80010b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0204 	orr.w	r2, r2, #4
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e007      	b.n	80010c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0204 	bic.w	r2, r2, #4
 80010c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	ea42 0103 	orr.w	r1, r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	@ (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff29 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff3e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff8e 	bl	80011fc <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff31 	bl	800116c <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fdde 	bl	8000ef8 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d008      	beq.n	800135c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2280      	movs	r2, #128	@ 0x80
 800134e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e052      	b.n	8001402 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0216 	bic.w	r2, r2, #22
 800136a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800137a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <HAL_DMA_Abort+0x62>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0208 	bic.w	r2, r2, #8
 800139a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ac:	e013      	b.n	80013d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ae:	f7ff fda3 	bl	8000ef8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d90c      	bls.n	80013d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e015      	b.n	8001402 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e4      	bne.n	80013ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e8:	223f      	movs	r2, #63	@ 0x3f
 80013ea:	409a      	lsls	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d004      	beq.n	8001428 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e00c      	b.n	8001442 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2205      	movs	r2, #5
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	@ 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e165      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	f040 8154 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d005      	beq.n	80014a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d130      	bne.n	8001504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 0201 	and.w	r2, r3, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b03      	cmp	r3, #3
 800150e:	d017      	beq.n	8001540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d123      	bne.n	8001594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80ae 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b5d      	ldr	r3, [pc, #372]	@ (8001750 <HAL_GPIO_Init+0x300>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <HAL_GPIO_Init+0x300>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001750 <HAL_GPIO_Init+0x300>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f2:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <HAL_GPIO_Init+0x304>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	@ (8001758 <HAL_GPIO_Init+0x308>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d025      	beq.n	800166a <HAL_GPIO_Init+0x21a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4e      	ldr	r2, [pc, #312]	@ (800175c <HAL_GPIO_Init+0x30c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01f      	beq.n	8001666 <HAL_GPIO_Init+0x216>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4d      	ldr	r2, [pc, #308]	@ (8001760 <HAL_GPIO_Init+0x310>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x212>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x314>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_GPIO_Init+0x318>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x20a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_GPIO_Init+0x31c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x206>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a49      	ldr	r2, [pc, #292]	@ (8001770 <HAL_GPIO_Init+0x320>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x202>
 800164e:	2306      	movs	r3, #6
 8001650:	e00c      	b.n	800166c <HAL_GPIO_Init+0x21c>
 8001652:	2307      	movs	r3, #7
 8001654:	e00a      	b.n	800166c <HAL_GPIO_Init+0x21c>
 8001656:	2305      	movs	r3, #5
 8001658:	e008      	b.n	800166c <HAL_GPIO_Init+0x21c>
 800165a:	2304      	movs	r3, #4
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x21c>
 800165e:	2303      	movs	r3, #3
 8001660:	e004      	b.n	800166c <HAL_GPIO_Init+0x21c>
 8001662:	2302      	movs	r3, #2
 8001664:	e002      	b.n	800166c <HAL_GPIO_Init+0x21c>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x21c>
 800166a:	2300      	movs	r3, #0
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f002 0203 	and.w	r2, r2, #3
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	4093      	lsls	r3, r2
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167c:	4935      	ldr	r1, [pc, #212]	@ (8001754 <HAL_GPIO_Init+0x304>)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <HAL_GPIO_Init+0x324>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ae:	4a31      	ldr	r2, [pc, #196]	@ (8001774 <HAL_GPIO_Init+0x324>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001774 <HAL_GPIO_Init+0x324>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d8:	4a26      	ldr	r2, [pc, #152]	@ (8001774 <HAL_GPIO_Init+0x324>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <HAL_GPIO_Init+0x324>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001702:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <HAL_GPIO_Init+0x324>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_GPIO_Init+0x324>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800172c:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <HAL_GPIO_Init+0x324>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	f67f ae96 	bls.w	800146c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40013800 	.word	0x40013800
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020800 	.word	0x40020800
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40021000 	.word	0x40021000
 800176c:	40021400 	.word	0x40021400
 8001770:	40021800 	.word	0x40021800
 8001774:	40013c00 	.word	0x40013c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff f932 	bl	8000a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	@ 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 f8b8 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	@ (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	@ (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	@ (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	@ (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	@ (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	@ (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	460b      	mov	r3, r1
 8001a42:	817b      	strh	r3, [r7, #10]
 8001a44:	4613      	mov	r3, r2
 8001a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fa56 	bl	8000ef8 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	f040 80e0 	bne.w	8001c1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2319      	movs	r3, #25
 8001a62:	2201      	movs	r2, #1
 8001a64:	4970      	ldr	r1, [pc, #448]	@ (8001c28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fc64 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0d3      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0x50>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0cc      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	@ 0x21
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a50      	ldr	r2, [pc, #320]	@ (8001c2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aec:	8979      	ldrh	r1, [r7, #10]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 face 	bl	8002094 <I2C_MasterRequestWrite>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08d      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b18:	e066      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fd22 	bl	8002568 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11b      	bne.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d017      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fd19 	bl	80025f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01a      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d194      	bne.n	8001b1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	00100002 	.word	0x00100002
 8001c2c:	ffff0000 	.word	0xffff0000

08001c30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
 8001c40:	4613      	mov	r3, r2
 8001c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff f958 	bl	8000ef8 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 8217 	bne.w	8002086 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	497c      	ldr	r1, [pc, #496]	@ (8001e54 <HAL_I2C_Master_Receive+0x224>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fb66 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e20a      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_Master_Receive+0x50>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e203      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d007      	beq.n	8001ca6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2222      	movs	r2, #34	@ 0x22
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	893a      	ldrh	r2, [r7, #8]
 8001cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	@ (8001e58 <HAL_I2C_Master_Receive+0x228>)
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ce8:	8979      	ldrh	r1, [r7, #10]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa52 	bl	8002198 <I2C_MasterRequestRead>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1c4      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d113      	bne.n	8001d2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	623b      	str	r3, [r7, #32]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	623b      	str	r3, [r7, #32]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e198      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d11b      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e178      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d11b      	bne.n	8001dae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	e158      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001dd4:	e144      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	f200 80f1 	bhi.w	8001fc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d123      	bne.n	8001e30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fc4b 	bl	8002688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e145      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e2e:	e117      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d14e      	bne.n	8001ed6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4906      	ldr	r1, [pc, #24]	@ (8001e5c <HAL_I2C_Master_Receive+0x22c>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fa76 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e11a      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
 8001e52:	bf00      	nop
 8001e54:	00100002 	.word	0x00100002
 8001e58:	ffff0000 	.word	0xffff0000
 8001e5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ed4:	e0c4      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001edc:	2200      	movs	r2, #0
 8001ede:	496c      	ldr	r1, [pc, #432]	@ (8002090 <HAL_I2C_Master_Receive+0x460>)
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fa27 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0cb      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4955      	ldr	r1, [pc, #340]	@ (8002090 <HAL_I2C_Master_Receive+0x460>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9f9 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e09d      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fc0:	e04e      	b.n	8002060 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fb5e 	bl	8002688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e058      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d124      	bne.n	8002060 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f aeb6 	bne.w	8001dd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3728      	adds	r7, #40	@ 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	00010004 	.word	0x00010004

08002094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d006      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d003      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020bc:	d108      	bne.n	80020d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00b      	b.n	80020e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d107      	bne.n	80020e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f91d 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210e:	d103      	bne.n	8002118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e035      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002124:	d108      	bne.n	8002138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e01b      	b.n	8002170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	11db      	asrs	r3, r3, #7
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0306 	and.w	r3, r3, #6
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f063 030f 	orn	r3, r3, #15
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	490e      	ldr	r1, [pc, #56]	@ (8002190 <I2C_MasterRequestWrite+0xfc>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f966 	bl	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e010      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4907      	ldr	r1, [pc, #28]	@ (8002194 <I2C_MasterRequestWrite+0x100>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f956 	bl	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00010008 	.word	0x00010008
 8002194:	00010002 	.word	0x00010002

08002198 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d006      	beq.n	80021d2 <I2C_MasterRequestRead+0x3a>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d003      	beq.n	80021d2 <I2C_MasterRequestRead+0x3a>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021d0:	d108      	bne.n	80021e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00b      	b.n	80021fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	2b11      	cmp	r3, #17
 80021ea:	d107      	bne.n	80021fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f893 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002222:	d103      	bne.n	800222c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e079      	b.n	8002324 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	e05f      	b.n	800230c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0306 	and.w	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 030f 	orn	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4930      	ldr	r1, [pc, #192]	@ (800232c <I2C_MasterRequestRead+0x194>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f8dc 	bl	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e054      	b.n	8002324 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4929      	ldr	r1, [pc, #164]	@ (8002330 <I2C_MasterRequestRead+0x198>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8cc 	bl	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e044      	b.n	8002324 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f831 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022e6:	d103      	bne.n	80022f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e017      	b.n	8002324 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	11db      	asrs	r3, r3, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0306 	and.w	r3, r3, #6
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f063 030e 	orn	r3, r3, #14
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <I2C_MasterRequestRead+0x198>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f888 	bl	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	00010008 	.word	0x00010008
 8002330:	00010002 	.word	0x00010002

08002334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002344:	e048      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d044      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7fe fdd3 	bl	8000ef8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d139      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10d      	bne.n	800238a <I2C_WaitOnFlagUntilTimeout+0x56>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	e00c      	b.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d116      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e023      	b.n	8002420 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10d      	bne.n	80023fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	e00c      	b.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	43da      	mvns	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	429a      	cmp	r2, r3
 800241c:	d093      	beq.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002436:	e071      	b.n	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002446:	d123      	bne.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002456:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e067      	b.n	8002560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d041      	beq.n	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002498:	f7fe fd2e 	bl	8000ef8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d302      	bcc.n	80024ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d136      	bne.n	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10c      	bne.n	80024d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e00b      	b.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	43da      	mvns	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e021      	b.n	8002560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10c      	bne.n	8002540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	43da      	mvns	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4013      	ands	r3, r2
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e00b      	b.n	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af6d 	bne.w	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002574:	e034      	b.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f8e3 	bl	8002742 <I2C_IsAcknowledgeFailed>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d028      	beq.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe fcb3 	bl	8000ef8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ae:	2b80      	cmp	r3, #128	@ 0x80
 80025b0:	d016      	beq.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b80      	cmp	r3, #128	@ 0x80
 80025ec:	d1c3      	bne.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002604:	e034      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f89b 	bl	8002742 <I2C_IsAcknowledgeFailed>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e034      	b.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d028      	beq.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fc6b 	bl	8000ef8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11d      	bne.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d016      	beq.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e007      	b.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b04      	cmp	r3, #4
 800267c:	d1c3      	bne.n	8002606 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002694:	e049      	b.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d119      	bne.n	80026d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0210 	mvn.w	r2, #16
 80026ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e030      	b.n	800273a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7fe fc0e 	bl	8000ef8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f8:	2b40      	cmp	r3, #64	@ 0x40
 80026fa:	d016      	beq.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e007      	b.n	800273a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d1ae      	bne.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002758:	d11b      	bne.n	8002792 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002762:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0cc      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b68      	ldr	r3, [pc, #416]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d90c      	bls.n	80027dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a58      	ldr	r2, [pc, #352]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a52      	ldr	r2, [pc, #328]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	494d      	ldr	r1, [pc, #308]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d044      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d119      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d003      	beq.n	800285e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	2b03      	cmp	r3, #3
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e067      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b37      	ldr	r3, [pc, #220]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4934      	ldr	r1, [pc, #208]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002890:	f7fe fb32 	bl	8000ef8 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7fe fb2e 	bl	8000ef8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e04f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d20c      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e032      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4916      	ldr	r1, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002926:	f000 f855 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fa92 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00
 800295c:	40023800 	.word	0x40023800
 8002960:	080052fc 	.word	0x080052fc
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	0800530c 	.word	0x0800530c

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b0:	f7ff ffdc 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0b5b      	lsrs	r3, r3, #13
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	0800530c 	.word	0x0800530c

080029d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d8:	b0ae      	sub	sp, #184	@ 0xb8
 80029da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	f200 8206 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x440>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a45 	.word	0x08002a45
 8002a14:	08002e15 	.word	0x08002e15
 8002a18:	08002e15 	.word	0x08002e15
 8002a1c:	08002e15 	.word	0x08002e15
 8002a20:	08002a4d 	.word	0x08002a4d
 8002a24:	08002e15 	.word	0x08002e15
 8002a28:	08002e15 	.word	0x08002e15
 8002a2c:	08002e15 	.word	0x08002e15
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002e15 	.word	0x08002e15
 8002a38:	08002e15 	.word	0x08002e15
 8002a3c:	08002e15 	.word	0x08002e15
 8002a40:	08002c45 	.word	0x08002c45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4bb9      	ldr	r3, [pc, #740]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a4a:	e1e7      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4c:	4bb8      	ldr	r3, [pc, #736]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a52:	e1e3      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a54:	4bb4      	ldr	r3, [pc, #720]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a60:	4bb1      	ldr	r3, [pc, #708]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d071      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6c:	4bae      	ldr	r3, [pc, #696]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa4:	0150      	lsls	r0, r2, #5
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4621      	mov	r1, r4
 8002aac:	1a51      	subs	r1, r2, r1
 8002aae:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	4641      	mov	r1, r8
 8002aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ace:	4641      	mov	r1, r8
 8002ad0:	018a      	lsls	r2, r1, #6
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	1a51      	subs	r1, r2, r1
 8002ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ad8:	4649      	mov	r1, r9
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002aec:	4649      	mov	r1, r9
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4641      	mov	r1, r8
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4641      	mov	r1, r8
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4622      	mov	r2, r4
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b06:	462b      	mov	r3, r5
 8002b08:	460a      	mov	r2, r1
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	024b      	lsls	r3, r1, #9
 8002b20:	4621      	mov	r1, r4
 8002b22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b26:	4621      	mov	r1, r4
 8002b28:	024a      	lsls	r2, r1, #9
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b40:	f7fd fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b4e:	e067      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	f04f 0000 	mov.w	r0, #0
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b84:	0150      	lsls	r0, r2, #5
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	1a51      	subs	r1, r2, r1
 8002b8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b90:	4629      	mov	r1, r5
 8002b92:	eb63 0301 	sbc.w	r3, r3, r1
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	018b      	lsls	r3, r1, #6
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bae:	4641      	mov	r1, r8
 8002bb0:	018a      	lsls	r2, r1, #6
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb8:	4649      	mov	r1, r9
 8002bba:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd2:	4692      	mov	sl, r2
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb1a 0303 	adds.w	r3, sl, r3
 8002bdc:	623b      	str	r3, [r7, #32]
 8002bde:	462b      	mov	r3, r5
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	028b      	lsls	r3, r1, #10
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	028a      	lsls	r2, r1, #10
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c08:	2200      	movs	r2, #0
 8002c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c12:	f7fd fb4d 	bl	80002b0 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c20:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c42:	e0eb      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c50:	4b35      	ldr	r3, [pc, #212]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d06b      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5c:	4b32      	ldr	r3, [pc, #200]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	2200      	movs	r2, #0
 8002c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c70:	2300      	movs	r3, #0
 8002c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c78:	4622      	mov	r2, r4
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4621      	mov	r1, r4
 8002c92:	1a51      	subs	r1, r2, r1
 8002c94:	61b9      	str	r1, [r7, #24]
 8002c96:	4629      	mov	r1, r5
 8002c98:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002caa:	4659      	mov	r1, fp
 8002cac:	018b      	lsls	r3, r1, #6
 8002cae:	4651      	mov	r1, sl
 8002cb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	018a      	lsls	r2, r1, #6
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ebb2 0801 	subs.w	r8, r2, r1
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd8:	4690      	mov	r8, r2
 8002cda:	4699      	mov	r9, r3
 8002cdc:	4623      	mov	r3, r4
 8002cde:	eb18 0303 	adds.w	r3, r8, r3
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	462b      	mov	r3, r5
 8002ce6:	eb49 0303 	adc.w	r3, r9, r3
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	024b      	lsls	r3, r1, #9
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d02:	4621      	mov	r1, r4
 8002d04:	024a      	lsls	r2, r1, #9
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d0e:	2200      	movs	r2, #0
 8002d10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d18:	f7fd faca 	bl	80002b0 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d26:	e065      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x420>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b3d      	ldr	r3, [pc, #244]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4611      	mov	r1, r2
 8002d40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d46:	2300      	movs	r3, #0
 8002d48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d4e:	4642      	mov	r2, r8
 8002d50:	464b      	mov	r3, r9
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4641      	mov	r1, r8
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d80:	4659      	mov	r1, fp
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	1a54      	subs	r4, r2, r1
 8002d92:	4659      	mov	r1, fp
 8002d94:	eb63 0501 	sbc.w	r5, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	00eb      	lsls	r3, r5, #3
 8002da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da6:	00e2      	lsls	r2, r4, #3
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	4643      	mov	r3, r8
 8002dae:	18e3      	adds	r3, r4, r3
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	028b      	lsls	r3, r1, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	028a      	lsls	r2, r1, #10
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ddc:	2200      	movs	r2, #0
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002de0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002de2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002de6:	f7fd fa63 	bl	80002b0 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002df4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0f1b      	lsrs	r3, r3, #28
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e12:	e003      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	37b8      	adds	r7, #184	@ 0xb8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400

08002e34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e28d      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8083 	beq.w	8002f5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e54:	4b94      	ldr	r3, [pc, #592]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e60:	4b91      	ldr	r3, [pc, #580]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b84      	ldr	r3, [pc, #528]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x124>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e25a      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x90>
 8002eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7b      	ldr	r2, [pc, #492]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xcc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xb4>
 8002ece:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b73      	ldr	r3, [pc, #460]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a72      	ldr	r2, [pc, #456]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xcc>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fd fff6 	bl	8000ef8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fd fff2 	bl	8000ef8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e21f      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b61      	ldr	r3, [pc, #388]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xdc>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd ffe2 	bl	8000ef8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fd ffde 	bl	8000ef8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e20b      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b57      	ldr	r3, [pc, #348]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x104>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06f      	beq.n	8003046 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f66:	4b50      	ldr	r3, [pc, #320]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d017      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f72:	4b4d      	ldr	r3, [pc, #308]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b47      	ldr	r3, [pc, #284]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f96:	4b44      	ldr	r3, [pc, #272]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	4b41      	ldr	r3, [pc, #260]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x186>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1d3      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4937      	ldr	r1, [pc, #220]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_RCC_OscConfig+0x278>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fd ff8b 	bl	8000ef8 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7fd ff87 	bl	8000ef8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1b4      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003004:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4925      	ldr	r1, [pc, #148]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_OscConfig+0x278>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fd ff6a 	bl	8000ef8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fd ff66 	bl	8000ef8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e193      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d036      	beq.n	80030c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fd ff4a 	bl	8000ef8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fd ff46 	bl	8000ef8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e173      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 800307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x234>
 8003086:	e01b      	b.n	80030c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fd ff33 	bl	8000ef8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	e00e      	b.n	80030b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fd ff2f 	bl	8000ef8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d907      	bls.n	80030b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e15c      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	42470000 	.word	0x42470000
 80030b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ea      	bne.n	8003096 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8097 	beq.w	80031fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d2:	4b83      	ldr	r3, [pc, #524]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	4b7f      	ldr	r3, [pc, #508]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a7e      	ldr	r2, [pc, #504]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b7c      	ldr	r3, [pc, #496]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d118      	bne.n	800313c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003116:	f7fd feef 	bl	8000ef8 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fd feeb 	bl	8000ef8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e118      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x31e>
 8003144:	4b66      	ldr	r3, [pc, #408]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a65      	ldr	r2, [pc, #404]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003150:	e01c      	b.n	800318c <HAL_RCC_OscConfig+0x358>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b05      	cmp	r3, #5
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x340>
 800315a:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a60      	ldr	r2, [pc, #384]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0x358>
 8003174:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a59      	ldr	r2, [pc, #356]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	4b57      	ldr	r3, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a56      	ldr	r2, [pc, #344]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003186:	f023 0304 	bic.w	r3, r3, #4
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fd feb0 	bl	8000ef8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fd feac 	bl	8000ef8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0d7      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	4b4b      	ldr	r3, [pc, #300]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ee      	beq.n	800319c <HAL_RCC_OscConfig+0x368>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fe9a 	bl	8000ef8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fd fe96 	bl	8000ef8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0c1      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ee      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b3b      	ldr	r3, [pc, #236]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a3a      	ldr	r2, [pc, #232]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80ad 	beq.w	8003360 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003206:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d060      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d145      	bne.n	80032a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd fe6a 	bl	8000ef8 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fd fe66 	bl	8000ef8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e093      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd fe3b 	bl	8000ef8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fd fe37 	bl	8000ef8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e064      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x452>
 80032a4:	e05c      	b.n	8003360 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fd fe24 	bl	8000ef8 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fd fe20 	bl	8000ef8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04d      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x480>
 80032d2:	e045      	b.n	8003360 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e040      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_RCC_OscConfig+0x538>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d030      	beq.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d129      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d122      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d119      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d10f      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fb98 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd69 	bl	8003e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b20      	cmp	r3, #32
 800342e:	d175      	bne.n	800351c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Transmit+0x2c>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2221      	movs	r2, #33	@ 0x21
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344e:	f7fd fd53 	bl	8000ef8 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003468:	d108      	bne.n	800347c <HAL_UART_Transmit+0x6c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003484:	e02e      	b.n	80034e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fb05 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03a      	b.n	800351e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e007      	b.n	80034d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1cb      	bne.n	8003486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2140      	movs	r1, #64	@ 0x40
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fad1 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b0ba      	sub	sp, #232	@ 0xe8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_UART_IRQHandler+0x66>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fbc2 	bl	8003d10 <UART_Receive_IT>
      return;
 800358c:	e25b      	b.n	8003a46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800358e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80de 	beq.w	8003754 <HAL_UART_IRQHandler+0x22c>
 8003598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80d1 	beq.w	8003754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_UART_IRQHandler+0xae>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
 80035e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_UART_IRQHandler+0xf6>
 8003606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_UART_IRQHandler+0x126>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 81f2 	beq.w	8003a3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_UART_IRQHandler+0x14e>
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fb4d 	bl	8003d10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b40      	cmp	r3, #64	@ 0x40
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_UART_IRQHandler+0x17a>
 800369a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04f      	beq.n	8003742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa55 	bl	8003b52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b40      	cmp	r3, #64	@ 0x40
 80036b4:	d141      	bne.n	800373a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1d9      	bne.n	80036b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	4a7e      	ldr	r2, [pc, #504]	@ (8003908 <HAL_UART_IRQHandler+0x3e0>)
 8003710:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fe77 	bl	800140a <HAL_DMA_Abort_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e00e      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f99e 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	e00a      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f99a 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e006      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f996 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800374e:	e175      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	bf00      	nop
    return;
 8003752:	e173      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 814f 	bne.w	80039fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8148 	beq.w	80039fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8141 	beq.w	80039fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	f040 80b6 	bne.w	800390c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8145 	beq.w	8003a40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037be:	429a      	cmp	r2, r3
 80037c0:	f080 813e 	bcs.w	8003a40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d6:	f000 8088 	beq.w	80038ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800380a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800381e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1d9      	bne.n	80037da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800384a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800384e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003852:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800385c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e1      	bne.n	8003826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003888:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800388c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e3      	bne.n	8003862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ba:	f023 0310 	bic.w	r3, r3, #16
 80038be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd fd20 	bl	800132a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8c1 	bl	8003a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003906:	e09b      	b.n	8003a40 <HAL_UART_IRQHandler+0x518>
 8003908:	08003c19 	.word	0x08003c19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003914:	b29b      	uxth	r3, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 808e 	beq.w	8003a44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8089 	beq.w	8003a44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003956:	647a      	str	r2, [r7, #68]	@ 0x44
 8003958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800395c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e3      	bne.n	8003932 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	623b      	str	r3, [r7, #32]
   return(result);
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800398e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e3      	bne.n	800396a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0310 	bic.w	r3, r3, #16
 80039c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039d4:	61fa      	str	r2, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	617b      	str	r3, [r7, #20]
   return(result);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e3      	bne.n	80039b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f847 	bl	8003a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039fa:	e023      	b.n	8003a44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_UART_IRQHandler+0x4f4>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f913 	bl	8003c40 <UART_Transmit_IT>
    return;
 8003a1a:	e014      	b.n	8003a46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <HAL_UART_IRQHandler+0x51e>
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f953 	bl	8003ce0 <UART_EndTransmit_IT>
    return;
 8003a3a:	e004      	b.n	8003a46 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a44:	bf00      	nop
  }
}
 8003a46:	37e8      	adds	r7, #232	@ 0xe8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab0:	e03b      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d037      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd fa1d 	bl	8000ef8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e03a      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d023      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d020      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b40      	cmp	r3, #64	@ 0x40
 8003aec:	d01d      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d116      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f81d 	bl	8003b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00f      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d0b4      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b095      	sub	sp, #84	@ 0x54
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bea:	61ba      	str	r2, [r7, #24]
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c0c:	bf00      	nop
 8003c0e:	3754      	adds	r7, #84	@ 0x54
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff1e 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b21      	cmp	r3, #33	@ 0x21
 8003c52:	d13e      	bne.n	8003cd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d114      	bne.n	8003c88 <UART_Transmit_IT+0x48>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d110      	bne.n	8003c88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]
 8003c86:	e008      	b.n	8003c9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6211      	str	r1, [r2, #32]
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fea3 	bl	8003a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	@ 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b22      	cmp	r3, #34	@ 0x22
 8003d22:	f040 80ae 	bne.w	8003e82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2e:	d117      	bne.n	8003d60 <UART_Receive_IT+0x50>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d113      	bne.n	8003d60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d5e:	e026      	b.n	8003dae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	d007      	beq.n	8003d84 <UART_Receive_IT+0x74>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <UART_Receive_IT+0x82>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e008      	b.n	8003da4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d15d      	bne.n	8003e7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0220 	bic.w	r2, r2, #32
 8003dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d135      	bne.n	8003e74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 0310 	bic.w	r3, r3, #16
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2e:	623a      	str	r2, [r7, #32]
 8003e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	69f9      	ldr	r1, [r7, #28]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d10a      	bne.n	8003e66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fe0b 	bl	8003a88 <HAL_UARTEx_RxEventCallback>
 8003e72:	e002      	b.n	8003e7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fdf3 	bl	8003a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e002      	b.n	8003e84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3730      	adds	r7, #48	@ 0x30
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b0c0      	sub	sp, #256	@ 0x100
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	ea40 0301 	orr.w	r3, r0, r1
 8003eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ee4:	f021 010c 	bic.w	r1, r1, #12
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f06:	6999      	ldr	r1, [r3, #24]
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	ea40 0301 	orr.w	r3, r0, r1
 8003f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8004158 <UART_SetConfig+0x2cc>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d005      	beq.n	8003f2c <UART_SetConfig+0xa0>
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b8d      	ldr	r3, [pc, #564]	@ (800415c <UART_SetConfig+0x2d0>)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d104      	bne.n	8003f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe fd3e 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f34:	e003      	b.n	8003f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f36:	f7fe fd25 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f48:	f040 810c 	bne.w	8004164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	1891      	adds	r1, r2, r2
 8003f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f66:	415b      	adcs	r3, r3
 8003f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f6e:	4621      	mov	r1, r4
 8003f70:	eb12 0801 	adds.w	r8, r2, r1
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb43 0901 	adc.w	r9, r3, r1
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8e:	4690      	mov	r8, r2
 8003f90:	4699      	mov	r9, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	eb18 0303 	adds.w	r3, r8, r3
 8003f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	eb49 0303 	adc.w	r3, r9, r3
 8003fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fba:	460b      	mov	r3, r1
 8003fbc:	18db      	adds	r3, r3, r3
 8003fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	eb42 0303 	adc.w	r3, r2, r3
 8003fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fd0:	f7fc f96e 	bl	80002b0 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b61      	ldr	r3, [pc, #388]	@ (8004160 <UART_SetConfig+0x2d4>)
 8003fda:	fba3 2302 	umull	r2, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	011c      	lsls	r4, r3, #4
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004004:	4641      	mov	r1, r8
 8004006:	eb12 0a01 	adds.w	sl, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb43 0b01 	adc.w	fp, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800401c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004024:	4692      	mov	sl, r2
 8004026:	469b      	mov	fp, r3
 8004028:	4643      	mov	r3, r8
 800402a:	eb1a 0303 	adds.w	r3, sl, r3
 800402e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004032:	464b      	mov	r3, r9
 8004034:	eb4b 0303 	adc.w	r3, fp, r3
 8004038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800404c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004050:	460b      	mov	r3, r1
 8004052:	18db      	adds	r3, r3, r3
 8004054:	643b      	str	r3, [r7, #64]	@ 0x40
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
 800405e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004066:	f7fc f923 	bl	80002b0 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4611      	mov	r1, r2
 8004070:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <UART_SetConfig+0x2d4>)
 8004072:	fba3 2301 	umull	r2, r3, r3, r1
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2264      	movs	r2, #100	@ 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	1acb      	subs	r3, r1, r3
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004086:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <UART_SetConfig+0x2d4>)
 8004088:	fba3 2302 	umull	r2, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004094:	441c      	add	r4, r3
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040b0:	415b      	adcs	r3, r3
 80040b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040b8:	4641      	mov	r1, r8
 80040ba:	1851      	adds	r1, r2, r1
 80040bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80040be:	4649      	mov	r1, r9
 80040c0:	414b      	adcs	r3, r1
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040d0:	4659      	mov	r1, fp
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4651      	mov	r1, sl
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4642      	mov	r2, r8
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ec:	464b      	mov	r3, r9
 80040ee:	460a      	mov	r2, r1
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800410c:	460b      	mov	r3, r1
 800410e:	18db      	adds	r3, r3, r3
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004112:	4613      	mov	r3, r2
 8004114:	eb42 0303 	adc.w	r3, r2, r3
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800411e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004122:	f7fc f8c5 	bl	80002b0 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <UART_SetConfig+0x2d4>)
 800412c:	fba3 1302 	umull	r1, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	2164      	movs	r1, #100	@ 0x64
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	3332      	adds	r3, #50	@ 0x32
 800413e:	4a08      	ldr	r2, [pc, #32]	@ (8004160 <UART_SetConfig+0x2d4>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	f003 0207 	and.w	r2, r3, #7
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4422      	add	r2, r4
 8004152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004154:	e106      	b.n	8004364 <UART_SetConfig+0x4d8>
 8004156:	bf00      	nop
 8004158:	40011000 	.word	0x40011000
 800415c:	40011400 	.word	0x40011400
 8004160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800416e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004176:	4642      	mov	r2, r8
 8004178:	464b      	mov	r3, r9
 800417a:	1891      	adds	r1, r2, r2
 800417c:	6239      	str	r1, [r7, #32]
 800417e:	415b      	adcs	r3, r3
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
 8004182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004186:	4641      	mov	r1, r8
 8004188:	1854      	adds	r4, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0501 	adc.w	r5, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	00eb      	lsls	r3, r5, #3
 800419a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419e:	00e2      	lsls	r2, r4, #3
 80041a0:	4614      	mov	r4, r2
 80041a2:	461d      	mov	r5, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	18e3      	adds	r3, r4, r3
 80041a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041ac:	464b      	mov	r3, r9
 80041ae:	eb45 0303 	adc.w	r3, r5, r3
 80041b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041d2:	4629      	mov	r1, r5
 80041d4:	008b      	lsls	r3, r1, #2
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041dc:	4621      	mov	r1, r4
 80041de:	008a      	lsls	r2, r1, #2
 80041e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041e4:	f7fc f864 	bl	80002b0 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4b60      	ldr	r3, [pc, #384]	@ (8004370 <UART_SetConfig+0x4e4>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011c      	lsls	r4, r3, #4
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	61b9      	str	r1, [r7, #24]
 8004210:	415b      	adcs	r3, r3
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6139      	str	r1, [r7, #16]
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800424c:	464b      	mov	r3, r9
 800424e:	460a      	mov	r2, r1
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004270:	4649      	mov	r1, r9
 8004272:	008b      	lsls	r3, r1, #2
 8004274:	4641      	mov	r1, r8
 8004276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427a:	4641      	mov	r1, r8
 800427c:	008a      	lsls	r2, r1, #2
 800427e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004282:	f7fc f815 	bl	80002b0 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4611      	mov	r1, r2
 800428c:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <UART_SetConfig+0x4e4>)
 800428e:	fba3 2301 	umull	r2, r3, r3, r1
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2264      	movs	r2, #100	@ 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	@ 0x32
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <UART_SetConfig+0x4e4>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ac:	441c      	add	r4, r3
 80042ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b2:	2200      	movs	r2, #0
 80042b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80042b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	415b      	adcs	r3, r3
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042cc:	4641      	mov	r1, r8
 80042ce:	1851      	adds	r1, r2, r1
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	4649      	mov	r1, r9
 80042d4:	414b      	adcs	r3, r1
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e4:	4659      	mov	r1, fp
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4651      	mov	r1, sl
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4642      	mov	r2, r8
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fe:	464b      	mov	r3, r9
 8004300:	460a      	mov	r2, r1
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	663b      	str	r3, [r7, #96]	@ 0x60
 8004312:	667a      	str	r2, [r7, #100]	@ 0x64
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004320:	4649      	mov	r1, r9
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	4641      	mov	r1, r8
 8004326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432a:	4641      	mov	r1, r8
 800432c:	008a      	lsls	r2, r1, #2
 800432e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004332:	f7fb ffbd 	bl	80002b0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <UART_SetConfig+0x4e4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	@ 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	3332      	adds	r3, #50	@ 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	@ (8004370 <UART_SetConfig+0x4e4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800436a:	46bd      	mov	sp, r7
 800436c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <sbrk_aligned>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4e0f      	ldr	r6, [pc, #60]	@ (80043b4 <sbrk_aligned+0x40>)
 8004378:	460c      	mov	r4, r1
 800437a:	6831      	ldr	r1, [r6, #0]
 800437c:	4605      	mov	r5, r0
 800437e:	b911      	cbnz	r1, 8004386 <sbrk_aligned+0x12>
 8004380:	f000 faec 	bl	800495c <_sbrk_r>
 8004384:	6030      	str	r0, [r6, #0]
 8004386:	4621      	mov	r1, r4
 8004388:	4628      	mov	r0, r5
 800438a:	f000 fae7 	bl	800495c <_sbrk_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d103      	bne.n	800439a <sbrk_aligned+0x26>
 8004392:	f04f 34ff 	mov.w	r4, #4294967295
 8004396:	4620      	mov	r0, r4
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	1cc4      	adds	r4, r0, #3
 800439c:	f024 0403 	bic.w	r4, r4, #3
 80043a0:	42a0      	cmp	r0, r4
 80043a2:	d0f8      	beq.n	8004396 <sbrk_aligned+0x22>
 80043a4:	1a21      	subs	r1, r4, r0
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 fad8 	bl	800495c <_sbrk_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d1f2      	bne.n	8004396 <sbrk_aligned+0x22>
 80043b0:	e7ef      	b.n	8004392 <sbrk_aligned+0x1e>
 80043b2:	bf00      	nop
 80043b4:	20000198 	.word	0x20000198

080043b8 <_malloc_r>:
 80043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4606      	mov	r6, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d904      	bls.n	80043de <_malloc_r+0x26>
 80043d4:	230c      	movs	r3, #12
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	2000      	movs	r0, #0
 80043da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044b4 <_malloc_r+0xfc>
 80043e2:	f000 f869 	bl	80044b8 <__malloc_lock>
 80043e6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ea:	461c      	mov	r4, r3
 80043ec:	bb44      	cbnz	r4, 8004440 <_malloc_r+0x88>
 80043ee:	4629      	mov	r1, r5
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff ffbf 	bl	8004374 <sbrk_aligned>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	4604      	mov	r4, r0
 80043fa:	d158      	bne.n	80044ae <_malloc_r+0xf6>
 80043fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004400:	4627      	mov	r7, r4
 8004402:	2f00      	cmp	r7, #0
 8004404:	d143      	bne.n	800448e <_malloc_r+0xd6>
 8004406:	2c00      	cmp	r4, #0
 8004408:	d04b      	beq.n	80044a2 <_malloc_r+0xea>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	4639      	mov	r1, r7
 800440e:	4630      	mov	r0, r6
 8004410:	eb04 0903 	add.w	r9, r4, r3
 8004414:	f000 faa2 	bl	800495c <_sbrk_r>
 8004418:	4581      	cmp	r9, r0
 800441a:	d142      	bne.n	80044a2 <_malloc_r+0xea>
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	1a6d      	subs	r5, r5, r1
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ffa6 	bl	8004374 <sbrk_aligned>
 8004428:	3001      	adds	r0, #1
 800442a:	d03a      	beq.n	80044a2 <_malloc_r+0xea>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	442b      	add	r3, r5
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	f8d8 3000 	ldr.w	r3, [r8]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	bb62      	cbnz	r2, 8004494 <_malloc_r+0xdc>
 800443a:	f8c8 7000 	str.w	r7, [r8]
 800443e:	e00f      	b.n	8004460 <_malloc_r+0xa8>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	1b52      	subs	r2, r2, r5
 8004444:	d420      	bmi.n	8004488 <_malloc_r+0xd0>
 8004446:	2a0b      	cmp	r2, #11
 8004448:	d917      	bls.n	800447a <_malloc_r+0xc2>
 800444a:	1961      	adds	r1, r4, r5
 800444c:	42a3      	cmp	r3, r4
 800444e:	6025      	str	r5, [r4, #0]
 8004450:	bf18      	it	ne
 8004452:	6059      	strne	r1, [r3, #4]
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	bf08      	it	eq
 8004458:	f8c8 1000 	streq.w	r1, [r8]
 800445c:	5162      	str	r2, [r4, r5]
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f82f 	bl	80044c4 <__malloc_unlock>
 8004466:	f104 000b 	add.w	r0, r4, #11
 800446a:	1d23      	adds	r3, r4, #4
 800446c:	f020 0007 	bic.w	r0, r0, #7
 8004470:	1ac2      	subs	r2, r0, r3
 8004472:	bf1c      	itt	ne
 8004474:	1a1b      	subne	r3, r3, r0
 8004476:	50a3      	strne	r3, [r4, r2]
 8004478:	e7af      	b.n	80043da <_malloc_r+0x22>
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	42a3      	cmp	r3, r4
 800447e:	bf0c      	ite	eq
 8004480:	f8c8 2000 	streq.w	r2, [r8]
 8004484:	605a      	strne	r2, [r3, #4]
 8004486:	e7eb      	b.n	8004460 <_malloc_r+0xa8>
 8004488:	4623      	mov	r3, r4
 800448a:	6864      	ldr	r4, [r4, #4]
 800448c:	e7ae      	b.n	80043ec <_malloc_r+0x34>
 800448e:	463c      	mov	r4, r7
 8004490:	687f      	ldr	r7, [r7, #4]
 8004492:	e7b6      	b.n	8004402 <_malloc_r+0x4a>
 8004494:	461a      	mov	r2, r3
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	42a3      	cmp	r3, r4
 800449a:	d1fb      	bne.n	8004494 <_malloc_r+0xdc>
 800449c:	2300      	movs	r3, #0
 800449e:	6053      	str	r3, [r2, #4]
 80044a0:	e7de      	b.n	8004460 <_malloc_r+0xa8>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f80c 	bl	80044c4 <__malloc_unlock>
 80044ac:	e794      	b.n	80043d8 <_malloc_r+0x20>
 80044ae:	6005      	str	r5, [r0, #0]
 80044b0:	e7d6      	b.n	8004460 <_malloc_r+0xa8>
 80044b2:	bf00      	nop
 80044b4:	2000019c 	.word	0x2000019c

080044b8 <__malloc_lock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	@ (80044c0 <__malloc_lock+0x8>)
 80044ba:	f000 ba9c 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 80044be:	bf00      	nop
 80044c0:	200002e0 	.word	0x200002e0

080044c4 <__malloc_unlock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	@ (80044cc <__malloc_unlock+0x8>)
 80044c6:	f000 ba97 	b.w	80049f8 <__retarget_lock_release_recursive>
 80044ca:	bf00      	nop
 80044cc:	200002e0 	.word	0x200002e0

080044d0 <std>:
 80044d0:	2300      	movs	r3, #0
 80044d2:	b510      	push	{r4, lr}
 80044d4:	4604      	mov	r4, r0
 80044d6:	e9c0 3300 	strd	r3, r3, [r0]
 80044da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044de:	6083      	str	r3, [r0, #8]
 80044e0:	8181      	strh	r1, [r0, #12]
 80044e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80044e4:	81c2      	strh	r2, [r0, #14]
 80044e6:	6183      	str	r3, [r0, #24]
 80044e8:	4619      	mov	r1, r3
 80044ea:	2208      	movs	r2, #8
 80044ec:	305c      	adds	r0, #92	@ 0x5c
 80044ee:	f000 f9f9 	bl	80048e4 <memset>
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <std+0x58>)
 80044f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <std+0x5c>)
 80044f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <std+0x60>)
 80044fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <std+0x64>)
 8004500:	6323      	str	r3, [r4, #48]	@ 0x30
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <std+0x68>)
 8004504:	6224      	str	r4, [r4, #32]
 8004506:	429c      	cmp	r4, r3
 8004508:	d006      	beq.n	8004518 <std+0x48>
 800450a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800450e:	4294      	cmp	r4, r2
 8004510:	d002      	beq.n	8004518 <std+0x48>
 8004512:	33d0      	adds	r3, #208	@ 0xd0
 8004514:	429c      	cmp	r4, r3
 8004516:	d105      	bne.n	8004524 <std+0x54>
 8004518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004520:	f000 ba68 	b.w	80049f4 <__retarget_lock_init_recursive>
 8004524:	bd10      	pop	{r4, pc}
 8004526:	bf00      	nop
 8004528:	08004735 	.word	0x08004735
 800452c:	08004757 	.word	0x08004757
 8004530:	0800478f 	.word	0x0800478f
 8004534:	080047b3 	.word	0x080047b3
 8004538:	200001a0 	.word	0x200001a0

0800453c <stdio_exit_handler>:
 800453c:	4a02      	ldr	r2, [pc, #8]	@ (8004548 <stdio_exit_handler+0xc>)
 800453e:	4903      	ldr	r1, [pc, #12]	@ (800454c <stdio_exit_handler+0x10>)
 8004540:	4803      	ldr	r0, [pc, #12]	@ (8004550 <stdio_exit_handler+0x14>)
 8004542:	f000 b869 	b.w	8004618 <_fwalk_sglue>
 8004546:	bf00      	nop
 8004548:	2000000c 	.word	0x2000000c
 800454c:	08005139 	.word	0x08005139
 8004550:	2000001c 	.word	0x2000001c

08004554 <cleanup_stdio>:
 8004554:	6841      	ldr	r1, [r0, #4]
 8004556:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <cleanup_stdio+0x34>)
 8004558:	4299      	cmp	r1, r3
 800455a:	b510      	push	{r4, lr}
 800455c:	4604      	mov	r4, r0
 800455e:	d001      	beq.n	8004564 <cleanup_stdio+0x10>
 8004560:	f000 fdea 	bl	8005138 <_fflush_r>
 8004564:	68a1      	ldr	r1, [r4, #8]
 8004566:	4b09      	ldr	r3, [pc, #36]	@ (800458c <cleanup_stdio+0x38>)
 8004568:	4299      	cmp	r1, r3
 800456a:	d002      	beq.n	8004572 <cleanup_stdio+0x1e>
 800456c:	4620      	mov	r0, r4
 800456e:	f000 fde3 	bl	8005138 <_fflush_r>
 8004572:	68e1      	ldr	r1, [r4, #12]
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <cleanup_stdio+0x3c>)
 8004576:	4299      	cmp	r1, r3
 8004578:	d004      	beq.n	8004584 <cleanup_stdio+0x30>
 800457a:	4620      	mov	r0, r4
 800457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004580:	f000 bdda 	b.w	8005138 <_fflush_r>
 8004584:	bd10      	pop	{r4, pc}
 8004586:	bf00      	nop
 8004588:	200001a0 	.word	0x200001a0
 800458c:	20000208 	.word	0x20000208
 8004590:	20000270 	.word	0x20000270

08004594 <global_stdio_init.part.0>:
 8004594:	b510      	push	{r4, lr}
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <global_stdio_init.part.0+0x30>)
 8004598:	4c0b      	ldr	r4, [pc, #44]	@ (80045c8 <global_stdio_init.part.0+0x34>)
 800459a:	4a0c      	ldr	r2, [pc, #48]	@ (80045cc <global_stdio_init.part.0+0x38>)
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	4620      	mov	r0, r4
 80045a0:	2200      	movs	r2, #0
 80045a2:	2104      	movs	r1, #4
 80045a4:	f7ff ff94 	bl	80044d0 <std>
 80045a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045ac:	2201      	movs	r2, #1
 80045ae:	2109      	movs	r1, #9
 80045b0:	f7ff ff8e 	bl	80044d0 <std>
 80045b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045b8:	2202      	movs	r2, #2
 80045ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045be:	2112      	movs	r1, #18
 80045c0:	f7ff bf86 	b.w	80044d0 <std>
 80045c4:	200002d8 	.word	0x200002d8
 80045c8:	200001a0 	.word	0x200001a0
 80045cc:	0800453d 	.word	0x0800453d

080045d0 <__sfp_lock_acquire>:
 80045d0:	4801      	ldr	r0, [pc, #4]	@ (80045d8 <__sfp_lock_acquire+0x8>)
 80045d2:	f000 ba10 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 80045d6:	bf00      	nop
 80045d8:	200002e1 	.word	0x200002e1

080045dc <__sfp_lock_release>:
 80045dc:	4801      	ldr	r0, [pc, #4]	@ (80045e4 <__sfp_lock_release+0x8>)
 80045de:	f000 ba0b 	b.w	80049f8 <__retarget_lock_release_recursive>
 80045e2:	bf00      	nop
 80045e4:	200002e1 	.word	0x200002e1

080045e8 <__sinit>:
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	f7ff fff0 	bl	80045d0 <__sfp_lock_acquire>
 80045f0:	6a23      	ldr	r3, [r4, #32]
 80045f2:	b11b      	cbz	r3, 80045fc <__sinit+0x14>
 80045f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f8:	f7ff bff0 	b.w	80045dc <__sfp_lock_release>
 80045fc:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <__sinit+0x28>)
 80045fe:	6223      	str	r3, [r4, #32]
 8004600:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <__sinit+0x2c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f5      	bne.n	80045f4 <__sinit+0xc>
 8004608:	f7ff ffc4 	bl	8004594 <global_stdio_init.part.0>
 800460c:	e7f2      	b.n	80045f4 <__sinit+0xc>
 800460e:	bf00      	nop
 8004610:	08004555 	.word	0x08004555
 8004614:	200002d8 	.word	0x200002d8

08004618 <_fwalk_sglue>:
 8004618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800461c:	4607      	mov	r7, r0
 800461e:	4688      	mov	r8, r1
 8004620:	4614      	mov	r4, r2
 8004622:	2600      	movs	r6, #0
 8004624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004628:	f1b9 0901 	subs.w	r9, r9, #1
 800462c:	d505      	bpl.n	800463a <_fwalk_sglue+0x22>
 800462e:	6824      	ldr	r4, [r4, #0]
 8004630:	2c00      	cmp	r4, #0
 8004632:	d1f7      	bne.n	8004624 <_fwalk_sglue+0xc>
 8004634:	4630      	mov	r0, r6
 8004636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800463a:	89ab      	ldrh	r3, [r5, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d907      	bls.n	8004650 <_fwalk_sglue+0x38>
 8004640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004644:	3301      	adds	r3, #1
 8004646:	d003      	beq.n	8004650 <_fwalk_sglue+0x38>
 8004648:	4629      	mov	r1, r5
 800464a:	4638      	mov	r0, r7
 800464c:	47c0      	blx	r8
 800464e:	4306      	orrs	r6, r0
 8004650:	3568      	adds	r5, #104	@ 0x68
 8004652:	e7e9      	b.n	8004628 <_fwalk_sglue+0x10>

08004654 <iprintf>:
 8004654:	b40f      	push	{r0, r1, r2, r3}
 8004656:	b507      	push	{r0, r1, r2, lr}
 8004658:	4906      	ldr	r1, [pc, #24]	@ (8004674 <iprintf+0x20>)
 800465a:	ab04      	add	r3, sp, #16
 800465c:	6808      	ldr	r0, [r1, #0]
 800465e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004662:	6881      	ldr	r1, [r0, #8]
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	f000 fa3d 	bl	8004ae4 <_vfiprintf_r>
 800466a:	b003      	add	sp, #12
 800466c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	20000018 	.word	0x20000018

08004678 <_puts_r>:
 8004678:	6a03      	ldr	r3, [r0, #32]
 800467a:	b570      	push	{r4, r5, r6, lr}
 800467c:	6884      	ldr	r4, [r0, #8]
 800467e:	4605      	mov	r5, r0
 8004680:	460e      	mov	r6, r1
 8004682:	b90b      	cbnz	r3, 8004688 <_puts_r+0x10>
 8004684:	f7ff ffb0 	bl	80045e8 <__sinit>
 8004688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800468a:	07db      	lsls	r3, r3, #31
 800468c:	d405      	bmi.n	800469a <_puts_r+0x22>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	0598      	lsls	r0, r3, #22
 8004692:	d402      	bmi.n	800469a <_puts_r+0x22>
 8004694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004696:	f000 f9ae 	bl	80049f6 <__retarget_lock_acquire_recursive>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	0719      	lsls	r1, r3, #28
 800469e:	d502      	bpl.n	80046a6 <_puts_r+0x2e>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d135      	bne.n	8004712 <_puts_r+0x9a>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f8c5 	bl	8004838 <__swsetup_r>
 80046ae:	b380      	cbz	r0, 8004712 <_puts_r+0x9a>
 80046b0:	f04f 35ff 	mov.w	r5, #4294967295
 80046b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046b6:	07da      	lsls	r2, r3, #31
 80046b8:	d405      	bmi.n	80046c6 <_puts_r+0x4e>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	059b      	lsls	r3, r3, #22
 80046be:	d402      	bmi.n	80046c6 <_puts_r+0x4e>
 80046c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046c2:	f000 f999 	bl	80049f8 <__retarget_lock_release_recursive>
 80046c6:	4628      	mov	r0, r5
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da04      	bge.n	80046d8 <_puts_r+0x60>
 80046ce:	69a2      	ldr	r2, [r4, #24]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dc17      	bgt.n	8004704 <_puts_r+0x8c>
 80046d4:	290a      	cmp	r1, #10
 80046d6:	d015      	beq.n	8004704 <_puts_r+0x8c>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	7019      	strb	r1, [r3, #0]
 80046e0:	68a3      	ldr	r3, [r4, #8]
 80046e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046e6:	3b01      	subs	r3, #1
 80046e8:	60a3      	str	r3, [r4, #8]
 80046ea:	2900      	cmp	r1, #0
 80046ec:	d1ed      	bne.n	80046ca <_puts_r+0x52>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da11      	bge.n	8004716 <_puts_r+0x9e>
 80046f2:	4622      	mov	r2, r4
 80046f4:	210a      	movs	r1, #10
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f85f 	bl	80047ba <__swbuf_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0d7      	beq.n	80046b0 <_puts_r+0x38>
 8004700:	250a      	movs	r5, #10
 8004702:	e7d7      	b.n	80046b4 <_puts_r+0x3c>
 8004704:	4622      	mov	r2, r4
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f857 	bl	80047ba <__swbuf_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d1e7      	bne.n	80046e0 <_puts_r+0x68>
 8004710:	e7ce      	b.n	80046b0 <_puts_r+0x38>
 8004712:	3e01      	subs	r6, #1
 8004714:	e7e4      	b.n	80046e0 <_puts_r+0x68>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	220a      	movs	r2, #10
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e7ee      	b.n	8004700 <_puts_r+0x88>
	...

08004724 <puts>:
 8004724:	4b02      	ldr	r3, [pc, #8]	@ (8004730 <puts+0xc>)
 8004726:	4601      	mov	r1, r0
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	f7ff bfa5 	b.w	8004678 <_puts_r>
 800472e:	bf00      	nop
 8004730:	20000018 	.word	0x20000018

08004734 <__sread>:
 8004734:	b510      	push	{r4, lr}
 8004736:	460c      	mov	r4, r1
 8004738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473c:	f000 f8fc 	bl	8004938 <_read_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	bfab      	itete	ge
 8004744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004746:	89a3      	ldrhlt	r3, [r4, #12]
 8004748:	181b      	addge	r3, r3, r0
 800474a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800474e:	bfac      	ite	ge
 8004750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004752:	81a3      	strhlt	r3, [r4, #12]
 8004754:	bd10      	pop	{r4, pc}

08004756 <__swrite>:
 8004756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	461f      	mov	r7, r3
 800475c:	898b      	ldrh	r3, [r1, #12]
 800475e:	05db      	lsls	r3, r3, #23
 8004760:	4605      	mov	r5, r0
 8004762:	460c      	mov	r4, r1
 8004764:	4616      	mov	r6, r2
 8004766:	d505      	bpl.n	8004774 <__swrite+0x1e>
 8004768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476c:	2302      	movs	r3, #2
 800476e:	2200      	movs	r2, #0
 8004770:	f000 f8d0 	bl	8004914 <_lseek_r>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	4628      	mov	r0, r5
 8004786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	f000 b8f7 	b.w	800497c <_write_r>

0800478e <__sseek>:
 800478e:	b510      	push	{r4, lr}
 8004790:	460c      	mov	r4, r1
 8004792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004796:	f000 f8bd 	bl	8004914 <_lseek_r>
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	bf15      	itete	ne
 80047a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047aa:	81a3      	strheq	r3, [r4, #12]
 80047ac:	bf18      	it	ne
 80047ae:	81a3      	strhne	r3, [r4, #12]
 80047b0:	bd10      	pop	{r4, pc}

080047b2 <__sclose>:
 80047b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b6:	f000 b89d 	b.w	80048f4 <_close_r>

080047ba <__swbuf_r>:
 80047ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047bc:	460e      	mov	r6, r1
 80047be:	4614      	mov	r4, r2
 80047c0:	4605      	mov	r5, r0
 80047c2:	b118      	cbz	r0, 80047cc <__swbuf_r+0x12>
 80047c4:	6a03      	ldr	r3, [r0, #32]
 80047c6:	b90b      	cbnz	r3, 80047cc <__swbuf_r+0x12>
 80047c8:	f7ff ff0e 	bl	80045e8 <__sinit>
 80047cc:	69a3      	ldr	r3, [r4, #24]
 80047ce:	60a3      	str	r3, [r4, #8]
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	071a      	lsls	r2, r3, #28
 80047d4:	d501      	bpl.n	80047da <__swbuf_r+0x20>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	b943      	cbnz	r3, 80047ec <__swbuf_r+0x32>
 80047da:	4621      	mov	r1, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 f82b 	bl	8004838 <__swsetup_r>
 80047e2:	b118      	cbz	r0, 80047ec <__swbuf_r+0x32>
 80047e4:	f04f 37ff 	mov.w	r7, #4294967295
 80047e8:	4638      	mov	r0, r7
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	6922      	ldr	r2, [r4, #16]
 80047f0:	1a98      	subs	r0, r3, r2
 80047f2:	6963      	ldr	r3, [r4, #20]
 80047f4:	b2f6      	uxtb	r6, r6
 80047f6:	4283      	cmp	r3, r0
 80047f8:	4637      	mov	r7, r6
 80047fa:	dc05      	bgt.n	8004808 <__swbuf_r+0x4e>
 80047fc:	4621      	mov	r1, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 fc9a 	bl	8005138 <_fflush_r>
 8004804:	2800      	cmp	r0, #0
 8004806:	d1ed      	bne.n	80047e4 <__swbuf_r+0x2a>
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	60a3      	str	r3, [r4, #8]
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	701e      	strb	r6, [r3, #0]
 8004816:	6962      	ldr	r2, [r4, #20]
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	429a      	cmp	r2, r3
 800481c:	d004      	beq.n	8004828 <__swbuf_r+0x6e>
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	07db      	lsls	r3, r3, #31
 8004822:	d5e1      	bpl.n	80047e8 <__swbuf_r+0x2e>
 8004824:	2e0a      	cmp	r6, #10
 8004826:	d1df      	bne.n	80047e8 <__swbuf_r+0x2e>
 8004828:	4621      	mov	r1, r4
 800482a:	4628      	mov	r0, r5
 800482c:	f000 fc84 	bl	8005138 <_fflush_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	d0d9      	beq.n	80047e8 <__swbuf_r+0x2e>
 8004834:	e7d6      	b.n	80047e4 <__swbuf_r+0x2a>
	...

08004838 <__swsetup_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <__swsetup_r+0xa8>)
 800483c:	4605      	mov	r5, r0
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	460c      	mov	r4, r1
 8004842:	b118      	cbz	r0, 800484c <__swsetup_r+0x14>
 8004844:	6a03      	ldr	r3, [r0, #32]
 8004846:	b90b      	cbnz	r3, 800484c <__swsetup_r+0x14>
 8004848:	f7ff fece 	bl	80045e8 <__sinit>
 800484c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004850:	0719      	lsls	r1, r3, #28
 8004852:	d422      	bmi.n	800489a <__swsetup_r+0x62>
 8004854:	06da      	lsls	r2, r3, #27
 8004856:	d407      	bmi.n	8004868 <__swsetup_r+0x30>
 8004858:	2209      	movs	r2, #9
 800485a:	602a      	str	r2, [r5, #0]
 800485c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	e033      	b.n	80048d0 <__swsetup_r+0x98>
 8004868:	0758      	lsls	r0, r3, #29
 800486a:	d512      	bpl.n	8004892 <__swsetup_r+0x5a>
 800486c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800486e:	b141      	cbz	r1, 8004882 <__swsetup_r+0x4a>
 8004870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004874:	4299      	cmp	r1, r3
 8004876:	d002      	beq.n	800487e <__swsetup_r+0x46>
 8004878:	4628      	mov	r0, r5
 800487a:	f000 f8bf 	bl	80049fc <_free_r>
 800487e:	2300      	movs	r3, #0
 8004880:	6363      	str	r3, [r4, #52]	@ 0x34
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	b94b      	cbnz	r3, 80048b2 <__swsetup_r+0x7a>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a8:	d003      	beq.n	80048b2 <__swsetup_r+0x7a>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 fc91 	bl	80051d4 <__smakebuf_r>
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	f013 0201 	ands.w	r2, r3, #1
 80048ba:	d00a      	beq.n	80048d2 <__swsetup_r+0x9a>
 80048bc:	2200      	movs	r2, #0
 80048be:	60a2      	str	r2, [r4, #8]
 80048c0:	6962      	ldr	r2, [r4, #20]
 80048c2:	4252      	negs	r2, r2
 80048c4:	61a2      	str	r2, [r4, #24]
 80048c6:	6922      	ldr	r2, [r4, #16]
 80048c8:	b942      	cbnz	r2, 80048dc <__swsetup_r+0xa4>
 80048ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048ce:	d1c5      	bne.n	800485c <__swsetup_r+0x24>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	0799      	lsls	r1, r3, #30
 80048d4:	bf58      	it	pl
 80048d6:	6962      	ldrpl	r2, [r4, #20]
 80048d8:	60a2      	str	r2, [r4, #8]
 80048da:	e7f4      	b.n	80048c6 <__swsetup_r+0x8e>
 80048dc:	2000      	movs	r0, #0
 80048de:	e7f7      	b.n	80048d0 <__swsetup_r+0x98>
 80048e0:	20000018 	.word	0x20000018

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <_close_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d06      	ldr	r5, [pc, #24]	@ (8004910 <_close_r+0x1c>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	f7fc f9ed 	bl	8000cde <_close>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_close_r+0x1a>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_close_r+0x1a>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200002dc 	.word	0x200002dc

08004914 <_lseek_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	@ (8004934 <_lseek_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc fa02 	bl	8000d2c <_lseek>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_lseek_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_lseek_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	200002dc 	.word	0x200002dc

08004938 <_read_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4d07      	ldr	r5, [pc, #28]	@ (8004958 <_read_r+0x20>)
 800493c:	4604      	mov	r4, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	2200      	movs	r2, #0
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fc f990 	bl	8000c6c <_read>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_read_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_read_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	200002dc 	.word	0x200002dc

0800495c <_sbrk_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d06      	ldr	r5, [pc, #24]	@ (8004978 <_sbrk_r+0x1c>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	f7fc f9ee 	bl	8000d48 <_sbrk>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_sbrk_r+0x1a>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_sbrk_r+0x1a>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	200002dc 	.word	0x200002dc

0800497c <_write_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d07      	ldr	r5, [pc, #28]	@ (800499c <_write_r+0x20>)
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	2200      	movs	r2, #0
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f7fc f98b 	bl	8000ca6 <_write>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_write_r+0x1e>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_write_r+0x1e>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	200002dc 	.word	0x200002dc

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	@ (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000018 	.word	0x20000018

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	@ (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	@ (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	@ (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	@ (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 fc66 	bl	8005290 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005350 	.word	0x08005350
 80049e8:	08005350 	.word	0x08005350
 80049ec:	08005350 	.word	0x08005350
 80049f0:	08005354 	.word	0x08005354

080049f4 <__retarget_lock_init_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_acquire_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_release_recursive>:
 80049f8:	4770      	bx	lr
	...

080049fc <_free_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4605      	mov	r5, r0
 8004a00:	2900      	cmp	r1, #0
 8004a02:	d041      	beq.n	8004a88 <_free_r+0x8c>
 8004a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a08:	1f0c      	subs	r4, r1, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bfb8      	it	lt
 8004a0e:	18e4      	addlt	r4, r4, r3
 8004a10:	f7ff fd52 	bl	80044b8 <__malloc_lock>
 8004a14:	4a1d      	ldr	r2, [pc, #116]	@ (8004a8c <_free_r+0x90>)
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	b933      	cbnz	r3, 8004a28 <_free_r+0x2c>
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	6014      	str	r4, [r2, #0]
 8004a1e:	4628      	mov	r0, r5
 8004a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a24:	f7ff bd4e 	b.w	80044c4 <__malloc_unlock>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d908      	bls.n	8004a3e <_free_r+0x42>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	1821      	adds	r1, r4, r0
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf01      	itttt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	1809      	addeq	r1, r1, r0
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	e7ed      	b.n	8004a1a <_free_r+0x1e>
 8004a3e:	461a      	mov	r2, r3
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b10b      	cbz	r3, 8004a48 <_free_r+0x4c>
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d9fa      	bls.n	8004a3e <_free_r+0x42>
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	1850      	adds	r0, r2, r1
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d10b      	bne.n	8004a68 <_free_r+0x6c>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	4401      	add	r1, r0
 8004a54:	1850      	adds	r0, r2, r1
 8004a56:	4283      	cmp	r3, r0
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	d1e0      	bne.n	8004a1e <_free_r+0x22>
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6053      	str	r3, [r2, #4]
 8004a62:	4408      	add	r0, r1
 8004a64:	6010      	str	r0, [r2, #0]
 8004a66:	e7da      	b.n	8004a1e <_free_r+0x22>
 8004a68:	d902      	bls.n	8004a70 <_free_r+0x74>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	e7d6      	b.n	8004a1e <_free_r+0x22>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	1821      	adds	r1, r4, r0
 8004a74:	428b      	cmp	r3, r1
 8004a76:	bf04      	itt	eq
 8004a78:	6819      	ldreq	r1, [r3, #0]
 8004a7a:	685b      	ldreq	r3, [r3, #4]
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	bf04      	itt	eq
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	6054      	str	r4, [r2, #4]
 8004a86:	e7ca      	b.n	8004a1e <_free_r+0x22>
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	2000019c 	.word	0x2000019c

08004a90 <__sfputc_r>:
 8004a90:	6893      	ldr	r3, [r2, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	b410      	push	{r4}
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	da08      	bge.n	8004aae <__sfputc_r+0x1e>
 8004a9c:	6994      	ldr	r4, [r2, #24]
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	db01      	blt.n	8004aa6 <__sfputc_r+0x16>
 8004aa2:	290a      	cmp	r1, #10
 8004aa4:	d103      	bne.n	8004aae <__sfputc_r+0x1e>
 8004aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aaa:	f7ff be86 	b.w	80047ba <__swbuf_r>
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	1c58      	adds	r0, r3, #1
 8004ab2:	6010      	str	r0, [r2, #0]
 8004ab4:	7019      	strb	r1, [r3, #0]
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <__sfputs_r>:
 8004abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	18d5      	adds	r5, r2, r3
 8004ac8:	42ac      	cmp	r4, r5
 8004aca:	d101      	bne.n	8004ad0 <__sfputs_r+0x12>
 8004acc:	2000      	movs	r0, #0
 8004ace:	e007      	b.n	8004ae0 <__sfputs_r+0x22>
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	463a      	mov	r2, r7
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f7ff ffda 	bl	8004a90 <__sfputc_r>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d1f3      	bne.n	8004ac8 <__sfputs_r+0xa>
 8004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ae4 <_vfiprintf_r>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	460d      	mov	r5, r1
 8004aea:	b09d      	sub	sp, #116	@ 0x74
 8004aec:	4614      	mov	r4, r2
 8004aee:	4698      	mov	r8, r3
 8004af0:	4606      	mov	r6, r0
 8004af2:	b118      	cbz	r0, 8004afc <_vfiprintf_r+0x18>
 8004af4:	6a03      	ldr	r3, [r0, #32]
 8004af6:	b90b      	cbnz	r3, 8004afc <_vfiprintf_r+0x18>
 8004af8:	f7ff fd76 	bl	80045e8 <__sinit>
 8004afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004afe:	07d9      	lsls	r1, r3, #31
 8004b00:	d405      	bmi.n	8004b0e <_vfiprintf_r+0x2a>
 8004b02:	89ab      	ldrh	r3, [r5, #12]
 8004b04:	059a      	lsls	r2, r3, #22
 8004b06:	d402      	bmi.n	8004b0e <_vfiprintf_r+0x2a>
 8004b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b0a:	f7ff ff74 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004b0e:	89ab      	ldrh	r3, [r5, #12]
 8004b10:	071b      	lsls	r3, r3, #28
 8004b12:	d501      	bpl.n	8004b18 <_vfiprintf_r+0x34>
 8004b14:	692b      	ldr	r3, [r5, #16]
 8004b16:	b99b      	cbnz	r3, 8004b40 <_vfiprintf_r+0x5c>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff fe8c 	bl	8004838 <__swsetup_r>
 8004b20:	b170      	cbz	r0, 8004b40 <_vfiprintf_r+0x5c>
 8004b22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b24:	07dc      	lsls	r4, r3, #31
 8004b26:	d504      	bpl.n	8004b32 <_vfiprintf_r+0x4e>
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	b01d      	add	sp, #116	@ 0x74
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b32:	89ab      	ldrh	r3, [r5, #12]
 8004b34:	0598      	lsls	r0, r3, #22
 8004b36:	d4f7      	bmi.n	8004b28 <_vfiprintf_r+0x44>
 8004b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b3a:	f7ff ff5d 	bl	80049f8 <__retarget_lock_release_recursive>
 8004b3e:	e7f3      	b.n	8004b28 <_vfiprintf_r+0x44>
 8004b40:	2300      	movs	r3, #0
 8004b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b44:	2320      	movs	r3, #32
 8004b46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4e:	2330      	movs	r3, #48	@ 0x30
 8004b50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d00 <_vfiprintf_r+0x21c>
 8004b54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b58:	f04f 0901 	mov.w	r9, #1
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	469a      	mov	sl, r3
 8004b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b64:	b10a      	cbz	r2, 8004b6a <_vfiprintf_r+0x86>
 8004b66:	2a25      	cmp	r2, #37	@ 0x25
 8004b68:	d1f9      	bne.n	8004b5e <_vfiprintf_r+0x7a>
 8004b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6e:	d00b      	beq.n	8004b88 <_vfiprintf_r+0xa4>
 8004b70:	465b      	mov	r3, fp
 8004b72:	4622      	mov	r2, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff ffa1 	bl	8004abe <__sfputs_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f000 80a7 	beq.w	8004cd0 <_vfiprintf_r+0x1ec>
 8004b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b84:	445a      	add	r2, fp
 8004b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b88:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 809f 	beq.w	8004cd0 <_vfiprintf_r+0x1ec>
 8004b92:	2300      	movs	r3, #0
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b9c:	f10a 0a01 	add.w	sl, sl, #1
 8004ba0:	9304      	str	r3, [sp, #16]
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ba8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004baa:	4654      	mov	r4, sl
 8004bac:	2205      	movs	r2, #5
 8004bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb2:	4853      	ldr	r0, [pc, #332]	@ (8004d00 <_vfiprintf_r+0x21c>)
 8004bb4:	f7fb fb2c 	bl	8000210 <memchr>
 8004bb8:	9a04      	ldr	r2, [sp, #16]
 8004bba:	b9d8      	cbnz	r0, 8004bf4 <_vfiprintf_r+0x110>
 8004bbc:	06d1      	lsls	r1, r2, #27
 8004bbe:	bf44      	itt	mi
 8004bc0:	2320      	movmi	r3, #32
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc6:	0713      	lsls	r3, r2, #28
 8004bc8:	bf44      	itt	mi
 8004bca:	232b      	movmi	r3, #43	@ 0x2b
 8004bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd6:	d015      	beq.n	8004c04 <_vfiprintf_r+0x120>
 8004bd8:	9a07      	ldr	r2, [sp, #28]
 8004bda:	4654      	mov	r4, sl
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f04f 0c0a 	mov.w	ip, #10
 8004be2:	4621      	mov	r1, r4
 8004be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be8:	3b30      	subs	r3, #48	@ 0x30
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d94b      	bls.n	8004c86 <_vfiprintf_r+0x1a2>
 8004bee:	b1b0      	cbz	r0, 8004c1e <_vfiprintf_r+0x13a>
 8004bf0:	9207      	str	r2, [sp, #28]
 8004bf2:	e014      	b.n	8004c1e <_vfiprintf_r+0x13a>
 8004bf4:	eba0 0308 	sub.w	r3, r0, r8
 8004bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	46a2      	mov	sl, r4
 8004c02:	e7d2      	b.n	8004baa <_vfiprintf_r+0xc6>
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	1d19      	adds	r1, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	9103      	str	r1, [sp, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bfbb      	ittet	lt
 8004c10:	425b      	neglt	r3, r3
 8004c12:	f042 0202 	orrlt.w	r2, r2, #2
 8004c16:	9307      	strge	r3, [sp, #28]
 8004c18:	9307      	strlt	r3, [sp, #28]
 8004c1a:	bfb8      	it	lt
 8004c1c:	9204      	strlt	r2, [sp, #16]
 8004c1e:	7823      	ldrb	r3, [r4, #0]
 8004c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c22:	d10a      	bne.n	8004c3a <_vfiprintf_r+0x156>
 8004c24:	7863      	ldrb	r3, [r4, #1]
 8004c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c28:	d132      	bne.n	8004c90 <_vfiprintf_r+0x1ac>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	9203      	str	r2, [sp, #12]
 8004c32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c36:	3402      	adds	r4, #2
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d10 <_vfiprintf_r+0x22c>
 8004c3e:	7821      	ldrb	r1, [r4, #0]
 8004c40:	2203      	movs	r2, #3
 8004c42:	4650      	mov	r0, sl
 8004c44:	f7fb fae4 	bl	8000210 <memchr>
 8004c48:	b138      	cbz	r0, 8004c5a <_vfiprintf_r+0x176>
 8004c4a:	9b04      	ldr	r3, [sp, #16]
 8004c4c:	eba0 000a 	sub.w	r0, r0, sl
 8004c50:	2240      	movs	r2, #64	@ 0x40
 8004c52:	4082      	lsls	r2, r0
 8004c54:	4313      	orrs	r3, r2
 8004c56:	3401      	adds	r4, #1
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5e:	4829      	ldr	r0, [pc, #164]	@ (8004d04 <_vfiprintf_r+0x220>)
 8004c60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c64:	2206      	movs	r2, #6
 8004c66:	f7fb fad3 	bl	8000210 <memchr>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d03f      	beq.n	8004cee <_vfiprintf_r+0x20a>
 8004c6e:	4b26      	ldr	r3, [pc, #152]	@ (8004d08 <_vfiprintf_r+0x224>)
 8004c70:	bb1b      	cbnz	r3, 8004cba <_vfiprintf_r+0x1d6>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	3307      	adds	r3, #7
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	9303      	str	r3, [sp, #12]
 8004c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c80:	443b      	add	r3, r7
 8004c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c84:	e76a      	b.n	8004b5c <_vfiprintf_r+0x78>
 8004c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	e7a8      	b.n	8004be2 <_vfiprintf_r+0xfe>
 8004c90:	2300      	movs	r3, #0
 8004c92:	3401      	adds	r4, #1
 8004c94:	9305      	str	r3, [sp, #20]
 8004c96:	4619      	mov	r1, r3
 8004c98:	f04f 0c0a 	mov.w	ip, #10
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca2:	3a30      	subs	r2, #48	@ 0x30
 8004ca4:	2a09      	cmp	r2, #9
 8004ca6:	d903      	bls.n	8004cb0 <_vfiprintf_r+0x1cc>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0c6      	beq.n	8004c3a <_vfiprintf_r+0x156>
 8004cac:	9105      	str	r1, [sp, #20]
 8004cae:	e7c4      	b.n	8004c3a <_vfiprintf_r+0x156>
 8004cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e7f0      	b.n	8004c9c <_vfiprintf_r+0x1b8>
 8004cba:	ab03      	add	r3, sp, #12
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	4b12      	ldr	r3, [pc, #72]	@ (8004d0c <_vfiprintf_r+0x228>)
 8004cc2:	a904      	add	r1, sp, #16
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f3af 8000 	nop.w
 8004cca:	4607      	mov	r7, r0
 8004ccc:	1c78      	adds	r0, r7, #1
 8004cce:	d1d6      	bne.n	8004c7e <_vfiprintf_r+0x19a>
 8004cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd2:	07d9      	lsls	r1, r3, #31
 8004cd4:	d405      	bmi.n	8004ce2 <_vfiprintf_r+0x1fe>
 8004cd6:	89ab      	ldrh	r3, [r5, #12]
 8004cd8:	059a      	lsls	r2, r3, #22
 8004cda:	d402      	bmi.n	8004ce2 <_vfiprintf_r+0x1fe>
 8004cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cde:	f7ff fe8b 	bl	80049f8 <__retarget_lock_release_recursive>
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	065b      	lsls	r3, r3, #25
 8004ce6:	f53f af1f 	bmi.w	8004b28 <_vfiprintf_r+0x44>
 8004cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cec:	e71e      	b.n	8004b2c <_vfiprintf_r+0x48>
 8004cee:	ab03      	add	r3, sp, #12
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <_vfiprintf_r+0x228>)
 8004cf6:	a904      	add	r1, sp, #16
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 f879 	bl	8004df0 <_printf_i>
 8004cfe:	e7e4      	b.n	8004cca <_vfiprintf_r+0x1e6>
 8004d00:	08005314 	.word	0x08005314
 8004d04:	0800531e 	.word	0x0800531e
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	08004abf 	.word	0x08004abf
 8004d10:	0800531a 	.word	0x0800531a

08004d14 <_printf_common>:
 8004d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	4616      	mov	r6, r2
 8004d1a:	4698      	mov	r8, r3
 8004d1c:	688a      	ldr	r2, [r1, #8]
 8004d1e:	690b      	ldr	r3, [r1, #16]
 8004d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d24:	4293      	cmp	r3, r2
 8004d26:	bfb8      	it	lt
 8004d28:	4613      	movlt	r3, r2
 8004d2a:	6033      	str	r3, [r6, #0]
 8004d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d30:	4607      	mov	r7, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	b10a      	cbz	r2, 8004d3a <_printf_common+0x26>
 8004d36:	3301      	adds	r3, #1
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	0699      	lsls	r1, r3, #26
 8004d3e:	bf42      	ittt	mi
 8004d40:	6833      	ldrmi	r3, [r6, #0]
 8004d42:	3302      	addmi	r3, #2
 8004d44:	6033      	strmi	r3, [r6, #0]
 8004d46:	6825      	ldr	r5, [r4, #0]
 8004d48:	f015 0506 	ands.w	r5, r5, #6
 8004d4c:	d106      	bne.n	8004d5c <_printf_common+0x48>
 8004d4e:	f104 0a19 	add.w	sl, r4, #25
 8004d52:	68e3      	ldr	r3, [r4, #12]
 8004d54:	6832      	ldr	r2, [r6, #0]
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	dc26      	bgt.n	8004daa <_printf_common+0x96>
 8004d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	3b00      	subs	r3, #0
 8004d64:	bf18      	it	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	0692      	lsls	r2, r2, #26
 8004d6a:	d42b      	bmi.n	8004dc4 <_printf_common+0xb0>
 8004d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d70:	4641      	mov	r1, r8
 8004d72:	4638      	mov	r0, r7
 8004d74:	47c8      	blx	r9
 8004d76:	3001      	adds	r0, #1
 8004d78:	d01e      	beq.n	8004db8 <_printf_common+0xa4>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	6922      	ldr	r2, [r4, #16]
 8004d7e:	f003 0306 	and.w	r3, r3, #6
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	bf02      	ittt	eq
 8004d86:	68e5      	ldreq	r5, [r4, #12]
 8004d88:	6833      	ldreq	r3, [r6, #0]
 8004d8a:	1aed      	subeq	r5, r5, r3
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	bf0c      	ite	eq
 8004d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d94:	2500      	movne	r5, #0
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bfc4      	itt	gt
 8004d9a:	1a9b      	subgt	r3, r3, r2
 8004d9c:	18ed      	addgt	r5, r5, r3
 8004d9e:	2600      	movs	r6, #0
 8004da0:	341a      	adds	r4, #26
 8004da2:	42b5      	cmp	r5, r6
 8004da4:	d11a      	bne.n	8004ddc <_printf_common+0xc8>
 8004da6:	2000      	movs	r0, #0
 8004da8:	e008      	b.n	8004dbc <_printf_common+0xa8>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4652      	mov	r2, sl
 8004dae:	4641      	mov	r1, r8
 8004db0:	4638      	mov	r0, r7
 8004db2:	47c8      	blx	r9
 8004db4:	3001      	adds	r0, #1
 8004db6:	d103      	bne.n	8004dc0 <_printf_common+0xac>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc0:	3501      	adds	r5, #1
 8004dc2:	e7c6      	b.n	8004d52 <_printf_common+0x3e>
 8004dc4:	18e1      	adds	r1, r4, r3
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	2030      	movs	r0, #48	@ 0x30
 8004dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dce:	4422      	add	r2, r4
 8004dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dd8:	3302      	adds	r3, #2
 8004dda:	e7c7      	b.n	8004d6c <_printf_common+0x58>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4622      	mov	r2, r4
 8004de0:	4641      	mov	r1, r8
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c8      	blx	r9
 8004de6:	3001      	adds	r0, #1
 8004de8:	d0e6      	beq.n	8004db8 <_printf_common+0xa4>
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7d9      	b.n	8004da2 <_printf_common+0x8e>
	...

08004df0 <_printf_i>:
 8004df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	7e0f      	ldrb	r7, [r1, #24]
 8004df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004df8:	2f78      	cmp	r7, #120	@ 0x78
 8004dfa:	4691      	mov	r9, r2
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	469a      	mov	sl, r3
 8004e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e06:	d807      	bhi.n	8004e18 <_printf_i+0x28>
 8004e08:	2f62      	cmp	r7, #98	@ 0x62
 8004e0a:	d80a      	bhi.n	8004e22 <_printf_i+0x32>
 8004e0c:	2f00      	cmp	r7, #0
 8004e0e:	f000 80d2 	beq.w	8004fb6 <_printf_i+0x1c6>
 8004e12:	2f58      	cmp	r7, #88	@ 0x58
 8004e14:	f000 80b9 	beq.w	8004f8a <_printf_i+0x19a>
 8004e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e20:	e03a      	b.n	8004e98 <_printf_i+0xa8>
 8004e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e26:	2b15      	cmp	r3, #21
 8004e28:	d8f6      	bhi.n	8004e18 <_printf_i+0x28>
 8004e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e30 <_printf_i+0x40>)
 8004e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	08004e9d 	.word	0x08004e9d
 8004e38:	08004e19 	.word	0x08004e19
 8004e3c:	08004e19 	.word	0x08004e19
 8004e40:	08004e19 	.word	0x08004e19
 8004e44:	08004e19 	.word	0x08004e19
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08004e19 	.word	0x08004e19
 8004e50:	08004e19 	.word	0x08004e19
 8004e54:	08004e19 	.word	0x08004e19
 8004e58:	08004e19 	.word	0x08004e19
 8004e5c:	08004f9d 	.word	0x08004f9d
 8004e60:	08004ec7 	.word	0x08004ec7
 8004e64:	08004f57 	.word	0x08004f57
 8004e68:	08004e19 	.word	0x08004e19
 8004e6c:	08004e19 	.word	0x08004e19
 8004e70:	08004fbf 	.word	0x08004fbf
 8004e74:	08004e19 	.word	0x08004e19
 8004e78:	08004ec7 	.word	0x08004ec7
 8004e7c:	08004e19 	.word	0x08004e19
 8004e80:	08004e19 	.word	0x08004e19
 8004e84:	08004f5f 	.word	0x08004f5f
 8004e88:	6833      	ldr	r3, [r6, #0]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6032      	str	r2, [r6, #0]
 8004e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e09d      	b.n	8004fd8 <_printf_i+0x1e8>
 8004e9c:	6833      	ldr	r3, [r6, #0]
 8004e9e:	6820      	ldr	r0, [r4, #0]
 8004ea0:	1d19      	adds	r1, r3, #4
 8004ea2:	6031      	str	r1, [r6, #0]
 8004ea4:	0606      	lsls	r6, r0, #24
 8004ea6:	d501      	bpl.n	8004eac <_printf_i+0xbc>
 8004ea8:	681d      	ldr	r5, [r3, #0]
 8004eaa:	e003      	b.n	8004eb4 <_printf_i+0xc4>
 8004eac:	0645      	lsls	r5, r0, #25
 8004eae:	d5fb      	bpl.n	8004ea8 <_printf_i+0xb8>
 8004eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	da03      	bge.n	8004ec0 <_printf_i+0xd0>
 8004eb8:	232d      	movs	r3, #45	@ 0x2d
 8004eba:	426d      	negs	r5, r5
 8004ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec0:	4859      	ldr	r0, [pc, #356]	@ (8005028 <_printf_i+0x238>)
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e011      	b.n	8004eea <_printf_i+0xfa>
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	0608      	lsls	r0, r1, #24
 8004ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ed0:	d402      	bmi.n	8004ed8 <_printf_i+0xe8>
 8004ed2:	0649      	lsls	r1, r1, #25
 8004ed4:	bf48      	it	mi
 8004ed6:	b2ad      	uxthmi	r5, r5
 8004ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eda:	4853      	ldr	r0, [pc, #332]	@ (8005028 <_printf_i+0x238>)
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	bf14      	ite	ne
 8004ee0:	230a      	movne	r3, #10
 8004ee2:	2308      	moveq	r3, #8
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eea:	6866      	ldr	r6, [r4, #4]
 8004eec:	60a6      	str	r6, [r4, #8]
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	bfa2      	ittt	ge
 8004ef2:	6821      	ldrge	r1, [r4, #0]
 8004ef4:	f021 0104 	bicge.w	r1, r1, #4
 8004ef8:	6021      	strge	r1, [r4, #0]
 8004efa:	b90d      	cbnz	r5, 8004f00 <_printf_i+0x110>
 8004efc:	2e00      	cmp	r6, #0
 8004efe:	d04b      	beq.n	8004f98 <_printf_i+0x1a8>
 8004f00:	4616      	mov	r6, r2
 8004f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f06:	fb03 5711 	mls	r7, r3, r1, r5
 8004f0a:	5dc7      	ldrb	r7, [r0, r7]
 8004f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f10:	462f      	mov	r7, r5
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	460d      	mov	r5, r1
 8004f16:	d9f4      	bls.n	8004f02 <_printf_i+0x112>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10b      	bne.n	8004f34 <_printf_i+0x144>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07df      	lsls	r7, r3, #31
 8004f20:	d508      	bpl.n	8004f34 <_printf_i+0x144>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	bfde      	ittt	le
 8004f2a:	2330      	movle	r3, #48	@ 0x30
 8004f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f34:	1b92      	subs	r2, r2, r6
 8004f36:	6122      	str	r2, [r4, #16]
 8004f38:	f8cd a000 	str.w	sl, [sp]
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	aa03      	add	r2, sp, #12
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fee6 	bl	8004d14 <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d14a      	bne.n	8004fe2 <_printf_i+0x1f2>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b004      	add	sp, #16
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f043 0320 	orr.w	r3, r3, #32
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	4833      	ldr	r0, [pc, #204]	@ (800502c <_printf_i+0x23c>)
 8004f60:	2778      	movs	r7, #120	@ 0x78
 8004f62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	6831      	ldr	r1, [r6, #0]
 8004f6a:	061f      	lsls	r7, r3, #24
 8004f6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f70:	d402      	bmi.n	8004f78 <_printf_i+0x188>
 8004f72:	065f      	lsls	r7, r3, #25
 8004f74:	bf48      	it	mi
 8004f76:	b2ad      	uxthmi	r5, r5
 8004f78:	6031      	str	r1, [r6, #0]
 8004f7a:	07d9      	lsls	r1, r3, #31
 8004f7c:	bf44      	itt	mi
 8004f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f82:	6023      	strmi	r3, [r4, #0]
 8004f84:	b11d      	cbz	r5, 8004f8e <_printf_i+0x19e>
 8004f86:	2310      	movs	r3, #16
 8004f88:	e7ac      	b.n	8004ee4 <_printf_i+0xf4>
 8004f8a:	4827      	ldr	r0, [pc, #156]	@ (8005028 <_printf_i+0x238>)
 8004f8c:	e7e9      	b.n	8004f62 <_printf_i+0x172>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	e7f6      	b.n	8004f86 <_printf_i+0x196>
 8004f98:	4616      	mov	r6, r2
 8004f9a:	e7bd      	b.n	8004f18 <_printf_i+0x128>
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	6825      	ldr	r5, [r4, #0]
 8004fa0:	6961      	ldr	r1, [r4, #20]
 8004fa2:	1d18      	adds	r0, r3, #4
 8004fa4:	6030      	str	r0, [r6, #0]
 8004fa6:	062e      	lsls	r6, r5, #24
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	d501      	bpl.n	8004fb0 <_printf_i+0x1c0>
 8004fac:	6019      	str	r1, [r3, #0]
 8004fae:	e002      	b.n	8004fb6 <_printf_i+0x1c6>
 8004fb0:	0668      	lsls	r0, r5, #25
 8004fb2:	d5fb      	bpl.n	8004fac <_printf_i+0x1bc>
 8004fb4:	8019      	strh	r1, [r3, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6123      	str	r3, [r4, #16]
 8004fba:	4616      	mov	r6, r2
 8004fbc:	e7bc      	b.n	8004f38 <_printf_i+0x148>
 8004fbe:	6833      	ldr	r3, [r6, #0]
 8004fc0:	1d1a      	adds	r2, r3, #4
 8004fc2:	6032      	str	r2, [r6, #0]
 8004fc4:	681e      	ldr	r6, [r3, #0]
 8004fc6:	6862      	ldr	r2, [r4, #4]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7fb f920 	bl	8000210 <memchr>
 8004fd0:	b108      	cbz	r0, 8004fd6 <_printf_i+0x1e6>
 8004fd2:	1b80      	subs	r0, r0, r6
 8004fd4:	6060      	str	r0, [r4, #4]
 8004fd6:	6863      	ldr	r3, [r4, #4]
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe0:	e7aa      	b.n	8004f38 <_printf_i+0x148>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4640      	mov	r0, r8
 8004fea:	47d0      	blx	sl
 8004fec:	3001      	adds	r0, #1
 8004fee:	d0ad      	beq.n	8004f4c <_printf_i+0x15c>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	079b      	lsls	r3, r3, #30
 8004ff4:	d413      	bmi.n	800501e <_printf_i+0x22e>
 8004ff6:	68e0      	ldr	r0, [r4, #12]
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	4298      	cmp	r0, r3
 8004ffc:	bfb8      	it	lt
 8004ffe:	4618      	movlt	r0, r3
 8005000:	e7a6      	b.n	8004f50 <_printf_i+0x160>
 8005002:	2301      	movs	r3, #1
 8005004:	4632      	mov	r2, r6
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d09d      	beq.n	8004f4c <_printf_i+0x15c>
 8005010:	3501      	adds	r5, #1
 8005012:	68e3      	ldr	r3, [r4, #12]
 8005014:	9903      	ldr	r1, [sp, #12]
 8005016:	1a5b      	subs	r3, r3, r1
 8005018:	42ab      	cmp	r3, r5
 800501a:	dcf2      	bgt.n	8005002 <_printf_i+0x212>
 800501c:	e7eb      	b.n	8004ff6 <_printf_i+0x206>
 800501e:	2500      	movs	r5, #0
 8005020:	f104 0619 	add.w	r6, r4, #25
 8005024:	e7f5      	b.n	8005012 <_printf_i+0x222>
 8005026:	bf00      	nop
 8005028:	08005325 	.word	0x08005325
 800502c:	08005336 	.word	0x08005336

08005030 <__sflush_r>:
 8005030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005038:	0716      	lsls	r6, r2, #28
 800503a:	4605      	mov	r5, r0
 800503c:	460c      	mov	r4, r1
 800503e:	d454      	bmi.n	80050ea <__sflush_r+0xba>
 8005040:	684b      	ldr	r3, [r1, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	dc02      	bgt.n	800504c <__sflush_r+0x1c>
 8005046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	dd48      	ble.n	80050de <__sflush_r+0xae>
 800504c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800504e:	2e00      	cmp	r6, #0
 8005050:	d045      	beq.n	80050de <__sflush_r+0xae>
 8005052:	2300      	movs	r3, #0
 8005054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005058:	682f      	ldr	r7, [r5, #0]
 800505a:	6a21      	ldr	r1, [r4, #32]
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	d030      	beq.n	80050c2 <__sflush_r+0x92>
 8005060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	0759      	lsls	r1, r3, #29
 8005066:	d505      	bpl.n	8005074 <__sflush_r+0x44>
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800506e:	b10b      	cbz	r3, 8005074 <__sflush_r+0x44>
 8005070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005078:	6a21      	ldr	r1, [r4, #32]
 800507a:	4628      	mov	r0, r5
 800507c:	47b0      	blx	r6
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	d106      	bne.n	8005092 <__sflush_r+0x62>
 8005084:	6829      	ldr	r1, [r5, #0]
 8005086:	291d      	cmp	r1, #29
 8005088:	d82b      	bhi.n	80050e2 <__sflush_r+0xb2>
 800508a:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <__sflush_r+0x104>)
 800508c:	410a      	asrs	r2, r1
 800508e:	07d6      	lsls	r6, r2, #31
 8005090:	d427      	bmi.n	80050e2 <__sflush_r+0xb2>
 8005092:	2200      	movs	r2, #0
 8005094:	6062      	str	r2, [r4, #4]
 8005096:	04d9      	lsls	r1, r3, #19
 8005098:	6922      	ldr	r2, [r4, #16]
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	d504      	bpl.n	80050a8 <__sflush_r+0x78>
 800509e:	1c42      	adds	r2, r0, #1
 80050a0:	d101      	bne.n	80050a6 <__sflush_r+0x76>
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	b903      	cbnz	r3, 80050a8 <__sflush_r+0x78>
 80050a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80050a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050aa:	602f      	str	r7, [r5, #0]
 80050ac:	b1b9      	cbz	r1, 80050de <__sflush_r+0xae>
 80050ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050b2:	4299      	cmp	r1, r3
 80050b4:	d002      	beq.n	80050bc <__sflush_r+0x8c>
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7ff fca0 	bl	80049fc <_free_r>
 80050bc:	2300      	movs	r3, #0
 80050be:	6363      	str	r3, [r4, #52]	@ 0x34
 80050c0:	e00d      	b.n	80050de <__sflush_r+0xae>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b0      	blx	r6
 80050c8:	4602      	mov	r2, r0
 80050ca:	1c50      	adds	r0, r2, #1
 80050cc:	d1c9      	bne.n	8005062 <__sflush_r+0x32>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0c6      	beq.n	8005062 <__sflush_r+0x32>
 80050d4:	2b1d      	cmp	r3, #29
 80050d6:	d001      	beq.n	80050dc <__sflush_r+0xac>
 80050d8:	2b16      	cmp	r3, #22
 80050da:	d11e      	bne.n	800511a <__sflush_r+0xea>
 80050dc:	602f      	str	r7, [r5, #0]
 80050de:	2000      	movs	r0, #0
 80050e0:	e022      	b.n	8005128 <__sflush_r+0xf8>
 80050e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e6:	b21b      	sxth	r3, r3
 80050e8:	e01b      	b.n	8005122 <__sflush_r+0xf2>
 80050ea:	690f      	ldr	r7, [r1, #16]
 80050ec:	2f00      	cmp	r7, #0
 80050ee:	d0f6      	beq.n	80050de <__sflush_r+0xae>
 80050f0:	0793      	lsls	r3, r2, #30
 80050f2:	680e      	ldr	r6, [r1, #0]
 80050f4:	bf08      	it	eq
 80050f6:	694b      	ldreq	r3, [r1, #20]
 80050f8:	600f      	str	r7, [r1, #0]
 80050fa:	bf18      	it	ne
 80050fc:	2300      	movne	r3, #0
 80050fe:	eba6 0807 	sub.w	r8, r6, r7
 8005102:	608b      	str	r3, [r1, #8]
 8005104:	f1b8 0f00 	cmp.w	r8, #0
 8005108:	dde9      	ble.n	80050de <__sflush_r+0xae>
 800510a:	6a21      	ldr	r1, [r4, #32]
 800510c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800510e:	4643      	mov	r3, r8
 8005110:	463a      	mov	r2, r7
 8005112:	4628      	mov	r0, r5
 8005114:	47b0      	blx	r6
 8005116:	2800      	cmp	r0, #0
 8005118:	dc08      	bgt.n	800512c <__sflush_r+0xfc>
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512c:	4407      	add	r7, r0
 800512e:	eba8 0800 	sub.w	r8, r8, r0
 8005132:	e7e7      	b.n	8005104 <__sflush_r+0xd4>
 8005134:	dfbffffe 	.word	0xdfbffffe

08005138 <_fflush_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	690b      	ldr	r3, [r1, #16]
 800513c:	4605      	mov	r5, r0
 800513e:	460c      	mov	r4, r1
 8005140:	b913      	cbnz	r3, 8005148 <_fflush_r+0x10>
 8005142:	2500      	movs	r5, #0
 8005144:	4628      	mov	r0, r5
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	b118      	cbz	r0, 8005152 <_fflush_r+0x1a>
 800514a:	6a03      	ldr	r3, [r0, #32]
 800514c:	b90b      	cbnz	r3, 8005152 <_fflush_r+0x1a>
 800514e:	f7ff fa4b 	bl	80045e8 <__sinit>
 8005152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f3      	beq.n	8005142 <_fflush_r+0xa>
 800515a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800515c:	07d0      	lsls	r0, r2, #31
 800515e:	d404      	bmi.n	800516a <_fflush_r+0x32>
 8005160:	0599      	lsls	r1, r3, #22
 8005162:	d402      	bmi.n	800516a <_fflush_r+0x32>
 8005164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005166:	f7ff fc46 	bl	80049f6 <__retarget_lock_acquire_recursive>
 800516a:	4628      	mov	r0, r5
 800516c:	4621      	mov	r1, r4
 800516e:	f7ff ff5f 	bl	8005030 <__sflush_r>
 8005172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005174:	07da      	lsls	r2, r3, #31
 8005176:	4605      	mov	r5, r0
 8005178:	d4e4      	bmi.n	8005144 <_fflush_r+0xc>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	059b      	lsls	r3, r3, #22
 800517e:	d4e1      	bmi.n	8005144 <_fflush_r+0xc>
 8005180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005182:	f7ff fc39 	bl	80049f8 <__retarget_lock_release_recursive>
 8005186:	e7dd      	b.n	8005144 <_fflush_r+0xc>

08005188 <__swhatbuf_r>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	460c      	mov	r4, r1
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	2900      	cmp	r1, #0
 8005192:	b096      	sub	sp, #88	@ 0x58
 8005194:	4615      	mov	r5, r2
 8005196:	461e      	mov	r6, r3
 8005198:	da0d      	bge.n	80051b6 <__swhatbuf_r+0x2e>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051a0:	f04f 0100 	mov.w	r1, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2340      	movne	r3, #64	@ 0x40
 80051a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051ac:	2000      	movs	r0, #0
 80051ae:	6031      	str	r1, [r6, #0]
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	b016      	add	sp, #88	@ 0x58
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
 80051b6:	466a      	mov	r2, sp
 80051b8:	f000 f848 	bl	800524c <_fstat_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	dbec      	blt.n	800519a <__swhatbuf_r+0x12>
 80051c0:	9901      	ldr	r1, [sp, #4]
 80051c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051ca:	4259      	negs	r1, r3
 80051cc:	4159      	adcs	r1, r3
 80051ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d2:	e7eb      	b.n	80051ac <__swhatbuf_r+0x24>

080051d4 <__smakebuf_r>:
 80051d4:	898b      	ldrh	r3, [r1, #12]
 80051d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d8:	079d      	lsls	r5, r3, #30
 80051da:	4606      	mov	r6, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	d507      	bpl.n	80051f0 <__smakebuf_r+0x1c>
 80051e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	2301      	movs	r3, #1
 80051ea:	6163      	str	r3, [r4, #20]
 80051ec:	b003      	add	sp, #12
 80051ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f0:	ab01      	add	r3, sp, #4
 80051f2:	466a      	mov	r2, sp
 80051f4:	f7ff ffc8 	bl	8005188 <__swhatbuf_r>
 80051f8:	9f00      	ldr	r7, [sp, #0]
 80051fa:	4605      	mov	r5, r0
 80051fc:	4639      	mov	r1, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff f8da 	bl	80043b8 <_malloc_r>
 8005204:	b948      	cbnz	r0, 800521a <__smakebuf_r+0x46>
 8005206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520a:	059a      	lsls	r2, r3, #22
 800520c:	d4ee      	bmi.n	80051ec <__smakebuf_r+0x18>
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	e7e2      	b.n	80051e0 <__smakebuf_r+0xc>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	6020      	str	r0, [r4, #0]
 800521e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005222:	81a3      	strh	r3, [r4, #12]
 8005224:	9b01      	ldr	r3, [sp, #4]
 8005226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800522a:	b15b      	cbz	r3, 8005244 <__smakebuf_r+0x70>
 800522c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005230:	4630      	mov	r0, r6
 8005232:	f000 f81d 	bl	8005270 <_isatty_r>
 8005236:	b128      	cbz	r0, 8005244 <__smakebuf_r+0x70>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	431d      	orrs	r5, r3
 8005248:	81a5      	strh	r5, [r4, #12]
 800524a:	e7cf      	b.n	80051ec <__smakebuf_r+0x18>

0800524c <_fstat_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	@ (800526c <_fstat_r+0x20>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f7fb fd4c 	bl	8000cf6 <_fstat>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d102      	bne.n	8005268 <_fstat_r+0x1c>
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	b103      	cbz	r3, 8005268 <_fstat_r+0x1c>
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	200002dc 	.word	0x200002dc

08005270 <_isatty_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d06      	ldr	r5, [pc, #24]	@ (800528c <_isatty_r+0x1c>)
 8005274:	2300      	movs	r3, #0
 8005276:	4604      	mov	r4, r0
 8005278:	4608      	mov	r0, r1
 800527a:	602b      	str	r3, [r5, #0]
 800527c:	f7fb fd4b 	bl	8000d16 <_isatty>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_isatty_r+0x1a>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_isatty_r+0x1a>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	200002dc 	.word	0x200002dc

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
