
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800ad68  0800ad68  0000bd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b418  0800b418  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b420  0800b420  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b420  0800b420  0000c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b424  0800b424  0000c424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b428  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  0800b5fc  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800b5fc  0000d4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e854  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002321  00000000  00000000  0001ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0001dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  0001ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fdd  00000000  00000000  0001f40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c3a  00000000  00000000  000423ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf96e  00000000  00000000  00053024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  001229d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad4c 	.word	0x0800ad4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800ad4c 	.word	0x0800ad4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_get_trimming>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

void BMP280_get_trimming() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af04      	add	r7, sp, #16
	uint8_t calib_data[24];
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, 1, calib_data, 24, HAL_MAX_DELAY);
 80010ca:	23ee      	movs	r3, #238	@ 0xee
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2318      	movs	r3, #24
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	463b      	mov	r3, r7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	2288      	movs	r2, #136	@ 0x88
 80010e0:	483b      	ldr	r0, [pc, #236]	@ (80011d0 <BMP280_get_trimming+0x10c>)
 80010e2:	f002 fd3d 	bl	8003b60 <HAL_I2C_Mem_Read>

	dig_T1 = (calib_data[1] << 8) | calib_data[0];
 80010e6:	787b      	ldrb	r3, [r7, #1]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	783b      	ldrb	r3, [r7, #0]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <BMP280_get_trimming+0x110>)
 80010f8:	801a      	strh	r2, [r3, #0]
	dig_T2 = (calib_data[3] << 8) | calib_data[2];
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	78bb      	ldrb	r3, [r7, #2]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <BMP280_get_trimming+0x114>)
 800110a:	801a      	strh	r2, [r3, #0]
	dig_T3 = (calib_data[5] << 8) | calib_data[4];
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <BMP280_get_trimming+0x118>)
 800111c:	801a      	strh	r2, [r3, #0]

	dig_P1 = (calib_data[7] << 8) | calib_data[6];
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <BMP280_get_trimming+0x11c>)
 8001130:	801a      	strh	r2, [r3, #0]
	dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8001132:	7a7b      	ldrb	r3, [r7, #9]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7a3b      	ldrb	r3, [r7, #8]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <BMP280_get_trimming+0x120>)
 8001142:	801a      	strh	r2, [r3, #0]
	dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	7abb      	ldrb	r3, [r7, #10]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <BMP280_get_trimming+0x124>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P4 = (calib_data[13] << 8) | calib_data[12];
 8001156:	7b7b      	ldrb	r3, [r7, #13]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	7b3b      	ldrb	r3, [r7, #12]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21a      	sxth	r2, r3
 8001164:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <BMP280_get_trimming+0x128>)
 8001166:	801a      	strh	r2, [r3, #0]
	dig_P5 = (calib_data[15] << 8) | calib_data[14];
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <BMP280_get_trimming+0x12c>)
 8001178:	801a      	strh	r2, [r3, #0]
	dig_P6 = (calib_data[17] << 8) | calib_data[16];
 800117a:	7c7b      	ldrb	r3, [r7, #17]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	7c3b      	ldrb	r3, [r7, #16]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <BMP280_get_trimming+0x130>)
 800118a:	801a      	strh	r2, [r3, #0]
	dig_P7 = (calib_data[19] << 8) | calib_data[18];
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	7cbb      	ldrb	r3, [r7, #18]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <BMP280_get_trimming+0x134>)
 800119c:	801a      	strh	r2, [r3, #0]
	dig_P8 = (calib_data[21] << 8) | calib_data[20];
 800119e:	7d7b      	ldrb	r3, [r7, #21]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7d3b      	ldrb	r3, [r7, #20]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <BMP280_get_trimming+0x138>)
 80011ae:	801a      	strh	r2, [r3, #0]
	dig_P9 = (calib_data[23] << 8) | calib_data[22];
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7dbb      	ldrb	r3, [r7, #22]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <BMP280_get_trimming+0x13c>)
 80011c0:	801a      	strh	r2, [r3, #0]

	printf("Calibration parameters read successfully.\n");
 80011c2:	4810      	ldr	r0, [pc, #64]	@ (8001204 <BMP280_get_trimming+0x140>)
 80011c4:	f006 f9fe 	bl	80075c4 <puts>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000234 	.word	0x20000234
 80011d4:	200001f0 	.word	0x200001f0
 80011d8:	200001f2 	.word	0x200001f2
 80011dc:	200001f4 	.word	0x200001f4
 80011e0:	200001f6 	.word	0x200001f6
 80011e4:	200001f8 	.word	0x200001f8
 80011e8:	200001fa 	.word	0x200001fa
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	200001fe 	.word	0x200001fe
 80011f4:	20000200 	.word	0x20000200
 80011f8:	20000202 	.word	0x20000202
 80011fc:	20000204 	.word	0x20000204
 8001200:	20000206 	.word	0x20000206
 8001204:	0800ad68 	.word	0x0800ad68

08001208 <BMP280_check>:


int BMP280_check() {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 800120e:	23d0      	movs	r3, #208	@ 0xd0
 8001210:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8001212:	23ee      	movs	r3, #238	@ 0xee
 8001214:	4619      	mov	r1, r3
 8001216:	1d3a      	adds	r2, r7, #4
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	481a      	ldr	r0, [pc, #104]	@ (800128c <BMP280_check+0x84>)
 8001222:	f002 f96d 	bl	8003500 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8001230:	4817      	ldr	r0, [pc, #92]	@ (8001290 <BMP280_check+0x88>)
 8001232:	f006 f9c7 	bl	80075c4 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 8001236:	23ee      	movs	r3, #238	@ 0xee
 8001238:	4619      	mov	r1, r3
 800123a:	2301      	movs	r3, #1
 800123c:	4618      	mov	r0, r3
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4603      	mov	r3, r0
 8001248:	4810      	ldr	r0, [pc, #64]	@ (800128c <BMP280_check+0x84>)
 800124a:	f002 fa57 	bl	80036fc <HAL_I2C_Master_Receive>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <BMP280_check+0x8c>)
 800125a:	f006 f9b3 	bl	80075c4 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 800125e:	793b      	ldrb	r3, [r7, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <BMP280_check+0x90>)
 8001264:	f006 f946 	bl	80074f4 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8001268:	793b      	ldrb	r3, [r7, #4]
 800126a:	2258      	movs	r2, #88	@ 0x58
 800126c:	4293      	cmp	r3, r2
 800126e:	d104      	bne.n	800127a <BMP280_check+0x72>
		printf("Ok\r\n");
 8001270:	480a      	ldr	r0, [pc, #40]	@ (800129c <BMP280_check+0x94>)
 8001272:	f006 f9a7 	bl	80075c4 <puts>
		return 0;
 8001276:	2300      	movs	r3, #0
 8001278:	e003      	b.n	8001282 <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 800127a:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <BMP280_check+0x98>)
 800127c:	f006 f9a2 	bl	80075c4 <puts>
		return 1;
 8001280:	2301      	movs	r3, #1
	}
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000234 	.word	0x20000234
 8001290:	0800ad94 	.word	0x0800ad94
 8001294:	0800adb8 	.word	0x0800adb8
 8001298:	0800addc 	.word	0x0800addc
 800129c:	0800ade8 	.word	0x0800ade8
 80012a0:	0800adec 	.word	0x0800adec

080012a4 <BMP280_init>:

int BMP280_init() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80012aa:	2357      	movs	r3, #87	@ 0x57
 80012ac:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <BMP280_init+0x44>)
 80012b0:	f006 f988 	bl	80075c4 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 80012b4:	22f4      	movs	r2, #244	@ 0xf4
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f000 f81a 	bl	80012f4 <BMP280_Write_Reg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <BMP280_init+0x34>
		printf("Config Ok\r\n");
 80012ca:	4808      	ldr	r0, [pc, #32]	@ (80012ec <BMP280_init+0x48>)
 80012cc:	f006 f97a 	bl	80075c4 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 80012d0:	f7ff fef8 	bl	80010c4 <BMP280_get_trimming>
	return 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e003      	b.n	80012e0 <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <BMP280_init+0x4c>)
 80012da:	f006 f973 	bl	80075c4 <puts>
		return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	0800adf8 	.word	0x0800adf8
 80012ec:	0800ae08 	.word	0x0800ae08
 80012f0:	0800ae14 	.word	0x0800ae14

080012f4 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 800130c:	23ee      	movs	r3, #238	@ 0xee
 800130e:	4619      	mov	r1, r3
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2302      	movs	r3, #2
 800131c:	4814      	ldr	r0, [pc, #80]	@ (8001370 <BMP280_Write_Reg+0x7c>)
 800131e:	f002 f8ef 	bl	8003500 <HAL_I2C_Master_Transmit>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 800132c:	4811      	ldr	r0, [pc, #68]	@ (8001374 <BMP280_Write_Reg+0x80>)
 800132e:	f006 f949 	bl	80075c4 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8001332:	23ee      	movs	r3, #238	@ 0xee
 8001334:	4619      	mov	r1, r3
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	480b      	ldr	r0, [pc, #44]	@ (8001370 <BMP280_Write_Reg+0x7c>)
 8001344:	f002 f9da 	bl	80036fc <HAL_I2C_Master_Receive>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <BMP280_Write_Reg+0x84>)
 8001354:	f006 f936 	bl	80075c4 <puts>
	}

	if (buf[0] == value) {
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	79ba      	ldrb	r2, [r7, #6]
 800135c:	429a      	cmp	r2, r3
 800135e:	d101      	bne.n	8001364 <BMP280_Write_Reg+0x70>
		return 0;
 8001360:	2300      	movs	r3, #0
 8001362:	e000      	b.n	8001366 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8001364:	2301      	movs	r3, #1
	}
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000234 	.word	0x20000234
 8001374:	0800ae24 	.word	0x0800ae24
 8001378:	0800ae40 	.word	0x0800ae40

0800137c <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 800138c:	23ee      	movs	r3, #238	@ 0xee
 800138e:	4619      	mov	r1, r3
 8001390:	1dfa      	adds	r2, r7, #7
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	4814      	ldr	r0, [pc, #80]	@ (80013ec <BMP280_Read_Reg+0x70>)
 800139c:	f002 f8b0 	bl	8003500 <HAL_I2C_Master_Transmit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80013aa:	4811      	ldr	r0, [pc, #68]	@ (80013f0 <BMP280_Read_Reg+0x74>)
 80013ac:	f006 f90a 	bl	80075c4 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f8b2 	bl	800651c <malloc>
 80013b8:	4603      	mov	r3, r0
 80013ba:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80013bc:	23ee      	movs	r3, #238	@ 0xee
 80013be:	4619      	mov	r1, r3
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	9200      	str	r2, [sp, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <BMP280_Read_Reg+0x70>)
 80013ce:	f002 f995 	bl	80036fc <HAL_I2C_Master_Receive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <BMP280_Read_Reg+0x78>)
 80013de:	f006 f8f1 	bl	80075c4 <puts>
	}

	return buf;
 80013e2:	68bb      	ldr	r3, [r7, #8]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000234 	.word	0x20000234
 80013f0:	0800ae24 	.word	0x0800ae24
 80013f4:	0800ae40 	.word	0x0800ae40

080013f8 <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	10da      	asrs	r2, r3, #3
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <bmp280_compensate_T_int32+0x74>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <bmp280_compensate_T_int32+0x78>)
 800140e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	12db      	asrs	r3, r3, #11
 8001418:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	111b      	asrs	r3, r3, #4
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <bmp280_compensate_T_int32+0x74>)
 8001420:	8812      	ldrh	r2, [r2, #0]
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	1112      	asrs	r2, r2, #4
 8001428:	4910      	ldr	r1, [pc, #64]	@ (800146c <bmp280_compensate_T_int32+0x74>)
 800142a:	8809      	ldrh	r1, [r1, #0]
 800142c:	1a52      	subs	r2, r2, r1
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 8001434:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <bmp280_compensate_T_int32+0x7c>)
 8001436:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	139b      	asrs	r3, r3, #14
 8001440:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4413      	add	r3, r2
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <bmp280_compensate_T_int32+0x80>)
 800144a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <bmp280_compensate_T_int32+0x80>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3380      	adds	r3, #128	@ 0x80
 8001458:	121b      	asrs	r3, r3, #8
 800145a:	60fb      	str	r3, [r7, #12]
	return T;
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	4618      	mov	r0, r3
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200001f0 	.word	0x200001f0
 8001470:	200001f2 	.word	0x200001f2
 8001474:	200001f4 	.word	0x200001f4
 8001478:	20000208 	.word	0x20000208

0800147c <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 800147c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001480:	b0ca      	sub	sp, #296	@ 0x128
 8001482:	af00      	add	r7, sp, #0
 8001484:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001488:	4baf      	ldr	r3, [pc, #700]	@ (8001748 <bmp280_compensate_P_int64+0x2cc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	17da      	asrs	r2, r3, #31
 800148e:	461c      	mov	r4, r3
 8001490:	4615      	mov	r5, r2
 8001492:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001496:	f145 3bff 	adc.w	fp, r5, #4294967295
 800149a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 800149e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a6:	fb03 f102 	mul.w	r1, r3, r2
 80014aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	18ca      	adds	r2, r1, r3
 80014b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014bc:	fba3 8903 	umull	r8, r9, r3, r3
 80014c0:	eb02 0309 	add.w	r3, r2, r9
 80014c4:	4699      	mov	r9, r3
 80014c6:	4ba1      	ldr	r3, [pc, #644]	@ (800174c <bmp280_compensate_P_int64+0x2d0>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	17da      	asrs	r2, r3, #31
 80014d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014d8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014dc:	4603      	mov	r3, r0
 80014de:	fb03 f209 	mul.w	r2, r3, r9
 80014e2:	460b      	mov	r3, r1
 80014e4:	fb08 f303 	mul.w	r3, r8, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	4602      	mov	r2, r0
 80014ec:	fba8 1202 	umull	r1, r2, r8, r2
 80014f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014f4:	460a      	mov	r2, r1
 80014f6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014fe:	4413      	add	r3, r2
 8001500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001504:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001508:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800150c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 8001510:	4b8f      	ldr	r3, [pc, #572]	@ (8001750 <bmp280_compensate_P_int64+0x2d4>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	b21b      	sxth	r3, r3
 8001518:	17da      	asrs	r2, r3, #31
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800151e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001522:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001526:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800152a:	462a      	mov	r2, r5
 800152c:	fb02 f203 	mul.w	r2, r2, r3
 8001530:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001534:	4621      	mov	r1, r4
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	441a      	add	r2, r3
 800153c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001540:	4621      	mov	r1, r4
 8001542:	fba3 1301 	umull	r1, r3, r3, r1
 8001546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154a:	460b      	mov	r3, r1
 800154c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001554:	18d3      	adds	r3, r2, r3
 8001556:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001566:	462b      	mov	r3, r5
 8001568:	0459      	lsls	r1, r3, #17
 800156a:	4623      	mov	r3, r4
 800156c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001570:	4623      	mov	r3, r4
 8001572:	0458      	lsls	r0, r3, #17
 8001574:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001578:	1814      	adds	r4, r2, r0
 800157a:	643c      	str	r4, [r7, #64]	@ 0x40
 800157c:	414b      	adcs	r3, r1
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001580:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001584:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8001588:	4b72      	ldr	r3, [pc, #456]	@ (8001754 <bmp280_compensate_P_int64+0x2d8>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	b21b      	sxth	r3, r3
 8001590:	17da      	asrs	r2, r3, #31
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001596:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800159a:	f04f 0000 	mov.w	r0, #0
 800159e:	f04f 0100 	mov.w	r1, #0
 80015a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015a6:	00d9      	lsls	r1, r3, #3
 80015a8:	2000      	movs	r0, #0
 80015aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80015ae:	1814      	adds	r4, r2, r0
 80015b0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80015b2:	414b      	adcs	r3, r1
 80015b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015dc:	fba3 1303 	umull	r1, r3, r3, r3
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015e4:	460b      	mov	r3, r1
 80015e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015ee:	18d3      	adds	r3, r2, r3
 80015f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <bmp280_compensate_P_int64+0x2dc>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	17da      	asrs	r2, r3, #31
 80015fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001602:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001606:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800160a:	462b      	mov	r3, r5
 800160c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001610:	4642      	mov	r2, r8
 8001612:	fb02 f203 	mul.w	r2, r2, r3
 8001616:	464b      	mov	r3, r9
 8001618:	4621      	mov	r1, r4
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	4622      	mov	r2, r4
 8001622:	4641      	mov	r1, r8
 8001624:	fba2 1201 	umull	r1, r2, r2, r1
 8001628:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800162c:	460a      	mov	r2, r1
 800162e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001632:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001636:	4413      	add	r3, r2
 8001638:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001648:	4623      	mov	r3, r4
 800164a:	0a18      	lsrs	r0, r3, #8
 800164c:	462b      	mov	r3, r5
 800164e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001652:	462b      	mov	r3, r5
 8001654:	1219      	asrs	r1, r3, #8
 8001656:	4b41      	ldr	r3, [pc, #260]	@ (800175c <bmp280_compensate_P_int64+0x2e0>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	b21b      	sxth	r3, r3
 800165e:	17da      	asrs	r2, r3, #31
 8001660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001664:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001668:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800166c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001670:	464a      	mov	r2, r9
 8001672:	fb02 f203 	mul.w	r2, r2, r3
 8001676:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800167a:	4644      	mov	r4, r8
 800167c:	fb04 f303 	mul.w	r3, r4, r3
 8001680:	441a      	add	r2, r3
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001686:	4644      	mov	r4, r8
 8001688:	fba3 4304 	umull	r4, r3, r3, r4
 800168c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001690:	4623      	mov	r3, r4
 8001692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800169a:	18d3      	adds	r3, r2, r3
 800169c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80016ac:	464c      	mov	r4, r9
 80016ae:	0323      	lsls	r3, r4, #12
 80016b0:	4644      	mov	r4, r8
 80016b2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016b6:	4644      	mov	r4, r8
 80016b8:	0322      	lsls	r2, r4, #12
 80016ba:	1884      	adds	r4, r0, r2
 80016bc:	633c      	str	r4, [r7, #48]	@ 0x30
 80016be:	eb41 0303 	adc.w	r3, r1, r3
 80016c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016c8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 80016cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016d0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016d4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016d8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016dc:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <bmp280_compensate_P_int64+0x2e4>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016ec:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016f0:	462b      	mov	r3, r5
 80016f2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016f6:	4642      	mov	r2, r8
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	464b      	mov	r3, r9
 80016fe:	4621      	mov	r1, r4
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	4622      	mov	r2, r4
 8001708:	4641      	mov	r1, r8
 800170a:	fba2 1201 	umull	r1, r2, r2, r1
 800170e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001712:	460a      	mov	r2, r1
 8001714:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001718:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800171c:	4413      	add	r3, r2
 800171e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800172e:	4629      	mov	r1, r5
 8001730:	104a      	asrs	r2, r1, #1
 8001732:	4629      	mov	r1, r5
 8001734:	17cb      	asrs	r3, r1, #31
 8001736:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 800173a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800173e:	4313      	orrs	r3, r2
 8001740:	d110      	bne.n	8001764 <bmp280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001742:	2300      	movs	r3, #0
 8001744:	e154      	b.n	80019f0 <bmp280_compensate_P_int64+0x574>
 8001746:	bf00      	nop
 8001748:	20000208 	.word	0x20000208
 800174c:	20000200 	.word	0x20000200
 8001750:	200001fe 	.word	0x200001fe
 8001754:	200001fc 	.word	0x200001fc
 8001758:	200001fa 	.word	0x200001fa
 800175c:	200001f8 	.word	0x200001f8
 8001760:	200001f6 	.word	0x200001f6
	}

	p = 1048576 - adc_P;
 8001764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001768:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800176c:	17da      	asrs	r2, r3, #31
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001772:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001776:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 800177a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800177e:	105b      	asrs	r3, r3, #1
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001784:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001788:	07db      	lsls	r3, r3, #31
 800178a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800178e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001792:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001796:	4621      	mov	r1, r4
 8001798:	1a89      	subs	r1, r1, r2
 800179a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800179c:	4629      	mov	r1, r5
 800179e:	eb61 0303 	sbc.w	r3, r1, r3
 80017a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017a4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80017a8:	4622      	mov	r2, r4
 80017aa:	462b      	mov	r3, r5
 80017ac:	1891      	adds	r1, r2, r2
 80017ae:	6239      	str	r1, [r7, #32]
 80017b0:	415b      	adcs	r3, r3
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b8:	4621      	mov	r1, r4
 80017ba:	1851      	adds	r1, r2, r1
 80017bc:	61b9      	str	r1, [r7, #24]
 80017be:	4629      	mov	r1, r5
 80017c0:	414b      	adcs	r3, r1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017d0:	4649      	mov	r1, r9
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4641      	mov	r1, r8
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4641      	mov	r1, r8
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4641      	mov	r1, r8
 80017e0:	1889      	adds	r1, r1, r2
 80017e2:	6139      	str	r1, [r7, #16]
 80017e4:	4649      	mov	r1, r9
 80017e6:	eb43 0101 	adc.w	r1, r3, r1
 80017ea:	6179      	str	r1, [r7, #20]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017f8:	4649      	mov	r1, r9
 80017fa:	008b      	lsls	r3, r1, #2
 80017fc:	4641      	mov	r1, r8
 80017fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001802:	4641      	mov	r1, r8
 8001804:	008a      	lsls	r2, r1, #2
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	4603      	mov	r3, r0
 800180c:	4622      	mov	r2, r4
 800180e:	189b      	adds	r3, r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	460b      	mov	r3, r1
 8001814:	462a      	mov	r2, r5
 8001816:	eb42 0303 	adc.w	r3, r2, r3
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001828:	4649      	mov	r1, r9
 800182a:	008b      	lsls	r3, r1, #2
 800182c:	4641      	mov	r1, r8
 800182e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001832:	4641      	mov	r1, r8
 8001834:	008a      	lsls	r2, r1, #2
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	4603      	mov	r3, r0
 800183c:	4622      	mov	r2, r4
 800183e:	189b      	adds	r3, r3, r2
 8001840:	673b      	str	r3, [r7, #112]	@ 0x70
 8001842:	462b      	mov	r3, r5
 8001844:	460a      	mov	r2, r1
 8001846:	eb42 0303 	adc.w	r3, r2, r3
 800184a:	677b      	str	r3, [r7, #116]	@ 0x74
 800184c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001850:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001854:	f7ff fa38 	bl	8000cc8 <__aeabi_ldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001860:	4b66      	ldr	r3, [pc, #408]	@ (80019fc <bmp280_compensate_P_int64+0x580>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	b21b      	sxth	r3, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800186c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800186e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0b50      	lsrs	r0, r2, #13
 800187c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001880:	1359      	asrs	r1, r3, #13
 8001882:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001886:	462b      	mov	r3, r5
 8001888:	fb00 f203 	mul.w	r2, r0, r3
 800188c:	4623      	mov	r3, r4
 800188e:	fb03 f301 	mul.w	r3, r3, r1
 8001892:	4413      	add	r3, r2
 8001894:	4622      	mov	r2, r4
 8001896:	fba2 1200 	umull	r1, r2, r2, r0
 800189a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800189e:	460a      	mov	r2, r1
 80018a0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80018a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80018a8:	4413      	add	r3, r2
 80018aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80018ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	0b50      	lsrs	r0, r2, #13
 80018bc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018c0:	1359      	asrs	r1, r3, #13
 80018c2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80018c6:	462b      	mov	r3, r5
 80018c8:	fb00 f203 	mul.w	r2, r0, r3
 80018cc:	4623      	mov	r3, r4
 80018ce:	fb03 f301 	mul.w	r3, r3, r1
 80018d2:	4413      	add	r3, r2
 80018d4:	4622      	mov	r2, r4
 80018d6:	fba2 1200 	umull	r1, r2, r2, r0
 80018da:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018de:	460a      	mov	r2, r1
 80018e0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018e8:	4413      	add	r3, r2
 80018ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018fa:	4621      	mov	r1, r4
 80018fc:	0e4a      	lsrs	r2, r1, #25
 80018fe:	4629      	mov	r1, r5
 8001900:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001904:	4629      	mov	r1, r5
 8001906:	164b      	asrs	r3, r1, #25
 8001908:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 800190c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <bmp280_compensate_P_int64+0x584>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b21b      	sxth	r3, r3
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	663b      	str	r3, [r7, #96]	@ 0x60
 8001918:	667a      	str	r2, [r7, #100]	@ 0x64
 800191a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800191e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001922:	462a      	mov	r2, r5
 8001924:	fb02 f203 	mul.w	r2, r2, r3
 8001928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800192c:	4621      	mov	r1, r4
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001938:	4621      	mov	r1, r4
 800193a:	fba2 1201 	umull	r1, r2, r2, r1
 800193e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001942:	460a      	mov	r2, r1
 8001944:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001948:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800194c:	4413      	add	r3, r2
 800194e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800195e:	4621      	mov	r1, r4
 8001960:	0cca      	lsrs	r2, r1, #19
 8001962:	4629      	mov	r1, r5
 8001964:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001968:	4629      	mov	r1, r5
 800196a:	14cb      	asrs	r3, r1, #19
 800196c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = (((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7) << 4));
 8001970:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001974:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001978:	1884      	adds	r4, r0, r2
 800197a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800197c:	eb41 0303 	adc.w	r3, r1, r3
 8001980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001982:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001986:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800198a:	4621      	mov	r1, r4
 800198c:	1889      	adds	r1, r1, r2
 800198e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001990:	4629      	mov	r1, r5
 8001992:	eb43 0101 	adc.w	r1, r3, r1
 8001996:	6579      	str	r1, [r7, #84]	@ 0x54
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80019a4:	4623      	mov	r3, r4
 80019a6:	0a18      	lsrs	r0, r3, #8
 80019a8:	462b      	mov	r3, r5
 80019aa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019ae:	462b      	mov	r3, r5
 80019b0:	1219      	asrs	r1, r3, #8
 80019b2:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <bmp280_compensate_P_int64+0x588>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	17da      	asrs	r2, r3, #31
 80019bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019cc:	464c      	mov	r4, r9
 80019ce:	0123      	lsls	r3, r4, #4
 80019d0:	4644      	mov	r4, r8
 80019d2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019d6:	4644      	mov	r4, r8
 80019d8:	0122      	lsls	r2, r4, #4
 80019da:	1884      	adds	r4, r0, r2
 80019dc:	603c      	str	r4, [r7, #0]
 80019de:	eb41 0303 	adc.w	r3, r1, r3
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019e8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 80019ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019f6:	46bd      	mov	sp, r7
 80019f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fc:	20000206 	.word	0x20000206
 8001a00:	20000204 	.word	0x20000204
 8001a04:	20000202 	.word	0x20000202

08001a08 <BMP280_get_temperature>:
BMP280_S32_t BMP280_get_temperature() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8001a0e:	23fa      	movs	r3, #250	@ 0xfa
 8001a10:	2203      	movs	r2, #3
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fcb1 	bl	800137c <BMP280_Read_Reg>
 8001a1a:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	031a      	lsls	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	3202      	adds	r2, #2
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	0912      	lsrs	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	603b      	str	r3, [r7, #0]

	free(buf);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f004 fd76 	bl	800652c <free>

	return adc_T;
 8001a40:	683b      	ldr	r3, [r7, #0]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8001a50:	23f7      	movs	r3, #247	@ 0xf7
 8001a52:	2203      	movs	r2, #3
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fc90 	bl	800137c <BMP280_Read_Reg>
 8001a5c:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	031a      	lsls	r2, r3, #12
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3301      	adds	r3, #1
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	3202      	adds	r2, #2
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	0912      	lsrs	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	603b      	str	r3, [r7, #0]

	free(buf);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f004 fd55 	bl	800652c <free>

	return adc_P;
 8001a82:	683b      	ldr	r3, [r7, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_UART_RxCpltCallback+0x40>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d112      	bne.n	8001ac4 <HAL_UART_RxCpltCallback+0x38>
        printf("Commande reçue : %s\r\n", rxBuffer);
 8001a9e:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x44>)
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x48>)
 8001aa2:	f005 fd27 	bl	80074f4 <iprintf>
        handleCommand(rxBuffer, &comp_temp, &comp_press);  // Passe les adresses des variables
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x4c>)
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <HAL_UART_RxCpltCallback+0x50>)
 8001aaa:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x44>)
 8001aac:	f000 f81a 	bl	8001ae4 <handleCommand>
        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x44>)
 8001ab6:	f005 feb9 	bl	800782c <memset>
        HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001aba:	2207      	movs	r2, #7
 8001abc:	4904      	ldr	r1, [pc, #16]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x44>)
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x54>)
 8001ac0:	f003 fdb1 	bl	8005626 <HAL_UART_Receive_IT>
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40004c00 	.word	0x40004c00
 8001ad0:	20000328 	.word	0x20000328
 8001ad4:	0800aea0 	.word	0x0800aea0
 8001ad8:	20000324 	.word	0x20000324
 8001adc:	20000320 	.word	0x20000320
 8001ae0:	20000288 	.word	0x20000288

08001ae4 <handleCommand>:

void handleCommand(char *command, BMP280_S32_t *comp_temp, BMP280_U32_t *comp_press) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
    if (strncmp(command, "GET_T", 5) == 0) {
 8001af0:	2205      	movs	r2, #5
 8001af2:	493d      	ldr	r1, [pc, #244]	@ (8001be8 <handleCommand+0x104>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f005 fea1 	bl	800783c <strncmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d136      	bne.n	8001b6e <handleCommand+0x8a>
        // Lecture et compensation de la température
        raw_temp = BMP280_get_temperature();
 8001b00:	f7ff ff82 	bl	8001a08 <BMP280_get_temperature>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a39      	ldr	r2, [pc, #228]	@ (8001bec <handleCommand+0x108>)
 8001b08:	6013      	str	r3, [r2, #0]
        *comp_temp = bmp280_compensate_T_int32(raw_temp);
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <handleCommand+0x108>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc72 	bl	80013f8 <bmp280_compensate_T_int32>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	601a      	str	r2, [r3, #0]
        float temperature = *comp_temp / 100.0; // Conversion en °C
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd20 	bl	8000564 <__aeabi_i2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <handleCommand+0x10c>)
 8001b2a:	f7fe feaf 	bl	800088c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f877 	bl	8000c28 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	617b      	str	r3, [r7, #20]
        snprintf(txBuffer, sizeof(txBuffer), "T=%.2f\r\n", temperature);
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7fe fd22 	bl	8000588 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9cd 2300 	strd	r2, r3, [sp]
 8001b4c:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <handleCommand+0x110>)
 8001b4e:	2132      	movs	r1, #50	@ 0x32
 8001b50:	4829      	ldr	r0, [pc, #164]	@ (8001bf8 <handleCommand+0x114>)
 8001b52:	f005 fd3f 	bl	80075d4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8001b56:	4828      	ldr	r0, [pc, #160]	@ (8001bf8 <handleCommand+0x114>)
 8001b58:	f7fe fbaa 	bl	80002b0 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	4924      	ldr	r1, [pc, #144]	@ (8001bf8 <handleCommand+0x114>)
 8001b66:	4825      	ldr	r0, [pc, #148]	@ (8001bfc <handleCommand+0x118>)
 8001b68:	f003 fcd2 	bl	8005510 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
    } else {
        snprintf(txBuffer, sizeof(txBuffer), "Unknown Command\r\n");
        HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
    }
}
 8001b6c:	e038      	b.n	8001be0 <handleCommand+0xfc>
    } else if (strncmp(command, "GET_P", 5) == 0) {
 8001b6e:	2205      	movs	r2, #5
 8001b70:	4923      	ldr	r1, [pc, #140]	@ (8001c00 <handleCommand+0x11c>)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f005 fe62 	bl	800783c <strncmp>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d120      	bne.n	8001bc0 <handleCommand+0xdc>
        raw_press = BMP280_get_pressure();
 8001b7e:	f7ff ff64 	bl	8001a4a <BMP280_get_pressure>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <handleCommand+0x120>)
 8001b86:	6013      	str	r3, [r2, #0]
        *comp_press = bmp280_compensate_P_int64(raw_press);
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <handleCommand+0x120>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fc75 	bl	800147c <bmp280_compensate_P_int64>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
        snprintf(txBuffer, sizeof(txBuffer), "P=%ldPa\r\n", *comp_press);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <handleCommand+0x124>)
 8001ba0:	2132      	movs	r1, #50	@ 0x32
 8001ba2:	4815      	ldr	r0, [pc, #84]	@ (8001bf8 <handleCommand+0x114>)
 8001ba4:	f005 fd16 	bl	80075d4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8001ba8:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <handleCommand+0x114>)
 8001baa:	f7fe fb81 	bl	80002b0 <strlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	4910      	ldr	r1, [pc, #64]	@ (8001bf8 <handleCommand+0x114>)
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <handleCommand+0x118>)
 8001bba:	f003 fca9 	bl	8005510 <HAL_UART_Transmit>
}
 8001bbe:	e00f      	b.n	8001be0 <handleCommand+0xfc>
        snprintf(txBuffer, sizeof(txBuffer), "Unknown Command\r\n");
 8001bc0:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <handleCommand+0x128>)
 8001bc2:	2132      	movs	r1, #50	@ 0x32
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <handleCommand+0x114>)
 8001bc6:	f005 fd05 	bl	80075d4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8001bca:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <handleCommand+0x114>)
 8001bcc:	f7fe fb70 	bl	80002b0 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	4907      	ldr	r1, [pc, #28]	@ (8001bf8 <handleCommand+0x114>)
 8001bda:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <handleCommand+0x118>)
 8001bdc:	f003 fc98 	bl	8005510 <HAL_UART_Transmit>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800aeb8 	.word	0x0800aeb8
 8001bec:	20000318 	.word	0x20000318
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	0800aec0 	.word	0x0800aec0
 8001bf8:	20000330 	.word	0x20000330
 8001bfc:	20000288 	.word	0x20000288
 8001c00:	0800aecc 	.word	0x0800aecc
 8001c04:	2000031c 	.word	0x2000031c
 8001c08:	0800aed4 	.word	0x0800aed4
 8001c0c:	0800aee0 	.word	0x0800aee0

08001c10 <rotate_motor_dynamic>:

// Fonction pour ajuster l'angle du moteur
void rotate_motor_dynamic(uint8_t angle, uint8_t direction) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	460a      	mov	r2, r1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef pHeader;
    uint8_t data[2];
    uint32_t pTxMailbox;

    // Configurer l'en-tête CAN
    pHeader.StdId = 0x61;
 8001c20:	2361      	movs	r3, #97	@ 0x61
 8001c22:	613b      	str	r3, [r7, #16]
    pHeader.IDE = CAN_ID_STD;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    pHeader.RTR = CAN_RTR_DATA;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    pHeader.DLC = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]

    // Configurer les données
    data[0] = angle;     // Angle dynamique
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	733b      	strb	r3, [r7, #12]
    data[1] = direction; // Direction
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	737b      	strb	r3, [r7, #13]

    // Envoi du message CAN
    if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	f107 0110 	add.w	r1, r7, #16
 8001c44:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <rotate_motor_dynamic+0x5c>)
 8001c46:	f000 fef4 	bl	8002a32 <HAL_CAN_AddTxMessage>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <rotate_motor_dynamic+0x46>
        Error_Handler();
 8001c50:	f000 fa8a 	bl	8002168 <Error_Handler>
    } else {
        printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
    }
}
 8001c54:	e005      	b.n	8001c62 <rotate_motor_dynamic+0x52>
        printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	79ba      	ldrb	r2, [r7, #6]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <rotate_motor_dynamic+0x60>)
 8001c5e:	f005 fc49 	bl	80074f4 <iprintf>
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	@ 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000020c 	.word	0x2000020c
 8001c70:	0800aef4 	.word	0x0800aef4

08001c74 <calculate_angle>:

// Fonction pour calculer l'angle basé sur la température
uint8_t calculate_angle(float temp) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t angle = 5 + (temp - TEMP_CIBLE) * 5; // Augmente l'angle en fonction de la température
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fc82 	bl	8000588 <__aeabi_f2d>
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <calculate_angle+0x6c>)
 8001c8a:	f7fe fb1d 	bl	80002c8 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <calculate_angle+0x70>)
 8001c9c:	f7fe fccc 	bl	8000638 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <calculate_angle+0x70>)
 8001cae:	f7fe fb0d 	bl	80002cc <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff95 	bl	8000be8 <__aeabi_d2uiz>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
    if (angle > 90) angle = 90; // Limite à 90°
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b5a      	cmp	r3, #90	@ 0x5a
 8001cc6:	d901      	bls.n	8001ccc <calculate_angle+0x58>
 8001cc8:	235a      	movs	r3, #90	@ 0x5a
 8001cca:	73fb      	strb	r3, [r7, #15]
    if (angle < 5) angle = 5;   // Limite à 5°
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d801      	bhi.n	8001cd6 <calculate_angle+0x62>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	73fb      	strb	r3, [r7, #15]
    return angle;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40390000 	.word	0x40390000
 8001ce4:	40140000 	.word	0x40140000

08001ce8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001cee:	f000 fccb 	bl	8002688 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001cf2:	f000 f8a5 	bl	8001e40 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001cf6:	f000 f9c9 	bl	800208c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8001cfa:	f000 f99d 	bl	8002038 <MX_USART2_UART_Init>
    MX_UART4_Init();
 8001cfe:	f000 f971 	bl	8001fe4 <MX_UART4_Init>
    MX_CAN1_Init();
 8001d02:	f000 f90b 	bl	8001f1c <MX_CAN1_Init>
    MX_I2C1_Init();
 8001d06:	f000 f93f 	bl	8001f88 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    printf("======= Démarrage du système =======\r\n");
 8001d0a:	4840      	ldr	r0, [pc, #256]	@ (8001e0c <main+0x124>)
 8001d0c:	f005 fc5a 	bl	80075c4 <puts>
    BMP280_check();
 8001d10:	f7ff fa7a 	bl	8001208 <BMP280_check>
    BMP280_init();
 8001d14:	f7ff fac6 	bl	80012a4 <BMP280_init>
    HAL_CAN_Start(&hcan1);
 8001d18:	483d      	ldr	r0, [pc, #244]	@ (8001e10 <main+0x128>)
 8001d1a:	f000 fe46 	bl	80029aa <HAL_CAN_Start>

    // Activation de la réception UART
    HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001d1e:	2207      	movs	r2, #7
 8001d20:	493c      	ldr	r1, [pc, #240]	@ (8001e14 <main+0x12c>)
 8001d22:	483d      	ldr	r0, [pc, #244]	@ (8001e18 <main+0x130>)
 8001d24:	f003 fc7f 	bl	8005626 <HAL_UART_Receive_IT>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        raw_temp = BMP280_get_temperature();
 8001d28:	f7ff fe6e 	bl	8001a08 <BMP280_get_temperature>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e1c <main+0x134>)
 8001d30:	6013      	str	r3, [r2, #0]
        raw_press = BMP280_get_pressure();
 8001d32:	f7ff fe8a 	bl	8001a4a <BMP280_get_pressure>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a39      	ldr	r2, [pc, #228]	@ (8001e20 <main+0x138>)
 8001d3a:	6013      	str	r3, [r2, #0]

        // Compensation des valeurs
        comp_temp = bmp280_compensate_T_int32(raw_temp);
 8001d3c:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <main+0x134>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fb59 	bl	80013f8 <bmp280_compensate_T_int32>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a36      	ldr	r2, [pc, #216]	@ (8001e24 <main+0x13c>)
 8001d4a:	6013      	str	r3, [r2, #0]
        comp_press = bmp280_compensate_P_int64(raw_press);
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <main+0x138>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fb93 	bl	800147c <bmp280_compensate_P_int64>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <main+0x140>)
 8001d5c:	601a      	str	r2, [r3, #0]

        // Affichage sur Minicom
        printf("------------------------------------------------\r\n");
 8001d5e:	4833      	ldr	r0, [pc, #204]	@ (8001e2c <main+0x144>)
 8001d60:	f005 fc30 	bl	80075c4 <puts>
        printf("Température compensée : %ld.%02ld°C\r\n", comp_temp / 100, abs(comp_temp % 100));
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <main+0x13c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a31      	ldr	r2, [pc, #196]	@ (8001e30 <main+0x148>)
 8001d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6e:	1152      	asrs	r2, r2, #5
 8001d70:	17db      	asrs	r3, r3, #31
 8001d72:	1ad0      	subs	r0, r2, r3
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <main+0x13c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <main+0x148>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	1159      	asrs	r1, r3, #5
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	2164      	movs	r1, #100	@ 0x64
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bfb8      	it	lt
 8001d90:	425b      	neglt	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	4601      	mov	r1, r0
 8001d96:	4827      	ldr	r0, [pc, #156]	@ (8001e34 <main+0x14c>)
 8001d98:	f005 fbac 	bl	80074f4 <iprintf>
        printf("Pression compensée : %ld.%02ld hPa\r\n", comp_press / 25600, (comp_press / 256) % 100);
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <main+0x140>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <main+0x148>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0b59      	lsrs	r1, r3, #13
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <main+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0a1a      	lsrs	r2, r3, #8
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <main+0x148>)
 8001db0:	fba3 0302 	umull	r0, r3, r3, r2
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	2064      	movs	r0, #100	@ 0x64
 8001db8:	fb00 f303 	mul.w	r3, r0, r3
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	481d      	ldr	r0, [pc, #116]	@ (8001e38 <main+0x150>)
 8001dc2:	f005 fb97 	bl	80074f4 <iprintf>

        // Calcul de l'angle en fonction de la température
        uint8_t angle = calculate_angle(comp_temp / 100.0);
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <main+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbca 	bl	8000564 <__aeabi_i2d>
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <main+0x154>)
 8001dd6:	f7fe fd59 	bl	800088c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff21 	bl	8000c28 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	ee00 3a10 	vmov	s0, r3
 8001dec:	f7ff ff42 	bl	8001c74 <calculate_angle>
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]

        // Faire tourner le moteur avec l'angle calculé
        rotate_motor_dynamic(angle, 0); // 0 pour sens horaire
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff09 	bl	8001c10 <rotate_motor_dynamic>

        // Attendre un peu avant de refaire le calcul
        HAL_Delay(1000);
 8001dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e02:	f000 fcb3 	bl	800276c <HAL_Delay>
    while (1) {
 8001e06:	bf00      	nop
 8001e08:	e78e      	b.n	8001d28 <main+0x40>
 8001e0a:	bf00      	nop
 8001e0c:	0800af24 	.word	0x0800af24
 8001e10:	2000020c 	.word	0x2000020c
 8001e14:	20000328 	.word	0x20000328
 8001e18:	20000288 	.word	0x20000288
 8001e1c:	20000318 	.word	0x20000318
 8001e20:	2000031c 	.word	0x2000031c
 8001e24:	20000320 	.word	0x20000320
 8001e28:	20000324 	.word	0x20000324
 8001e2c:	0800af4c 	.word	0x0800af4c
 8001e30:	51eb851f 	.word	0x51eb851f
 8001e34:	0800af80 	.word	0x0800af80
 8001e38:	0800afac 	.word	0x0800afac
 8001e3c:	40590000 	.word	0x40590000

08001e40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	@ 0x50
 8001e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	2234      	movs	r2, #52	@ 0x34
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f005 fcec 	bl	800782c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	4a29      	ldr	r2, [pc, #164]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eac:	2302      	movs	r3, #2
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ebc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 f830 	bl	8004f34 <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001eda:	f000 f945 	bl	8002168 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fcd0 	bl	80048a0 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001f06:	f000 f92f 	bl	8002168 <Error_Handler>
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	3750      	adds	r7, #80	@ 0x50
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f22:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <MX_CAN1_Init+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f28:	2206      	movs	r2, #6
 8001f2a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f3a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001f3e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f46:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	@ (8001f80 <MX_CAN1_Init+0x64>)
 8001f6e:	f000 fc21 	bl	80027b4 <HAL_CAN_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001f78:	f000 f8f6 	bl	8002168 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000020c 	.word	0x2000020c
 8001f84:	40006400 	.word	0x40006400

08001f88 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <MX_I2C1_Init+0x54>)
 8001f90:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001f94:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <MX_I2C1_Init+0x58>)
 8001f96:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	@ (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc6:	f001 f957 	bl	8003278 <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001fd0:	f000 f8ca 	bl	8002168 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000234 	.word	0x20000234
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	000186a0 	.word	0x000186a0

08001fe4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_UART4_Init+0x4c>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <MX_UART4_Init+0x50>)
 8001fec:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_UART4_Init+0x4c>)
 8001ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_UART4_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <MX_UART4_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <MX_UART4_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <MX_UART4_Init+0x4c>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <MX_UART4_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <MX_UART4_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_UART4_Init+0x4c>)
 800201c:	f003 fa28 	bl	8005470 <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8002026:	f000 f89f 	bl	8002168 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000288 	.word	0x20000288
 8002034:	40004c00 	.word	0x40004c00

08002038 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <MX_USART2_UART_Init+0x50>)
 8002040:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002070:	f003 f9fe 	bl	8005470 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800207a:	f000 f875 	bl	8002168 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200002d0 	.word	0x200002d0
 8002088:	40004400 	.word	0x40004400

0800208c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b2d      	ldr	r3, [pc, #180]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a25      	ldr	r2, [pc, #148]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_GPIO_Init+0xd0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <MX_GPIO_Init+0xd0>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <MX_GPIO_Init+0xd0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2120      	movs	r1, #32
 8002116:	4812      	ldr	r0, [pc, #72]	@ (8002160 <MX_GPIO_Init+0xd4>)
 8002118:	f001 f894 	bl	8003244 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800211c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002120:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002122:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002126:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_GPIO_Init+0xd8>)
 8002134:	f000 fef2 	bl	8002f1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002138:	2320      	movs	r3, #32
 800213a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4804      	ldr	r0, [pc, #16]	@ (8002160 <MX_GPIO_Init+0xd4>)
 8002150:	f000 fee4 	bl	8002f1c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3728      	adds	r7, #40	@ 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020800 	.word	0x40020800

08002168 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <HAL_MspInit+0x4c>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002188:	6453      	str	r3, [r2, #68]	@ 0x44
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_MspInit+0x4c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_MspInit+0x4c>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_MspInit+0x4c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021b2:	2007      	movs	r0, #7
 80021b4:	f000 fdde 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <HAL_CAN_MspInit+0x84>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12c      	bne.n	8002240 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_CAN_MspInit+0x88>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_CAN_MspInit+0x88>)
 80021f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_CAN_MspInit+0x88>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_CAN_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <HAL_CAN_MspInit+0x88>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_CAN_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800221e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002230:	2309      	movs	r3, #9
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4805      	ldr	r0, [pc, #20]	@ (8002250 <HAL_CAN_MspInit+0x8c>)
 800223c:	f000 fe6e 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	@ 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40006400 	.word	0x40006400
 800224c:	40023800 	.word	0x40023800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_I2C_MspInit+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002292:	23c0      	movs	r3, #192	@ 0xc0
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002296:	2312      	movs	r3, #18
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a2:	2304      	movs	r3, #4
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <HAL_I2C_MspInit+0x8c>)
 80022ae:	f000 fe35 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 80022bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_I2C_MspInit+0x88>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	@ 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40005400 	.word	0x40005400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020400 	.word	0x40020400

080022e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a36      	ldr	r2, [pc, #216]	@ (80023dc <HAL_UART_MspInit+0xf8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d134      	bne.n	8002370 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4a34      	ldr	r2, [pc, #208]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
 8002316:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b2e      	ldr	r3, [pc, #184]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4a2d      	ldr	r2, [pc, #180]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	@ 0x30
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800233e:	2303      	movs	r3, #3
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800234e:	2308      	movs	r3, #8
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4822      	ldr	r0, [pc, #136]	@ (80023e4 <HAL_UART_MspInit+0x100>)
 800235a:	f000 fddf 	bl	8002f1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2034      	movs	r0, #52	@ 0x34
 8002364:	f000 fd11 	bl	8002d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002368:	2034      	movs	r0, #52	@ 0x34
 800236a:	f000 fd2a 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800236e:	e030      	b.n	80023d2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <HAL_UART_MspInit+0x104>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d12b      	bne.n	80023d2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a10      	ldr	r2, [pc, #64]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <HAL_UART_MspInit+0xfc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023b2:	230c      	movs	r3, #12
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c2:	2307      	movs	r3, #7
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <HAL_UART_MspInit+0x100>)
 80023ce:	f000 fda5 	bl	8002f1c <HAL_GPIO_Init>
}
 80023d2:	bf00      	nop
 80023d4:	3730      	adds	r7, #48	@ 0x30
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40004c00 	.word	0x40004c00
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40004400 	.word	0x40004400

080023ec <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80023f4:	1d39      	adds	r1, r7, #4
 80023f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023fa:	2201      	movs	r2, #1
 80023fc:	4803      	ldr	r0, [pc, #12]	@ (800240c <__io_putchar+0x20>)
 80023fe:	f003 f887 	bl	8005510 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200002d0 	.word	0x200002d0

08002410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <NMI_Handler+0x4>

08002418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <HardFault_Handler+0x4>

08002420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <MemManage_Handler+0x4>

08002428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <UsageFault_Handler+0x4>

08002438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002466:	f000 f961 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <UART4_IRQHandler+0x10>)
 8002476:	f003 f8fb 	bl	8005670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000288 	.word	0x20000288

08002484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return 1;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_kill>:

int _kill(int pid, int sig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800249e:	f005 fa39 	bl	8007914 <__errno>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2216      	movs	r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
  return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_exit>:

void _exit (int status)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffe7 	bl	8002494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c6:	bf00      	nop
 80024c8:	e7fd      	b.n	80024c6 <_exit+0x12>

080024ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e00a      	b.n	80024f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024dc:	f3af 8000 	nop.w
 80024e0:	4601      	mov	r1, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	60ba      	str	r2, [r7, #8]
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf0      	blt.n	80024dc <_read+0x12>
  }

  return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e009      	b.n	800252a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	60ba      	str	r2, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff64 	bl	80023ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	dbf1      	blt.n	8002516 <_write+0x12>
  }
  return len;
 8002532:	687b      	ldr	r3, [r7, #4]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_close>:

int _close(int file)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002564:	605a      	str	r2, [r3, #4]
  return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_isatty>:

int _isatty(int file)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <_sbrk+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <_sbrk+0x60>)
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <_sbrk+0x64>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <_sbrk+0x68>)
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d4:	f005 f99e 	bl	8007914 <__errno>
 80025d8:	4603      	mov	r3, r0
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	e009      	b.n	80025f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <_sbrk+0x64>)
 80025f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20020000 	.word	0x20020000
 8002604:	00000400 	.word	0x00000400
 8002608:	20000364 	.word	0x20000364
 800260c:	200004b8 	.word	0x200004b8

08002610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <SystemInit+0x20>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <SystemInit+0x20>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800266c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002638:	f7ff ffea 	bl	8002610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	@ (8002674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	@ (8002680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002662:	f005 f95d 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff fb3f 	bl	8001ce8 <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002678:	0800b428 	.word	0x0800b428
  ldr r2, =_sbss
 800267c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002680:	200004b8 	.word	0x200004b8

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	@ (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 fb5f 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f000 f808 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fd5a 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_InitTick+0x54>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_InitTick+0x58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb77 	bl	8002dde <HAL_SYSTICK_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d80a      	bhi.n	8002716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f000 fb3f 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800270c:	4a06      	ldr	r2, [pc, #24]	@ (8002728 <HAL_InitTick+0x5c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000000 	.word	0x20000000
 8002724:	20000008 	.word	0x20000008
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000008 	.word	0x20000008
 8002750:	20000368 	.word	0x20000368

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000368 	.word	0x20000368

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000008 	.word	0x20000008

080027b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0ed      	b.n	80029a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fcf6 	bl	80021c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e8:	f7ff ffb4 	bl	8002754 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027ee:	e012      	b.n	8002816 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f0:	f7ff ffb0 	bl	8002754 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b0a      	cmp	r3, #10
 80027fc:	d90b      	bls.n	8002816 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0c5      	b.n	80029a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0e5      	beq.n	80027f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0202 	bic.w	r2, r2, #2
 8002832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002834:	f7ff ff8e 	bl	8002754 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800283a:	e012      	b.n	8002862 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800283c:	f7ff ff8a 	bl	8002754 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b0a      	cmp	r3, #10
 8002848:	d90b      	bls.n	8002862 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2205      	movs	r2, #5
 800285a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e09f      	b.n	80029a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e5      	bne.n	800283c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7e1b      	ldrb	r3, [r3, #24]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d108      	bne.n	800288a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e007      	b.n	800289a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7e5b      	ldrb	r3, [r3, #25]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e007      	b.n	80028c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7e9b      	ldrb	r3, [r3, #26]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0220 	bic.w	r2, r2, #32
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7edb      	ldrb	r3, [r3, #27]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0210 	bic.w	r2, r2, #16
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0210 	orr.w	r2, r2, #16
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f1b      	ldrb	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0208 	bic.w	r2, r2, #8
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7f5b      	ldrb	r3, [r3, #29]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0204 	orr.w	r2, r2, #4
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e007      	b.n	800296c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d12e      	bne.n	8002a1c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7ff febd 	bl	8002754 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029dc:	e012      	b.n	8002a04 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029de:	f7ff feb9 	bl	8002754 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b0a      	cmp	r3, #10
 80029ea:	d90b      	bls.n	8002a04 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2205      	movs	r2, #5
 80029fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e012      	b.n	8002a2a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e5      	bne.n	80029de <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b089      	sub	sp, #36	@ 0x24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a46:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a50:	7ffb      	ldrb	r3, [r7, #31]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d003      	beq.n	8002a5e <HAL_CAN_AddTxMessage+0x2c>
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	f040 80ad 	bne.w	8002bb8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8095 	beq.w	8002ba8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	0e1b      	lsrs	r3, r3, #24
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3318      	adds	r3, #24
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	440b      	add	r3, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e00f      	b.n	8002ad6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002aca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3318      	adds	r3, #24
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	440b      	add	r3, r1
 8002ad4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	7d1b      	ldrb	r3, [r3, #20]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d111      	bne.n	8002b16 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3318      	adds	r3, #24
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	3304      	adds	r3, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6811      	ldr	r1, [r2, #0]
 8002b06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	440b      	add	r3, r1
 8002b12:	3304      	adds	r3, #4
 8002b14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3307      	adds	r3, #7
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	061a      	lsls	r2, r3, #24
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3306      	adds	r3, #6
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3305      	adds	r3, #5
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	4313      	orrs	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	3204      	adds	r2, #4
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	6811      	ldr	r1, [r2, #0]
 8002b3e:	ea43 0200 	orr.w	r2, r3, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b4c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3303      	adds	r3, #3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	4610      	mov	r0, r2
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	6811      	ldr	r1, [r2, #0]
 8002b74:	ea43 0200 	orr.w	r2, r3, r0
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3318      	adds	r3, #24
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	6811      	ldr	r1, [r2, #0]
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	440b      	add	r3, r1
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e00e      	b.n	8002bc6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e006      	b.n	8002bc6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	@ 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	@ (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff fca6 	bl	8002754 <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d008      	beq.n	8002e28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e052      	b.n	8002ece <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0216 	bic.w	r2, r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <HAL_DMA_Abort+0x62>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e78:	e013      	b.n	8002ea2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7a:	f7ff fc6b 	bl	8002754 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d90c      	bls.n	8002ea2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e015      	b.n	8002ece <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e4      	bne.n	8002e7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	223f      	movs	r2, #63	@ 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e00c      	b.n	8002f0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	@ 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e165      	b.n	8003204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8154 	bne.w	80031fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80ae 	beq.w	80031fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b5d      	ldr	r3, [pc, #372]	@ (800321c <HAL_GPIO_Init+0x300>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	4a5c      	ldr	r2, [pc, #368]	@ (800321c <HAL_GPIO_Init+0x300>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b2:	4b5a      	ldr	r3, [pc, #360]	@ (800321c <HAL_GPIO_Init+0x300>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a58      	ldr	r2, [pc, #352]	@ (8003220 <HAL_GPIO_Init+0x304>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003224 <HAL_GPIO_Init+0x308>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x21a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003228 <HAL_GPIO_Init+0x30c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x216>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	@ (800322c <HAL_GPIO_Init+0x310>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003230 <HAL_GPIO_Init+0x314>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4b      	ldr	r2, [pc, #300]	@ (8003234 <HAL_GPIO_Init+0x318>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x20a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <HAL_GPIO_Init+0x31c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x206>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	@ (800323c <HAL_GPIO_Init+0x320>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x202>
 800311a:	2306      	movs	r3, #6
 800311c:	e00c      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800311e:	2307      	movs	r3, #7
 8003120:	e00a      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003122:	2305      	movs	r3, #5
 8003124:	e008      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003126:	2304      	movs	r3, #4
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312a:	2303      	movs	r3, #3
 800312c:	e004      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312e:	2302      	movs	r3, #2
 8003130:	e002      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003136:	2300      	movs	r3, #0
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	4093      	lsls	r3, r2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003148:	4935      	ldr	r1, [pc, #212]	@ (8003220 <HAL_GPIO_Init+0x304>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003156:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <HAL_GPIO_Init+0x324>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317a:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <HAL_GPIO_Init+0x324>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003180:	4b2f      	ldr	r3, [pc, #188]	@ (8003240 <HAL_GPIO_Init+0x324>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a4:	4a26      	ldr	r2, [pc, #152]	@ (8003240 <HAL_GPIO_Init+0x324>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031aa:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <HAL_GPIO_Init+0x324>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <HAL_GPIO_Init+0x324>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <HAL_GPIO_Init+0x324>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_GPIO_Init+0x324>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	f67f ae96 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3724      	adds	r7, #36	@ 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	40013800 	.word	0x40013800
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40021800 	.word	0x40021800
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003260:	e003      	b.n	800326a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e12b      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe ffd8 	bl	8002254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	@ 0x24
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032dc:	f001 fbd2 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a81      	ldr	r2, [pc, #516]	@ (80034ec <HAL_I2C_Init+0x274>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <HAL_I2C_Init+0x84>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a80      	ldr	r2, [pc, #512]	@ (80034f0 <HAL_I2C_Init+0x278>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e006      	b.n	800330a <HAL_I2C_Init+0x92>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a7d      	ldr	r2, [pc, #500]	@ (80034f4 <HAL_I2C_Init+0x27c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0e7      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a78      	ldr	r2, [pc, #480]	@ (80034f8 <HAL_I2C_Init+0x280>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a6a      	ldr	r2, [pc, #424]	@ (80034ec <HAL_I2C_Init+0x274>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d802      	bhi.n	800334c <HAL_I2C_Init+0xd4>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	e009      	b.n	8003360 <HAL_I2C_Init+0xe8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	4a69      	ldr	r2, [pc, #420]	@ (80034fc <HAL_I2C_Init+0x284>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003372:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	495c      	ldr	r1, [pc, #368]	@ (80034ec <HAL_I2C_Init+0x274>)
 800337c:	428b      	cmp	r3, r1
 800337e:	d819      	bhi.n	80033b4 <HAL_I2C_Init+0x13c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e59      	subs	r1, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fbb1 f3f3 	udiv	r3, r1, r3
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003394:	400b      	ands	r3, r1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_I2C_Init+0x138>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e59      	subs	r1, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	e051      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b0:	2304      	movs	r3, #4
 80033b2:	e04f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_I2C_Init+0x168>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	440b      	add	r3, r1
 80033ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e012      	b.n	8003406 <HAL_I2C_Init+0x18e>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x196>
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_I2C_Init+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1e58      	subs	r0, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	440b      	add	r3, r1
 8003424:	fbb0 f3f3 	udiv	r3, r0, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	6809      	ldr	r1, [r1, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6911      	ldr	r1, [r2, #16]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	000186a0 	.word	0x000186a0
 80034f0:	001e847f 	.word	0x001e847f
 80034f4:	003d08ff 	.word	0x003d08ff
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff f91e 	bl	8002754 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	f040 80e0 	bne.w	80036e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	4970      	ldr	r1, [pc, #448]	@ (80036f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 ff7e 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	e0d3      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x50>
 800354c:	2302      	movs	r3, #2
 800354e:	e0cc      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d007      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2210      	movs	r2, #16
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a50      	ldr	r2, [pc, #320]	@ (80036f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80035b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fd00 	bl	8003fc4 <I2C_MasterRequestWrite>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08d      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e4:	e066      	b.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f001 f83c 	bl	8004668 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d107      	bne.n	800360e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d11b      	bne.n	8003688 <HAL_I2C_Master_Transmit+0x188>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f001 f833 	bl	80046f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01a      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d194      	bne.n	80035e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	00100002 	.word	0x00100002
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
 800370c:	4613      	mov	r3, r2
 800370e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff f820 	bl	8002754 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	f040 8217 	bne.w	8003b52 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2319      	movs	r3, #25
 800372a:	2201      	movs	r2, #1
 800372c:	497c      	ldr	r1, [pc, #496]	@ (8003920 <HAL_I2C_Master_Receive+0x224>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fe80 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	e20a      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_I2C_Master_Receive+0x50>
 8003748:	2302      	movs	r3, #2
 800374a:	e203      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d007      	beq.n	8003772 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2222      	movs	r2, #34	@ 0x22
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2210      	movs	r2, #16
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003924 <HAL_I2C_Master_Receive+0x228>)
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b4:	8979      	ldrh	r1, [r7, #10]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fc84 	bl	80040c8 <I2C_MasterRequestRead>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1c4      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e198      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d11b      	bne.n	800383a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e178      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	2b02      	cmp	r3, #2
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	e158      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a0:	e144      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	f200 80f1 	bhi.w	8003a8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d123      	bne.n	80038fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 ff65 	bl	8004788 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e145      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038fa:	e117      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	2b02      	cmp	r3, #2
 8003902:	d14e      	bne.n	80039a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	2200      	movs	r2, #0
 800390c:	4906      	ldr	r1, [pc, #24]	@ (8003928 <HAL_I2C_Master_Receive+0x22c>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fd90 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e11a      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
 800391e:	bf00      	nop
 8003920:	00100002 	.word	0x00100002
 8003924:	ffff0000 	.word	0xffff0000
 8003928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a0:	e0c4      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	496c      	ldr	r1, [pc, #432]	@ (8003b5c <HAL_I2C_Master_Receive+0x460>)
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fd41 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cb      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	2200      	movs	r2, #0
 8003a06:	4955      	ldr	r1, [pc, #340]	@ (8003b5c <HAL_I2C_Master_Receive+0x460>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fd13 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e09d      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a8c:	e04e      	b.n	8003b2c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fe78 	bl	8004788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e058      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d124      	bne.n	8003b2c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f aeb6 	bne.w	80038a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3728      	adds	r7, #40	@ 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	00010004 	.word	0x00010004

08003b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	@ 0x30
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b7a:	f7fe fdeb 	bl	8002754 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 8214 	bne.w	8003fb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2319      	movs	r3, #25
 8003b94:	2201      	movs	r2, #1
 8003b96:	497b      	ldr	r1, [pc, #492]	@ (8003d84 <HAL_I2C_Mem_Read+0x224>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fc4b 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e207      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Mem_Read+0x56>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e200      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d007      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2222      	movs	r2, #34	@ 0x22
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d88 <HAL_I2C_Mem_Read+0x228>)
 8003c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c1e:	88f8      	ldrh	r0, [r7, #6]
 8003c20:	893a      	ldrh	r2, [r7, #8]
 8003c22:	8979      	ldrh	r1, [r7, #10]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fb18 	bl	8004264 <I2C_RequestMemoryRead>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e1bc      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e190      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d11b      	bne.n	8003cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e170      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d11b      	bne.n	8003cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	e150      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d04:	e144      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	f200 80f1 	bhi.w	8003ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d123      	bne.n	8003d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fd33 	bl	8004788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e145      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d5e:	e117      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d14e      	bne.n	8003e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4906      	ldr	r1, [pc, #24]	@ (8003d8c <HAL_I2C_Mem_Read+0x22c>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fb5e 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e11a      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
 8003d82:	bf00      	nop
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000
 8003d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e04:	e0c4      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	496c      	ldr	r1, [pc, #432]	@ (8003fc0 <HAL_I2C_Mem_Read+0x460>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fb0f 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0cb      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4955      	ldr	r1, [pc, #340]	@ (8003fc0 <HAL_I2C_Mem_Read+0x460>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fae1 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09d      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ef0:	e04e      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fc46 	bl	8004788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e058      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d124      	bne.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f aeb6 	bne.w	8003d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	@ 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	00010004 	.word	0x00010004

08003fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d006      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fec:	d108      	bne.n	8004000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00b      	b.n	8004018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b12      	cmp	r3, #18
 8004006:	d107      	bne.n	8004018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fa05 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403e:	d103      	bne.n	8004048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e035      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004054:	d108      	bne.n	8004068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e01b      	b.n	80040a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	11db      	asrs	r3, r3, #7
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0306 	and.w	r3, r3, #6
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f063 030f 	orn	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	490e      	ldr	r1, [pc, #56]	@ (80040c0 <I2C_MasterRequestWrite+0xfc>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fa4e 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e010      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4907      	ldr	r1, [pc, #28]	@ (80040c4 <I2C_MasterRequestWrite+0x100>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fa3e 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	00010008 	.word	0x00010008
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	460b      	mov	r3, r1
 80040d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d006      	beq.n	8004102 <I2C_MasterRequestRead+0x3a>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d003      	beq.n	8004102 <I2C_MasterRequestRead+0x3a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004100:	d108      	bne.n	8004114 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e00b      	b.n	800412c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	2b11      	cmp	r3, #17
 800411a:	d107      	bne.n	800412c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f97b 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004152:	d103      	bne.n	800415c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e079      	b.n	8004254 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004168:	d108      	bne.n	800417c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	e05f      	b.n	800423c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	11db      	asrs	r3, r3, #7
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f063 030f 	orn	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4930      	ldr	r1, [pc, #192]	@ (800425c <I2C_MasterRequestRead+0x194>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f9c4 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e054      	b.n	8004254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4929      	ldr	r1, [pc, #164]	@ (8004260 <I2C_MasterRequestRead+0x198>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f9b4 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e044      	b.n	8004254 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f919 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004216:	d103      	bne.n	8004220 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e017      	b.n	8004254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	11db      	asrs	r3, r3, #7
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f063 030e 	orn	r3, r3, #14
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4907      	ldr	r1, [pc, #28]	@ (8004260 <I2C_MasterRequestRead+0x198>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f970 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	00010008 	.word	0x00010008
 8004260:	00010002 	.word	0x00010002

08004264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4603      	mov	r3, r0
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	460b      	mov	r3, r1
 8004278:	813b      	strh	r3, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800429c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8c2 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c4:	d103      	bne.n	80042ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0aa      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042d2:	897b      	ldrh	r3, [r7, #10]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	4952      	ldr	r1, [pc, #328]	@ (8004430 <I2C_RequestMemoryRead+0x1cc>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f91d 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e097      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004310:	6a39      	ldr	r1, [r7, #32]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f9a8 	bl	8004668 <I2C_WaitOnTXEFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	2b04      	cmp	r3, #4
 8004324:	d107      	bne.n	8004336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e076      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004340:	893b      	ldrh	r3, [r7, #8]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	e021      	b.n	8004390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	b29b      	uxth	r3, r3
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435c:	6a39      	ldr	r1, [r7, #32]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f982 	bl	8004668 <I2C_WaitOnTXEFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	2b04      	cmp	r3, #4
 8004370:	d107      	bne.n	8004382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e050      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004392:	6a39      	ldr	r1, [r7, #32]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f967 	bl	8004668 <I2C_WaitOnTXEFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d107      	bne.n	80043b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e035      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f82b 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f2:	d103      	bne.n	80043fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e013      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	4906      	ldr	r1, [pc, #24]	@ (8004430 <I2C_RequestMemoryRead+0x1cc>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f886 	bl	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010002 	.word	0x00010002

08004434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004444:	e048      	b.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d044      	beq.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fe f981 	bl	8002754 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d139      	bne.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10d      	bne.n	800448a <I2C_WaitOnFlagUntilTimeout+0x56>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	43da      	mvns	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	e00c      	b.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	43da      	mvns	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d116      	bne.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e023      	b.n	8004520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d10d      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	e00c      	b.n	8004518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	43da      	mvns	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4013      	ands	r3, r2
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	429a      	cmp	r2, r3
 800451c:	d093      	beq.n	8004446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004536:	e071      	b.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004546:	d123      	bne.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	f043 0204 	orr.w	r2, r3, #4
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e067      	b.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d041      	beq.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fe f8dc 	bl	8002754 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d136      	bne.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10c      	bne.n	80045d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e00b      	b.n	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	43da      	mvns	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e021      	b.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10c      	bne.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e00b      	b.n	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f af6d 	bne.w	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004674:	e034      	b.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f8e3 	bl	8004842 <I2C_IsAcknowledgeFailed>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e034      	b.n	80046f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d028      	beq.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7fe f861 	bl	8002754 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d11d      	bne.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ae:	2b80      	cmp	r3, #128	@ 0x80
 80046b0:	d016      	beq.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b80      	cmp	r3, #128	@ 0x80
 80046ec:	d1c3      	bne.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004704:	e034      	b.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f89b 	bl	8004842 <I2C_IsAcknowledgeFailed>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e034      	b.n	8004780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d028      	beq.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fe f819 	bl	8002754 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11d      	bne.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b04      	cmp	r3, #4
 8004740:	d016      	beq.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e007      	b.n	8004780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d1c3      	bne.n	8004706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004794:	e049      	b.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d119      	bne.n	80047d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0210 	mvn.w	r2, #16
 80047ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e030      	b.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7fd ffbc 	bl	8002754 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11d      	bne.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d016      	beq.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e007      	b.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	2b40      	cmp	r3, #64	@ 0x40
 8004836:	d1ae      	bne.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004858:	d11b      	bne.n	8004892 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004862:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f043 0204 	orr.w	r2, r3, #4
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cc      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b68      	ldr	r3, [pc, #416]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d90c      	bls.n	80048dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b65      	ldr	r3, [pc, #404]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a58      	ldr	r2, [pc, #352]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a52      	ldr	r2, [pc, #328]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d044      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e067      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b37      	ldr	r3, [pc, #220]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4934      	ldr	r1, [pc, #208]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd fee0 	bl	8002754 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd fedc 	bl	8002754 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20c      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f855 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fe40 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800afd4 	.word	0x0800afd4
 8004a64:	20000000 	.word	0x20000000
 8004a68:	20000004 	.word	0x20000004

08004a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000000 	.word	0x20000000

08004a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a88:	f7ff fff0 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0a9b      	lsrs	r3, r3, #10
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	@ (8004aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	0800afe4 	.word	0x0800afe4

08004aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab0:	f7ff ffdc 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0b5b      	lsrs	r3, r3, #13
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	@ (8004ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	0800afe4 	.word	0x0800afe4

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b0ae      	sub	sp, #184	@ 0xb8
 8004ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004afa:	4bcb      	ldr	r3, [pc, #812]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	f200 8206 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x440>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004f15 	.word	0x08004f15
 8004b18:	08004f15 	.word	0x08004f15
 8004b1c:	08004f15 	.word	0x08004f15
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	08004f15 	.word	0x08004f15
 8004b28:	08004f15 	.word	0x08004f15
 8004b2c:	08004f15 	.word	0x08004f15
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004f15 	.word	0x08004f15
 8004b38:	08004f15 	.word	0x08004f15
 8004b3c:	08004f15 	.word	0x08004f15
 8004b40:	08004d45 	.word	0x08004d45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4bb9      	ldr	r3, [pc, #740]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x358>)
 8004b46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b4a:	e1e7      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b4c:	4bb8      	ldr	r3, [pc, #736]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b52:	e1e3      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b54:	4bb4      	ldr	r3, [pc, #720]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b60:	4bb1      	ldr	r3, [pc, #708]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d071      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6c:	4bae      	ldr	r3, [pc, #696]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	f04f 0000 	mov.w	r0, #0
 8004b9a:	f04f 0100 	mov.w	r1, #0
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba4:	0150      	lsls	r0, r2, #5
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4621      	mov	r1, r4
 8004bac:	1a51      	subs	r1, r2, r1
 8004bae:	6439      	str	r1, [r7, #64]	@ 0x40
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	018b      	lsls	r3, r1, #6
 8004bc8:	4641      	mov	r1, r8
 8004bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bce:	4641      	mov	r1, r8
 8004bd0:	018a      	lsls	r2, r1, #6
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	1a51      	subs	r1, r2, r1
 8004bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bd8:	4649      	mov	r1, r9
 8004bda:	eb63 0301 	sbc.w	r3, r3, r1
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004bec:	4649      	mov	r1, r9
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4622      	mov	r2, r4
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c06:	462b      	mov	r3, r5
 8004c08:	460a      	mov	r2, r1
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	024b      	lsls	r3, r1, #9
 8004c20:	4621      	mov	r1, r4
 8004c22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c26:	4621      	mov	r1, r4
 8004c28:	024a      	lsls	r2, r1, #9
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c40:	f7fc f892 	bl	8000d68 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c4e:	e067      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c50:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004c72:	4622      	mov	r2, r4
 8004c74:	462b      	mov	r3, r5
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cae:	4641      	mov	r1, r8
 8004cb0:	018a      	lsls	r2, r1, #6
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb8:	4649      	mov	r1, r9
 8004cba:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd2:	4692      	mov	sl, r2
 8004cd4:	469b      	mov	fp, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb1a 0303 	adds.w	r3, sl, r3
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	462b      	mov	r3, r5
 8004ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	028b      	lsls	r3, r1, #10
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	028a      	lsls	r2, r1, #10
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d08:	2200      	movs	r2, #0
 8004d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d12:	f7fc f829 	bl	8000d68 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d20:	4b41      	ldr	r3, [pc, #260]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d42:	e0eb      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d44:	4b38      	ldr	r3, [pc, #224]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	4b35      	ldr	r3, [pc, #212]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d06b      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4b32      	ldr	r3, [pc, #200]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	2200      	movs	r2, #0
 8004d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d70:	2300      	movs	r3, #0
 8004d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004d78:	4622      	mov	r2, r4
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0159      	lsls	r1, r3, #5
 8004d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8a:	0150      	lsls	r0, r2, #5
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4621      	mov	r1, r4
 8004d92:	1a51      	subs	r1, r2, r1
 8004d94:	61b9      	str	r1, [r7, #24]
 8004d96:	4629      	mov	r1, r5
 8004d98:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004daa:	4659      	mov	r1, fp
 8004dac:	018b      	lsls	r3, r1, #6
 8004dae:	4651      	mov	r1, sl
 8004db0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004db4:	4651      	mov	r1, sl
 8004db6:	018a      	lsls	r2, r1, #6
 8004db8:	4651      	mov	r1, sl
 8004dba:	ebb2 0801 	subs.w	r8, r2, r1
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	eb63 0901 	sbc.w	r9, r3, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd8:	4690      	mov	r8, r2
 8004dda:	4699      	mov	r9, r3
 8004ddc:	4623      	mov	r3, r4
 8004dde:	eb18 0303 	adds.w	r3, r8, r3
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	462b      	mov	r3, r5
 8004de6:	eb49 0303 	adc.w	r3, r9, r3
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004df8:	4629      	mov	r1, r5
 8004dfa:	024b      	lsls	r3, r1, #9
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e02:	4621      	mov	r1, r4
 8004e04:	024a      	lsls	r2, r1, #9
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e0e:	2200      	movs	r2, #0
 8004e10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e18:	f7fb ffa6 	bl	8000d68 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e26:	e065      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x420>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	00f42400 	.word	0x00f42400
 8004e30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e34:	4b3d      	ldr	r3, [pc, #244]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	4611      	mov	r1, r2
 8004e40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e46:	2300      	movs	r3, #0
 8004e48:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004e4e:	4642      	mov	r2, r8
 8004e50:	464b      	mov	r3, r9
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	0159      	lsls	r1, r3, #5
 8004e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e60:	0150      	lsls	r0, r2, #5
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4641      	mov	r1, r8
 8004e68:	1a51      	subs	r1, r2, r1
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e80:	4659      	mov	r1, fp
 8004e82:	018b      	lsls	r3, r1, #6
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	018a      	lsls	r2, r1, #6
 8004e8e:	4651      	mov	r1, sl
 8004e90:	1a54      	subs	r4, r2, r1
 8004e92:	4659      	mov	r1, fp
 8004e94:	eb63 0501 	sbc.w	r5, r3, r1
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	00eb      	lsls	r3, r5, #3
 8004ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea6:	00e2      	lsls	r2, r4, #3
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	18e3      	adds	r3, r4, r3
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	eb45 0303 	adc.w	r3, r5, r3
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	028b      	lsls	r3, r1, #10
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	028a      	lsls	r2, r1, #10
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004edc:	2200      	movs	r2, #0
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ee2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ee6:	f7fb ff3f 	bl	8000d68 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4613      	mov	r3, r2
 8004ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	0f1b      	lsrs	r3, r3, #28
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f12:	e003      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	37b8      	adds	r7, #184	@ 0xb8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400

08004f34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e28d      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 8083 	beq.w	800505a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f54:	4b94      	ldr	r3, [pc, #592]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d019      	beq.n	8004f94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f60:	4b91      	ldr	r3, [pc, #580]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f78:	d00c      	beq.n	8004f94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d112      	bne.n	8004fac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f86:	4b88      	ldr	r3, [pc, #544]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f92:	d10b      	bne.n	8004fac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	4b84      	ldr	r3, [pc, #528]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d05b      	beq.n	8005058 <HAL_RCC_OscConfig+0x124>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d157      	bne.n	8005058 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e25a      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x90>
 8004fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7b      	ldr	r2, [pc, #492]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e01d      	b.n	8005000 <HAL_RCC_OscConfig+0xcc>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xb4>
 8004fce:	4b76      	ldr	r3, [pc, #472]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a75      	ldr	r2, [pc, #468]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b73      	ldr	r3, [pc, #460]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a72      	ldr	r2, [pc, #456]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e00b      	b.n	8005000 <HAL_RCC_OscConfig+0xcc>
 8004fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a6e      	ldr	r2, [pc, #440]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a6b      	ldr	r2, [pc, #428]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8004ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fba4 	bl	8002754 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005010:	f7fd fba0 	bl	8002754 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	@ 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e21f      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	4b61      	ldr	r3, [pc, #388]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0xdc>
 800502e:	e014      	b.n	800505a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fb90 	bl	8002754 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fd fb8c 	bl	8002754 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e20b      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504a:	4b57      	ldr	r3, [pc, #348]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x104>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d06f      	beq.n	8005146 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005066:	4b50      	ldr	r3, [pc, #320]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b00      	cmp	r3, #0
 8005070:	d017      	beq.n	80050a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005072:	4b4d      	ldr	r3, [pc, #308]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
        || \
 800507a:	2b08      	cmp	r3, #8
 800507c:	d105      	bne.n	800508a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800507e:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508a:	4b47      	ldr	r3, [pc, #284]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d11c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x186>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1d3      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b3b      	ldr	r3, [pc, #236]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4937      	ldr	r1, [pc, #220]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0x278>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fd fb39 	bl	8002754 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fd fb35 	bl	8002754 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e1b4      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	4b2b      	ldr	r3, [pc, #172]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4925      	ldr	r1, [pc, #148]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511a:	4b24      	ldr	r3, [pc, #144]	@ (80051ac <HAL_RCC_OscConfig+0x278>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd fb18 	bl	8002754 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005128:	f7fd fb14 	bl	8002754 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e193      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d036      	beq.n	80051c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <HAL_RCC_OscConfig+0x27c>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd faf8 	bl	8002754 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005168:	f7fd faf4 	bl	8002754 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e173      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCC_OscConfig+0x274>)
 800517c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x234>
 8005186:	e01b      	b.n	80051c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005188:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <HAL_RCC_OscConfig+0x27c>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fd fae1 	bl	8002754 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	e00e      	b.n	80051b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005196:	f7fd fadd 	bl	8002754 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d907      	bls.n	80051b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e15c      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
 80051a8:	40023800 	.word	0x40023800
 80051ac:	42470000 	.word	0x42470000
 80051b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	4b8a      	ldr	r3, [pc, #552]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ea      	bne.n	8005196 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8097 	beq.w	80052fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d2:	4b83      	ldr	r3, [pc, #524]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	4b7f      	ldr	r3, [pc, #508]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	4a7e      	ldr	r2, [pc, #504]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ee:	4b7c      	ldr	r3, [pc, #496]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fe:	4b79      	ldr	r3, [pc, #484]	@ (80053e4 <HAL_RCC_OscConfig+0x4b0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d118      	bne.n	800523c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520a:	4b76      	ldr	r3, [pc, #472]	@ (80053e4 <HAL_RCC_OscConfig+0x4b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a75      	ldr	r2, [pc, #468]	@ (80053e4 <HAL_RCC_OscConfig+0x4b0>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005216:	f7fd fa9d 	bl	8002754 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521e:	f7fd fa99 	bl	8002754 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e118      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	4b6c      	ldr	r3, [pc, #432]	@ (80053e4 <HAL_RCC_OscConfig+0x4b0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d106      	bne.n	8005252 <HAL_RCC_OscConfig+0x31e>
 8005244:	4b66      	ldr	r3, [pc, #408]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a65      	ldr	r2, [pc, #404]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	e01c      	b.n	800528c <HAL_RCC_OscConfig+0x358>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x340>
 800525a:	4b61      	ldr	r3, [pc, #388]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a60      	ldr	r2, [pc, #384]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
 8005266:	4b5e      	ldr	r3, [pc, #376]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526a:	4a5d      	ldr	r2, [pc, #372]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6713      	str	r3, [r2, #112]	@ 0x70
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0x358>
 8005274:	4b5a      	ldr	r3, [pc, #360]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a59      	ldr	r2, [pc, #356]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005280:	4b57      	ldr	r3, [pc, #348]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd fa5e 	bl	8002754 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fd fa5a 	bl	8002754 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e0d7      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	4b4b      	ldr	r3, [pc, #300]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ee      	beq.n	800529c <HAL_RCC_OscConfig+0x368>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd fa48 	bl	8002754 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd fa44 	bl	8002754 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0c1      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052de:	4b40      	ldr	r3, [pc, #256]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ee      	bne.n	80052c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f0:	4b3b      	ldr	r3, [pc, #236]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	4a3a      	ldr	r2, [pc, #232]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80ad 	beq.w	8005460 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005306:	4b36      	ldr	r3, [pc, #216]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b08      	cmp	r3, #8
 8005310:	d060      	beq.n	80053d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d145      	bne.n	80053a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531a:	4b33      	ldr	r3, [pc, #204]	@ (80053e8 <HAL_RCC_OscConfig+0x4b4>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fa18 	bl	8002754 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fd fa14 	bl	8002754 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e093      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	4b29      	ldr	r3, [pc, #164]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	019b      	lsls	r3, r3, #6
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	071b      	lsls	r3, r3, #28
 8005372:	491b      	ldr	r1, [pc, #108]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005378:	4b1b      	ldr	r3, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x4b4>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fd f9e9 	bl	8002754 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005386:	f7fd f9e5 	bl	8002754 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e064      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005398:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x452>
 80053a4:	e05c      	b.n	8005460 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a6:	4b10      	ldr	r3, [pc, #64]	@ (80053e8 <HAL_RCC_OscConfig+0x4b4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd f9d2 	bl	8002754 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fd f9ce 	bl	8002754 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e04d      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x480>
 80053d2:	e045      	b.n	8005460 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e040      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40007000 	.word	0x40007000
 80053e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053ec:	4b1f      	ldr	r3, [pc, #124]	@ (800546c <HAL_RCC_OscConfig+0x538>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d030      	beq.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d129      	bne.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d122      	bne.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005424:	4293      	cmp	r3, r2
 8005426:	d119      	bne.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	3b01      	subs	r3, #1
 8005436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d10f      	bne.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d107      	bne.n	800545c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800

08005470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e042      	b.n	8005508 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc ff24 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2224      	movs	r2, #36	@ 0x24
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fdbd 	bl	8006034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	d175      	bne.n	800561c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_UART_Transmit+0x2c>
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e06e      	b.n	800561e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	@ 0x21
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554e:	f7fd f901 	bl	8002754 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005568:	d108      	bne.n	800557c <HAL_UART_Transmit+0x6c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e003      	b.n	8005584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005584:	e02e      	b.n	80055e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	2180      	movs	r1, #128	@ 0x80
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fb1f 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e03a      	b.n	800561e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	3302      	adds	r3, #2
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	e007      	b.n	80055d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1cb      	bne.n	8005586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2140      	movs	r1, #64	@ 0x40
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 faeb 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	4613      	mov	r3, r2
 8005632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b20      	cmp	r3, #32
 800563e:	d112      	bne.n	8005666 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_UART_Receive_IT+0x26>
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e00b      	b.n	8005668 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	461a      	mov	r2, r3
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fb12 	bl	8005c86 <UART_Start_Receive_IT>
 8005662:	4603      	mov	r3, r0
 8005664:	e000      	b.n	8005668 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0ba      	sub	sp, #232	@ 0xe8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005696:	2300      	movs	r3, #0
 8005698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800569c:	2300      	movs	r3, #0
 800569e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <HAL_UART_IRQHandler+0x66>
 80056c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fbf2 	bl	8005eb8 <UART_Receive_IT>
      return;
 80056d4:	e25b      	b.n	8005b8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80de 	beq.w	800589c <HAL_UART_IRQHandler+0x22c>
 80056e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80d1 	beq.w	800589c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0xae>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0201 	orr.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xd2>
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f043 0202 	orr.w	r2, r3, #2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xf6>
 800574e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	f043 0204 	orr.w	r2, r3, #4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d011      	beq.n	8005796 <HAL_UART_IRQHandler+0x126>
 8005772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800577e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f043 0208 	orr.w	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 81f2 	beq.w	8005b84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_UART_IRQHandler+0x14e>
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb7d 	bl	8005eb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_UART_IRQHandler+0x17a>
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04f      	beq.n	800588a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa85 	bl	8005cfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d141      	bne.n	8005882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3314      	adds	r3, #20
 8005826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800582a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800582e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d9      	bne.n	80057fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d013      	beq.n	800587a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	4a7e      	ldr	r2, [pc, #504]	@ (8005a50 <HAL_UART_IRQHandler+0x3e0>)
 8005858:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd fb39 	bl	8002ed6 <HAL_DMA_Abort_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d016      	beq.n	8005898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005874:	4610      	mov	r0, r2
 8005876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e00e      	b.n	8005898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f994 	bl	8005ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	e00a      	b.n	8005898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f990 	bl	8005ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	e006      	b.n	8005898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f98c 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005896:	e175      	b.n	8005b84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005898:	bf00      	nop
    return;
 800589a:	e173      	b.n	8005b84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 814f 	bne.w	8005b44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8148 	beq.w	8005b44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8141 	beq.w	8005b44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e2:	2b40      	cmp	r3, #64	@ 0x40
 80058e4:	f040 80b6 	bne.w	8005a54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8145 	beq.w	8005b88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005906:	429a      	cmp	r2, r3
 8005908:	f080 813e 	bcs.w	8005b88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005912:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591e:	f000 8088 	beq.w	8005a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800593c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800594e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800595a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1d9      	bne.n	8005922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3314      	adds	r3, #20
 8005974:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800597e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3314      	adds	r3, #20
 800598e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005992:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005996:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800599a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e1      	bne.n	800596e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e3      	bne.n	80059aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a02:	f023 0310 	bic.w	r3, r3, #16
 8005a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e3      	bne.n	80059f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd f9e2 	bl	8002df6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8b7 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a4e:	e09b      	b.n	8005b88 <HAL_UART_IRQHandler+0x518>
 8005a50:	08005dc1 	.word	0x08005dc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 808e 	beq.w	8005b8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8089 	beq.w	8005b8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e3      	bne.n	8005a7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e3      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0310 	bic.w	r3, r3, #16
 8005b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b1c:	61fa      	str	r2, [r7, #28]
 8005b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	69b9      	ldr	r1, [r7, #24]
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e3      	bne.n	8005af8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f83d 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b42:	e023      	b.n	8005b8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_UART_IRQHandler+0x4f4>
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f943 	bl	8005de8 <UART_Transmit_IT>
    return;
 8005b62:	e014      	b.n	8005b8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x51e>
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f983 	bl	8005e88 <UART_EndTransmit_IT>
    return;
 8005b82:	e004      	b.n	8005b8e <HAL_UART_IRQHandler+0x51e>
    return;
 8005b84:	bf00      	nop
 8005b86:	e002      	b.n	8005b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b8c:	bf00      	nop
  }
}
 8005b8e:	37e8      	adds	r7, #232	@ 0xe8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be4:	e03b      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d037      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fc fdb1 	bl	8002754 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e03a      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d023      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b80      	cmp	r3, #128	@ 0x80
 8005c1a:	d020      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d01d      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d116      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f857 	bl	8005cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2208      	movs	r2, #8
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e00f      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d0b4      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	4613      	mov	r3, r2
 8005c92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	88fa      	ldrh	r2, [r7, #6]
 8005c9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2222      	movs	r2, #34	@ 0x22
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0220 	orr.w	r2, r2, #32
 8005cea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b095      	sub	sp, #84	@ 0x54
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d22:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3314      	adds	r3, #20
 8005d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e5      	bne.n	8005d36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d119      	bne.n	8005da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f023 0310 	bic.w	r3, r3, #16
 8005d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d92:	61ba      	str	r2, [r7, #24]
 8005d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6979      	ldr	r1, [r7, #20]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005db4:	bf00      	nop
 8005db6:	3754      	adds	r7, #84	@ 0x54
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fee4 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b21      	cmp	r3, #33	@ 0x21
 8005dfa:	d13e      	bne.n	8005e7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e04:	d114      	bne.n	8005e30 <UART_Transmit_IT+0x48>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d110      	bne.n	8005e30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	621a      	str	r2, [r3, #32]
 8005e2e:	e008      	b.n	8005e42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	1c59      	adds	r1, r3, #1
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6211      	str	r1, [r2, #32]
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e000      	b.n	8005e7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
  }
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fe73 	bl	8005b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	@ 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b22      	cmp	r3, #34	@ 0x22
 8005eca:	f040 80ae 	bne.w	800602a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed6:	d117      	bne.n	8005f08 <UART_Receive_IT+0x50>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d113      	bne.n	8005f08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f00:	1c9a      	adds	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f06:	e026      	b.n	8005f56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1a:	d007      	beq.n	8005f2c <UART_Receive_IT+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <UART_Receive_IT+0x82>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e008      	b.n	8005f4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4619      	mov	r1, r3
 8005f64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d15d      	bne.n	8006026 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0220 	bic.w	r2, r2, #32
 8005f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d135      	bne.n	800601c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd6:	623a      	str	r2, [r7, #32]
 8005fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	69f9      	ldr	r1, [r7, #28]
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e5      	bne.n	8005fb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d10a      	bne.n	800600e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fdd1 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
 800601a:	e002      	b.n	8006022 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb fd35 	bl	8001a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e002      	b.n	800602c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3730      	adds	r7, #48	@ 0x30
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006038:	b0c0      	sub	sp, #256	@ 0x100
 800603a:	af00      	add	r7, sp, #0
 800603c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	68d9      	ldr	r1, [r3, #12]
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	ea40 0301 	orr.w	r3, r0, r1
 800605c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	431a      	orrs	r2, r3
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	431a      	orrs	r2, r3
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800608c:	f021 010c 	bic.w	r1, r1, #12
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800609a:	430b      	orrs	r3, r1
 800609c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	6999      	ldr	r1, [r3, #24]
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	ea40 0301 	orr.w	r3, r0, r1
 80060ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006300 <UART_SetConfig+0x2cc>)
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d005      	beq.n	80060d4 <UART_SetConfig+0xa0>
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006304 <UART_SetConfig+0x2d0>)
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d104      	bne.n	80060de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe fcea 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 80060d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060dc:	e003      	b.n	80060e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060de:	f7fe fcd1 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80060e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f0:	f040 810c 	bne.w	800630c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006106:	4622      	mov	r2, r4
 8006108:	462b      	mov	r3, r5
 800610a:	1891      	adds	r1, r2, r2
 800610c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800610e:	415b      	adcs	r3, r3
 8006110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006116:	4621      	mov	r1, r4
 8006118:	eb12 0801 	adds.w	r8, r2, r1
 800611c:	4629      	mov	r1, r5
 800611e:	eb43 0901 	adc.w	r9, r3, r1
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800612e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006136:	4690      	mov	r8, r2
 8006138:	4699      	mov	r9, r3
 800613a:	4623      	mov	r3, r4
 800613c:	eb18 0303 	adds.w	r3, r8, r3
 8006140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006144:	462b      	mov	r3, r5
 8006146:	eb49 0303 	adc.w	r3, r9, r3
 800614a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800615a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800615e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006162:	460b      	mov	r3, r1
 8006164:	18db      	adds	r3, r3, r3
 8006166:	653b      	str	r3, [r7, #80]	@ 0x50
 8006168:	4613      	mov	r3, r2
 800616a:	eb42 0303 	adc.w	r3, r2, r3
 800616e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006178:	f7fa fdf6 	bl	8000d68 <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4b61      	ldr	r3, [pc, #388]	@ (8006308 <UART_SetConfig+0x2d4>)
 8006182:	fba3 2302 	umull	r2, r3, r3, r2
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	011c      	lsls	r4, r3, #4
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800619c:	4642      	mov	r2, r8
 800619e:	464b      	mov	r3, r9
 80061a0:	1891      	adds	r1, r2, r2
 80061a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061a4:	415b      	adcs	r3, r3
 80061a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061ac:	4641      	mov	r1, r8
 80061ae:	eb12 0a01 	adds.w	sl, r2, r1
 80061b2:	4649      	mov	r1, r9
 80061b4:	eb43 0b01 	adc.w	fp, r3, r1
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061cc:	4692      	mov	sl, r2
 80061ce:	469b      	mov	fp, r3
 80061d0:	4643      	mov	r3, r8
 80061d2:	eb1a 0303 	adds.w	r3, sl, r3
 80061d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061da:	464b      	mov	r3, r9
 80061dc:	eb4b 0303 	adc.w	r3, fp, r3
 80061e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061f8:	460b      	mov	r3, r1
 80061fa:	18db      	adds	r3, r3, r3
 80061fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061fe:	4613      	mov	r3, r2
 8006200:	eb42 0303 	adc.w	r3, r2, r3
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
 8006206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800620a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800620e:	f7fa fdab 	bl	8000d68 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4611      	mov	r1, r2
 8006218:	4b3b      	ldr	r3, [pc, #236]	@ (8006308 <UART_SetConfig+0x2d4>)
 800621a:	fba3 2301 	umull	r2, r3, r3, r1
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2264      	movs	r2, #100	@ 0x64
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	1acb      	subs	r3, r1, r3
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800622e:	4b36      	ldr	r3, [pc, #216]	@ (8006308 <UART_SetConfig+0x2d4>)
 8006230:	fba3 2302 	umull	r2, r3, r3, r2
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800623c:	441c      	add	r4, r3
 800623e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006248:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800624c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	1891      	adds	r1, r2, r2
 8006256:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006258:	415b      	adcs	r3, r3
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006260:	4641      	mov	r1, r8
 8006262:	1851      	adds	r1, r2, r1
 8006264:	6339      	str	r1, [r7, #48]	@ 0x30
 8006266:	4649      	mov	r1, r9
 8006268:	414b      	adcs	r3, r1
 800626a:	637b      	str	r3, [r7, #52]	@ 0x34
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006278:	4659      	mov	r1, fp
 800627a:	00cb      	lsls	r3, r1, #3
 800627c:	4651      	mov	r1, sl
 800627e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006282:	4651      	mov	r1, sl
 8006284:	00ca      	lsls	r2, r1, #3
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	4603      	mov	r3, r0
 800628c:	4642      	mov	r2, r8
 800628e:	189b      	adds	r3, r3, r2
 8006290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006294:	464b      	mov	r3, r9
 8006296:	460a      	mov	r2, r1
 8006298:	eb42 0303 	adc.w	r3, r2, r3
 800629c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062b4:	460b      	mov	r3, r1
 80062b6:	18db      	adds	r3, r3, r3
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ba:	4613      	mov	r3, r2
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062ca:	f7fa fd4d 	bl	8000d68 <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <UART_SetConfig+0x2d4>)
 80062d4:	fba3 1302 	umull	r1, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	2164      	movs	r1, #100	@ 0x64
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	3332      	adds	r3, #50	@ 0x32
 80062e6:	4a08      	ldr	r2, [pc, #32]	@ (8006308 <UART_SetConfig+0x2d4>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	f003 0207 	and.w	r2, r3, #7
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4422      	add	r2, r4
 80062fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062fc:	e106      	b.n	800650c <UART_SetConfig+0x4d8>
 80062fe:	bf00      	nop
 8006300:	40011000 	.word	0x40011000
 8006304:	40011400 	.word	0x40011400
 8006308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800630c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006310:	2200      	movs	r2, #0
 8006312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006316:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800631a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800631e:	4642      	mov	r2, r8
 8006320:	464b      	mov	r3, r9
 8006322:	1891      	adds	r1, r2, r2
 8006324:	6239      	str	r1, [r7, #32]
 8006326:	415b      	adcs	r3, r3
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
 800632a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800632e:	4641      	mov	r1, r8
 8006330:	1854      	adds	r4, r2, r1
 8006332:	4649      	mov	r1, r9
 8006334:	eb43 0501 	adc.w	r5, r3, r1
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	00eb      	lsls	r3, r5, #3
 8006342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006346:	00e2      	lsls	r2, r4, #3
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	4643      	mov	r3, r8
 800634e:	18e3      	adds	r3, r4, r3
 8006350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006354:	464b      	mov	r3, r9
 8006356:	eb45 0303 	adc.w	r3, r5, r3
 800635a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800636a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800637a:	4629      	mov	r1, r5
 800637c:	008b      	lsls	r3, r1, #2
 800637e:	4621      	mov	r1, r4
 8006380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006384:	4621      	mov	r1, r4
 8006386:	008a      	lsls	r2, r1, #2
 8006388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800638c:	f7fa fcec 	bl	8000d68 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4b60      	ldr	r3, [pc, #384]	@ (8006518 <UART_SetConfig+0x4e4>)
 8006396:	fba3 2302 	umull	r2, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	011c      	lsls	r4, r3, #4
 800639e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	61b9      	str	r1, [r7, #24]
 80063b8:	415b      	adcs	r3, r3
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c0:	4641      	mov	r1, r8
 80063c2:	1851      	adds	r1, r2, r1
 80063c4:	6139      	str	r1, [r7, #16]
 80063c6:	4649      	mov	r1, r9
 80063c8:	414b      	adcs	r3, r1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063d8:	4659      	mov	r1, fp
 80063da:	00cb      	lsls	r3, r1, #3
 80063dc:	4651      	mov	r1, sl
 80063de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e2:	4651      	mov	r1, sl
 80063e4:	00ca      	lsls	r2, r1, #3
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	4642      	mov	r2, r8
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063f4:	464b      	mov	r3, r9
 80063f6:	460a      	mov	r2, r1
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800640a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006418:	4649      	mov	r1, r9
 800641a:	008b      	lsls	r3, r1, #2
 800641c:	4641      	mov	r1, r8
 800641e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006422:	4641      	mov	r1, r8
 8006424:	008a      	lsls	r2, r1, #2
 8006426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800642a:	f7fa fc9d 	bl	8000d68 <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4611      	mov	r1, r2
 8006434:	4b38      	ldr	r3, [pc, #224]	@ (8006518 <UART_SetConfig+0x4e4>)
 8006436:	fba3 2301 	umull	r2, r3, r3, r1
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	2264      	movs	r2, #100	@ 0x64
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	1acb      	subs	r3, r1, r3
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	3332      	adds	r3, #50	@ 0x32
 8006448:	4a33      	ldr	r2, [pc, #204]	@ (8006518 <UART_SetConfig+0x4e4>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006454:	441c      	add	r4, r3
 8006456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800645a:	2200      	movs	r2, #0
 800645c:	673b      	str	r3, [r7, #112]	@ 0x70
 800645e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006460:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	1891      	adds	r1, r2, r2
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	415b      	adcs	r3, r3
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006474:	4641      	mov	r1, r8
 8006476:	1851      	adds	r1, r2, r1
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	4649      	mov	r1, r9
 800647c:	414b      	adcs	r3, r1
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800648c:	4659      	mov	r1, fp
 800648e:	00cb      	lsls	r3, r1, #3
 8006490:	4651      	mov	r1, sl
 8006492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006496:	4651      	mov	r1, sl
 8006498:	00ca      	lsls	r2, r1, #3
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	4642      	mov	r2, r8
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064a6:	464b      	mov	r3, r9
 80064a8:	460a      	mov	r2, r1
 80064aa:	eb42 0303 	adc.w	r3, r2, r3
 80064ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064c8:	4649      	mov	r1, r9
 80064ca:	008b      	lsls	r3, r1, #2
 80064cc:	4641      	mov	r1, r8
 80064ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d2:	4641      	mov	r1, r8
 80064d4:	008a      	lsls	r2, r1, #2
 80064d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064da:	f7fa fc45 	bl	8000d68 <__aeabi_uldivmod>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <UART_SetConfig+0x4e4>)
 80064e4:	fba3 1302 	umull	r1, r3, r3, r2
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	2164      	movs	r1, #100	@ 0x64
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	3332      	adds	r3, #50	@ 0x32
 80064f6:	4a08      	ldr	r2, [pc, #32]	@ (8006518 <UART_SetConfig+0x4e4>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4422      	add	r2, r4
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	bf00      	nop
 800650e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006518:	51eb851f 	.word	0x51eb851f

0800651c <malloc>:
 800651c:	4b02      	ldr	r3, [pc, #8]	@ (8006528 <malloc+0xc>)
 800651e:	4601      	mov	r1, r0
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	f000 b82d 	b.w	8006580 <_malloc_r>
 8006526:	bf00      	nop
 8006528:	20000018 	.word	0x20000018

0800652c <free>:
 800652c:	4b02      	ldr	r3, [pc, #8]	@ (8006538 <free+0xc>)
 800652e:	4601      	mov	r1, r0
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	f002 b871 	b.w	8008618 <_free_r>
 8006536:	bf00      	nop
 8006538:	20000018 	.word	0x20000018

0800653c <sbrk_aligned>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	4e0f      	ldr	r6, [pc, #60]	@ (800657c <sbrk_aligned+0x40>)
 8006540:	460c      	mov	r4, r1
 8006542:	6831      	ldr	r1, [r6, #0]
 8006544:	4605      	mov	r5, r0
 8006546:	b911      	cbnz	r1, 800654e <sbrk_aligned+0x12>
 8006548:	f001 f9c2 	bl	80078d0 <_sbrk_r>
 800654c:	6030      	str	r0, [r6, #0]
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f001 f9bd 	bl	80078d0 <_sbrk_r>
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	d103      	bne.n	8006562 <sbrk_aligned+0x26>
 800655a:	f04f 34ff 	mov.w	r4, #4294967295
 800655e:	4620      	mov	r0, r4
 8006560:	bd70      	pop	{r4, r5, r6, pc}
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d0f8      	beq.n	800655e <sbrk_aligned+0x22>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4628      	mov	r0, r5
 8006570:	f001 f9ae 	bl	80078d0 <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d1f2      	bne.n	800655e <sbrk_aligned+0x22>
 8006578:	e7ef      	b.n	800655a <sbrk_aligned+0x1e>
 800657a:	bf00      	nop
 800657c:	2000036c 	.word	0x2000036c

08006580 <_malloc_r>:
 8006580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006584:	1ccd      	adds	r5, r1, #3
 8006586:	f025 0503 	bic.w	r5, r5, #3
 800658a:	3508      	adds	r5, #8
 800658c:	2d0c      	cmp	r5, #12
 800658e:	bf38      	it	cc
 8006590:	250c      	movcc	r5, #12
 8006592:	2d00      	cmp	r5, #0
 8006594:	4606      	mov	r6, r0
 8006596:	db01      	blt.n	800659c <_malloc_r+0x1c>
 8006598:	42a9      	cmp	r1, r5
 800659a:	d904      	bls.n	80065a6 <_malloc_r+0x26>
 800659c:	230c      	movs	r3, #12
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	2000      	movs	r0, #0
 80065a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800667c <_malloc_r+0xfc>
 80065aa:	f000 f869 	bl	8006680 <__malloc_lock>
 80065ae:	f8d8 3000 	ldr.w	r3, [r8]
 80065b2:	461c      	mov	r4, r3
 80065b4:	bb44      	cbnz	r4, 8006608 <_malloc_r+0x88>
 80065b6:	4629      	mov	r1, r5
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7ff ffbf 	bl	800653c <sbrk_aligned>
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	4604      	mov	r4, r0
 80065c2:	d158      	bne.n	8006676 <_malloc_r+0xf6>
 80065c4:	f8d8 4000 	ldr.w	r4, [r8]
 80065c8:	4627      	mov	r7, r4
 80065ca:	2f00      	cmp	r7, #0
 80065cc:	d143      	bne.n	8006656 <_malloc_r+0xd6>
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	d04b      	beq.n	800666a <_malloc_r+0xea>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	4639      	mov	r1, r7
 80065d6:	4630      	mov	r0, r6
 80065d8:	eb04 0903 	add.w	r9, r4, r3
 80065dc:	f001 f978 	bl	80078d0 <_sbrk_r>
 80065e0:	4581      	cmp	r9, r0
 80065e2:	d142      	bne.n	800666a <_malloc_r+0xea>
 80065e4:	6821      	ldr	r1, [r4, #0]
 80065e6:	1a6d      	subs	r5, r5, r1
 80065e8:	4629      	mov	r1, r5
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ffa6 	bl	800653c <sbrk_aligned>
 80065f0:	3001      	adds	r0, #1
 80065f2:	d03a      	beq.n	800666a <_malloc_r+0xea>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	442b      	add	r3, r5
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	bb62      	cbnz	r2, 800665c <_malloc_r+0xdc>
 8006602:	f8c8 7000 	str.w	r7, [r8]
 8006606:	e00f      	b.n	8006628 <_malloc_r+0xa8>
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	1b52      	subs	r2, r2, r5
 800660c:	d420      	bmi.n	8006650 <_malloc_r+0xd0>
 800660e:	2a0b      	cmp	r2, #11
 8006610:	d917      	bls.n	8006642 <_malloc_r+0xc2>
 8006612:	1961      	adds	r1, r4, r5
 8006614:	42a3      	cmp	r3, r4
 8006616:	6025      	str	r5, [r4, #0]
 8006618:	bf18      	it	ne
 800661a:	6059      	strne	r1, [r3, #4]
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	bf08      	it	eq
 8006620:	f8c8 1000 	streq.w	r1, [r8]
 8006624:	5162      	str	r2, [r4, r5]
 8006626:	604b      	str	r3, [r1, #4]
 8006628:	4630      	mov	r0, r6
 800662a:	f000 f82f 	bl	800668c <__malloc_unlock>
 800662e:	f104 000b 	add.w	r0, r4, #11
 8006632:	1d23      	adds	r3, r4, #4
 8006634:	f020 0007 	bic.w	r0, r0, #7
 8006638:	1ac2      	subs	r2, r0, r3
 800663a:	bf1c      	itt	ne
 800663c:	1a1b      	subne	r3, r3, r0
 800663e:	50a3      	strne	r3, [r4, r2]
 8006640:	e7af      	b.n	80065a2 <_malloc_r+0x22>
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	42a3      	cmp	r3, r4
 8006646:	bf0c      	ite	eq
 8006648:	f8c8 2000 	streq.w	r2, [r8]
 800664c:	605a      	strne	r2, [r3, #4]
 800664e:	e7eb      	b.n	8006628 <_malloc_r+0xa8>
 8006650:	4623      	mov	r3, r4
 8006652:	6864      	ldr	r4, [r4, #4]
 8006654:	e7ae      	b.n	80065b4 <_malloc_r+0x34>
 8006656:	463c      	mov	r4, r7
 8006658:	687f      	ldr	r7, [r7, #4]
 800665a:	e7b6      	b.n	80065ca <_malloc_r+0x4a>
 800665c:	461a      	mov	r2, r3
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	42a3      	cmp	r3, r4
 8006662:	d1fb      	bne.n	800665c <_malloc_r+0xdc>
 8006664:	2300      	movs	r3, #0
 8006666:	6053      	str	r3, [r2, #4]
 8006668:	e7de      	b.n	8006628 <_malloc_r+0xa8>
 800666a:	230c      	movs	r3, #12
 800666c:	6033      	str	r3, [r6, #0]
 800666e:	4630      	mov	r0, r6
 8006670:	f000 f80c 	bl	800668c <__malloc_unlock>
 8006674:	e794      	b.n	80065a0 <_malloc_r+0x20>
 8006676:	6005      	str	r5, [r0, #0]
 8006678:	e7d6      	b.n	8006628 <_malloc_r+0xa8>
 800667a:	bf00      	nop
 800667c:	20000370 	.word	0x20000370

08006680 <__malloc_lock>:
 8006680:	4801      	ldr	r0, [pc, #4]	@ (8006688 <__malloc_lock+0x8>)
 8006682:	f001 b972 	b.w	800796a <__retarget_lock_acquire_recursive>
 8006686:	bf00      	nop
 8006688:	200004b4 	.word	0x200004b4

0800668c <__malloc_unlock>:
 800668c:	4801      	ldr	r0, [pc, #4]	@ (8006694 <__malloc_unlock+0x8>)
 800668e:	f001 b96d 	b.w	800796c <__retarget_lock_release_recursive>
 8006692:	bf00      	nop
 8006694:	200004b4 	.word	0x200004b4

08006698 <__cvt>:
 8006698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	ec57 6b10 	vmov	r6, r7, d0
 80066a0:	2f00      	cmp	r7, #0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4619      	mov	r1, r3
 80066a6:	463b      	mov	r3, r7
 80066a8:	bfbb      	ittet	lt
 80066aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066ae:	461f      	movlt	r7, r3
 80066b0:	2300      	movge	r3, #0
 80066b2:	232d      	movlt	r3, #45	@ 0x2d
 80066b4:	700b      	strb	r3, [r1, #0]
 80066b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066bc:	4691      	mov	r9, r2
 80066be:	f023 0820 	bic.w	r8, r3, #32
 80066c2:	bfbc      	itt	lt
 80066c4:	4632      	movlt	r2, r6
 80066c6:	4616      	movlt	r6, r2
 80066c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066cc:	d005      	beq.n	80066da <__cvt+0x42>
 80066ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066d2:	d100      	bne.n	80066d6 <__cvt+0x3e>
 80066d4:	3401      	adds	r4, #1
 80066d6:	2102      	movs	r1, #2
 80066d8:	e000      	b.n	80066dc <__cvt+0x44>
 80066da:	2103      	movs	r1, #3
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	ab02      	add	r3, sp, #8
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	ec47 6b10 	vmov	d0, r6, r7
 80066e8:	4653      	mov	r3, sl
 80066ea:	4622      	mov	r2, r4
 80066ec:	f001 f9d0 	bl	8007a90 <_dtoa_r>
 80066f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066f4:	4605      	mov	r5, r0
 80066f6:	d119      	bne.n	800672c <__cvt+0x94>
 80066f8:	f019 0f01 	tst.w	r9, #1
 80066fc:	d00e      	beq.n	800671c <__cvt+0x84>
 80066fe:	eb00 0904 	add.w	r9, r0, r4
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800670e:	b108      	cbz	r0, 8006714 <__cvt+0x7c>
 8006710:	f8cd 900c 	str.w	r9, [sp, #12]
 8006714:	2230      	movs	r2, #48	@ 0x30
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	454b      	cmp	r3, r9
 800671a:	d31e      	bcc.n	800675a <__cvt+0xc2>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006720:	1b5b      	subs	r3, r3, r5
 8006722:	4628      	mov	r0, r5
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	b004      	add	sp, #16
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006730:	eb00 0904 	add.w	r9, r0, r4
 8006734:	d1e5      	bne.n	8006702 <__cvt+0x6a>
 8006736:	7803      	ldrb	r3, [r0, #0]
 8006738:	2b30      	cmp	r3, #48	@ 0x30
 800673a:	d10a      	bne.n	8006752 <__cvt+0xba>
 800673c:	2200      	movs	r2, #0
 800673e:	2300      	movs	r3, #0
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7fa f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8006748:	b918      	cbnz	r0, 8006752 <__cvt+0xba>
 800674a:	f1c4 0401 	rsb	r4, r4, #1
 800674e:	f8ca 4000 	str.w	r4, [sl]
 8006752:	f8da 3000 	ldr.w	r3, [sl]
 8006756:	4499      	add	r9, r3
 8006758:	e7d3      	b.n	8006702 <__cvt+0x6a>
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	9103      	str	r1, [sp, #12]
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e7d9      	b.n	8006716 <__cvt+0x7e>

08006762 <__exponent>:
 8006762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006764:	2900      	cmp	r1, #0
 8006766:	bfba      	itte	lt
 8006768:	4249      	neglt	r1, r1
 800676a:	232d      	movlt	r3, #45	@ 0x2d
 800676c:	232b      	movge	r3, #43	@ 0x2b
 800676e:	2909      	cmp	r1, #9
 8006770:	7002      	strb	r2, [r0, #0]
 8006772:	7043      	strb	r3, [r0, #1]
 8006774:	dd29      	ble.n	80067ca <__exponent+0x68>
 8006776:	f10d 0307 	add.w	r3, sp, #7
 800677a:	461d      	mov	r5, r3
 800677c:	270a      	movs	r7, #10
 800677e:	461a      	mov	r2, r3
 8006780:	fbb1 f6f7 	udiv	r6, r1, r7
 8006784:	fb07 1416 	mls	r4, r7, r6, r1
 8006788:	3430      	adds	r4, #48	@ 0x30
 800678a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800678e:	460c      	mov	r4, r1
 8006790:	2c63      	cmp	r4, #99	@ 0x63
 8006792:	f103 33ff 	add.w	r3, r3, #4294967295
 8006796:	4631      	mov	r1, r6
 8006798:	dcf1      	bgt.n	800677e <__exponent+0x1c>
 800679a:	3130      	adds	r1, #48	@ 0x30
 800679c:	1e94      	subs	r4, r2, #2
 800679e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067a2:	1c41      	adds	r1, r0, #1
 80067a4:	4623      	mov	r3, r4
 80067a6:	42ab      	cmp	r3, r5
 80067a8:	d30a      	bcc.n	80067c0 <__exponent+0x5e>
 80067aa:	f10d 0309 	add.w	r3, sp, #9
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	42ac      	cmp	r4, r5
 80067b2:	bf88      	it	hi
 80067b4:	2300      	movhi	r3, #0
 80067b6:	3302      	adds	r3, #2
 80067b8:	4403      	add	r3, r0
 80067ba:	1a18      	subs	r0, r3, r0
 80067bc:	b003      	add	sp, #12
 80067be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067c8:	e7ed      	b.n	80067a6 <__exponent+0x44>
 80067ca:	2330      	movs	r3, #48	@ 0x30
 80067cc:	3130      	adds	r1, #48	@ 0x30
 80067ce:	7083      	strb	r3, [r0, #2]
 80067d0:	70c1      	strb	r1, [r0, #3]
 80067d2:	1d03      	adds	r3, r0, #4
 80067d4:	e7f1      	b.n	80067ba <__exponent+0x58>
	...

080067d8 <_printf_float>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	b08d      	sub	sp, #52	@ 0x34
 80067de:	460c      	mov	r4, r1
 80067e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067e4:	4616      	mov	r6, r2
 80067e6:	461f      	mov	r7, r3
 80067e8:	4605      	mov	r5, r0
 80067ea:	f001 f839 	bl	8007860 <_localeconv_r>
 80067ee:	6803      	ldr	r3, [r0, #0]
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7f9 fd5c 	bl	80002b0 <strlen>
 80067f8:	2300      	movs	r3, #0
 80067fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80067fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006800:	9005      	str	r0, [sp, #20]
 8006802:	3307      	adds	r3, #7
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	f103 0208 	add.w	r2, r3, #8
 800680c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006810:	f8d4 b000 	ldr.w	fp, [r4]
 8006814:	f8c8 2000 	str.w	r2, [r8]
 8006818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800681c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	f8cd 8018 	str.w	r8, [sp, #24]
 8006826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800682a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800682e:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa0 <_printf_float+0x2c8>)
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	f7fa f99a 	bl	8000b6c <__aeabi_dcmpun>
 8006838:	bb70      	cbnz	r0, 8006898 <_printf_float+0xc0>
 800683a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800683e:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <_printf_float+0x2c8>)
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	f7fa f974 	bl	8000b30 <__aeabi_dcmple>
 8006848:	bb30      	cbnz	r0, 8006898 <_printf_float+0xc0>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f963 	bl	8000b1c <__aeabi_dcmplt>
 8006856:	b110      	cbz	r0, 800685e <_printf_float+0x86>
 8006858:	232d      	movs	r3, #45	@ 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800685e:	4a91      	ldr	r2, [pc, #580]	@ (8006aa4 <_printf_float+0x2cc>)
 8006860:	4b91      	ldr	r3, [pc, #580]	@ (8006aa8 <_printf_float+0x2d0>)
 8006862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006866:	bf94      	ite	ls
 8006868:	4690      	movls	r8, r2
 800686a:	4698      	movhi	r8, r3
 800686c:	2303      	movs	r3, #3
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	f02b 0304 	bic.w	r3, fp, #4
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	4633      	mov	r3, r6
 800687e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9d2 	bl	8006c2c <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	f040 808d 	bne.w	80069a8 <_printf_float+0x1d0>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	b00d      	add	sp, #52	@ 0x34
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f964 	bl	8000b6c <__aeabi_dcmpun>
 80068a4:	b140      	cbz	r0, 80068b8 <_printf_float+0xe0>
 80068a6:	464b      	mov	r3, r9
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bfbc      	itt	lt
 80068ac:	232d      	movlt	r3, #45	@ 0x2d
 80068ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068b2:	4a7e      	ldr	r2, [pc, #504]	@ (8006aac <_printf_float+0x2d4>)
 80068b4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab0 <_printf_float+0x2d8>)
 80068b6:	e7d4      	b.n	8006862 <_printf_float+0x8a>
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068be:	9206      	str	r2, [sp, #24]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	d13b      	bne.n	800693c <_printf_float+0x164>
 80068c4:	2306      	movs	r3, #6
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068cc:	2300      	movs	r3, #0
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80068d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068d8:	ab09      	add	r3, sp, #36	@ 0x24
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	6861      	ldr	r1, [r4, #4]
 80068de:	ec49 8b10 	vmov	d0, r8, r9
 80068e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7ff fed6 	bl	8006698 <__cvt>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068f0:	2b47      	cmp	r3, #71	@ 0x47
 80068f2:	4680      	mov	r8, r0
 80068f4:	d129      	bne.n	800694a <_printf_float+0x172>
 80068f6:	1cc8      	adds	r0, r1, #3
 80068f8:	db02      	blt.n	8006900 <_printf_float+0x128>
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	4299      	cmp	r1, r3
 80068fe:	dd41      	ble.n	8006984 <_printf_float+0x1ac>
 8006900:	f1aa 0a02 	sub.w	sl, sl, #2
 8006904:	fa5f fa8a 	uxtb.w	sl, sl
 8006908:	3901      	subs	r1, #1
 800690a:	4652      	mov	r2, sl
 800690c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006910:	9109      	str	r1, [sp, #36]	@ 0x24
 8006912:	f7ff ff26 	bl	8006762 <__exponent>
 8006916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006918:	1813      	adds	r3, r2, r0
 800691a:	2a01      	cmp	r2, #1
 800691c:	4681      	mov	r9, r0
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	dc02      	bgt.n	8006928 <_printf_float+0x150>
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	07d2      	lsls	r2, r2, #31
 8006926:	d501      	bpl.n	800692c <_printf_float+0x154>
 8006928:	3301      	adds	r3, #1
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0a2      	beq.n	800687a <_printf_float+0xa2>
 8006934:	232d      	movs	r3, #45	@ 0x2d
 8006936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800693a:	e79e      	b.n	800687a <_printf_float+0xa2>
 800693c:	9a06      	ldr	r2, [sp, #24]
 800693e:	2a47      	cmp	r2, #71	@ 0x47
 8006940:	d1c2      	bne.n	80068c8 <_printf_float+0xf0>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1c0      	bne.n	80068c8 <_printf_float+0xf0>
 8006946:	2301      	movs	r3, #1
 8006948:	e7bd      	b.n	80068c6 <_printf_float+0xee>
 800694a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800694e:	d9db      	bls.n	8006908 <_printf_float+0x130>
 8006950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006954:	d118      	bne.n	8006988 <_printf_float+0x1b0>
 8006956:	2900      	cmp	r1, #0
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	dd0b      	ble.n	8006974 <_printf_float+0x19c>
 800695c:	6121      	str	r1, [r4, #16]
 800695e:	b913      	cbnz	r3, 8006966 <_printf_float+0x18e>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	07d0      	lsls	r0, r2, #31
 8006964:	d502      	bpl.n	800696c <_printf_float+0x194>
 8006966:	3301      	adds	r3, #1
 8006968:	440b      	add	r3, r1
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	e7db      	b.n	800692c <_printf_float+0x154>
 8006974:	b913      	cbnz	r3, 800697c <_printf_float+0x1a4>
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	07d2      	lsls	r2, r2, #31
 800697a:	d501      	bpl.n	8006980 <_printf_float+0x1a8>
 800697c:	3302      	adds	r3, #2
 800697e:	e7f4      	b.n	800696a <_printf_float+0x192>
 8006980:	2301      	movs	r3, #1
 8006982:	e7f2      	b.n	800696a <_printf_float+0x192>
 8006984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698a:	4299      	cmp	r1, r3
 800698c:	db05      	blt.n	800699a <_printf_float+0x1c2>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	6121      	str	r1, [r4, #16]
 8006992:	07d8      	lsls	r0, r3, #31
 8006994:	d5ea      	bpl.n	800696c <_printf_float+0x194>
 8006996:	1c4b      	adds	r3, r1, #1
 8006998:	e7e7      	b.n	800696a <_printf_float+0x192>
 800699a:	2900      	cmp	r1, #0
 800699c:	bfd4      	ite	le
 800699e:	f1c1 0202 	rsble	r2, r1, #2
 80069a2:	2201      	movgt	r2, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	e7e0      	b.n	800696a <_printf_float+0x192>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	055a      	lsls	r2, r3, #21
 80069ac:	d407      	bmi.n	80069be <_printf_float+0x1e6>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4642      	mov	r2, r8
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d12b      	bne.n	8006a14 <_printf_float+0x23c>
 80069bc:	e767      	b.n	800688e <_printf_float+0xb6>
 80069be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069c2:	f240 80dd 	bls.w	8006b80 <_printf_float+0x3a8>
 80069c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	f7fa f89b 	bl	8000b08 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d033      	beq.n	8006a3e <_printf_float+0x266>
 80069d6:	4a37      	ldr	r2, [pc, #220]	@ (8006ab4 <_printf_float+0x2dc>)
 80069d8:	2301      	movs	r3, #1
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f af54 	beq.w	800688e <_printf_float+0xb6>
 80069e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069ea:	4543      	cmp	r3, r8
 80069ec:	db02      	blt.n	80069f4 <_printf_float+0x21c>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07d8      	lsls	r0, r3, #31
 80069f2:	d50f      	bpl.n	8006a14 <_printf_float+0x23c>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f af45 	beq.w	800688e <_printf_float+0xb6>
 8006a04:	f04f 0900 	mov.w	r9, #0
 8006a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a0c:	f104 0a1a 	add.w	sl, r4, #26
 8006a10:	45c8      	cmp	r8, r9
 8006a12:	dc09      	bgt.n	8006a28 <_printf_float+0x250>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	f100 8103 	bmi.w	8006c22 <_printf_float+0x44a>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e734      	b.n	8006892 <_printf_float+0xba>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af2b 	beq.w	800688e <_printf_float+0xb6>
 8006a38:	f109 0901 	add.w	r9, r9, #1
 8006a3c:	e7e8      	b.n	8006a10 <_printf_float+0x238>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc39      	bgt.n	8006ab8 <_printf_float+0x2e0>
 8006a44:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <_printf_float+0x2dc>)
 8006a46:	2301      	movs	r3, #1
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af1d 	beq.w	800688e <_printf_float+0xb6>
 8006a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a58:	ea59 0303 	orrs.w	r3, r9, r3
 8006a5c:	d102      	bne.n	8006a64 <_printf_float+0x28c>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07d9      	lsls	r1, r3, #31
 8006a62:	d5d7      	bpl.n	8006a14 <_printf_float+0x23c>
 8006a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f af0d 	beq.w	800688e <_printf_float+0xb6>
 8006a74:	f04f 0a00 	mov.w	sl, #0
 8006a78:	f104 0b1a 	add.w	fp, r4, #26
 8006a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7e:	425b      	negs	r3, r3
 8006a80:	4553      	cmp	r3, sl
 8006a82:	dc01      	bgt.n	8006a88 <_printf_float+0x2b0>
 8006a84:	464b      	mov	r3, r9
 8006a86:	e793      	b.n	80069b0 <_printf_float+0x1d8>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	465a      	mov	r2, fp
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f aefb 	beq.w	800688e <_printf_float+0xb6>
 8006a98:	f10a 0a01 	add.w	sl, sl, #1
 8006a9c:	e7ee      	b.n	8006a7c <_printf_float+0x2a4>
 8006a9e:	bf00      	nop
 8006aa0:	7fefffff 	.word	0x7fefffff
 8006aa4:	0800afec 	.word	0x0800afec
 8006aa8:	0800aff0 	.word	0x0800aff0
 8006aac:	0800aff4 	.word	0x0800aff4
 8006ab0:	0800aff8 	.word	0x0800aff8
 8006ab4:	0800affc 	.word	0x0800affc
 8006ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006abe:	4553      	cmp	r3, sl
 8006ac0:	bfa8      	it	ge
 8006ac2:	4653      	movge	r3, sl
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	4699      	mov	r9, r3
 8006ac8:	dc36      	bgt.n	8006b38 <_printf_float+0x360>
 8006aca:	f04f 0b00 	mov.w	fp, #0
 8006ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ad2:	f104 021a 	add.w	r2, r4, #26
 8006ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ad8:	9306      	str	r3, [sp, #24]
 8006ada:	eba3 0309 	sub.w	r3, r3, r9
 8006ade:	455b      	cmp	r3, fp
 8006ae0:	dc31      	bgt.n	8006b46 <_printf_float+0x36e>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae4:	459a      	cmp	sl, r3
 8006ae6:	dc3a      	bgt.n	8006b5e <_printf_float+0x386>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	07da      	lsls	r2, r3, #31
 8006aec:	d437      	bmi.n	8006b5e <_printf_float+0x386>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	ebaa 0903 	sub.w	r9, sl, r3
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	ebaa 0303 	sub.w	r3, sl, r3
 8006afa:	4599      	cmp	r9, r3
 8006afc:	bfa8      	it	ge
 8006afe:	4699      	movge	r9, r3
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	dc33      	bgt.n	8006b6e <_printf_float+0x396>
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b0e:	f104 0b1a 	add.w	fp, r4, #26
 8006b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b14:	ebaa 0303 	sub.w	r3, sl, r3
 8006b18:	eba3 0309 	sub.w	r3, r3, r9
 8006b1c:	4543      	cmp	r3, r8
 8006b1e:	f77f af79 	ble.w	8006a14 <_printf_float+0x23c>
 8006b22:	2301      	movs	r3, #1
 8006b24:	465a      	mov	r2, fp
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f aeae 	beq.w	800688e <_printf_float+0xb6>
 8006b32:	f108 0801 	add.w	r8, r8, #1
 8006b36:	e7ec      	b.n	8006b12 <_printf_float+0x33a>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	d1c2      	bne.n	8006aca <_printf_float+0x2f2>
 8006b44:	e6a3      	b.n	800688e <_printf_float+0xb6>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	9206      	str	r2, [sp, #24]
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f ae9c 	beq.w	800688e <_printf_float+0xb6>
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	f10b 0b01 	add.w	fp, fp, #1
 8006b5c:	e7bb      	b.n	8006ad6 <_printf_float+0x2fe>
 8006b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d1c0      	bne.n	8006aee <_printf_float+0x316>
 8006b6c:	e68f      	b.n	800688e <_printf_float+0xb6>
 8006b6e:	9a06      	ldr	r2, [sp, #24]
 8006b70:	464b      	mov	r3, r9
 8006b72:	4442      	add	r2, r8
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d1c3      	bne.n	8006b06 <_printf_float+0x32e>
 8006b7e:	e686      	b.n	800688e <_printf_float+0xb6>
 8006b80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b84:	f1ba 0f01 	cmp.w	sl, #1
 8006b88:	dc01      	bgt.n	8006b8e <_printf_float+0x3b6>
 8006b8a:	07db      	lsls	r3, r3, #31
 8006b8c:	d536      	bpl.n	8006bfc <_printf_float+0x424>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4642      	mov	r2, r8
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f43f ae78 	beq.w	800688e <_printf_float+0xb6>
 8006b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f ae70 	beq.w	800688e <_printf_float+0xb6>
 8006bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bba:	f7f9 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 8006bbe:	b9c0      	cbnz	r0, 8006bf2 <_printf_float+0x41a>
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	f108 0201 	add.w	r2, r8, #1
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d10c      	bne.n	8006bea <_printf_float+0x412>
 8006bd0:	e65d      	b.n	800688e <_printf_float+0xb6>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	465a      	mov	r2, fp
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f ae56 	beq.w	800688e <_printf_float+0xb6>
 8006be2:	f108 0801 	add.w	r8, r8, #1
 8006be6:	45d0      	cmp	r8, sl
 8006be8:	dbf3      	blt.n	8006bd2 <_printf_float+0x3fa>
 8006bea:	464b      	mov	r3, r9
 8006bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf0:	e6df      	b.n	80069b2 <_printf_float+0x1da>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	f104 0b1a 	add.w	fp, r4, #26
 8006bfa:	e7f4      	b.n	8006be6 <_printf_float+0x40e>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4642      	mov	r2, r8
 8006c00:	e7e1      	b.n	8006bc6 <_printf_float+0x3ee>
 8006c02:	2301      	movs	r3, #1
 8006c04:	464a      	mov	r2, r9
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae3e 	beq.w	800688e <_printf_float+0xb6>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	dcf0      	bgt.n	8006c02 <_printf_float+0x42a>
 8006c20:	e6fc      	b.n	8006a1c <_printf_float+0x244>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	f104 0919 	add.w	r9, r4, #25
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x43e>

08006c2c <_printf_common>:
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	4616      	mov	r6, r2
 8006c32:	4698      	mov	r8, r3
 8006c34:	688a      	ldr	r2, [r1, #8]
 8006c36:	690b      	ldr	r3, [r1, #16]
 8006c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	bfb8      	it	lt
 8006c40:	4613      	movlt	r3, r2
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c48:	4607      	mov	r7, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b10a      	cbz	r2, 8006c52 <_printf_common+0x26>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	0699      	lsls	r1, r3, #26
 8006c56:	bf42      	ittt	mi
 8006c58:	6833      	ldrmi	r3, [r6, #0]
 8006c5a:	3302      	addmi	r3, #2
 8006c5c:	6033      	strmi	r3, [r6, #0]
 8006c5e:	6825      	ldr	r5, [r4, #0]
 8006c60:	f015 0506 	ands.w	r5, r5, #6
 8006c64:	d106      	bne.n	8006c74 <_printf_common+0x48>
 8006c66:	f104 0a19 	add.w	sl, r4, #25
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	6832      	ldr	r2, [r6, #0]
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	dc26      	bgt.n	8006cc2 <_printf_common+0x96>
 8006c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	3b00      	subs	r3, #0
 8006c7c:	bf18      	it	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	0692      	lsls	r2, r2, #26
 8006c82:	d42b      	bmi.n	8006cdc <_printf_common+0xb0>
 8006c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c88:	4641      	mov	r1, r8
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c8      	blx	r9
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d01e      	beq.n	8006cd0 <_printf_common+0xa4>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	bf02      	ittt	eq
 8006c9e:	68e5      	ldreq	r5, [r4, #12]
 8006ca0:	6833      	ldreq	r3, [r6, #0]
 8006ca2:	1aed      	subeq	r5, r5, r3
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	bf0c      	ite	eq
 8006ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cac:	2500      	movne	r5, #0
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bfc4      	itt	gt
 8006cb2:	1a9b      	subgt	r3, r3, r2
 8006cb4:	18ed      	addgt	r5, r5, r3
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	341a      	adds	r4, #26
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	d11a      	bne.n	8006cf4 <_printf_common+0xc8>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e008      	b.n	8006cd4 <_printf_common+0xa8>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4638      	mov	r0, r7
 8006cca:	47c8      	blx	r9
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d103      	bne.n	8006cd8 <_printf_common+0xac>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd8:	3501      	adds	r5, #1
 8006cda:	e7c6      	b.n	8006c6a <_printf_common+0x3e>
 8006cdc:	18e1      	adds	r1, r4, r3
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	2030      	movs	r0, #48	@ 0x30
 8006ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ce6:	4422      	add	r2, r4
 8006ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	e7c7      	b.n	8006c84 <_printf_common+0x58>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c8      	blx	r9
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d0e6      	beq.n	8006cd0 <_printf_common+0xa4>
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7d9      	b.n	8006cba <_printf_common+0x8e>
	...

08006d08 <_printf_i>:
 8006d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	7e0f      	ldrb	r7, [r1, #24]
 8006d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d10:	2f78      	cmp	r7, #120	@ 0x78
 8006d12:	4691      	mov	r9, r2
 8006d14:	4680      	mov	r8, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	469a      	mov	sl, r3
 8006d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d1e:	d807      	bhi.n	8006d30 <_printf_i+0x28>
 8006d20:	2f62      	cmp	r7, #98	@ 0x62
 8006d22:	d80a      	bhi.n	8006d3a <_printf_i+0x32>
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	f000 80d2 	beq.w	8006ece <_printf_i+0x1c6>
 8006d2a:	2f58      	cmp	r7, #88	@ 0x58
 8006d2c:	f000 80b9 	beq.w	8006ea2 <_printf_i+0x19a>
 8006d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d38:	e03a      	b.n	8006db0 <_printf_i+0xa8>
 8006d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d3e:	2b15      	cmp	r3, #21
 8006d40:	d8f6      	bhi.n	8006d30 <_printf_i+0x28>
 8006d42:	a101      	add	r1, pc, #4	@ (adr r1, 8006d48 <_printf_i+0x40>)
 8006d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d48:	08006da1 	.word	0x08006da1
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006d31 	.word	0x08006d31
 8006d54:	08006d31 	.word	0x08006d31
 8006d58:	08006d31 	.word	0x08006d31
 8006d5c:	08006d31 	.word	0x08006d31
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006d31 	.word	0x08006d31
 8006d68:	08006d31 	.word	0x08006d31
 8006d6c:	08006d31 	.word	0x08006d31
 8006d70:	08006d31 	.word	0x08006d31
 8006d74:	08006eb5 	.word	0x08006eb5
 8006d78:	08006ddf 	.word	0x08006ddf
 8006d7c:	08006e6f 	.word	0x08006e6f
 8006d80:	08006d31 	.word	0x08006d31
 8006d84:	08006d31 	.word	0x08006d31
 8006d88:	08006ed7 	.word	0x08006ed7
 8006d8c:	08006d31 	.word	0x08006d31
 8006d90:	08006ddf 	.word	0x08006ddf
 8006d94:	08006d31 	.word	0x08006d31
 8006d98:	08006d31 	.word	0x08006d31
 8006d9c:	08006e77 	.word	0x08006e77
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6032      	str	r2, [r6, #0]
 8006da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db0:	2301      	movs	r3, #1
 8006db2:	e09d      	b.n	8006ef0 <_printf_i+0x1e8>
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	6031      	str	r1, [r6, #0]
 8006dbc:	0606      	lsls	r6, r0, #24
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0xbc>
 8006dc0:	681d      	ldr	r5, [r3, #0]
 8006dc2:	e003      	b.n	8006dcc <_printf_i+0xc4>
 8006dc4:	0645      	lsls	r5, r0, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0xb8>
 8006dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	da03      	bge.n	8006dd8 <_printf_i+0xd0>
 8006dd0:	232d      	movs	r3, #45	@ 0x2d
 8006dd2:	426d      	negs	r5, r5
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dd8:	4859      	ldr	r0, [pc, #356]	@ (8006f40 <_printf_i+0x238>)
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e011      	b.n	8006e02 <_printf_i+0xfa>
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	0608      	lsls	r0, r1, #24
 8006de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006de8:	d402      	bmi.n	8006df0 <_printf_i+0xe8>
 8006dea:	0649      	lsls	r1, r1, #25
 8006dec:	bf48      	it	mi
 8006dee:	b2ad      	uxthmi	r5, r5
 8006df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006df2:	4853      	ldr	r0, [pc, #332]	@ (8006f40 <_printf_i+0x238>)
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	bf14      	ite	ne
 8006df8:	230a      	movne	r3, #10
 8006dfa:	2308      	moveq	r3, #8
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e02:	6866      	ldr	r6, [r4, #4]
 8006e04:	60a6      	str	r6, [r4, #8]
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	bfa2      	ittt	ge
 8006e0a:	6821      	ldrge	r1, [r4, #0]
 8006e0c:	f021 0104 	bicge.w	r1, r1, #4
 8006e10:	6021      	strge	r1, [r4, #0]
 8006e12:	b90d      	cbnz	r5, 8006e18 <_printf_i+0x110>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	d04b      	beq.n	8006eb0 <_printf_i+0x1a8>
 8006e18:	4616      	mov	r6, r2
 8006e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e22:	5dc7      	ldrb	r7, [r0, r7]
 8006e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e28:	462f      	mov	r7, r5
 8006e2a:	42bb      	cmp	r3, r7
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	d9f4      	bls.n	8006e1a <_printf_i+0x112>
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d10b      	bne.n	8006e4c <_printf_i+0x144>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	07df      	lsls	r7, r3, #31
 8006e38:	d508      	bpl.n	8006e4c <_printf_i+0x144>
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	6861      	ldr	r1, [r4, #4]
 8006e3e:	4299      	cmp	r1, r3
 8006e40:	bfde      	ittt	le
 8006e42:	2330      	movle	r3, #48	@ 0x30
 8006e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e4c:	1b92      	subs	r2, r2, r6
 8006e4e:	6122      	str	r2, [r4, #16]
 8006e50:	f8cd a000 	str.w	sl, [sp]
 8006e54:	464b      	mov	r3, r9
 8006e56:	aa03      	add	r2, sp, #12
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f7ff fee6 	bl	8006c2c <_printf_common>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d14a      	bne.n	8006efa <_printf_i+0x1f2>
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295
 8006e68:	b004      	add	sp, #16
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f043 0320 	orr.w	r3, r3, #32
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	4833      	ldr	r0, [pc, #204]	@ (8006f44 <_printf_i+0x23c>)
 8006e78:	2778      	movs	r7, #120	@ 0x78
 8006e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	6831      	ldr	r1, [r6, #0]
 8006e82:	061f      	lsls	r7, r3, #24
 8006e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e88:	d402      	bmi.n	8006e90 <_printf_i+0x188>
 8006e8a:	065f      	lsls	r7, r3, #25
 8006e8c:	bf48      	it	mi
 8006e8e:	b2ad      	uxthmi	r5, r5
 8006e90:	6031      	str	r1, [r6, #0]
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9a:	6023      	strmi	r3, [r4, #0]
 8006e9c:	b11d      	cbz	r5, 8006ea6 <_printf_i+0x19e>
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	e7ac      	b.n	8006dfc <_printf_i+0xf4>
 8006ea2:	4827      	ldr	r0, [pc, #156]	@ (8006f40 <_printf_i+0x238>)
 8006ea4:	e7e9      	b.n	8006e7a <_printf_i+0x172>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f023 0320 	bic.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	e7f6      	b.n	8006e9e <_printf_i+0x196>
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	e7bd      	b.n	8006e30 <_printf_i+0x128>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	6961      	ldr	r1, [r4, #20]
 8006eba:	1d18      	adds	r0, r3, #4
 8006ebc:	6030      	str	r0, [r6, #0]
 8006ebe:	062e      	lsls	r6, r5, #24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0x1c0>
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <_printf_i+0x1c6>
 8006ec8:	0668      	lsls	r0, r5, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0x1bc>
 8006ecc:	8019      	strh	r1, [r3, #0]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	4616      	mov	r6, r2
 8006ed4:	e7bc      	b.n	8006e50 <_printf_i+0x148>
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	6032      	str	r2, [r6, #0]
 8006edc:	681e      	ldr	r6, [r3, #0]
 8006ede:	6862      	ldr	r2, [r4, #4]
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7f9 f994 	bl	8000210 <memchr>
 8006ee8:	b108      	cbz	r0, 8006eee <_printf_i+0x1e6>
 8006eea:	1b80      	subs	r0, r0, r6
 8006eec:	6060      	str	r0, [r4, #4]
 8006eee:	6863      	ldr	r3, [r4, #4]
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	e7aa      	b.n	8006e50 <_printf_i+0x148>
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	47d0      	blx	sl
 8006f04:	3001      	adds	r0, #1
 8006f06:	d0ad      	beq.n	8006e64 <_printf_i+0x15c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	079b      	lsls	r3, r3, #30
 8006f0c:	d413      	bmi.n	8006f36 <_printf_i+0x22e>
 8006f0e:	68e0      	ldr	r0, [r4, #12]
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	4298      	cmp	r0, r3
 8006f14:	bfb8      	it	lt
 8006f16:	4618      	movlt	r0, r3
 8006f18:	e7a6      	b.n	8006e68 <_printf_i+0x160>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	47d0      	blx	sl
 8006f24:	3001      	adds	r0, #1
 8006f26:	d09d      	beq.n	8006e64 <_printf_i+0x15c>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	dcf2      	bgt.n	8006f1a <_printf_i+0x212>
 8006f34:	e7eb      	b.n	8006f0e <_printf_i+0x206>
 8006f36:	2500      	movs	r5, #0
 8006f38:	f104 0619 	add.w	r6, r4, #25
 8006f3c:	e7f5      	b.n	8006f2a <_printf_i+0x222>
 8006f3e:	bf00      	nop
 8006f40:	0800affe 	.word	0x0800affe
 8006f44:	0800b00f 	.word	0x0800b00f

08006f48 <_scanf_float>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	b087      	sub	sp, #28
 8006f4e:	4617      	mov	r7, r2
 8006f50:	9303      	str	r3, [sp, #12]
 8006f52:	688b      	ldr	r3, [r1, #8]
 8006f54:	1e5a      	subs	r2, r3, #1
 8006f56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f5a:	bf81      	itttt	hi
 8006f5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f60:	eb03 0b05 	addhi.w	fp, r3, r5
 8006f64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f68:	608b      	strhi	r3, [r1, #8]
 8006f6a:	680b      	ldr	r3, [r1, #0]
 8006f6c:	460a      	mov	r2, r1
 8006f6e:	f04f 0500 	mov.w	r5, #0
 8006f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006f76:	f842 3b1c 	str.w	r3, [r2], #28
 8006f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f7e:	4680      	mov	r8, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	bf98      	it	ls
 8006f84:	f04f 0b00 	movls.w	fp, #0
 8006f88:	9201      	str	r2, [sp, #4]
 8006f8a:	4616      	mov	r6, r2
 8006f8c:	46aa      	mov	sl, r5
 8006f8e:	46a9      	mov	r9, r5
 8006f90:	9502      	str	r5, [sp, #8]
 8006f92:	68a2      	ldr	r2, [r4, #8]
 8006f94:	b152      	cbz	r2, 8006fac <_scanf_float+0x64>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f9c:	d864      	bhi.n	8007068 <_scanf_float+0x120>
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d83c      	bhi.n	800701c <_scanf_float+0xd4>
 8006fa2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006fa6:	b2c8      	uxtb	r0, r1
 8006fa8:	280e      	cmp	r0, #14
 8006faa:	d93a      	bls.n	8007022 <_scanf_float+0xda>
 8006fac:	f1b9 0f00 	cmp.w	r9, #0
 8006fb0:	d003      	beq.n	8006fba <_scanf_float+0x72>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fbe:	f1ba 0f01 	cmp.w	sl, #1
 8006fc2:	f200 8117 	bhi.w	80071f4 <_scanf_float+0x2ac>
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	429e      	cmp	r6, r3
 8006fca:	f200 8108 	bhi.w	80071de <_scanf_float+0x296>
 8006fce:	2001      	movs	r0, #1
 8006fd0:	b007      	add	sp, #28
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006fda:	2a0d      	cmp	r2, #13
 8006fdc:	d8e6      	bhi.n	8006fac <_scanf_float+0x64>
 8006fde:	a101      	add	r1, pc, #4	@ (adr r1, 8006fe4 <_scanf_float+0x9c>)
 8006fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fe4:	0800712b 	.word	0x0800712b
 8006fe8:	08006fad 	.word	0x08006fad
 8006fec:	08006fad 	.word	0x08006fad
 8006ff0:	08006fad 	.word	0x08006fad
 8006ff4:	0800718b 	.word	0x0800718b
 8006ff8:	08007163 	.word	0x08007163
 8006ffc:	08006fad 	.word	0x08006fad
 8007000:	08006fad 	.word	0x08006fad
 8007004:	08007139 	.word	0x08007139
 8007008:	08006fad 	.word	0x08006fad
 800700c:	08006fad 	.word	0x08006fad
 8007010:	08006fad 	.word	0x08006fad
 8007014:	08006fad 	.word	0x08006fad
 8007018:	080070f1 	.word	0x080070f1
 800701c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007020:	e7db      	b.n	8006fda <_scanf_float+0x92>
 8007022:	290e      	cmp	r1, #14
 8007024:	d8c2      	bhi.n	8006fac <_scanf_float+0x64>
 8007026:	a001      	add	r0, pc, #4	@ (adr r0, 800702c <_scanf_float+0xe4>)
 8007028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800702c:	080070e1 	.word	0x080070e1
 8007030:	08006fad 	.word	0x08006fad
 8007034:	080070e1 	.word	0x080070e1
 8007038:	08007177 	.word	0x08007177
 800703c:	08006fad 	.word	0x08006fad
 8007040:	08007089 	.word	0x08007089
 8007044:	080070c7 	.word	0x080070c7
 8007048:	080070c7 	.word	0x080070c7
 800704c:	080070c7 	.word	0x080070c7
 8007050:	080070c7 	.word	0x080070c7
 8007054:	080070c7 	.word	0x080070c7
 8007058:	080070c7 	.word	0x080070c7
 800705c:	080070c7 	.word	0x080070c7
 8007060:	080070c7 	.word	0x080070c7
 8007064:	080070c7 	.word	0x080070c7
 8007068:	2b6e      	cmp	r3, #110	@ 0x6e
 800706a:	d809      	bhi.n	8007080 <_scanf_float+0x138>
 800706c:	2b60      	cmp	r3, #96	@ 0x60
 800706e:	d8b2      	bhi.n	8006fd6 <_scanf_float+0x8e>
 8007070:	2b54      	cmp	r3, #84	@ 0x54
 8007072:	d07b      	beq.n	800716c <_scanf_float+0x224>
 8007074:	2b59      	cmp	r3, #89	@ 0x59
 8007076:	d199      	bne.n	8006fac <_scanf_float+0x64>
 8007078:	2d07      	cmp	r5, #7
 800707a:	d197      	bne.n	8006fac <_scanf_float+0x64>
 800707c:	2508      	movs	r5, #8
 800707e:	e02c      	b.n	80070da <_scanf_float+0x192>
 8007080:	2b74      	cmp	r3, #116	@ 0x74
 8007082:	d073      	beq.n	800716c <_scanf_float+0x224>
 8007084:	2b79      	cmp	r3, #121	@ 0x79
 8007086:	e7f6      	b.n	8007076 <_scanf_float+0x12e>
 8007088:	6821      	ldr	r1, [r4, #0]
 800708a:	05c8      	lsls	r0, r1, #23
 800708c:	d51b      	bpl.n	80070c6 <_scanf_float+0x17e>
 800708e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007092:	6021      	str	r1, [r4, #0]
 8007094:	f109 0901 	add.w	r9, r9, #1
 8007098:	f1bb 0f00 	cmp.w	fp, #0
 800709c:	d003      	beq.n	80070a6 <_scanf_float+0x15e>
 800709e:	3201      	adds	r2, #1
 80070a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070a4:	60a2      	str	r2, [r4, #8]
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	60a3      	str	r3, [r4, #8]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	3301      	adds	r3, #1
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	f340 8087 	ble.w	80071cc <_scanf_float+0x284>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	3301      	adds	r3, #1
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	e765      	b.n	8006f92 <_scanf_float+0x4a>
 80070c6:	eb1a 0105 	adds.w	r1, sl, r5
 80070ca:	f47f af6f 	bne.w	8006fac <_scanf_float+0x64>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	460d      	mov	r5, r1
 80070d8:	468a      	mov	sl, r1
 80070da:	f806 3b01 	strb.w	r3, [r6], #1
 80070de:	e7e2      	b.n	80070a6 <_scanf_float+0x15e>
 80070e0:	6822      	ldr	r2, [r4, #0]
 80070e2:	0610      	lsls	r0, r2, #24
 80070e4:	f57f af62 	bpl.w	8006fac <_scanf_float+0x64>
 80070e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	e7f4      	b.n	80070da <_scanf_float+0x192>
 80070f0:	f1ba 0f00 	cmp.w	sl, #0
 80070f4:	d10e      	bne.n	8007114 <_scanf_float+0x1cc>
 80070f6:	f1b9 0f00 	cmp.w	r9, #0
 80070fa:	d10e      	bne.n	800711a <_scanf_float+0x1d2>
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007106:	d108      	bne.n	800711a <_scanf_float+0x1d2>
 8007108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	f04f 0a01 	mov.w	sl, #1
 8007112:	e7e2      	b.n	80070da <_scanf_float+0x192>
 8007114:	f1ba 0f02 	cmp.w	sl, #2
 8007118:	d055      	beq.n	80071c6 <_scanf_float+0x27e>
 800711a:	2d01      	cmp	r5, #1
 800711c:	d002      	beq.n	8007124 <_scanf_float+0x1dc>
 800711e:	2d04      	cmp	r5, #4
 8007120:	f47f af44 	bne.w	8006fac <_scanf_float+0x64>
 8007124:	3501      	adds	r5, #1
 8007126:	b2ed      	uxtb	r5, r5
 8007128:	e7d7      	b.n	80070da <_scanf_float+0x192>
 800712a:	f1ba 0f01 	cmp.w	sl, #1
 800712e:	f47f af3d 	bne.w	8006fac <_scanf_float+0x64>
 8007132:	f04f 0a02 	mov.w	sl, #2
 8007136:	e7d0      	b.n	80070da <_scanf_float+0x192>
 8007138:	b97d      	cbnz	r5, 800715a <_scanf_float+0x212>
 800713a:	f1b9 0f00 	cmp.w	r9, #0
 800713e:	f47f af38 	bne.w	8006fb2 <_scanf_float+0x6a>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800714c:	f040 8108 	bne.w	8007360 <_scanf_float+0x418>
 8007150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007154:	6022      	str	r2, [r4, #0]
 8007156:	2501      	movs	r5, #1
 8007158:	e7bf      	b.n	80070da <_scanf_float+0x192>
 800715a:	2d03      	cmp	r5, #3
 800715c:	d0e2      	beq.n	8007124 <_scanf_float+0x1dc>
 800715e:	2d05      	cmp	r5, #5
 8007160:	e7de      	b.n	8007120 <_scanf_float+0x1d8>
 8007162:	2d02      	cmp	r5, #2
 8007164:	f47f af22 	bne.w	8006fac <_scanf_float+0x64>
 8007168:	2503      	movs	r5, #3
 800716a:	e7b6      	b.n	80070da <_scanf_float+0x192>
 800716c:	2d06      	cmp	r5, #6
 800716e:	f47f af1d 	bne.w	8006fac <_scanf_float+0x64>
 8007172:	2507      	movs	r5, #7
 8007174:	e7b1      	b.n	80070da <_scanf_float+0x192>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	0591      	lsls	r1, r2, #22
 800717a:	f57f af17 	bpl.w	8006fac <_scanf_float+0x64>
 800717e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007182:	6022      	str	r2, [r4, #0]
 8007184:	f8cd 9008 	str.w	r9, [sp, #8]
 8007188:	e7a7      	b.n	80070da <_scanf_float+0x192>
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007194:	d006      	beq.n	80071a4 <_scanf_float+0x25c>
 8007196:	0550      	lsls	r0, r2, #21
 8007198:	f57f af08 	bpl.w	8006fac <_scanf_float+0x64>
 800719c:	f1b9 0f00 	cmp.w	r9, #0
 80071a0:	f000 80de 	beq.w	8007360 <_scanf_float+0x418>
 80071a4:	0591      	lsls	r1, r2, #22
 80071a6:	bf58      	it	pl
 80071a8:	9902      	ldrpl	r1, [sp, #8]
 80071aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071ae:	bf58      	it	pl
 80071b0:	eba9 0101 	subpl.w	r1, r9, r1
 80071b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80071b8:	bf58      	it	pl
 80071ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071be:	6022      	str	r2, [r4, #0]
 80071c0:	f04f 0900 	mov.w	r9, #0
 80071c4:	e789      	b.n	80070da <_scanf_float+0x192>
 80071c6:	f04f 0a03 	mov.w	sl, #3
 80071ca:	e786      	b.n	80070da <_scanf_float+0x192>
 80071cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80071d0:	4639      	mov	r1, r7
 80071d2:	4640      	mov	r0, r8
 80071d4:	4798      	blx	r3
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f aedb 	beq.w	8006f92 <_scanf_float+0x4a>
 80071dc:	e6e6      	b.n	8006fac <_scanf_float+0x64>
 80071de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071e6:	463a      	mov	r2, r7
 80071e8:	4640      	mov	r0, r8
 80071ea:	4798      	blx	r3
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	e6e8      	b.n	8006fc6 <_scanf_float+0x7e>
 80071f4:	1e6b      	subs	r3, r5, #1
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d824      	bhi.n	8007244 <_scanf_float+0x2fc>
 80071fa:	2d02      	cmp	r5, #2
 80071fc:	d836      	bhi.n	800726c <_scanf_float+0x324>
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	429e      	cmp	r6, r3
 8007202:	f67f aee4 	bls.w	8006fce <_scanf_float+0x86>
 8007206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800720a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800720e:	463a      	mov	r2, r7
 8007210:	4640      	mov	r0, r8
 8007212:	4798      	blx	r3
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	3b01      	subs	r3, #1
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	e7f0      	b.n	80071fe <_scanf_float+0x2b6>
 800721c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007220:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007224:	463a      	mov	r2, r7
 8007226:	4640      	mov	r0, r8
 8007228:	4798      	blx	r3
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	3b01      	subs	r3, #1
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007234:	fa5f fa8a 	uxtb.w	sl, sl
 8007238:	f1ba 0f02 	cmp.w	sl, #2
 800723c:	d1ee      	bne.n	800721c <_scanf_float+0x2d4>
 800723e:	3d03      	subs	r5, #3
 8007240:	b2ed      	uxtb	r5, r5
 8007242:	1b76      	subs	r6, r6, r5
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	05da      	lsls	r2, r3, #23
 8007248:	d530      	bpl.n	80072ac <_scanf_float+0x364>
 800724a:	055b      	lsls	r3, r3, #21
 800724c:	d511      	bpl.n	8007272 <_scanf_float+0x32a>
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	429e      	cmp	r6, r3
 8007252:	f67f aebc 	bls.w	8006fce <_scanf_float+0x86>
 8007256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800725a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800725e:	463a      	mov	r2, r7
 8007260:	4640      	mov	r0, r8
 8007262:	4798      	blx	r3
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	3b01      	subs	r3, #1
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	e7f0      	b.n	800724e <_scanf_float+0x306>
 800726c:	46aa      	mov	sl, r5
 800726e:	46b3      	mov	fp, r6
 8007270:	e7de      	b.n	8007230 <_scanf_float+0x2e8>
 8007272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	2965      	cmp	r1, #101	@ 0x65
 800727a:	f103 33ff 	add.w	r3, r3, #4294967295
 800727e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007282:	6123      	str	r3, [r4, #16]
 8007284:	d00c      	beq.n	80072a0 <_scanf_float+0x358>
 8007286:	2945      	cmp	r1, #69	@ 0x45
 8007288:	d00a      	beq.n	80072a0 <_scanf_float+0x358>
 800728a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800728e:	463a      	mov	r2, r7
 8007290:	4640      	mov	r0, r8
 8007292:	4798      	blx	r3
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800729a:	3b01      	subs	r3, #1
 800729c:	1eb5      	subs	r5, r6, #2
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072a4:	463a      	mov	r2, r7
 80072a6:	4640      	mov	r0, r8
 80072a8:	4798      	blx	r3
 80072aa:	462e      	mov	r6, r5
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	f012 0210 	ands.w	r2, r2, #16
 80072b2:	d001      	beq.n	80072b8 <_scanf_float+0x370>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e68b      	b.n	8006fd0 <_scanf_float+0x88>
 80072b8:	7032      	strb	r2, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c4:	d11c      	bne.n	8007300 <_scanf_float+0x3b8>
 80072c6:	9b02      	ldr	r3, [sp, #8]
 80072c8:	454b      	cmp	r3, r9
 80072ca:	eba3 0209 	sub.w	r2, r3, r9
 80072ce:	d123      	bne.n	8007318 <_scanf_float+0x3d0>
 80072d0:	9901      	ldr	r1, [sp, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	4640      	mov	r0, r8
 80072d6:	f002 fc9f 	bl	8009c18 <_strtod_r>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	6821      	ldr	r1, [r4, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f011 0f02 	tst.w	r1, #2
 80072e4:	ec57 6b10 	vmov	r6, r7, d0
 80072e8:	f103 0204 	add.w	r2, r3, #4
 80072ec:	d01f      	beq.n	800732e <_scanf_float+0x3e6>
 80072ee:	9903      	ldr	r1, [sp, #12]
 80072f0:	600a      	str	r2, [r1, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	e9c3 6700 	strd	r6, r7, [r3]
 80072f8:	68e3      	ldr	r3, [r4, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60e3      	str	r3, [r4, #12]
 80072fe:	e7d9      	b.n	80072b4 <_scanf_float+0x36c>
 8007300:	9b04      	ldr	r3, [sp, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0e4      	beq.n	80072d0 <_scanf_float+0x388>
 8007306:	9905      	ldr	r1, [sp, #20]
 8007308:	230a      	movs	r3, #10
 800730a:	3101      	adds	r1, #1
 800730c:	4640      	mov	r0, r8
 800730e:	f002 fd03 	bl	8009d18 <_strtol_r>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	9e05      	ldr	r6, [sp, #20]
 8007316:	1ac2      	subs	r2, r0, r3
 8007318:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800731c:	429e      	cmp	r6, r3
 800731e:	bf28      	it	cs
 8007320:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007324:	4910      	ldr	r1, [pc, #64]	@ (8007368 <_scanf_float+0x420>)
 8007326:	4630      	mov	r0, r6
 8007328:	f000 f988 	bl	800763c <siprintf>
 800732c:	e7d0      	b.n	80072d0 <_scanf_float+0x388>
 800732e:	f011 0f04 	tst.w	r1, #4
 8007332:	9903      	ldr	r1, [sp, #12]
 8007334:	600a      	str	r2, [r1, #0]
 8007336:	d1dc      	bne.n	80072f2 <_scanf_float+0x3aa>
 8007338:	681d      	ldr	r5, [r3, #0]
 800733a:	4632      	mov	r2, r6
 800733c:	463b      	mov	r3, r7
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 fc13 	bl	8000b6c <__aeabi_dcmpun>
 8007346:	b128      	cbz	r0, 8007354 <_scanf_float+0x40c>
 8007348:	4808      	ldr	r0, [pc, #32]	@ (800736c <_scanf_float+0x424>)
 800734a:	f000 fb11 	bl	8007970 <nanf>
 800734e:	ed85 0a00 	vstr	s0, [r5]
 8007352:	e7d1      	b.n	80072f8 <_scanf_float+0x3b0>
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f7f9 fc66 	bl	8000c28 <__aeabi_d2f>
 800735c:	6028      	str	r0, [r5, #0]
 800735e:	e7cb      	b.n	80072f8 <_scanf_float+0x3b0>
 8007360:	f04f 0900 	mov.w	r9, #0
 8007364:	e629      	b.n	8006fba <_scanf_float+0x72>
 8007366:	bf00      	nop
 8007368:	0800b020 	.word	0x0800b020
 800736c:	0800b3b5 	.word	0x0800b3b5

08007370 <std>:
 8007370:	2300      	movs	r3, #0
 8007372:	b510      	push	{r4, lr}
 8007374:	4604      	mov	r4, r0
 8007376:	e9c0 3300 	strd	r3, r3, [r0]
 800737a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800737e:	6083      	str	r3, [r0, #8]
 8007380:	8181      	strh	r1, [r0, #12]
 8007382:	6643      	str	r3, [r0, #100]	@ 0x64
 8007384:	81c2      	strh	r2, [r0, #14]
 8007386:	6183      	str	r3, [r0, #24]
 8007388:	4619      	mov	r1, r3
 800738a:	2208      	movs	r2, #8
 800738c:	305c      	adds	r0, #92	@ 0x5c
 800738e:	f000 fa4d 	bl	800782c <memset>
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x58>)
 8007394:	6263      	str	r3, [r4, #36]	@ 0x24
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x5c>)
 8007398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <std+0x60>)
 800739c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <std+0x64>)
 80073a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <std+0x68>)
 80073a4:	6224      	str	r4, [r4, #32]
 80073a6:	429c      	cmp	r4, r3
 80073a8:	d006      	beq.n	80073b8 <std+0x48>
 80073aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073ae:	4294      	cmp	r4, r2
 80073b0:	d002      	beq.n	80073b8 <std+0x48>
 80073b2:	33d0      	adds	r3, #208	@ 0xd0
 80073b4:	429c      	cmp	r4, r3
 80073b6:	d105      	bne.n	80073c4 <std+0x54>
 80073b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f000 bad2 	b.w	8007968 <__retarget_lock_init_recursive>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	bf00      	nop
 80073c8:	0800767d 	.word	0x0800767d
 80073cc:	0800769f 	.word	0x0800769f
 80073d0:	080076d7 	.word	0x080076d7
 80073d4:	080076fb 	.word	0x080076fb
 80073d8:	20000374 	.word	0x20000374

080073dc <stdio_exit_handler>:
 80073dc:	4a02      	ldr	r2, [pc, #8]	@ (80073e8 <stdio_exit_handler+0xc>)
 80073de:	4903      	ldr	r1, [pc, #12]	@ (80073ec <stdio_exit_handler+0x10>)
 80073e0:	4803      	ldr	r0, [pc, #12]	@ (80073f0 <stdio_exit_handler+0x14>)
 80073e2:	f000 b869 	b.w	80074b8 <_fwalk_sglue>
 80073e6:	bf00      	nop
 80073e8:	2000000c 	.word	0x2000000c
 80073ec:	0800a359 	.word	0x0800a359
 80073f0:	2000001c 	.word	0x2000001c

080073f4 <cleanup_stdio>:
 80073f4:	6841      	ldr	r1, [r0, #4]
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <cleanup_stdio+0x34>)
 80073f8:	4299      	cmp	r1, r3
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4604      	mov	r4, r0
 80073fe:	d001      	beq.n	8007404 <cleanup_stdio+0x10>
 8007400:	f002 ffaa 	bl	800a358 <_fflush_r>
 8007404:	68a1      	ldr	r1, [r4, #8]
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <cleanup_stdio+0x38>)
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <cleanup_stdio+0x1e>
 800740c:	4620      	mov	r0, r4
 800740e:	f002 ffa3 	bl	800a358 <_fflush_r>
 8007412:	68e1      	ldr	r1, [r4, #12]
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <cleanup_stdio+0x3c>)
 8007416:	4299      	cmp	r1, r3
 8007418:	d004      	beq.n	8007424 <cleanup_stdio+0x30>
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f002 bf9a 	b.w	800a358 <_fflush_r>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	20000374 	.word	0x20000374
 800742c:	200003dc 	.word	0x200003dc
 8007430:	20000444 	.word	0x20000444

08007434 <global_stdio_init.part.0>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <global_stdio_init.part.0+0x30>)
 8007438:	4c0b      	ldr	r4, [pc, #44]	@ (8007468 <global_stdio_init.part.0+0x34>)
 800743a:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <global_stdio_init.part.0+0x38>)
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	4620      	mov	r0, r4
 8007440:	2200      	movs	r2, #0
 8007442:	2104      	movs	r1, #4
 8007444:	f7ff ff94 	bl	8007370 <std>
 8007448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800744c:	2201      	movs	r2, #1
 800744e:	2109      	movs	r1, #9
 8007450:	f7ff ff8e 	bl	8007370 <std>
 8007454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007458:	2202      	movs	r2, #2
 800745a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745e:	2112      	movs	r1, #18
 8007460:	f7ff bf86 	b.w	8007370 <std>
 8007464:	200004ac 	.word	0x200004ac
 8007468:	20000374 	.word	0x20000374
 800746c:	080073dd 	.word	0x080073dd

08007470 <__sfp_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__sfp_lock_acquire+0x8>)
 8007472:	f000 ba7a 	b.w	800796a <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200004b5 	.word	0x200004b5

0800747c <__sfp_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__sfp_lock_release+0x8>)
 800747e:	f000 ba75 	b.w	800796c <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200004b5 	.word	0x200004b5

08007488 <__sinit>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	f7ff fff0 	bl	8007470 <__sfp_lock_acquire>
 8007490:	6a23      	ldr	r3, [r4, #32]
 8007492:	b11b      	cbz	r3, 800749c <__sinit+0x14>
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	f7ff bff0 	b.w	800747c <__sfp_lock_release>
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <__sinit+0x28>)
 800749e:	6223      	str	r3, [r4, #32]
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <__sinit+0x2c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f5      	bne.n	8007494 <__sinit+0xc>
 80074a8:	f7ff ffc4 	bl	8007434 <global_stdio_init.part.0>
 80074ac:	e7f2      	b.n	8007494 <__sinit+0xc>
 80074ae:	bf00      	nop
 80074b0:	080073f5 	.word	0x080073f5
 80074b4:	200004ac 	.word	0x200004ac

080074b8 <_fwalk_sglue>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4607      	mov	r7, r0
 80074be:	4688      	mov	r8, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	2600      	movs	r6, #0
 80074c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c8:	f1b9 0901 	subs.w	r9, r9, #1
 80074cc:	d505      	bpl.n	80074da <_fwalk_sglue+0x22>
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d1f7      	bne.n	80074c4 <_fwalk_sglue+0xc>
 80074d4:	4630      	mov	r0, r6
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d907      	bls.n	80074f0 <_fwalk_sglue+0x38>
 80074e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e4:	3301      	adds	r3, #1
 80074e6:	d003      	beq.n	80074f0 <_fwalk_sglue+0x38>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	4306      	orrs	r6, r0
 80074f0:	3568      	adds	r5, #104	@ 0x68
 80074f2:	e7e9      	b.n	80074c8 <_fwalk_sglue+0x10>

080074f4 <iprintf>:
 80074f4:	b40f      	push	{r0, r1, r2, r3}
 80074f6:	b507      	push	{r0, r1, r2, lr}
 80074f8:	4906      	ldr	r1, [pc, #24]	@ (8007514 <iprintf+0x20>)
 80074fa:	ab04      	add	r3, sp, #16
 80074fc:	6808      	ldr	r0, [r1, #0]
 80074fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007502:	6881      	ldr	r1, [r0, #8]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	f002 fd8b 	bl	800a020 <_vfiprintf_r>
 800750a:	b003      	add	sp, #12
 800750c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007510:	b004      	add	sp, #16
 8007512:	4770      	bx	lr
 8007514:	20000018 	.word	0x20000018

08007518 <_puts_r>:
 8007518:	6a03      	ldr	r3, [r0, #32]
 800751a:	b570      	push	{r4, r5, r6, lr}
 800751c:	6884      	ldr	r4, [r0, #8]
 800751e:	4605      	mov	r5, r0
 8007520:	460e      	mov	r6, r1
 8007522:	b90b      	cbnz	r3, 8007528 <_puts_r+0x10>
 8007524:	f7ff ffb0 	bl	8007488 <__sinit>
 8007528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800752a:	07db      	lsls	r3, r3, #31
 800752c:	d405      	bmi.n	800753a <_puts_r+0x22>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	0598      	lsls	r0, r3, #22
 8007532:	d402      	bmi.n	800753a <_puts_r+0x22>
 8007534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007536:	f000 fa18 	bl	800796a <__retarget_lock_acquire_recursive>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	0719      	lsls	r1, r3, #28
 800753e:	d502      	bpl.n	8007546 <_puts_r+0x2e>
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d135      	bne.n	80075b2 <_puts_r+0x9a>
 8007546:	4621      	mov	r1, r4
 8007548:	4628      	mov	r0, r5
 800754a:	f000 f919 	bl	8007780 <__swsetup_r>
 800754e:	b380      	cbz	r0, 80075b2 <_puts_r+0x9a>
 8007550:	f04f 35ff 	mov.w	r5, #4294967295
 8007554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007556:	07da      	lsls	r2, r3, #31
 8007558:	d405      	bmi.n	8007566 <_puts_r+0x4e>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	059b      	lsls	r3, r3, #22
 800755e:	d402      	bmi.n	8007566 <_puts_r+0x4e>
 8007560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007562:	f000 fa03 	bl	800796c <__retarget_lock_release_recursive>
 8007566:	4628      	mov	r0, r5
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	2b00      	cmp	r3, #0
 800756c:	da04      	bge.n	8007578 <_puts_r+0x60>
 800756e:	69a2      	ldr	r2, [r4, #24]
 8007570:	429a      	cmp	r2, r3
 8007572:	dc17      	bgt.n	80075a4 <_puts_r+0x8c>
 8007574:	290a      	cmp	r1, #10
 8007576:	d015      	beq.n	80075a4 <_puts_r+0x8c>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	7019      	strb	r1, [r3, #0]
 8007580:	68a3      	ldr	r3, [r4, #8]
 8007582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007586:	3b01      	subs	r3, #1
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	2900      	cmp	r1, #0
 800758c:	d1ed      	bne.n	800756a <_puts_r+0x52>
 800758e:	2b00      	cmp	r3, #0
 8007590:	da11      	bge.n	80075b6 <_puts_r+0x9e>
 8007592:	4622      	mov	r2, r4
 8007594:	210a      	movs	r1, #10
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f8b3 	bl	8007702 <__swbuf_r>
 800759c:	3001      	adds	r0, #1
 800759e:	d0d7      	beq.n	8007550 <_puts_r+0x38>
 80075a0:	250a      	movs	r5, #10
 80075a2:	e7d7      	b.n	8007554 <_puts_r+0x3c>
 80075a4:	4622      	mov	r2, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f8ab 	bl	8007702 <__swbuf_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d1e7      	bne.n	8007580 <_puts_r+0x68>
 80075b0:	e7ce      	b.n	8007550 <_puts_r+0x38>
 80075b2:	3e01      	subs	r6, #1
 80075b4:	e7e4      	b.n	8007580 <_puts_r+0x68>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	6022      	str	r2, [r4, #0]
 80075bc:	220a      	movs	r2, #10
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e7ee      	b.n	80075a0 <_puts_r+0x88>
	...

080075c4 <puts>:
 80075c4:	4b02      	ldr	r3, [pc, #8]	@ (80075d0 <puts+0xc>)
 80075c6:	4601      	mov	r1, r0
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f7ff bfa5 	b.w	8007518 <_puts_r>
 80075ce:	bf00      	nop
 80075d0:	20000018 	.word	0x20000018

080075d4 <sniprintf>:
 80075d4:	b40c      	push	{r2, r3}
 80075d6:	b530      	push	{r4, r5, lr}
 80075d8:	4b17      	ldr	r3, [pc, #92]	@ (8007638 <sniprintf+0x64>)
 80075da:	1e0c      	subs	r4, r1, #0
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	b09d      	sub	sp, #116	@ 0x74
 80075e0:	da08      	bge.n	80075f4 <sniprintf+0x20>
 80075e2:	238b      	movs	r3, #139	@ 0x8b
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ea:	b01d      	add	sp, #116	@ 0x74
 80075ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075f0:	b002      	add	sp, #8
 80075f2:	4770      	bx	lr
 80075f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075fc:	bf14      	ite	ne
 80075fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007602:	4623      	moveq	r3, r4
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	9307      	str	r3, [sp, #28]
 8007608:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	9006      	str	r0, [sp, #24]
 8007610:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007614:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007616:	ab21      	add	r3, sp, #132	@ 0x84
 8007618:	a902      	add	r1, sp, #8
 800761a:	4628      	mov	r0, r5
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f002 fbd9 	bl	8009dd4 <_svfiprintf_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	bfbc      	itt	lt
 8007626:	238b      	movlt	r3, #139	@ 0x8b
 8007628:	602b      	strlt	r3, [r5, #0]
 800762a:	2c00      	cmp	r4, #0
 800762c:	d0dd      	beq.n	80075ea <sniprintf+0x16>
 800762e:	9b02      	ldr	r3, [sp, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e7d9      	b.n	80075ea <sniprintf+0x16>
 8007636:	bf00      	nop
 8007638:	20000018 	.word	0x20000018

0800763c <siprintf>:
 800763c:	b40e      	push	{r1, r2, r3}
 800763e:	b500      	push	{lr}
 8007640:	b09c      	sub	sp, #112	@ 0x70
 8007642:	ab1d      	add	r3, sp, #116	@ 0x74
 8007644:	9002      	str	r0, [sp, #8]
 8007646:	9006      	str	r0, [sp, #24]
 8007648:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800764c:	4809      	ldr	r0, [pc, #36]	@ (8007674 <siprintf+0x38>)
 800764e:	9107      	str	r1, [sp, #28]
 8007650:	9104      	str	r1, [sp, #16]
 8007652:	4909      	ldr	r1, [pc, #36]	@ (8007678 <siprintf+0x3c>)
 8007654:	f853 2b04 	ldr.w	r2, [r3], #4
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	a902      	add	r1, sp, #8
 8007660:	f002 fbb8 	bl	8009dd4 <_svfiprintf_r>
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	b01c      	add	sp, #112	@ 0x70
 800766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007670:	b003      	add	sp, #12
 8007672:	4770      	bx	lr
 8007674:	20000018 	.word	0x20000018
 8007678:	ffff0208 	.word	0xffff0208

0800767c <__sread>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	f000 f912 	bl	80078ac <_read_r>
 8007688:	2800      	cmp	r0, #0
 800768a:	bfab      	itete	ge
 800768c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800768e:	89a3      	ldrhlt	r3, [r4, #12]
 8007690:	181b      	addge	r3, r3, r0
 8007692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007696:	bfac      	ite	ge
 8007698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800769a:	81a3      	strhlt	r3, [r4, #12]
 800769c:	bd10      	pop	{r4, pc}

0800769e <__swrite>:
 800769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	461f      	mov	r7, r3
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	05db      	lsls	r3, r3, #23
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4616      	mov	r6, r2
 80076ae:	d505      	bpl.n	80076bc <__swrite+0x1e>
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	2302      	movs	r3, #2
 80076b6:	2200      	movs	r2, #0
 80076b8:	f000 f8e6 	bl	8007888 <_lseek_r>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	4632      	mov	r2, r6
 80076ca:	463b      	mov	r3, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	f000 b90d 	b.w	80078f0 <_write_r>

080076d6 <__sseek>:
 80076d6:	b510      	push	{r4, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 f8d3 	bl	8007888 <_lseek_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	bf15      	itete	ne
 80076e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076f2:	81a3      	strheq	r3, [r4, #12]
 80076f4:	bf18      	it	ne
 80076f6:	81a3      	strhne	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__sclose>:
 80076fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fe:	f000 b8b3 	b.w	8007868 <_close_r>

08007702 <__swbuf_r>:
 8007702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007704:	460e      	mov	r6, r1
 8007706:	4614      	mov	r4, r2
 8007708:	4605      	mov	r5, r0
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x12>
 800770c:	6a03      	ldr	r3, [r0, #32]
 800770e:	b90b      	cbnz	r3, 8007714 <__swbuf_r+0x12>
 8007710:	f7ff feba 	bl	8007488 <__sinit>
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	60a3      	str	r3, [r4, #8]
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	071a      	lsls	r2, r3, #28
 800771c:	d501      	bpl.n	8007722 <__swbuf_r+0x20>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	b943      	cbnz	r3, 8007734 <__swbuf_r+0x32>
 8007722:	4621      	mov	r1, r4
 8007724:	4628      	mov	r0, r5
 8007726:	f000 f82b 	bl	8007780 <__swsetup_r>
 800772a:	b118      	cbz	r0, 8007734 <__swbuf_r+0x32>
 800772c:	f04f 37ff 	mov.w	r7, #4294967295
 8007730:	4638      	mov	r0, r7
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	6922      	ldr	r2, [r4, #16]
 8007738:	1a98      	subs	r0, r3, r2
 800773a:	6963      	ldr	r3, [r4, #20]
 800773c:	b2f6      	uxtb	r6, r6
 800773e:	4283      	cmp	r3, r0
 8007740:	4637      	mov	r7, r6
 8007742:	dc05      	bgt.n	8007750 <__swbuf_r+0x4e>
 8007744:	4621      	mov	r1, r4
 8007746:	4628      	mov	r0, r5
 8007748:	f002 fe06 	bl	800a358 <_fflush_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	d1ed      	bne.n	800772c <__swbuf_r+0x2a>
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	3b01      	subs	r3, #1
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	6022      	str	r2, [r4, #0]
 800775c:	701e      	strb	r6, [r3, #0]
 800775e:	6962      	ldr	r2, [r4, #20]
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	d004      	beq.n	8007770 <__swbuf_r+0x6e>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	07db      	lsls	r3, r3, #31
 800776a:	d5e1      	bpl.n	8007730 <__swbuf_r+0x2e>
 800776c:	2e0a      	cmp	r6, #10
 800776e:	d1df      	bne.n	8007730 <__swbuf_r+0x2e>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f002 fdf0 	bl	800a358 <_fflush_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d0d9      	beq.n	8007730 <__swbuf_r+0x2e>
 800777c:	e7d6      	b.n	800772c <__swbuf_r+0x2a>
	...

08007780 <__swsetup_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4b29      	ldr	r3, [pc, #164]	@ (8007828 <__swsetup_r+0xa8>)
 8007784:	4605      	mov	r5, r0
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	460c      	mov	r4, r1
 800778a:	b118      	cbz	r0, 8007794 <__swsetup_r+0x14>
 800778c:	6a03      	ldr	r3, [r0, #32]
 800778e:	b90b      	cbnz	r3, 8007794 <__swsetup_r+0x14>
 8007790:	f7ff fe7a 	bl	8007488 <__sinit>
 8007794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007798:	0719      	lsls	r1, r3, #28
 800779a:	d422      	bmi.n	80077e2 <__swsetup_r+0x62>
 800779c:	06da      	lsls	r2, r3, #27
 800779e:	d407      	bmi.n	80077b0 <__swsetup_r+0x30>
 80077a0:	2209      	movs	r2, #9
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	f04f 30ff 	mov.w	r0, #4294967295
 80077ae:	e033      	b.n	8007818 <__swsetup_r+0x98>
 80077b0:	0758      	lsls	r0, r3, #29
 80077b2:	d512      	bpl.n	80077da <__swsetup_r+0x5a>
 80077b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077b6:	b141      	cbz	r1, 80077ca <__swsetup_r+0x4a>
 80077b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077bc:	4299      	cmp	r1, r3
 80077be:	d002      	beq.n	80077c6 <__swsetup_r+0x46>
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 ff29 	bl	8008618 <_free_r>
 80077c6:	2300      	movs	r3, #0
 80077c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f043 0308 	orr.w	r3, r3, #8
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	b94b      	cbnz	r3, 80077fa <__swsetup_r+0x7a>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f0:	d003      	beq.n	80077fa <__swsetup_r+0x7a>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f002 fdfd 	bl	800a3f4 <__smakebuf_r>
 80077fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fe:	f013 0201 	ands.w	r2, r3, #1
 8007802:	d00a      	beq.n	800781a <__swsetup_r+0x9a>
 8007804:	2200      	movs	r2, #0
 8007806:	60a2      	str	r2, [r4, #8]
 8007808:	6962      	ldr	r2, [r4, #20]
 800780a:	4252      	negs	r2, r2
 800780c:	61a2      	str	r2, [r4, #24]
 800780e:	6922      	ldr	r2, [r4, #16]
 8007810:	b942      	cbnz	r2, 8007824 <__swsetup_r+0xa4>
 8007812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007816:	d1c5      	bne.n	80077a4 <__swsetup_r+0x24>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	0799      	lsls	r1, r3, #30
 800781c:	bf58      	it	pl
 800781e:	6962      	ldrpl	r2, [r4, #20]
 8007820:	60a2      	str	r2, [r4, #8]
 8007822:	e7f4      	b.n	800780e <__swsetup_r+0x8e>
 8007824:	2000      	movs	r0, #0
 8007826:	e7f7      	b.n	8007818 <__swsetup_r+0x98>
 8007828:	20000018 	.word	0x20000018

0800782c <memset>:
 800782c:	4402      	add	r2, r0
 800782e:	4603      	mov	r3, r0
 8007830:	4293      	cmp	r3, r2
 8007832:	d100      	bne.n	8007836 <memset+0xa>
 8007834:	4770      	bx	lr
 8007836:	f803 1b01 	strb.w	r1, [r3], #1
 800783a:	e7f9      	b.n	8007830 <memset+0x4>

0800783c <strncmp>:
 800783c:	b510      	push	{r4, lr}
 800783e:	b16a      	cbz	r2, 800785c <strncmp+0x20>
 8007840:	3901      	subs	r1, #1
 8007842:	1884      	adds	r4, r0, r2
 8007844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007848:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800784c:	429a      	cmp	r2, r3
 800784e:	d103      	bne.n	8007858 <strncmp+0x1c>
 8007850:	42a0      	cmp	r0, r4
 8007852:	d001      	beq.n	8007858 <strncmp+0x1c>
 8007854:	2a00      	cmp	r2, #0
 8007856:	d1f5      	bne.n	8007844 <strncmp+0x8>
 8007858:	1ad0      	subs	r0, r2, r3
 800785a:	bd10      	pop	{r4, pc}
 800785c:	4610      	mov	r0, r2
 800785e:	e7fc      	b.n	800785a <strncmp+0x1e>

08007860 <_localeconv_r>:
 8007860:	4800      	ldr	r0, [pc, #0]	@ (8007864 <_localeconv_r+0x4>)
 8007862:	4770      	bx	lr
 8007864:	20000158 	.word	0x20000158

08007868 <_close_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d06      	ldr	r5, [pc, #24]	@ (8007884 <_close_r+0x1c>)
 800786c:	2300      	movs	r3, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	f7fa fe62 	bl	800253c <_close>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_close_r+0x1a>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_close_r+0x1a>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	200004b0 	.word	0x200004b0

08007888 <_lseek_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	@ (80078a8 <_lseek_r+0x20>)
 800788c:	4604      	mov	r4, r0
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	2200      	movs	r2, #0
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7fa fe77 	bl	800258a <_lseek>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_lseek_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_lseek_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	200004b0 	.word	0x200004b0

080078ac <_read_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	@ (80078cc <_read_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa fe05 	bl	80024ca <_read>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_read_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_read_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	200004b0 	.word	0x200004b0

080078d0 <_sbrk_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d06      	ldr	r5, [pc, #24]	@ (80078ec <_sbrk_r+0x1c>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f7fa fe62 	bl	80025a4 <_sbrk>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_sbrk_r+0x1a>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_sbrk_r+0x1a>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	200004b0 	.word	0x200004b0

080078f0 <_write_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	@ (8007910 <_write_r+0x20>)
 80078f4:	4604      	mov	r4, r0
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	602a      	str	r2, [r5, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7fa fe00 	bl	8002504 <_write>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_write_r+0x1e>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_write_r+0x1e>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	200004b0 	.word	0x200004b0

08007914 <__errno>:
 8007914:	4b01      	ldr	r3, [pc, #4]	@ (800791c <__errno+0x8>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000018 	.word	0x20000018

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4d0d      	ldr	r5, [pc, #52]	@ (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	@ (800795c <__libc_init_array+0x3c>)
 8007926:	1b64      	subs	r4, r4, r5
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2600      	movs	r6, #0
 800792c:	42a6      	cmp	r6, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4d0b      	ldr	r5, [pc, #44]	@ (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	@ (8007964 <__libc_init_array+0x44>)
 8007934:	f003 fa0a 	bl	800ad4c <_init>
 8007938:	1b64      	subs	r4, r4, r5
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2600      	movs	r6, #0
 800793e:	42a6      	cmp	r6, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f855 3b04 	ldr.w	r3, [r5], #4
 8007948:	4798      	blx	r3
 800794a:	3601      	adds	r6, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007952:	4798      	blx	r3
 8007954:	3601      	adds	r6, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	0800b420 	.word	0x0800b420
 800795c:	0800b420 	.word	0x0800b420
 8007960:	0800b420 	.word	0x0800b420
 8007964:	0800b424 	.word	0x0800b424

08007968 <__retarget_lock_init_recursive>:
 8007968:	4770      	bx	lr

0800796a <__retarget_lock_acquire_recursive>:
 800796a:	4770      	bx	lr

0800796c <__retarget_lock_release_recursive>:
 800796c:	4770      	bx	lr
	...

08007970 <nanf>:
 8007970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007978 <nanf+0x8>
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	7fc00000 	.word	0x7fc00000

0800797c <quorem>:
 800797c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	6903      	ldr	r3, [r0, #16]
 8007982:	690c      	ldr	r4, [r1, #16]
 8007984:	42a3      	cmp	r3, r4
 8007986:	4607      	mov	r7, r0
 8007988:	db7e      	blt.n	8007a88 <quorem+0x10c>
 800798a:	3c01      	subs	r4, #1
 800798c:	f101 0814 	add.w	r8, r1, #20
 8007990:	00a3      	lsls	r3, r4, #2
 8007992:	f100 0514 	add.w	r5, r0, #20
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a6:	3301      	adds	r3, #1
 80079a8:	429a      	cmp	r2, r3
 80079aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b2:	d32e      	bcc.n	8007a12 <quorem+0x96>
 80079b4:	f04f 0a00 	mov.w	sl, #0
 80079b8:	46c4      	mov	ip, r8
 80079ba:	46ae      	mov	lr, r5
 80079bc:	46d3      	mov	fp, sl
 80079be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079c2:	b298      	uxth	r0, r3
 80079c4:	fb06 a000 	mla	r0, r6, r0, sl
 80079c8:	0c02      	lsrs	r2, r0, #16
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	fb06 2303 	mla	r3, r6, r3, r2
 80079d0:	f8de 2000 	ldr.w	r2, [lr]
 80079d4:	b280      	uxth	r0, r0
 80079d6:	b292      	uxth	r2, r2
 80079d8:	1a12      	subs	r2, r2, r0
 80079da:	445a      	add	r2, fp
 80079dc:	f8de 0000 	ldr.w	r0, [lr]
 80079e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079ee:	b292      	uxth	r2, r2
 80079f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079f4:	45e1      	cmp	r9, ip
 80079f6:	f84e 2b04 	str.w	r2, [lr], #4
 80079fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079fe:	d2de      	bcs.n	80079be <quorem+0x42>
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	58eb      	ldr	r3, [r5, r3]
 8007a04:	b92b      	cbnz	r3, 8007a12 <quorem+0x96>
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	d32f      	bcc.n	8007a70 <quorem+0xf4>
 8007a10:	613c      	str	r4, [r7, #16]
 8007a12:	4638      	mov	r0, r7
 8007a14:	f001 f90e 	bl	8008c34 <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	db25      	blt.n	8007a68 <quorem+0xec>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a24:	f8d1 c000 	ldr.w	ip, [r1]
 8007a28:	fa1f fe82 	uxth.w	lr, r2
 8007a2c:	fa1f f38c 	uxth.w	r3, ip
 8007a30:	eba3 030e 	sub.w	r3, r3, lr
 8007a34:	4403      	add	r3, r0
 8007a36:	0c12      	lsrs	r2, r2, #16
 8007a38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a46:	45c1      	cmp	r9, r8
 8007a48:	f841 3b04 	str.w	r3, [r1], #4
 8007a4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a50:	d2e6      	bcs.n	8007a20 <quorem+0xa4>
 8007a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a5a:	b922      	cbnz	r2, 8007a66 <quorem+0xea>
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	429d      	cmp	r5, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	d30b      	bcc.n	8007a7c <quorem+0x100>
 8007a64:	613c      	str	r4, [r7, #16]
 8007a66:	3601      	adds	r6, #1
 8007a68:	4630      	mov	r0, r6
 8007a6a:	b003      	add	sp, #12
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	6812      	ldr	r2, [r2, #0]
 8007a72:	3b04      	subs	r3, #4
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	d1cb      	bne.n	8007a10 <quorem+0x94>
 8007a78:	3c01      	subs	r4, #1
 8007a7a:	e7c6      	b.n	8007a0a <quorem+0x8e>
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	d1ef      	bne.n	8007a64 <quorem+0xe8>
 8007a84:	3c01      	subs	r4, #1
 8007a86:	e7ea      	b.n	8007a5e <quorem+0xe2>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7ee      	b.n	8007a6a <quorem+0xee>
 8007a8c:	0000      	movs	r0, r0
	...

08007a90 <_dtoa_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	69c7      	ldr	r7, [r0, #28]
 8007a96:	b099      	sub	sp, #100	@ 0x64
 8007a98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a9c:	ec55 4b10 	vmov	r4, r5, d0
 8007aa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007aa2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007aa4:	4683      	mov	fp, r0
 8007aa6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007aaa:	b97f      	cbnz	r7, 8007acc <_dtoa_r+0x3c>
 8007aac:	2010      	movs	r0, #16
 8007aae:	f7fe fd35 	bl	800651c <malloc>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ab8:	b920      	cbnz	r0, 8007ac4 <_dtoa_r+0x34>
 8007aba:	4ba7      	ldr	r3, [pc, #668]	@ (8007d58 <_dtoa_r+0x2c8>)
 8007abc:	21ef      	movs	r1, #239	@ 0xef
 8007abe:	48a7      	ldr	r0, [pc, #668]	@ (8007d5c <_dtoa_r+0x2cc>)
 8007ac0:	f002 fd26 	bl	800a510 <__assert_func>
 8007ac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ac8:	6007      	str	r7, [r0, #0]
 8007aca:	60c7      	str	r7, [r0, #12]
 8007acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ad0:	6819      	ldr	r1, [r3, #0]
 8007ad2:	b159      	cbz	r1, 8007aec <_dtoa_r+0x5c>
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	604a      	str	r2, [r1, #4]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4093      	lsls	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fe24 	bl	800872c <_Bfree>
 8007ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	1e2b      	subs	r3, r5, #0
 8007aee:	bfb9      	ittee	lt
 8007af0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007af4:	9303      	strlt	r3, [sp, #12]
 8007af6:	2300      	movge	r3, #0
 8007af8:	6033      	strge	r3, [r6, #0]
 8007afa:	9f03      	ldr	r7, [sp, #12]
 8007afc:	4b98      	ldr	r3, [pc, #608]	@ (8007d60 <_dtoa_r+0x2d0>)
 8007afe:	bfbc      	itt	lt
 8007b00:	2201      	movlt	r2, #1
 8007b02:	6032      	strlt	r2, [r6, #0]
 8007b04:	43bb      	bics	r3, r7
 8007b06:	d112      	bne.n	8007b2e <_dtoa_r+0x9e>
 8007b08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b14:	4323      	orrs	r3, r4
 8007b16:	f000 854d 	beq.w	80085b4 <_dtoa_r+0xb24>
 8007b1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d74 <_dtoa_r+0x2e4>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 854f 	beq.w	80085c4 <_dtoa_r+0xb34>
 8007b26:	f10a 0303 	add.w	r3, sl, #3
 8007b2a:	f000 bd49 	b.w	80085c0 <_dtoa_r+0xb30>
 8007b2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	ec51 0b17 	vmov	r0, r1, d7
 8007b38:	2300      	movs	r3, #0
 8007b3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b3e:	f7f8 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 8007b42:	4680      	mov	r8, r0
 8007b44:	b158      	cbz	r0, 8007b5e <_dtoa_r+0xce>
 8007b46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b48:	2301      	movs	r3, #1
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b4e:	b113      	cbz	r3, 8007b56 <_dtoa_r+0xc6>
 8007b50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b52:	4b84      	ldr	r3, [pc, #528]	@ (8007d64 <_dtoa_r+0x2d4>)
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d78 <_dtoa_r+0x2e8>
 8007b5a:	f000 bd33 	b.w	80085c4 <_dtoa_r+0xb34>
 8007b5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b62:	aa16      	add	r2, sp, #88	@ 0x58
 8007b64:	a917      	add	r1, sp, #92	@ 0x5c
 8007b66:	4658      	mov	r0, fp
 8007b68:	f001 f984 	bl	8008e74 <__d2b>
 8007b6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b70:	4681      	mov	r9, r0
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	d077      	beq.n	8007c66 <_dtoa_r+0x1d6>
 8007b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b90:	4619      	mov	r1, r3
 8007b92:	2200      	movs	r2, #0
 8007b94:	4b74      	ldr	r3, [pc, #464]	@ (8007d68 <_dtoa_r+0x2d8>)
 8007b96:	f7f8 fb97 	bl	80002c8 <__aeabi_dsub>
 8007b9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007d40 <_dtoa_r+0x2b0>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fd4a 	bl	8000638 <__aeabi_dmul>
 8007ba4:	a368      	add	r3, pc, #416	@ (adr r3, 8007d48 <_dtoa_r+0x2b8>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f7f8 fb8f 	bl	80002cc <__adddf3>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	f7f8 fcd6 	bl	8000564 <__aeabi_i2d>
 8007bb8:	a365      	add	r3, pc, #404	@ (adr r3, 8007d50 <_dtoa_r+0x2c0>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f7f8 fd3b 	bl	8000638 <__aeabi_dmul>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 fb7f 	bl	80002cc <__adddf3>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	f7f8 ffe1 	bl	8000b98 <__aeabi_d2iz>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4607      	mov	r7, r0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f8 ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8007be4:	b140      	cbz	r0, 8007bf8 <_dtoa_r+0x168>
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7f8 fcbc 	bl	8000564 <__aeabi_i2d>
 8007bec:	4622      	mov	r2, r4
 8007bee:	462b      	mov	r3, r5
 8007bf0:	f7f8 ff8a 	bl	8000b08 <__aeabi_dcmpeq>
 8007bf4:	b900      	cbnz	r0, 8007bf8 <_dtoa_r+0x168>
 8007bf6:	3f01      	subs	r7, #1
 8007bf8:	2f16      	cmp	r7, #22
 8007bfa:	d851      	bhi.n	8007ca0 <_dtoa_r+0x210>
 8007bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8007d6c <_dtoa_r+0x2dc>)
 8007bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c0a:	f7f8 ff87 	bl	8000b1c <__aeabi_dcmplt>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d048      	beq.n	8007ca4 <_dtoa_r+0x214>
 8007c12:	3f01      	subs	r7, #1
 8007c14:	2300      	movs	r3, #0
 8007c16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c1a:	1b9b      	subs	r3, r3, r6
 8007c1c:	1e5a      	subs	r2, r3, #1
 8007c1e:	bf44      	itt	mi
 8007c20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c24:	2300      	movmi	r3, #0
 8007c26:	9208      	str	r2, [sp, #32]
 8007c28:	bf54      	ite	pl
 8007c2a:	f04f 0800 	movpl.w	r8, #0
 8007c2e:	9308      	strmi	r3, [sp, #32]
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	db39      	blt.n	8007ca8 <_dtoa_r+0x218>
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c38:	443b      	add	r3, r7
 8007c3a:	9308      	str	r3, [sp, #32]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c42:	2b09      	cmp	r3, #9
 8007c44:	d864      	bhi.n	8007d10 <_dtoa_r+0x280>
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	bfc4      	itt	gt
 8007c4a:	3b04      	subgt	r3, #4
 8007c4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	f1a3 0302 	sub.w	r3, r3, #2
 8007c54:	bfcc      	ite	gt
 8007c56:	2400      	movgt	r4, #0
 8007c58:	2401      	movle	r4, #1
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d863      	bhi.n	8007d26 <_dtoa_r+0x296>
 8007c5e:	e8df f003 	tbb	[pc, r3]
 8007c62:	372a      	.short	0x372a
 8007c64:	5535      	.short	0x5535
 8007c66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c6a:	441e      	add	r6, r3
 8007c6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	bfc1      	itttt	gt
 8007c74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c78:	409f      	lslgt	r7, r3
 8007c7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c82:	bfd6      	itet	le
 8007c84:	f1c3 0320 	rsble	r3, r3, #32
 8007c88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007c90:	f7f8 fc58 	bl	8000544 <__aeabi_ui2d>
 8007c94:	2201      	movs	r2, #1
 8007c96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c9a:	3e01      	subs	r6, #1
 8007c9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c9e:	e777      	b.n	8007b90 <_dtoa_r+0x100>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e7b8      	b.n	8007c16 <_dtoa_r+0x186>
 8007ca4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ca6:	e7b7      	b.n	8007c18 <_dtoa_r+0x188>
 8007ca8:	427b      	negs	r3, r7
 8007caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cac:	2300      	movs	r3, #0
 8007cae:	eba8 0807 	sub.w	r8, r8, r7
 8007cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cb4:	e7c4      	b.n	8007c40 <_dtoa_r+0x1b0>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dc35      	bgt.n	8007d2c <_dtoa_r+0x29c>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	9307      	str	r3, [sp, #28]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cca:	e00b      	b.n	8007ce4 <_dtoa_r+0x254>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e7f3      	b.n	8007cb8 <_dtoa_r+0x228>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	bfb8      	it	lt
 8007ce2:	2301      	movlt	r3, #1
 8007ce4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	2204      	movs	r2, #4
 8007cec:	f102 0514 	add.w	r5, r2, #20
 8007cf0:	429d      	cmp	r5, r3
 8007cf2:	d91f      	bls.n	8007d34 <_dtoa_r+0x2a4>
 8007cf4:	6041      	str	r1, [r0, #4]
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 fcd8 	bl	80086ac <_Balloc>
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d13c      	bne.n	8007d7c <_dtoa_r+0x2ec>
 8007d02:	4b1b      	ldr	r3, [pc, #108]	@ (8007d70 <_dtoa_r+0x2e0>)
 8007d04:	4602      	mov	r2, r0
 8007d06:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d0a:	e6d8      	b.n	8007abe <_dtoa_r+0x2e>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e7e0      	b.n	8007cd2 <_dtoa_r+0x242>
 8007d10:	2401      	movs	r4, #1
 8007d12:	2300      	movs	r3, #0
 8007d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2312      	movs	r3, #18
 8007d24:	e7d0      	b.n	8007cc8 <_dtoa_r+0x238>
 8007d26:	2301      	movs	r3, #1
 8007d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d2a:	e7f5      	b.n	8007d18 <_dtoa_r+0x288>
 8007d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	e7d7      	b.n	8007ce4 <_dtoa_r+0x254>
 8007d34:	3101      	adds	r1, #1
 8007d36:	0052      	lsls	r2, r2, #1
 8007d38:	e7d8      	b.n	8007cec <_dtoa_r+0x25c>
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w
 8007d40:	636f4361 	.word	0x636f4361
 8007d44:	3fd287a7 	.word	0x3fd287a7
 8007d48:	8b60c8b3 	.word	0x8b60c8b3
 8007d4c:	3fc68a28 	.word	0x3fc68a28
 8007d50:	509f79fb 	.word	0x509f79fb
 8007d54:	3fd34413 	.word	0x3fd34413
 8007d58:	0800b032 	.word	0x0800b032
 8007d5c:	0800b049 	.word	0x0800b049
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	0800affd 	.word	0x0800affd
 8007d68:	3ff80000 	.word	0x3ff80000
 8007d6c:	0800b140 	.word	0x0800b140
 8007d70:	0800b0a1 	.word	0x0800b0a1
 8007d74:	0800b02e 	.word	0x0800b02e
 8007d78:	0800affc 	.word	0x0800affc
 8007d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d80:	6018      	str	r0, [r3, #0]
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	2b0e      	cmp	r3, #14
 8007d86:	f200 80a4 	bhi.w	8007ed2 <_dtoa_r+0x442>
 8007d8a:	2c00      	cmp	r4, #0
 8007d8c:	f000 80a1 	beq.w	8007ed2 <_dtoa_r+0x442>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	dd33      	ble.n	8007dfc <_dtoa_r+0x36c>
 8007d94:	4bad      	ldr	r3, [pc, #692]	@ (800804c <_dtoa_r+0x5bc>)
 8007d96:	f007 020f 	and.w	r2, r7, #15
 8007d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d9e:	ed93 7b00 	vldr	d7, [r3]
 8007da2:	05f8      	lsls	r0, r7, #23
 8007da4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007da8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dac:	d516      	bpl.n	8007ddc <_dtoa_r+0x34c>
 8007dae:	4ba8      	ldr	r3, [pc, #672]	@ (8008050 <_dtoa_r+0x5c0>)
 8007db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007db4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db8:	f7f8 fd68 	bl	800088c <__aeabi_ddiv>
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	f004 040f 	and.w	r4, r4, #15
 8007dc4:	2603      	movs	r6, #3
 8007dc6:	4da2      	ldr	r5, [pc, #648]	@ (8008050 <_dtoa_r+0x5c0>)
 8007dc8:	b954      	cbnz	r4, 8007de0 <_dtoa_r+0x350>
 8007dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd2:	f7f8 fd5b 	bl	800088c <__aeabi_ddiv>
 8007dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dda:	e028      	b.n	8007e2e <_dtoa_r+0x39e>
 8007ddc:	2602      	movs	r6, #2
 8007dde:	e7f2      	b.n	8007dc6 <_dtoa_r+0x336>
 8007de0:	07e1      	lsls	r1, r4, #31
 8007de2:	d508      	bpl.n	8007df6 <_dtoa_r+0x366>
 8007de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007df4:	3601      	adds	r6, #1
 8007df6:	1064      	asrs	r4, r4, #1
 8007df8:	3508      	adds	r5, #8
 8007dfa:	e7e5      	b.n	8007dc8 <_dtoa_r+0x338>
 8007dfc:	f000 80d2 	beq.w	8007fa4 <_dtoa_r+0x514>
 8007e00:	427c      	negs	r4, r7
 8007e02:	4b92      	ldr	r3, [pc, #584]	@ (800804c <_dtoa_r+0x5bc>)
 8007e04:	4d92      	ldr	r5, [pc, #584]	@ (8008050 <_dtoa_r+0x5c0>)
 8007e06:	f004 020f 	and.w	r2, r4, #15
 8007e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e16:	f7f8 fc0f 	bl	8000638 <__aeabi_dmul>
 8007e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1e:	1124      	asrs	r4, r4, #4
 8007e20:	2300      	movs	r3, #0
 8007e22:	2602      	movs	r6, #2
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	f040 80b2 	bne.w	8007f8e <_dtoa_r+0x4fe>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1d3      	bne.n	8007dd6 <_dtoa_r+0x346>
 8007e2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 80b7 	beq.w	8007fa8 <_dtoa_r+0x518>
 8007e3a:	4b86      	ldr	r3, [pc, #536]	@ (8008054 <_dtoa_r+0x5c4>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4620      	mov	r0, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7f8 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f000 80ae 	beq.w	8007fa8 <_dtoa_r+0x518>
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80aa 	beq.w	8007fa8 <_dtoa_r+0x518>
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dd37      	ble.n	8007eca <_dtoa_r+0x43a>
 8007e5a:	1e7b      	subs	r3, r7, #1
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4b7d      	ldr	r3, [pc, #500]	@ (8008058 <_dtoa_r+0x5c8>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fbe7 	bl	8000638 <__aeabi_dmul>
 8007e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6e:	9c00      	ldr	r4, [sp, #0]
 8007e70:	3601      	adds	r6, #1
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7f8 fb76 	bl	8000564 <__aeabi_i2d>
 8007e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e7c:	f7f8 fbdc 	bl	8000638 <__aeabi_dmul>
 8007e80:	4b76      	ldr	r3, [pc, #472]	@ (800805c <_dtoa_r+0x5cc>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f7f8 fa22 	bl	80002cc <__adddf3>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	f040 808d 	bne.w	8007fae <_dtoa_r+0x51e>
 8007e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e98:	4b71      	ldr	r3, [pc, #452]	@ (8008060 <_dtoa_r+0x5d0>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f7f8 fa14 	bl	80002c8 <__aeabi_dsub>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	4633      	mov	r3, r6
 8007eac:	f7f8 fe54 	bl	8000b58 <__aeabi_dcmpgt>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f040 828b 	bne.w	80083cc <_dtoa_r+0x93c>
 8007eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eba:	462a      	mov	r2, r5
 8007ebc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8128 	bne.w	800811a <_dtoa_r+0x68a>
 8007eca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f2c0 815a 	blt.w	800818e <_dtoa_r+0x6fe>
 8007eda:	2f0e      	cmp	r7, #14
 8007edc:	f300 8157 	bgt.w	800818e <_dtoa_r+0x6fe>
 8007ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800804c <_dtoa_r+0x5bc>)
 8007ee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ee6:	ed93 7b00 	vldr	d7, [r3]
 8007eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	ed8d 7b00 	vstr	d7, [sp]
 8007ef2:	da03      	bge.n	8007efc <_dtoa_r+0x46c>
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f340 8101 	ble.w	80080fe <_dtoa_r+0x66e>
 8007efc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f00:	4656      	mov	r6, sl
 8007f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7f8 fcbf 	bl	800088c <__aeabi_ddiv>
 8007f0e:	f7f8 fe43 	bl	8000b98 <__aeabi_d2iz>
 8007f12:	4680      	mov	r8, r0
 8007f14:	f7f8 fb26 	bl	8000564 <__aeabi_i2d>
 8007f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1c:	f7f8 fb8c 	bl	8000638 <__aeabi_dmul>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f2c:	f7f8 f9cc 	bl	80002c8 <__aeabi_dsub>
 8007f30:	f806 4b01 	strb.w	r4, [r6], #1
 8007f34:	9d07      	ldr	r5, [sp, #28]
 8007f36:	eba6 040a 	sub.w	r4, r6, sl
 8007f3a:	42a5      	cmp	r5, r4
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	f040 8117 	bne.w	8008172 <_dtoa_r+0x6e2>
 8007f44:	f7f8 f9c2 	bl	80002cc <__adddf3>
 8007f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	f7f8 fe02 	bl	8000b58 <__aeabi_dcmpgt>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 80f9 	bne.w	800814c <_dtoa_r+0x6bc>
 8007f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8007f66:	b118      	cbz	r0, 8007f70 <_dtoa_r+0x4e0>
 8007f68:	f018 0f01 	tst.w	r8, #1
 8007f6c:	f040 80ee 	bne.w	800814c <_dtoa_r+0x6bc>
 8007f70:	4649      	mov	r1, r9
 8007f72:	4658      	mov	r0, fp
 8007f74:	f000 fbda 	bl	800872c <_Bfree>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	7033      	strb	r3, [r6, #0]
 8007f7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f7e:	3701      	adds	r7, #1
 8007f80:	601f      	str	r7, [r3, #0]
 8007f82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 831d 	beq.w	80085c4 <_dtoa_r+0xb34>
 8007f8a:	601e      	str	r6, [r3, #0]
 8007f8c:	e31a      	b.n	80085c4 <_dtoa_r+0xb34>
 8007f8e:	07e2      	lsls	r2, r4, #31
 8007f90:	d505      	bpl.n	8007f9e <_dtoa_r+0x50e>
 8007f92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f96:	f7f8 fb4f 	bl	8000638 <__aeabi_dmul>
 8007f9a:	3601      	adds	r6, #1
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	1064      	asrs	r4, r4, #1
 8007fa0:	3508      	adds	r5, #8
 8007fa2:	e73f      	b.n	8007e24 <_dtoa_r+0x394>
 8007fa4:	2602      	movs	r6, #2
 8007fa6:	e742      	b.n	8007e2e <_dtoa_r+0x39e>
 8007fa8:	9c07      	ldr	r4, [sp, #28]
 8007faa:	9704      	str	r7, [sp, #16]
 8007fac:	e761      	b.n	8007e72 <_dtoa_r+0x3e2>
 8007fae:	4b27      	ldr	r3, [pc, #156]	@ (800804c <_dtoa_r+0x5bc>)
 8007fb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fba:	4454      	add	r4, sl
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	d053      	beq.n	8008068 <_dtoa_r+0x5d8>
 8007fc0:	4928      	ldr	r1, [pc, #160]	@ (8008064 <_dtoa_r+0x5d4>)
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f7f8 fc62 	bl	800088c <__aeabi_ddiv>
 8007fc8:	4633      	mov	r3, r6
 8007fca:	462a      	mov	r2, r5
 8007fcc:	f7f8 f97c 	bl	80002c8 <__aeabi_dsub>
 8007fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fd4:	4656      	mov	r6, sl
 8007fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fda:	f7f8 fddd 	bl	8000b98 <__aeabi_d2iz>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	f7f8 fac0 	bl	8000564 <__aeabi_i2d>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fec:	f7f8 f96c 	bl	80002c8 <__aeabi_dsub>
 8007ff0:	3530      	adds	r5, #48	@ 0x30
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ffa:	f806 5b01 	strb.w	r5, [r6], #1
 8007ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008002:	f7f8 fd8b 	bl	8000b1c <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d171      	bne.n	80080ee <_dtoa_r+0x65e>
 800800a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800e:	4911      	ldr	r1, [pc, #68]	@ (8008054 <_dtoa_r+0x5c4>)
 8008010:	2000      	movs	r0, #0
 8008012:	f7f8 f959 	bl	80002c8 <__aeabi_dsub>
 8008016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800801a:	f7f8 fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	f040 8095 	bne.w	800814e <_dtoa_r+0x6be>
 8008024:	42a6      	cmp	r6, r4
 8008026:	f43f af50 	beq.w	8007eca <_dtoa_r+0x43a>
 800802a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800802e:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <_dtoa_r+0x5c8>)
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fb01 	bl	8000638 <__aeabi_dmul>
 8008036:	4b08      	ldr	r3, [pc, #32]	@ (8008058 <_dtoa_r+0x5c8>)
 8008038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800803c:	2200      	movs	r2, #0
 800803e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008042:	f7f8 faf9 	bl	8000638 <__aeabi_dmul>
 8008046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800804a:	e7c4      	b.n	8007fd6 <_dtoa_r+0x546>
 800804c:	0800b140 	.word	0x0800b140
 8008050:	0800b118 	.word	0x0800b118
 8008054:	3ff00000 	.word	0x3ff00000
 8008058:	40240000 	.word	0x40240000
 800805c:	401c0000 	.word	0x401c0000
 8008060:	40140000 	.word	0x40140000
 8008064:	3fe00000 	.word	0x3fe00000
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	f7f8 fae4 	bl	8000638 <__aeabi_dmul>
 8008070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008074:	9415      	str	r4, [sp, #84]	@ 0x54
 8008076:	4656      	mov	r6, sl
 8008078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807c:	f7f8 fd8c 	bl	8000b98 <__aeabi_d2iz>
 8008080:	4605      	mov	r5, r0
 8008082:	f7f8 fa6f 	bl	8000564 <__aeabi_i2d>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808e:	f7f8 f91b 	bl	80002c8 <__aeabi_dsub>
 8008092:	3530      	adds	r5, #48	@ 0x30
 8008094:	f806 5b01 	strb.w	r5, [r6], #1
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	42a6      	cmp	r6, r4
 800809e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	d124      	bne.n	80080f2 <_dtoa_r+0x662>
 80080a8:	4bac      	ldr	r3, [pc, #688]	@ (800835c <_dtoa_r+0x8cc>)
 80080aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080ae:	f7f8 f90d 	bl	80002cc <__adddf3>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ba:	f7f8 fd4d 	bl	8000b58 <__aeabi_dcmpgt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d145      	bne.n	800814e <_dtoa_r+0x6be>
 80080c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080c6:	49a5      	ldr	r1, [pc, #660]	@ (800835c <_dtoa_r+0x8cc>)
 80080c8:	2000      	movs	r0, #0
 80080ca:	f7f8 f8fd 	bl	80002c8 <__aeabi_dsub>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d6:	f7f8 fd21 	bl	8000b1c <__aeabi_dcmplt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	f43f aef5 	beq.w	8007eca <_dtoa_r+0x43a>
 80080e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080e2:	1e73      	subs	r3, r6, #1
 80080e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80080e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080ea:	2b30      	cmp	r3, #48	@ 0x30
 80080ec:	d0f8      	beq.n	80080e0 <_dtoa_r+0x650>
 80080ee:	9f04      	ldr	r7, [sp, #16]
 80080f0:	e73e      	b.n	8007f70 <_dtoa_r+0x4e0>
 80080f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008360 <_dtoa_r+0x8d0>)
 80080f4:	f7f8 faa0 	bl	8000638 <__aeabi_dmul>
 80080f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080fc:	e7bc      	b.n	8008078 <_dtoa_r+0x5e8>
 80080fe:	d10c      	bne.n	800811a <_dtoa_r+0x68a>
 8008100:	4b98      	ldr	r3, [pc, #608]	@ (8008364 <_dtoa_r+0x8d4>)
 8008102:	2200      	movs	r2, #0
 8008104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008108:	f7f8 fa96 	bl	8000638 <__aeabi_dmul>
 800810c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008110:	f7f8 fd18 	bl	8000b44 <__aeabi_dcmpge>
 8008114:	2800      	cmp	r0, #0
 8008116:	f000 8157 	beq.w	80083c8 <_dtoa_r+0x938>
 800811a:	2400      	movs	r4, #0
 800811c:	4625      	mov	r5, r4
 800811e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008120:	43db      	mvns	r3, r3
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	4656      	mov	r6, sl
 8008126:	2700      	movs	r7, #0
 8008128:	4621      	mov	r1, r4
 800812a:	4658      	mov	r0, fp
 800812c:	f000 fafe 	bl	800872c <_Bfree>
 8008130:	2d00      	cmp	r5, #0
 8008132:	d0dc      	beq.n	80080ee <_dtoa_r+0x65e>
 8008134:	b12f      	cbz	r7, 8008142 <_dtoa_r+0x6b2>
 8008136:	42af      	cmp	r7, r5
 8008138:	d003      	beq.n	8008142 <_dtoa_r+0x6b2>
 800813a:	4639      	mov	r1, r7
 800813c:	4658      	mov	r0, fp
 800813e:	f000 faf5 	bl	800872c <_Bfree>
 8008142:	4629      	mov	r1, r5
 8008144:	4658      	mov	r0, fp
 8008146:	f000 faf1 	bl	800872c <_Bfree>
 800814a:	e7d0      	b.n	80080ee <_dtoa_r+0x65e>
 800814c:	9704      	str	r7, [sp, #16]
 800814e:	4633      	mov	r3, r6
 8008150:	461e      	mov	r6, r3
 8008152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008156:	2a39      	cmp	r2, #57	@ 0x39
 8008158:	d107      	bne.n	800816a <_dtoa_r+0x6da>
 800815a:	459a      	cmp	sl, r3
 800815c:	d1f8      	bne.n	8008150 <_dtoa_r+0x6c0>
 800815e:	9a04      	ldr	r2, [sp, #16]
 8008160:	3201      	adds	r2, #1
 8008162:	9204      	str	r2, [sp, #16]
 8008164:	2230      	movs	r2, #48	@ 0x30
 8008166:	f88a 2000 	strb.w	r2, [sl]
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	3201      	adds	r2, #1
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e7bd      	b.n	80080ee <_dtoa_r+0x65e>
 8008172:	4b7b      	ldr	r3, [pc, #492]	@ (8008360 <_dtoa_r+0x8d0>)
 8008174:	2200      	movs	r2, #0
 8008176:	f7f8 fa5f 	bl	8000638 <__aeabi_dmul>
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	460d      	mov	r5, r1
 8008182:	f7f8 fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8008186:	2800      	cmp	r0, #0
 8008188:	f43f aebb 	beq.w	8007f02 <_dtoa_r+0x472>
 800818c:	e6f0      	b.n	8007f70 <_dtoa_r+0x4e0>
 800818e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008190:	2a00      	cmp	r2, #0
 8008192:	f000 80db 	beq.w	800834c <_dtoa_r+0x8bc>
 8008196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008198:	2a01      	cmp	r2, #1
 800819a:	f300 80bf 	bgt.w	800831c <_dtoa_r+0x88c>
 800819e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	f000 80b7 	beq.w	8008314 <_dtoa_r+0x884>
 80081a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081ac:	4646      	mov	r6, r8
 80081ae:	9a08      	ldr	r2, [sp, #32]
 80081b0:	2101      	movs	r1, #1
 80081b2:	441a      	add	r2, r3
 80081b4:	4658      	mov	r0, fp
 80081b6:	4498      	add	r8, r3
 80081b8:	9208      	str	r2, [sp, #32]
 80081ba:	f000 fbb5 	bl	8008928 <__i2b>
 80081be:	4605      	mov	r5, r0
 80081c0:	b15e      	cbz	r6, 80081da <_dtoa_r+0x74a>
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd08      	ble.n	80081da <_dtoa_r+0x74a>
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	9a08      	ldr	r2, [sp, #32]
 80081cc:	bfa8      	it	ge
 80081ce:	4633      	movge	r3, r6
 80081d0:	eba8 0803 	sub.w	r8, r8, r3
 80081d4:	1af6      	subs	r6, r6, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081dc:	b1f3      	cbz	r3, 800821c <_dtoa_r+0x78c>
 80081de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80b7 	beq.w	8008354 <_dtoa_r+0x8c4>
 80081e6:	b18c      	cbz	r4, 800820c <_dtoa_r+0x77c>
 80081e8:	4629      	mov	r1, r5
 80081ea:	4622      	mov	r2, r4
 80081ec:	4658      	mov	r0, fp
 80081ee:	f000 fc5b 	bl	8008aa8 <__pow5mult>
 80081f2:	464a      	mov	r2, r9
 80081f4:	4601      	mov	r1, r0
 80081f6:	4605      	mov	r5, r0
 80081f8:	4658      	mov	r0, fp
 80081fa:	f000 fbab 	bl	8008954 <__multiply>
 80081fe:	4649      	mov	r1, r9
 8008200:	9004      	str	r0, [sp, #16]
 8008202:	4658      	mov	r0, fp
 8008204:	f000 fa92 	bl	800872c <_Bfree>
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	4699      	mov	r9, r3
 800820c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820e:	1b1a      	subs	r2, r3, r4
 8008210:	d004      	beq.n	800821c <_dtoa_r+0x78c>
 8008212:	4649      	mov	r1, r9
 8008214:	4658      	mov	r0, fp
 8008216:	f000 fc47 	bl	8008aa8 <__pow5mult>
 800821a:	4681      	mov	r9, r0
 800821c:	2101      	movs	r1, #1
 800821e:	4658      	mov	r0, fp
 8008220:	f000 fb82 	bl	8008928 <__i2b>
 8008224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008226:	4604      	mov	r4, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 81cf 	beq.w	80085cc <_dtoa_r+0xb3c>
 800822e:	461a      	mov	r2, r3
 8008230:	4601      	mov	r1, r0
 8008232:	4658      	mov	r0, fp
 8008234:	f000 fc38 	bl	8008aa8 <__pow5mult>
 8008238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823a:	2b01      	cmp	r3, #1
 800823c:	4604      	mov	r4, r0
 800823e:	f300 8095 	bgt.w	800836c <_dtoa_r+0x8dc>
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 8087 	bne.w	8008358 <_dtoa_r+0x8c8>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 8089 	bne.w	8008368 <_dtoa_r+0x8d8>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800825c:	0d1b      	lsrs	r3, r3, #20
 800825e:	051b      	lsls	r3, r3, #20
 8008260:	b12b      	cbz	r3, 800826e <_dtoa_r+0x7de>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	3301      	adds	r3, #1
 8008266:	9308      	str	r3, [sp, #32]
 8008268:	f108 0801 	add.w	r8, r8, #1
 800826c:	2301      	movs	r3, #1
 800826e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 81b0 	beq.w	80085d8 <_dtoa_r+0xb48>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800827e:	6918      	ldr	r0, [r3, #16]
 8008280:	f000 fb06 	bl	8008890 <__hi0bits>
 8008284:	f1c0 0020 	rsb	r0, r0, #32
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	4418      	add	r0, r3
 800828c:	f010 001f 	ands.w	r0, r0, #31
 8008290:	d077      	beq.n	8008382 <_dtoa_r+0x8f2>
 8008292:	f1c0 0320 	rsb	r3, r0, #32
 8008296:	2b04      	cmp	r3, #4
 8008298:	dd6b      	ble.n	8008372 <_dtoa_r+0x8e2>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	f1c0 001c 	rsb	r0, r0, #28
 80082a0:	4403      	add	r3, r0
 80082a2:	4480      	add	r8, r0
 80082a4:	4406      	add	r6, r0
 80082a6:	9308      	str	r3, [sp, #32]
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	dd05      	ble.n	80082ba <_dtoa_r+0x82a>
 80082ae:	4649      	mov	r1, r9
 80082b0:	4642      	mov	r2, r8
 80082b2:	4658      	mov	r0, fp
 80082b4:	f000 fc52 	bl	8008b5c <__lshift>
 80082b8:	4681      	mov	r9, r0
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd05      	ble.n	80082cc <_dtoa_r+0x83c>
 80082c0:	4621      	mov	r1, r4
 80082c2:	461a      	mov	r2, r3
 80082c4:	4658      	mov	r0, fp
 80082c6:	f000 fc49 	bl	8008b5c <__lshift>
 80082ca:	4604      	mov	r4, r0
 80082cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d059      	beq.n	8008386 <_dtoa_r+0x8f6>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fcad 	bl	8008c34 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	da53      	bge.n	8008386 <_dtoa_r+0x8f6>
 80082de:	1e7b      	subs	r3, r7, #1
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	4649      	mov	r1, r9
 80082e4:	2300      	movs	r3, #0
 80082e6:	220a      	movs	r2, #10
 80082e8:	4658      	mov	r0, fp
 80082ea:	f000 fa41 	bl	8008770 <__multadd>
 80082ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f0:	4681      	mov	r9, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8172 	beq.w	80085dc <_dtoa_r+0xb4c>
 80082f8:	2300      	movs	r3, #0
 80082fa:	4629      	mov	r1, r5
 80082fc:	220a      	movs	r2, #10
 80082fe:	4658      	mov	r0, fp
 8008300:	f000 fa36 	bl	8008770 <__multadd>
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	4605      	mov	r5, r0
 800830a:	dc67      	bgt.n	80083dc <_dtoa_r+0x94c>
 800830c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc41      	bgt.n	8008396 <_dtoa_r+0x906>
 8008312:	e063      	b.n	80083dc <_dtoa_r+0x94c>
 8008314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800831a:	e746      	b.n	80081aa <_dtoa_r+0x71a>
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	1e5c      	subs	r4, r3, #1
 8008320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008322:	42a3      	cmp	r3, r4
 8008324:	bfbf      	itttt	lt
 8008326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008328:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800832a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800832c:	1ae3      	sublt	r3, r4, r3
 800832e:	bfb4      	ite	lt
 8008330:	18d2      	addlt	r2, r2, r3
 8008332:	1b1c      	subge	r4, r3, r4
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	bfbc      	itt	lt
 8008338:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800833a:	2400      	movlt	r4, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb5      	itete	lt
 8008340:	eba8 0603 	sublt.w	r6, r8, r3
 8008344:	9b07      	ldrge	r3, [sp, #28]
 8008346:	2300      	movlt	r3, #0
 8008348:	4646      	movge	r6, r8
 800834a:	e730      	b.n	80081ae <_dtoa_r+0x71e>
 800834c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800834e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008350:	4646      	mov	r6, r8
 8008352:	e735      	b.n	80081c0 <_dtoa_r+0x730>
 8008354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008356:	e75c      	b.n	8008212 <_dtoa_r+0x782>
 8008358:	2300      	movs	r3, #0
 800835a:	e788      	b.n	800826e <_dtoa_r+0x7de>
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	40240000 	.word	0x40240000
 8008364:	40140000 	.word	0x40140000
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	e780      	b.n	800826e <_dtoa_r+0x7de>
 800836c:	2300      	movs	r3, #0
 800836e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008370:	e782      	b.n	8008278 <_dtoa_r+0x7e8>
 8008372:	d099      	beq.n	80082a8 <_dtoa_r+0x818>
 8008374:	9a08      	ldr	r2, [sp, #32]
 8008376:	331c      	adds	r3, #28
 8008378:	441a      	add	r2, r3
 800837a:	4498      	add	r8, r3
 800837c:	441e      	add	r6, r3
 800837e:	9208      	str	r2, [sp, #32]
 8008380:	e792      	b.n	80082a8 <_dtoa_r+0x818>
 8008382:	4603      	mov	r3, r0
 8008384:	e7f6      	b.n	8008374 <_dtoa_r+0x8e4>
 8008386:	9b07      	ldr	r3, [sp, #28]
 8008388:	9704      	str	r7, [sp, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	dc20      	bgt.n	80083d0 <_dtoa_r+0x940>
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008392:	2b02      	cmp	r3, #2
 8008394:	dd1e      	ble.n	80083d4 <_dtoa_r+0x944>
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f47f aec0 	bne.w	800811e <_dtoa_r+0x68e>
 800839e:	4621      	mov	r1, r4
 80083a0:	2205      	movs	r2, #5
 80083a2:	4658      	mov	r0, fp
 80083a4:	f000 f9e4 	bl	8008770 <__multadd>
 80083a8:	4601      	mov	r1, r0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fc41 	bl	8008c34 <__mcmp>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	f77f aeb3 	ble.w	800811e <_dtoa_r+0x68e>
 80083b8:	4656      	mov	r6, sl
 80083ba:	2331      	movs	r3, #49	@ 0x31
 80083bc:	f806 3b01 	strb.w	r3, [r6], #1
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	3301      	adds	r3, #1
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	e6ae      	b.n	8008126 <_dtoa_r+0x696>
 80083c8:	9c07      	ldr	r4, [sp, #28]
 80083ca:	9704      	str	r7, [sp, #16]
 80083cc:	4625      	mov	r5, r4
 80083ce:	e7f3      	b.n	80083b8 <_dtoa_r+0x928>
 80083d0:	9b07      	ldr	r3, [sp, #28]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8104 	beq.w	80085e4 <_dtoa_r+0xb54>
 80083dc:	2e00      	cmp	r6, #0
 80083de:	dd05      	ble.n	80083ec <_dtoa_r+0x95c>
 80083e0:	4629      	mov	r1, r5
 80083e2:	4632      	mov	r2, r6
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fbb9 	bl	8008b5c <__lshift>
 80083ea:	4605      	mov	r5, r0
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d05a      	beq.n	80084a8 <_dtoa_r+0xa18>
 80083f2:	6869      	ldr	r1, [r5, #4]
 80083f4:	4658      	mov	r0, fp
 80083f6:	f000 f959 	bl	80086ac <_Balloc>
 80083fa:	4606      	mov	r6, r0
 80083fc:	b928      	cbnz	r0, 800840a <_dtoa_r+0x97a>
 80083fe:	4b84      	ldr	r3, [pc, #528]	@ (8008610 <_dtoa_r+0xb80>)
 8008400:	4602      	mov	r2, r0
 8008402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008406:	f7ff bb5a 	b.w	8007abe <_dtoa_r+0x2e>
 800840a:	692a      	ldr	r2, [r5, #16]
 800840c:	3202      	adds	r2, #2
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	f105 010c 	add.w	r1, r5, #12
 8008414:	300c      	adds	r0, #12
 8008416:	f002 f865 	bl	800a4e4 <memcpy>
 800841a:	2201      	movs	r2, #1
 800841c:	4631      	mov	r1, r6
 800841e:	4658      	mov	r0, fp
 8008420:	f000 fb9c 	bl	8008b5c <__lshift>
 8008424:	f10a 0301 	add.w	r3, sl, #1
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	9b00      	ldr	r3, [sp, #0]
 800842c:	4453      	add	r3, sl
 800842e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	462f      	mov	r7, r5
 8008438:	930a      	str	r3, [sp, #40]	@ 0x28
 800843a:	4605      	mov	r5, r0
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	4621      	mov	r1, r4
 8008440:	3b01      	subs	r3, #1
 8008442:	4648      	mov	r0, r9
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f7ff fa99 	bl	800797c <quorem>
 800844a:	4639      	mov	r1, r7
 800844c:	9002      	str	r0, [sp, #8]
 800844e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008452:	4648      	mov	r0, r9
 8008454:	f000 fbee 	bl	8008c34 <__mcmp>
 8008458:	462a      	mov	r2, r5
 800845a:	9008      	str	r0, [sp, #32]
 800845c:	4621      	mov	r1, r4
 800845e:	4658      	mov	r0, fp
 8008460:	f000 fc04 	bl	8008c6c <__mdiff>
 8008464:	68c2      	ldr	r2, [r0, #12]
 8008466:	4606      	mov	r6, r0
 8008468:	bb02      	cbnz	r2, 80084ac <_dtoa_r+0xa1c>
 800846a:	4601      	mov	r1, r0
 800846c:	4648      	mov	r0, r9
 800846e:	f000 fbe1 	bl	8008c34 <__mcmp>
 8008472:	4602      	mov	r2, r0
 8008474:	4631      	mov	r1, r6
 8008476:	4658      	mov	r0, fp
 8008478:	920e      	str	r2, [sp, #56]	@ 0x38
 800847a:	f000 f957 	bl	800872c <_Bfree>
 800847e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008482:	9e07      	ldr	r6, [sp, #28]
 8008484:	ea43 0102 	orr.w	r1, r3, r2
 8008488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800848a:	4319      	orrs	r1, r3
 800848c:	d110      	bne.n	80084b0 <_dtoa_r+0xa20>
 800848e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008492:	d029      	beq.n	80084e8 <_dtoa_r+0xa58>
 8008494:	9b08      	ldr	r3, [sp, #32]
 8008496:	2b00      	cmp	r3, #0
 8008498:	dd02      	ble.n	80084a0 <_dtoa_r+0xa10>
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	f883 8000 	strb.w	r8, [r3]
 80084a6:	e63f      	b.n	8008128 <_dtoa_r+0x698>
 80084a8:	4628      	mov	r0, r5
 80084aa:	e7bb      	b.n	8008424 <_dtoa_r+0x994>
 80084ac:	2201      	movs	r2, #1
 80084ae:	e7e1      	b.n	8008474 <_dtoa_r+0x9e4>
 80084b0:	9b08      	ldr	r3, [sp, #32]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db04      	blt.n	80084c0 <_dtoa_r+0xa30>
 80084b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084b8:	430b      	orrs	r3, r1
 80084ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084bc:	430b      	orrs	r3, r1
 80084be:	d120      	bne.n	8008502 <_dtoa_r+0xa72>
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	dded      	ble.n	80084a0 <_dtoa_r+0xa10>
 80084c4:	4649      	mov	r1, r9
 80084c6:	2201      	movs	r2, #1
 80084c8:	4658      	mov	r0, fp
 80084ca:	f000 fb47 	bl	8008b5c <__lshift>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4681      	mov	r9, r0
 80084d2:	f000 fbaf 	bl	8008c34 <__mcmp>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	dc03      	bgt.n	80084e2 <_dtoa_r+0xa52>
 80084da:	d1e1      	bne.n	80084a0 <_dtoa_r+0xa10>
 80084dc:	f018 0f01 	tst.w	r8, #1
 80084e0:	d0de      	beq.n	80084a0 <_dtoa_r+0xa10>
 80084e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084e6:	d1d8      	bne.n	800849a <_dtoa_r+0xa0a>
 80084e8:	9a00      	ldr	r2, [sp, #0]
 80084ea:	2339      	movs	r3, #57	@ 0x39
 80084ec:	7013      	strb	r3, [r2, #0]
 80084ee:	4633      	mov	r3, r6
 80084f0:	461e      	mov	r6, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084f8:	2a39      	cmp	r2, #57	@ 0x39
 80084fa:	d052      	beq.n	80085a2 <_dtoa_r+0xb12>
 80084fc:	3201      	adds	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
 8008500:	e612      	b.n	8008128 <_dtoa_r+0x698>
 8008502:	2a00      	cmp	r2, #0
 8008504:	dd07      	ble.n	8008516 <_dtoa_r+0xa86>
 8008506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800850a:	d0ed      	beq.n	80084e8 <_dtoa_r+0xa58>
 800850c:	9a00      	ldr	r2, [sp, #0]
 800850e:	f108 0301 	add.w	r3, r8, #1
 8008512:	7013      	strb	r3, [r2, #0]
 8008514:	e608      	b.n	8008128 <_dtoa_r+0x698>
 8008516:	9b07      	ldr	r3, [sp, #28]
 8008518:	9a07      	ldr	r2, [sp, #28]
 800851a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800851e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008520:	4293      	cmp	r3, r2
 8008522:	d028      	beq.n	8008576 <_dtoa_r+0xae6>
 8008524:	4649      	mov	r1, r9
 8008526:	2300      	movs	r3, #0
 8008528:	220a      	movs	r2, #10
 800852a:	4658      	mov	r0, fp
 800852c:	f000 f920 	bl	8008770 <__multadd>
 8008530:	42af      	cmp	r7, r5
 8008532:	4681      	mov	r9, r0
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	f04f 020a 	mov.w	r2, #10
 800853c:	4639      	mov	r1, r7
 800853e:	4658      	mov	r0, fp
 8008540:	d107      	bne.n	8008552 <_dtoa_r+0xac2>
 8008542:	f000 f915 	bl	8008770 <__multadd>
 8008546:	4607      	mov	r7, r0
 8008548:	4605      	mov	r5, r0
 800854a:	9b07      	ldr	r3, [sp, #28]
 800854c:	3301      	adds	r3, #1
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	e774      	b.n	800843c <_dtoa_r+0x9ac>
 8008552:	f000 f90d 	bl	8008770 <__multadd>
 8008556:	4629      	mov	r1, r5
 8008558:	4607      	mov	r7, r0
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4658      	mov	r0, fp
 8008560:	f000 f906 	bl	8008770 <__multadd>
 8008564:	4605      	mov	r5, r0
 8008566:	e7f0      	b.n	800854a <_dtoa_r+0xaba>
 8008568:	9b00      	ldr	r3, [sp, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfcc      	ite	gt
 800856e:	461e      	movgt	r6, r3
 8008570:	2601      	movle	r6, #1
 8008572:	4456      	add	r6, sl
 8008574:	2700      	movs	r7, #0
 8008576:	4649      	mov	r1, r9
 8008578:	2201      	movs	r2, #1
 800857a:	4658      	mov	r0, fp
 800857c:	f000 faee 	bl	8008b5c <__lshift>
 8008580:	4621      	mov	r1, r4
 8008582:	4681      	mov	r9, r0
 8008584:	f000 fb56 	bl	8008c34 <__mcmp>
 8008588:	2800      	cmp	r0, #0
 800858a:	dcb0      	bgt.n	80084ee <_dtoa_r+0xa5e>
 800858c:	d102      	bne.n	8008594 <_dtoa_r+0xb04>
 800858e:	f018 0f01 	tst.w	r8, #1
 8008592:	d1ac      	bne.n	80084ee <_dtoa_r+0xa5e>
 8008594:	4633      	mov	r3, r6
 8008596:	461e      	mov	r6, r3
 8008598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859c:	2a30      	cmp	r2, #48	@ 0x30
 800859e:	d0fa      	beq.n	8008596 <_dtoa_r+0xb06>
 80085a0:	e5c2      	b.n	8008128 <_dtoa_r+0x698>
 80085a2:	459a      	cmp	sl, r3
 80085a4:	d1a4      	bne.n	80084f0 <_dtoa_r+0xa60>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	2331      	movs	r3, #49	@ 0x31
 80085ae:	f88a 3000 	strb.w	r3, [sl]
 80085b2:	e5b9      	b.n	8008128 <_dtoa_r+0x698>
 80085b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008614 <_dtoa_r+0xb84>
 80085ba:	b11b      	cbz	r3, 80085c4 <_dtoa_r+0xb34>
 80085bc:	f10a 0308 	add.w	r3, sl, #8
 80085c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	4650      	mov	r0, sl
 80085c6:	b019      	add	sp, #100	@ 0x64
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	f77f ae37 	ble.w	8008242 <_dtoa_r+0x7b2>
 80085d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d8:	2001      	movs	r0, #1
 80085da:	e655      	b.n	8008288 <_dtoa_r+0x7f8>
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f77f aed6 	ble.w	8008390 <_dtoa_r+0x900>
 80085e4:	4656      	mov	r6, sl
 80085e6:	4621      	mov	r1, r4
 80085e8:	4648      	mov	r0, r9
 80085ea:	f7ff f9c7 	bl	800797c <quorem>
 80085ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085f2:	f806 8b01 	strb.w	r8, [r6], #1
 80085f6:	9b00      	ldr	r3, [sp, #0]
 80085f8:	eba6 020a 	sub.w	r2, r6, sl
 80085fc:	4293      	cmp	r3, r2
 80085fe:	ddb3      	ble.n	8008568 <_dtoa_r+0xad8>
 8008600:	4649      	mov	r1, r9
 8008602:	2300      	movs	r3, #0
 8008604:	220a      	movs	r2, #10
 8008606:	4658      	mov	r0, fp
 8008608:	f000 f8b2 	bl	8008770 <__multadd>
 800860c:	4681      	mov	r9, r0
 800860e:	e7ea      	b.n	80085e6 <_dtoa_r+0xb56>
 8008610:	0800b0a1 	.word	0x0800b0a1
 8008614:	0800b025 	.word	0x0800b025

08008618 <_free_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4605      	mov	r5, r0
 800861c:	2900      	cmp	r1, #0
 800861e:	d041      	beq.n	80086a4 <_free_r+0x8c>
 8008620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008624:	1f0c      	subs	r4, r1, #4
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfb8      	it	lt
 800862a:	18e4      	addlt	r4, r4, r3
 800862c:	f7fe f828 	bl	8006680 <__malloc_lock>
 8008630:	4a1d      	ldr	r2, [pc, #116]	@ (80086a8 <_free_r+0x90>)
 8008632:	6813      	ldr	r3, [r2, #0]
 8008634:	b933      	cbnz	r3, 8008644 <_free_r+0x2c>
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	6014      	str	r4, [r2, #0]
 800863a:	4628      	mov	r0, r5
 800863c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008640:	f7fe b824 	b.w	800668c <__malloc_unlock>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d908      	bls.n	800865a <_free_r+0x42>
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	1821      	adds	r1, r4, r0
 800864c:	428b      	cmp	r3, r1
 800864e:	bf01      	itttt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	1809      	addeq	r1, r1, r0
 8008656:	6021      	streq	r1, [r4, #0]
 8008658:	e7ed      	b.n	8008636 <_free_r+0x1e>
 800865a:	461a      	mov	r2, r3
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b10b      	cbz	r3, 8008664 <_free_r+0x4c>
 8008660:	42a3      	cmp	r3, r4
 8008662:	d9fa      	bls.n	800865a <_free_r+0x42>
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	1850      	adds	r0, r2, r1
 8008668:	42a0      	cmp	r0, r4
 800866a:	d10b      	bne.n	8008684 <_free_r+0x6c>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	4401      	add	r1, r0
 8008670:	1850      	adds	r0, r2, r1
 8008672:	4283      	cmp	r3, r0
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	d1e0      	bne.n	800863a <_free_r+0x22>
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	6053      	str	r3, [r2, #4]
 800867e:	4408      	add	r0, r1
 8008680:	6010      	str	r0, [r2, #0]
 8008682:	e7da      	b.n	800863a <_free_r+0x22>
 8008684:	d902      	bls.n	800868c <_free_r+0x74>
 8008686:	230c      	movs	r3, #12
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	e7d6      	b.n	800863a <_free_r+0x22>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	1821      	adds	r1, r4, r0
 8008690:	428b      	cmp	r3, r1
 8008692:	bf04      	itt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	6063      	str	r3, [r4, #4]
 800869a:	bf04      	itt	eq
 800869c:	1809      	addeq	r1, r1, r0
 800869e:	6021      	streq	r1, [r4, #0]
 80086a0:	6054      	str	r4, [r2, #4]
 80086a2:	e7ca      	b.n	800863a <_free_r+0x22>
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
 80086a6:	bf00      	nop
 80086a8:	20000370 	.word	0x20000370

080086ac <_Balloc>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	69c6      	ldr	r6, [r0, #28]
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	b976      	cbnz	r6, 80086d4 <_Balloc+0x28>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7fd ff30 	bl	800651c <malloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	61e0      	str	r0, [r4, #28]
 80086c0:	b920      	cbnz	r0, 80086cc <_Balloc+0x20>
 80086c2:	4b18      	ldr	r3, [pc, #96]	@ (8008724 <_Balloc+0x78>)
 80086c4:	4818      	ldr	r0, [pc, #96]	@ (8008728 <_Balloc+0x7c>)
 80086c6:	216b      	movs	r1, #107	@ 0x6b
 80086c8:	f001 ff22 	bl	800a510 <__assert_func>
 80086cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d0:	6006      	str	r6, [r0, #0]
 80086d2:	60c6      	str	r6, [r0, #12]
 80086d4:	69e6      	ldr	r6, [r4, #28]
 80086d6:	68f3      	ldr	r3, [r6, #12]
 80086d8:	b183      	cbz	r3, 80086fc <_Balloc+0x50>
 80086da:	69e3      	ldr	r3, [r4, #28]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e2:	b9b8      	cbnz	r0, 8008714 <_Balloc+0x68>
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ea:	1d72      	adds	r2, r6, #5
 80086ec:	0092      	lsls	r2, r2, #2
 80086ee:	4620      	mov	r0, r4
 80086f0:	f001 ff2c 	bl	800a54c <_calloc_r>
 80086f4:	b160      	cbz	r0, 8008710 <_Balloc+0x64>
 80086f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fa:	e00e      	b.n	800871a <_Balloc+0x6e>
 80086fc:	2221      	movs	r2, #33	@ 0x21
 80086fe:	2104      	movs	r1, #4
 8008700:	4620      	mov	r0, r4
 8008702:	f001 ff23 	bl	800a54c <_calloc_r>
 8008706:	69e3      	ldr	r3, [r4, #28]
 8008708:	60f0      	str	r0, [r6, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e4      	bne.n	80086da <_Balloc+0x2e>
 8008710:	2000      	movs	r0, #0
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871a:	2300      	movs	r3, #0
 800871c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008720:	e7f7      	b.n	8008712 <_Balloc+0x66>
 8008722:	bf00      	nop
 8008724:	0800b032 	.word	0x0800b032
 8008728:	0800b0b2 	.word	0x0800b0b2

0800872c <_Bfree>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	69c6      	ldr	r6, [r0, #28]
 8008730:	4605      	mov	r5, r0
 8008732:	460c      	mov	r4, r1
 8008734:	b976      	cbnz	r6, 8008754 <_Bfree+0x28>
 8008736:	2010      	movs	r0, #16
 8008738:	f7fd fef0 	bl	800651c <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	61e8      	str	r0, [r5, #28]
 8008740:	b920      	cbnz	r0, 800874c <_Bfree+0x20>
 8008742:	4b09      	ldr	r3, [pc, #36]	@ (8008768 <_Bfree+0x3c>)
 8008744:	4809      	ldr	r0, [pc, #36]	@ (800876c <_Bfree+0x40>)
 8008746:	218f      	movs	r1, #143	@ 0x8f
 8008748:	f001 fee2 	bl	800a510 <__assert_func>
 800874c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008750:	6006      	str	r6, [r0, #0]
 8008752:	60c6      	str	r6, [r0, #12]
 8008754:	b13c      	cbz	r4, 8008766 <_Bfree+0x3a>
 8008756:	69eb      	ldr	r3, [r5, #28]
 8008758:	6862      	ldr	r2, [r4, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008760:	6021      	str	r1, [r4, #0]
 8008762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	0800b032 	.word	0x0800b032
 800876c:	0800b0b2 	.word	0x0800b0b2

08008770 <__multadd>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	690d      	ldr	r5, [r1, #16]
 8008776:	4607      	mov	r7, r0
 8008778:	460c      	mov	r4, r1
 800877a:	461e      	mov	r6, r3
 800877c:	f101 0c14 	add.w	ip, r1, #20
 8008780:	2000      	movs	r0, #0
 8008782:	f8dc 3000 	ldr.w	r3, [ip]
 8008786:	b299      	uxth	r1, r3
 8008788:	fb02 6101 	mla	r1, r2, r1, r6
 800878c:	0c1e      	lsrs	r6, r3, #16
 800878e:	0c0b      	lsrs	r3, r1, #16
 8008790:	fb02 3306 	mla	r3, r2, r6, r3
 8008794:	b289      	uxth	r1, r1
 8008796:	3001      	adds	r0, #1
 8008798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800879c:	4285      	cmp	r5, r0
 800879e:	f84c 1b04 	str.w	r1, [ip], #4
 80087a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087a6:	dcec      	bgt.n	8008782 <__multadd+0x12>
 80087a8:	b30e      	cbz	r6, 80087ee <__multadd+0x7e>
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dc19      	bgt.n	80087e4 <__multadd+0x74>
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4638      	mov	r0, r7
 80087b4:	3101      	adds	r1, #1
 80087b6:	f7ff ff79 	bl	80086ac <_Balloc>
 80087ba:	4680      	mov	r8, r0
 80087bc:	b928      	cbnz	r0, 80087ca <__multadd+0x5a>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <__multadd+0x84>)
 80087c2:	480d      	ldr	r0, [pc, #52]	@ (80087f8 <__multadd+0x88>)
 80087c4:	21ba      	movs	r1, #186	@ 0xba
 80087c6:	f001 fea3 	bl	800a510 <__assert_func>
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	3202      	adds	r2, #2
 80087ce:	f104 010c 	add.w	r1, r4, #12
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	300c      	adds	r0, #12
 80087d6:	f001 fe85 	bl	800a4e4 <memcpy>
 80087da:	4621      	mov	r1, r4
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff ffa5 	bl	800872c <_Bfree>
 80087e2:	4644      	mov	r4, r8
 80087e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087e8:	3501      	adds	r5, #1
 80087ea:	615e      	str	r6, [r3, #20]
 80087ec:	6125      	str	r5, [r4, #16]
 80087ee:	4620      	mov	r0, r4
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f4:	0800b0a1 	.word	0x0800b0a1
 80087f8:	0800b0b2 	.word	0x0800b0b2

080087fc <__s2b>:
 80087fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008800:	460c      	mov	r4, r1
 8008802:	4615      	mov	r5, r2
 8008804:	461f      	mov	r7, r3
 8008806:	2209      	movs	r2, #9
 8008808:	3308      	adds	r3, #8
 800880a:	4606      	mov	r6, r0
 800880c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008810:	2100      	movs	r1, #0
 8008812:	2201      	movs	r2, #1
 8008814:	429a      	cmp	r2, r3
 8008816:	db09      	blt.n	800882c <__s2b+0x30>
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff ff47 	bl	80086ac <_Balloc>
 800881e:	b940      	cbnz	r0, 8008832 <__s2b+0x36>
 8008820:	4602      	mov	r2, r0
 8008822:	4b19      	ldr	r3, [pc, #100]	@ (8008888 <__s2b+0x8c>)
 8008824:	4819      	ldr	r0, [pc, #100]	@ (800888c <__s2b+0x90>)
 8008826:	21d3      	movs	r1, #211	@ 0xd3
 8008828:	f001 fe72 	bl	800a510 <__assert_func>
 800882c:	0052      	lsls	r2, r2, #1
 800882e:	3101      	adds	r1, #1
 8008830:	e7f0      	b.n	8008814 <__s2b+0x18>
 8008832:	9b08      	ldr	r3, [sp, #32]
 8008834:	6143      	str	r3, [r0, #20]
 8008836:	2d09      	cmp	r5, #9
 8008838:	f04f 0301 	mov.w	r3, #1
 800883c:	6103      	str	r3, [r0, #16]
 800883e:	dd16      	ble.n	800886e <__s2b+0x72>
 8008840:	f104 0909 	add.w	r9, r4, #9
 8008844:	46c8      	mov	r8, r9
 8008846:	442c      	add	r4, r5
 8008848:	f818 3b01 	ldrb.w	r3, [r8], #1
 800884c:	4601      	mov	r1, r0
 800884e:	3b30      	subs	r3, #48	@ 0x30
 8008850:	220a      	movs	r2, #10
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff8c 	bl	8008770 <__multadd>
 8008858:	45a0      	cmp	r8, r4
 800885a:	d1f5      	bne.n	8008848 <__s2b+0x4c>
 800885c:	f1a5 0408 	sub.w	r4, r5, #8
 8008860:	444c      	add	r4, r9
 8008862:	1b2d      	subs	r5, r5, r4
 8008864:	1963      	adds	r3, r4, r5
 8008866:	42bb      	cmp	r3, r7
 8008868:	db04      	blt.n	8008874 <__s2b+0x78>
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	340a      	adds	r4, #10
 8008870:	2509      	movs	r5, #9
 8008872:	e7f6      	b.n	8008862 <__s2b+0x66>
 8008874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008878:	4601      	mov	r1, r0
 800887a:	3b30      	subs	r3, #48	@ 0x30
 800887c:	220a      	movs	r2, #10
 800887e:	4630      	mov	r0, r6
 8008880:	f7ff ff76 	bl	8008770 <__multadd>
 8008884:	e7ee      	b.n	8008864 <__s2b+0x68>
 8008886:	bf00      	nop
 8008888:	0800b0a1 	.word	0x0800b0a1
 800888c:	0800b0b2 	.word	0x0800b0b2

08008890 <__hi0bits>:
 8008890:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008894:	4603      	mov	r3, r0
 8008896:	bf36      	itet	cc
 8008898:	0403      	lslcc	r3, r0, #16
 800889a:	2000      	movcs	r0, #0
 800889c:	2010      	movcc	r0, #16
 800889e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088a2:	bf3c      	itt	cc
 80088a4:	021b      	lslcc	r3, r3, #8
 80088a6:	3008      	addcc	r0, #8
 80088a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ac:	bf3c      	itt	cc
 80088ae:	011b      	lslcc	r3, r3, #4
 80088b0:	3004      	addcc	r0, #4
 80088b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b6:	bf3c      	itt	cc
 80088b8:	009b      	lslcc	r3, r3, #2
 80088ba:	3002      	addcc	r0, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	db05      	blt.n	80088cc <__hi0bits+0x3c>
 80088c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088c4:	f100 0001 	add.w	r0, r0, #1
 80088c8:	bf08      	it	eq
 80088ca:	2020      	moveq	r0, #32
 80088cc:	4770      	bx	lr

080088ce <__lo0bits>:
 80088ce:	6803      	ldr	r3, [r0, #0]
 80088d0:	4602      	mov	r2, r0
 80088d2:	f013 0007 	ands.w	r0, r3, #7
 80088d6:	d00b      	beq.n	80088f0 <__lo0bits+0x22>
 80088d8:	07d9      	lsls	r1, r3, #31
 80088da:	d421      	bmi.n	8008920 <__lo0bits+0x52>
 80088dc:	0798      	lsls	r0, r3, #30
 80088de:	bf49      	itett	mi
 80088e0:	085b      	lsrmi	r3, r3, #1
 80088e2:	089b      	lsrpl	r3, r3, #2
 80088e4:	2001      	movmi	r0, #1
 80088e6:	6013      	strmi	r3, [r2, #0]
 80088e8:	bf5c      	itt	pl
 80088ea:	6013      	strpl	r3, [r2, #0]
 80088ec:	2002      	movpl	r0, #2
 80088ee:	4770      	bx	lr
 80088f0:	b299      	uxth	r1, r3
 80088f2:	b909      	cbnz	r1, 80088f8 <__lo0bits+0x2a>
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	2010      	movs	r0, #16
 80088f8:	b2d9      	uxtb	r1, r3
 80088fa:	b909      	cbnz	r1, 8008900 <__lo0bits+0x32>
 80088fc:	3008      	adds	r0, #8
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	0719      	lsls	r1, r3, #28
 8008902:	bf04      	itt	eq
 8008904:	091b      	lsreq	r3, r3, #4
 8008906:	3004      	addeq	r0, #4
 8008908:	0799      	lsls	r1, r3, #30
 800890a:	bf04      	itt	eq
 800890c:	089b      	lsreq	r3, r3, #2
 800890e:	3002      	addeq	r0, #2
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d403      	bmi.n	800891c <__lo0bits+0x4e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	f100 0001 	add.w	r0, r0, #1
 800891a:	d003      	beq.n	8008924 <__lo0bits+0x56>
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	4770      	bx	lr
 8008920:	2000      	movs	r0, #0
 8008922:	4770      	bx	lr
 8008924:	2020      	movs	r0, #32
 8008926:	4770      	bx	lr

08008928 <__i2b>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	2101      	movs	r1, #1
 800892e:	f7ff febd 	bl	80086ac <_Balloc>
 8008932:	4602      	mov	r2, r0
 8008934:	b928      	cbnz	r0, 8008942 <__i2b+0x1a>
 8008936:	4b05      	ldr	r3, [pc, #20]	@ (800894c <__i2b+0x24>)
 8008938:	4805      	ldr	r0, [pc, #20]	@ (8008950 <__i2b+0x28>)
 800893a:	f240 1145 	movw	r1, #325	@ 0x145
 800893e:	f001 fde7 	bl	800a510 <__assert_func>
 8008942:	2301      	movs	r3, #1
 8008944:	6144      	str	r4, [r0, #20]
 8008946:	6103      	str	r3, [r0, #16]
 8008948:	bd10      	pop	{r4, pc}
 800894a:	bf00      	nop
 800894c:	0800b0a1 	.word	0x0800b0a1
 8008950:	0800b0b2 	.word	0x0800b0b2

08008954 <__multiply>:
 8008954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	4614      	mov	r4, r2
 800895a:	690a      	ldr	r2, [r1, #16]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	bfa8      	it	ge
 8008962:	4623      	movge	r3, r4
 8008964:	460f      	mov	r7, r1
 8008966:	bfa4      	itt	ge
 8008968:	460c      	movge	r4, r1
 800896a:	461f      	movge	r7, r3
 800896c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008970:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	6861      	ldr	r1, [r4, #4]
 8008978:	eb0a 0609 	add.w	r6, sl, r9
 800897c:	42b3      	cmp	r3, r6
 800897e:	b085      	sub	sp, #20
 8008980:	bfb8      	it	lt
 8008982:	3101      	addlt	r1, #1
 8008984:	f7ff fe92 	bl	80086ac <_Balloc>
 8008988:	b930      	cbnz	r0, 8008998 <__multiply+0x44>
 800898a:	4602      	mov	r2, r0
 800898c:	4b44      	ldr	r3, [pc, #272]	@ (8008aa0 <__multiply+0x14c>)
 800898e:	4845      	ldr	r0, [pc, #276]	@ (8008aa4 <__multiply+0x150>)
 8008990:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008994:	f001 fdbc 	bl	800a510 <__assert_func>
 8008998:	f100 0514 	add.w	r5, r0, #20
 800899c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089a0:	462b      	mov	r3, r5
 80089a2:	2200      	movs	r2, #0
 80089a4:	4543      	cmp	r3, r8
 80089a6:	d321      	bcc.n	80089ec <__multiply+0x98>
 80089a8:	f107 0114 	add.w	r1, r7, #20
 80089ac:	f104 0214 	add.w	r2, r4, #20
 80089b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80089b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80089b8:	9302      	str	r3, [sp, #8]
 80089ba:	1b13      	subs	r3, r2, r4
 80089bc:	3b15      	subs	r3, #21
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	3304      	adds	r3, #4
 80089c4:	f104 0715 	add.w	r7, r4, #21
 80089c8:	42ba      	cmp	r2, r7
 80089ca:	bf38      	it	cc
 80089cc:	2304      	movcc	r3, #4
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	9103      	str	r1, [sp, #12]
 80089d4:	428b      	cmp	r3, r1
 80089d6:	d80c      	bhi.n	80089f2 <__multiply+0x9e>
 80089d8:	2e00      	cmp	r6, #0
 80089da:	dd03      	ble.n	80089e4 <__multiply+0x90>
 80089dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d05b      	beq.n	8008a9c <__multiply+0x148>
 80089e4:	6106      	str	r6, [r0, #16]
 80089e6:	b005      	add	sp, #20
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	f843 2b04 	str.w	r2, [r3], #4
 80089f0:	e7d8      	b.n	80089a4 <__multiply+0x50>
 80089f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80089f6:	f1ba 0f00 	cmp.w	sl, #0
 80089fa:	d024      	beq.n	8008a46 <__multiply+0xf2>
 80089fc:	f104 0e14 	add.w	lr, r4, #20
 8008a00:	46a9      	mov	r9, r5
 8008a02:	f04f 0c00 	mov.w	ip, #0
 8008a06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008a0e:	fa1f fb87 	uxth.w	fp, r7
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008a1c:	f8d9 7000 	ldr.w	r7, [r9]
 8008a20:	4463      	add	r3, ip
 8008a22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a26:	fb0a c70b 	mla	r7, sl, fp, ip
 8008a2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a34:	4572      	cmp	r2, lr
 8008a36:	f849 3b04 	str.w	r3, [r9], #4
 8008a3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a3e:	d8e2      	bhi.n	8008a06 <__multiply+0xb2>
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	f845 c003 	str.w	ip, [r5, r3]
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a4c:	3104      	adds	r1, #4
 8008a4e:	f1b9 0f00 	cmp.w	r9, #0
 8008a52:	d021      	beq.n	8008a98 <__multiply+0x144>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	f104 0c14 	add.w	ip, r4, #20
 8008a5a:	46ae      	mov	lr, r5
 8008a5c:	f04f 0a00 	mov.w	sl, #0
 8008a60:	f8bc b000 	ldrh.w	fp, [ip]
 8008a64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a68:	fb09 770b 	mla	r7, r9, fp, r7
 8008a6c:	4457      	add	r7, sl
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a74:	f84e 3b04 	str.w	r3, [lr], #4
 8008a78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a80:	f8be 3000 	ldrh.w	r3, [lr]
 8008a84:	fb09 330a 	mla	r3, r9, sl, r3
 8008a88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a8c:	4562      	cmp	r2, ip
 8008a8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a92:	d8e5      	bhi.n	8008a60 <__multiply+0x10c>
 8008a94:	9f01      	ldr	r7, [sp, #4]
 8008a96:	51eb      	str	r3, [r5, r7]
 8008a98:	3504      	adds	r5, #4
 8008a9a:	e799      	b.n	80089d0 <__multiply+0x7c>
 8008a9c:	3e01      	subs	r6, #1
 8008a9e:	e79b      	b.n	80089d8 <__multiply+0x84>
 8008aa0:	0800b0a1 	.word	0x0800b0a1
 8008aa4:	0800b0b2 	.word	0x0800b0b2

08008aa8 <__pow5mult>:
 8008aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aac:	4615      	mov	r5, r2
 8008aae:	f012 0203 	ands.w	r2, r2, #3
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	d007      	beq.n	8008ac8 <__pow5mult+0x20>
 8008ab8:	4c25      	ldr	r4, [pc, #148]	@ (8008b50 <__pow5mult+0xa8>)
 8008aba:	3a01      	subs	r2, #1
 8008abc:	2300      	movs	r3, #0
 8008abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ac2:	f7ff fe55 	bl	8008770 <__multadd>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	10ad      	asrs	r5, r5, #2
 8008aca:	d03d      	beq.n	8008b48 <__pow5mult+0xa0>
 8008acc:	69fc      	ldr	r4, [r7, #28]
 8008ace:	b97c      	cbnz	r4, 8008af0 <__pow5mult+0x48>
 8008ad0:	2010      	movs	r0, #16
 8008ad2:	f7fd fd23 	bl	800651c <malloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	61f8      	str	r0, [r7, #28]
 8008ada:	b928      	cbnz	r0, 8008ae8 <__pow5mult+0x40>
 8008adc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b54 <__pow5mult+0xac>)
 8008ade:	481e      	ldr	r0, [pc, #120]	@ (8008b58 <__pow5mult+0xb0>)
 8008ae0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ae4:	f001 fd14 	bl	800a510 <__assert_func>
 8008ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008aec:	6004      	str	r4, [r0, #0]
 8008aee:	60c4      	str	r4, [r0, #12]
 8008af0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008af8:	b94c      	cbnz	r4, 8008b0e <__pow5mult+0x66>
 8008afa:	f240 2171 	movw	r1, #625	@ 0x271
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7ff ff12 	bl	8008928 <__i2b>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	f04f 0900 	mov.w	r9, #0
 8008b12:	07eb      	lsls	r3, r5, #31
 8008b14:	d50a      	bpl.n	8008b2c <__pow5mult+0x84>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4622      	mov	r2, r4
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f7ff ff1a 	bl	8008954 <__multiply>
 8008b20:	4631      	mov	r1, r6
 8008b22:	4680      	mov	r8, r0
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff fe01 	bl	800872c <_Bfree>
 8008b2a:	4646      	mov	r6, r8
 8008b2c:	106d      	asrs	r5, r5, #1
 8008b2e:	d00b      	beq.n	8008b48 <__pow5mult+0xa0>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	b938      	cbnz	r0, 8008b44 <__pow5mult+0x9c>
 8008b34:	4622      	mov	r2, r4
 8008b36:	4621      	mov	r1, r4
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ff0b 	bl	8008954 <__multiply>
 8008b3e:	6020      	str	r0, [r4, #0]
 8008b40:	f8c0 9000 	str.w	r9, [r0]
 8008b44:	4604      	mov	r4, r0
 8008b46:	e7e4      	b.n	8008b12 <__pow5mult+0x6a>
 8008b48:	4630      	mov	r0, r6
 8008b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4e:	bf00      	nop
 8008b50:	0800b10c 	.word	0x0800b10c
 8008b54:	0800b032 	.word	0x0800b032
 8008b58:	0800b0b2 	.word	0x0800b0b2

08008b5c <__lshift>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	6849      	ldr	r1, [r1, #4]
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	4691      	mov	r9, r2
 8008b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b74:	f108 0601 	add.w	r6, r8, #1
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	db0b      	blt.n	8008b94 <__lshift+0x38>
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff fd95 	bl	80086ac <_Balloc>
 8008b82:	4605      	mov	r5, r0
 8008b84:	b948      	cbnz	r0, 8008b9a <__lshift+0x3e>
 8008b86:	4602      	mov	r2, r0
 8008b88:	4b28      	ldr	r3, [pc, #160]	@ (8008c2c <__lshift+0xd0>)
 8008b8a:	4829      	ldr	r0, [pc, #164]	@ (8008c30 <__lshift+0xd4>)
 8008b8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b90:	f001 fcbe 	bl	800a510 <__assert_func>
 8008b94:	3101      	adds	r1, #1
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	e7ee      	b.n	8008b78 <__lshift+0x1c>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f100 0114 	add.w	r1, r0, #20
 8008ba0:	f100 0210 	add.w	r2, r0, #16
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	4553      	cmp	r3, sl
 8008ba8:	db33      	blt.n	8008c12 <__lshift+0xb6>
 8008baa:	6920      	ldr	r0, [r4, #16]
 8008bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bb0:	f104 0314 	add.w	r3, r4, #20
 8008bb4:	f019 091f 	ands.w	r9, r9, #31
 8008bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bc0:	d02b      	beq.n	8008c1a <__lshift+0xbe>
 8008bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008bc6:	468a      	mov	sl, r1
 8008bc8:	2200      	movs	r2, #0
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008bd0:	4310      	orrs	r0, r2
 8008bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bda:	459c      	cmp	ip, r3
 8008bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008be0:	d8f3      	bhi.n	8008bca <__lshift+0x6e>
 8008be2:	ebac 0304 	sub.w	r3, ip, r4
 8008be6:	3b15      	subs	r3, #21
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	3304      	adds	r3, #4
 8008bee:	f104 0015 	add.w	r0, r4, #21
 8008bf2:	4584      	cmp	ip, r0
 8008bf4:	bf38      	it	cc
 8008bf6:	2304      	movcc	r3, #4
 8008bf8:	50ca      	str	r2, [r1, r3]
 8008bfa:	b10a      	cbz	r2, 8008c00 <__lshift+0xa4>
 8008bfc:	f108 0602 	add.w	r6, r8, #2
 8008c00:	3e01      	subs	r6, #1
 8008c02:	4638      	mov	r0, r7
 8008c04:	612e      	str	r6, [r5, #16]
 8008c06:	4621      	mov	r1, r4
 8008c08:	f7ff fd90 	bl	800872c <_Bfree>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c16:	3301      	adds	r3, #1
 8008c18:	e7c5      	b.n	8008ba6 <__lshift+0x4a>
 8008c1a:	3904      	subs	r1, #4
 8008c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c24:	459c      	cmp	ip, r3
 8008c26:	d8f9      	bhi.n	8008c1c <__lshift+0xc0>
 8008c28:	e7ea      	b.n	8008c00 <__lshift+0xa4>
 8008c2a:	bf00      	nop
 8008c2c:	0800b0a1 	.word	0x0800b0a1
 8008c30:	0800b0b2 	.word	0x0800b0b2

08008c34 <__mcmp>:
 8008c34:	690a      	ldr	r2, [r1, #16]
 8008c36:	4603      	mov	r3, r0
 8008c38:	6900      	ldr	r0, [r0, #16]
 8008c3a:	1a80      	subs	r0, r0, r2
 8008c3c:	b530      	push	{r4, r5, lr}
 8008c3e:	d10e      	bne.n	8008c5e <__mcmp+0x2a>
 8008c40:	3314      	adds	r3, #20
 8008c42:	3114      	adds	r1, #20
 8008c44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c54:	4295      	cmp	r5, r2
 8008c56:	d003      	beq.n	8008c60 <__mcmp+0x2c>
 8008c58:	d205      	bcs.n	8008c66 <__mcmp+0x32>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	bd30      	pop	{r4, r5, pc}
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d3f3      	bcc.n	8008c4c <__mcmp+0x18>
 8008c64:	e7fb      	b.n	8008c5e <__mcmp+0x2a>
 8008c66:	2001      	movs	r0, #1
 8008c68:	e7f9      	b.n	8008c5e <__mcmp+0x2a>
	...

08008c6c <__mdiff>:
 8008c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	4689      	mov	r9, r1
 8008c72:	4606      	mov	r6, r0
 8008c74:	4611      	mov	r1, r2
 8008c76:	4648      	mov	r0, r9
 8008c78:	4614      	mov	r4, r2
 8008c7a:	f7ff ffdb 	bl	8008c34 <__mcmp>
 8008c7e:	1e05      	subs	r5, r0, #0
 8008c80:	d112      	bne.n	8008ca8 <__mdiff+0x3c>
 8008c82:	4629      	mov	r1, r5
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fd11 	bl	80086ac <_Balloc>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <__mdiff+0x2e>
 8008c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d8c <__mdiff+0x120>)
 8008c90:	f240 2137 	movw	r1, #567	@ 0x237
 8008c94:	483e      	ldr	r0, [pc, #248]	@ (8008d90 <__mdiff+0x124>)
 8008c96:	f001 fc3b 	bl	800a510 <__assert_func>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	b003      	add	sp, #12
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca8:	bfbc      	itt	lt
 8008caa:	464b      	movlt	r3, r9
 8008cac:	46a1      	movlt	r9, r4
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008cb4:	bfba      	itte	lt
 8008cb6:	461c      	movlt	r4, r3
 8008cb8:	2501      	movlt	r5, #1
 8008cba:	2500      	movge	r5, #0
 8008cbc:	f7ff fcf6 	bl	80086ac <_Balloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	b918      	cbnz	r0, 8008ccc <__mdiff+0x60>
 8008cc4:	4b31      	ldr	r3, [pc, #196]	@ (8008d8c <__mdiff+0x120>)
 8008cc6:	f240 2145 	movw	r1, #581	@ 0x245
 8008cca:	e7e3      	b.n	8008c94 <__mdiff+0x28>
 8008ccc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cd0:	6926      	ldr	r6, [r4, #16]
 8008cd2:	60c5      	str	r5, [r0, #12]
 8008cd4:	f109 0310 	add.w	r3, r9, #16
 8008cd8:	f109 0514 	add.w	r5, r9, #20
 8008cdc:	f104 0e14 	add.w	lr, r4, #20
 8008ce0:	f100 0b14 	add.w	fp, r0, #20
 8008ce4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ce8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	46d9      	mov	r9, fp
 8008cf0:	f04f 0c00 	mov.w	ip, #0
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	fa1f f38a 	uxth.w	r3, sl
 8008d04:	4619      	mov	r1, r3
 8008d06:	b283      	uxth	r3, r0
 8008d08:	1acb      	subs	r3, r1, r3
 8008d0a:	0c00      	lsrs	r0, r0, #16
 8008d0c:	4463      	add	r3, ip
 8008d0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d1c:	4576      	cmp	r6, lr
 8008d1e:	f849 3b04 	str.w	r3, [r9], #4
 8008d22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d26:	d8e5      	bhi.n	8008cf4 <__mdiff+0x88>
 8008d28:	1b33      	subs	r3, r6, r4
 8008d2a:	3b15      	subs	r3, #21
 8008d2c:	f023 0303 	bic.w	r3, r3, #3
 8008d30:	3415      	adds	r4, #21
 8008d32:	3304      	adds	r3, #4
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	bf38      	it	cc
 8008d38:	2304      	movcc	r3, #4
 8008d3a:	441d      	add	r5, r3
 8008d3c:	445b      	add	r3, fp
 8008d3e:	461e      	mov	r6, r3
 8008d40:	462c      	mov	r4, r5
 8008d42:	4544      	cmp	r4, r8
 8008d44:	d30e      	bcc.n	8008d64 <__mdiff+0xf8>
 8008d46:	f108 0103 	add.w	r1, r8, #3
 8008d4a:	1b49      	subs	r1, r1, r5
 8008d4c:	f021 0103 	bic.w	r1, r1, #3
 8008d50:	3d03      	subs	r5, #3
 8008d52:	45a8      	cmp	r8, r5
 8008d54:	bf38      	it	cc
 8008d56:	2100      	movcc	r1, #0
 8008d58:	440b      	add	r3, r1
 8008d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d5e:	b191      	cbz	r1, 8008d86 <__mdiff+0x11a>
 8008d60:	6117      	str	r7, [r2, #16]
 8008d62:	e79d      	b.n	8008ca0 <__mdiff+0x34>
 8008d64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d68:	46e6      	mov	lr, ip
 8008d6a:	0c08      	lsrs	r0, r1, #16
 8008d6c:	fa1c fc81 	uxtah	ip, ip, r1
 8008d70:	4471      	add	r1, lr
 8008d72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d76:	b289      	uxth	r1, r1
 8008d78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d7c:	f846 1b04 	str.w	r1, [r6], #4
 8008d80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d84:	e7dd      	b.n	8008d42 <__mdiff+0xd6>
 8008d86:	3f01      	subs	r7, #1
 8008d88:	e7e7      	b.n	8008d5a <__mdiff+0xee>
 8008d8a:	bf00      	nop
 8008d8c:	0800b0a1 	.word	0x0800b0a1
 8008d90:	0800b0b2 	.word	0x0800b0b2

08008d94 <__ulp>:
 8008d94:	b082      	sub	sp, #8
 8008d96:	ed8d 0b00 	vstr	d0, [sp]
 8008d9a:	9a01      	ldr	r2, [sp, #4]
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <__ulp+0x48>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc08      	bgt.n	8008dba <__ulp+0x26>
 8008da8:	425b      	negs	r3, r3
 8008daa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008dae:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008db2:	da04      	bge.n	8008dbe <__ulp+0x2a>
 8008db4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008db8:	4113      	asrs	r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	e008      	b.n	8008dd0 <__ulp+0x3c>
 8008dbe:	f1a2 0314 	sub.w	r3, r2, #20
 8008dc2:	2b1e      	cmp	r3, #30
 8008dc4:	bfda      	itte	le
 8008dc6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008dca:	40da      	lsrle	r2, r3
 8008dcc:	2201      	movgt	r2, #1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	ec41 0b10 	vmov	d0, r0, r1
 8008dd8:	b002      	add	sp, #8
 8008dda:	4770      	bx	lr
 8008ddc:	7ff00000 	.word	0x7ff00000

08008de0 <__b2d>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	6906      	ldr	r6, [r0, #16]
 8008de6:	f100 0814 	add.w	r8, r0, #20
 8008dea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008dee:	1f37      	subs	r7, r6, #4
 8008df0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff fd4b 	bl	8008890 <__hi0bits>
 8008dfa:	f1c0 0320 	rsb	r3, r0, #32
 8008dfe:	280a      	cmp	r0, #10
 8008e00:	600b      	str	r3, [r1, #0]
 8008e02:	491b      	ldr	r1, [pc, #108]	@ (8008e70 <__b2d+0x90>)
 8008e04:	dc15      	bgt.n	8008e32 <__b2d+0x52>
 8008e06:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e0a:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e0e:	45b8      	cmp	r8, r7
 8008e10:	ea43 0501 	orr.w	r5, r3, r1
 8008e14:	bf34      	ite	cc
 8008e16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e1a:	2300      	movcs	r3, #0
 8008e1c:	3015      	adds	r0, #21
 8008e1e:	fa02 f000 	lsl.w	r0, r2, r0
 8008e22:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e26:	4303      	orrs	r3, r0
 8008e28:	461c      	mov	r4, r3
 8008e2a:	ec45 4b10 	vmov	d0, r4, r5
 8008e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e32:	45b8      	cmp	r8, r7
 8008e34:	bf3a      	itte	cc
 8008e36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e3a:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e3e:	2300      	movcs	r3, #0
 8008e40:	380b      	subs	r0, #11
 8008e42:	d012      	beq.n	8008e6a <__b2d+0x8a>
 8008e44:	f1c0 0120 	rsb	r1, r0, #32
 8008e48:	fa23 f401 	lsr.w	r4, r3, r1
 8008e4c:	4082      	lsls	r2, r0
 8008e4e:	4322      	orrs	r2, r4
 8008e50:	4547      	cmp	r7, r8
 8008e52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e56:	bf8c      	ite	hi
 8008e58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e5c:	2200      	movls	r2, #0
 8008e5e:	4083      	lsls	r3, r0
 8008e60:	40ca      	lsrs	r2, r1
 8008e62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e66:	4313      	orrs	r3, r2
 8008e68:	e7de      	b.n	8008e28 <__b2d+0x48>
 8008e6a:	ea42 0501 	orr.w	r5, r2, r1
 8008e6e:	e7db      	b.n	8008e28 <__b2d+0x48>
 8008e70:	3ff00000 	.word	0x3ff00000

08008e74 <__d2b>:
 8008e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e78:	460f      	mov	r7, r1
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	ec59 8b10 	vmov	r8, r9, d0
 8008e80:	4616      	mov	r6, r2
 8008e82:	f7ff fc13 	bl	80086ac <_Balloc>
 8008e86:	4604      	mov	r4, r0
 8008e88:	b930      	cbnz	r0, 8008e98 <__d2b+0x24>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b23      	ldr	r3, [pc, #140]	@ (8008f1c <__d2b+0xa8>)
 8008e8e:	4824      	ldr	r0, [pc, #144]	@ (8008f20 <__d2b+0xac>)
 8008e90:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e94:	f001 fb3c 	bl	800a510 <__assert_func>
 8008e98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea0:	b10d      	cbz	r5, 8008ea6 <__d2b+0x32>
 8008ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	f1b8 0300 	subs.w	r3, r8, #0
 8008eac:	d023      	beq.n	8008ef6 <__d2b+0x82>
 8008eae:	4668      	mov	r0, sp
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	f7ff fd0c 	bl	80088ce <__lo0bits>
 8008eb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eba:	b1d0      	cbz	r0, 8008ef2 <__d2b+0x7e>
 8008ebc:	f1c0 0320 	rsb	r3, r0, #32
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	430b      	orrs	r3, r1
 8008ec6:	40c2      	lsrs	r2, r0
 8008ec8:	6163      	str	r3, [r4, #20]
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2201      	moveq	r2, #1
 8008ed6:	2202      	movne	r2, #2
 8008ed8:	6122      	str	r2, [r4, #16]
 8008eda:	b1a5      	cbz	r5, 8008f06 <__d2b+0x92>
 8008edc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ee0:	4405      	add	r5, r0
 8008ee2:	603d      	str	r5, [r7, #0]
 8008ee4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ee8:	6030      	str	r0, [r6, #0]
 8008eea:	4620      	mov	r0, r4
 8008eec:	b003      	add	sp, #12
 8008eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	6161      	str	r1, [r4, #20]
 8008ef4:	e7ea      	b.n	8008ecc <__d2b+0x58>
 8008ef6:	a801      	add	r0, sp, #4
 8008ef8:	f7ff fce9 	bl	80088ce <__lo0bits>
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	6163      	str	r3, [r4, #20]
 8008f00:	3020      	adds	r0, #32
 8008f02:	2201      	movs	r2, #1
 8008f04:	e7e8      	b.n	8008ed8 <__d2b+0x64>
 8008f06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f0e:	6038      	str	r0, [r7, #0]
 8008f10:	6918      	ldr	r0, [r3, #16]
 8008f12:	f7ff fcbd 	bl	8008890 <__hi0bits>
 8008f16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f1a:	e7e5      	b.n	8008ee8 <__d2b+0x74>
 8008f1c:	0800b0a1 	.word	0x0800b0a1
 8008f20:	0800b0b2 	.word	0x0800b0b2

08008f24 <__ratio>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	e9cd 1000 	strd	r1, r0, [sp]
 8008f2e:	a902      	add	r1, sp, #8
 8008f30:	f7ff ff56 	bl	8008de0 <__b2d>
 8008f34:	9800      	ldr	r0, [sp, #0]
 8008f36:	a903      	add	r1, sp, #12
 8008f38:	ec55 4b10 	vmov	r4, r5, d0
 8008f3c:	f7ff ff50 	bl	8008de0 <__b2d>
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	6919      	ldr	r1, [r3, #16]
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	1ac9      	subs	r1, r1, r3
 8008f4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	ec5b ab10 	vmov	sl, fp, d0
 8008f54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfce      	itee	gt
 8008f5c:	462a      	movgt	r2, r5
 8008f5e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f62:	465a      	movle	r2, fp
 8008f64:	462f      	mov	r7, r5
 8008f66:	46d9      	mov	r9, fp
 8008f68:	bfcc      	ite	gt
 8008f6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f6e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f72:	464b      	mov	r3, r9
 8008f74:	4652      	mov	r2, sl
 8008f76:	4620      	mov	r0, r4
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fc87 	bl	800088c <__aeabi_ddiv>
 8008f7e:	ec41 0b10 	vmov	d0, r0, r1
 8008f82:	b005      	add	sp, #20
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f88 <__copybits>:
 8008f88:	3901      	subs	r1, #1
 8008f8a:	b570      	push	{r4, r5, r6, lr}
 8008f8c:	1149      	asrs	r1, r1, #5
 8008f8e:	6914      	ldr	r4, [r2, #16]
 8008f90:	3101      	adds	r1, #1
 8008f92:	f102 0314 	add.w	r3, r2, #20
 8008f96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f9e:	1f05      	subs	r5, r0, #4
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d30c      	bcc.n	8008fbe <__copybits+0x36>
 8008fa4:	1aa3      	subs	r3, r4, r2
 8008fa6:	3b11      	subs	r3, #17
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	3211      	adds	r2, #17
 8008fae:	42a2      	cmp	r2, r4
 8008fb0:	bf88      	it	hi
 8008fb2:	2300      	movhi	r3, #0
 8008fb4:	4418      	add	r0, r3
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4288      	cmp	r0, r1
 8008fba:	d305      	bcc.n	8008fc8 <__copybits+0x40>
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fc2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fc6:	e7eb      	b.n	8008fa0 <__copybits+0x18>
 8008fc8:	f840 3b04 	str.w	r3, [r0], #4
 8008fcc:	e7f4      	b.n	8008fb8 <__copybits+0x30>

08008fce <__any_on>:
 8008fce:	f100 0214 	add.w	r2, r0, #20
 8008fd2:	6900      	ldr	r0, [r0, #16]
 8008fd4:	114b      	asrs	r3, r1, #5
 8008fd6:	4298      	cmp	r0, r3
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	db11      	blt.n	8009000 <__any_on+0x32>
 8008fdc:	dd0a      	ble.n	8008ff4 <__any_on+0x26>
 8008fde:	f011 011f 	ands.w	r1, r1, #31
 8008fe2:	d007      	beq.n	8008ff4 <__any_on+0x26>
 8008fe4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fe8:	fa24 f001 	lsr.w	r0, r4, r1
 8008fec:	fa00 f101 	lsl.w	r1, r0, r1
 8008ff0:	428c      	cmp	r4, r1
 8008ff2:	d10b      	bne.n	800900c <__any_on+0x3e>
 8008ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d803      	bhi.n	8009004 <__any_on+0x36>
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	4603      	mov	r3, r0
 8009002:	e7f7      	b.n	8008ff4 <__any_on+0x26>
 8009004:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009008:	2900      	cmp	r1, #0
 800900a:	d0f5      	beq.n	8008ff8 <__any_on+0x2a>
 800900c:	2001      	movs	r0, #1
 800900e:	e7f6      	b.n	8008ffe <__any_on+0x30>

08009010 <sulp>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	ec45 4b10 	vmov	d0, r4, r5
 800901a:	4616      	mov	r6, r2
 800901c:	f7ff feba 	bl	8008d94 <__ulp>
 8009020:	ec51 0b10 	vmov	r0, r1, d0
 8009024:	b17e      	cbz	r6, 8009046 <sulp+0x36>
 8009026:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800902a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800902e:	2b00      	cmp	r3, #0
 8009030:	dd09      	ble.n	8009046 <sulp+0x36>
 8009032:	051b      	lsls	r3, r3, #20
 8009034:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009038:	2400      	movs	r4, #0
 800903a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800903e:	4622      	mov	r2, r4
 8009040:	462b      	mov	r3, r5
 8009042:	f7f7 faf9 	bl	8000638 <__aeabi_dmul>
 8009046:	ec41 0b10 	vmov	d0, r0, r1
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	0000      	movs	r0, r0
	...

08009050 <_strtod_l>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b09f      	sub	sp, #124	@ 0x7c
 8009056:	460c      	mov	r4, r1
 8009058:	9217      	str	r2, [sp, #92]	@ 0x5c
 800905a:	2200      	movs	r2, #0
 800905c:	921a      	str	r2, [sp, #104]	@ 0x68
 800905e:	9005      	str	r0, [sp, #20]
 8009060:	f04f 0a00 	mov.w	sl, #0
 8009064:	f04f 0b00 	mov.w	fp, #0
 8009068:	460a      	mov	r2, r1
 800906a:	9219      	str	r2, [sp, #100]	@ 0x64
 800906c:	7811      	ldrb	r1, [r2, #0]
 800906e:	292b      	cmp	r1, #43	@ 0x2b
 8009070:	d04a      	beq.n	8009108 <_strtod_l+0xb8>
 8009072:	d838      	bhi.n	80090e6 <_strtod_l+0x96>
 8009074:	290d      	cmp	r1, #13
 8009076:	d832      	bhi.n	80090de <_strtod_l+0x8e>
 8009078:	2908      	cmp	r1, #8
 800907a:	d832      	bhi.n	80090e2 <_strtod_l+0x92>
 800907c:	2900      	cmp	r1, #0
 800907e:	d03b      	beq.n	80090f8 <_strtod_l+0xa8>
 8009080:	2200      	movs	r2, #0
 8009082:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009084:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009086:	782a      	ldrb	r2, [r5, #0]
 8009088:	2a30      	cmp	r2, #48	@ 0x30
 800908a:	f040 80b3 	bne.w	80091f4 <_strtod_l+0x1a4>
 800908e:	786a      	ldrb	r2, [r5, #1]
 8009090:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009094:	2a58      	cmp	r2, #88	@ 0x58
 8009096:	d16e      	bne.n	8009176 <_strtod_l+0x126>
 8009098:	9302      	str	r3, [sp, #8]
 800909a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	ab1a      	add	r3, sp, #104	@ 0x68
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4a8e      	ldr	r2, [pc, #568]	@ (80092dc <_strtod_l+0x28c>)
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090a8:	a919      	add	r1, sp, #100	@ 0x64
 80090aa:	f001 facb 	bl	800a644 <__gethex>
 80090ae:	f010 060f 	ands.w	r6, r0, #15
 80090b2:	4604      	mov	r4, r0
 80090b4:	d005      	beq.n	80090c2 <_strtod_l+0x72>
 80090b6:	2e06      	cmp	r6, #6
 80090b8:	d128      	bne.n	800910c <_strtod_l+0xbc>
 80090ba:	3501      	adds	r5, #1
 80090bc:	2300      	movs	r3, #0
 80090be:	9519      	str	r5, [sp, #100]	@ 0x64
 80090c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 858e 	bne.w	8009be6 <_strtod_l+0xb96>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090cc:	b1cb      	cbz	r3, 8009102 <_strtod_l+0xb2>
 80090ce:	4652      	mov	r2, sl
 80090d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090d4:	ec43 2b10 	vmov	d0, r2, r3
 80090d8:	b01f      	add	sp, #124	@ 0x7c
 80090da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	2920      	cmp	r1, #32
 80090e0:	d1ce      	bne.n	8009080 <_strtod_l+0x30>
 80090e2:	3201      	adds	r2, #1
 80090e4:	e7c1      	b.n	800906a <_strtod_l+0x1a>
 80090e6:	292d      	cmp	r1, #45	@ 0x2d
 80090e8:	d1ca      	bne.n	8009080 <_strtod_l+0x30>
 80090ea:	2101      	movs	r1, #1
 80090ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090ee:	1c51      	adds	r1, r2, #1
 80090f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090f2:	7852      	ldrb	r2, [r2, #1]
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d1c5      	bne.n	8009084 <_strtod_l+0x34>
 80090f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 8570 	bne.w	8009be2 <_strtod_l+0xb92>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	e7e5      	b.n	80090d4 <_strtod_l+0x84>
 8009108:	2100      	movs	r1, #0
 800910a:	e7ef      	b.n	80090ec <_strtod_l+0x9c>
 800910c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800910e:	b13a      	cbz	r2, 8009120 <_strtod_l+0xd0>
 8009110:	2135      	movs	r1, #53	@ 0x35
 8009112:	a81c      	add	r0, sp, #112	@ 0x70
 8009114:	f7ff ff38 	bl	8008f88 <__copybits>
 8009118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	f7ff fb06 	bl	800872c <_Bfree>
 8009120:	3e01      	subs	r6, #1
 8009122:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009124:	2e04      	cmp	r6, #4
 8009126:	d806      	bhi.n	8009136 <_strtod_l+0xe6>
 8009128:	e8df f006 	tbb	[pc, r6]
 800912c:	201d0314 	.word	0x201d0314
 8009130:	14          	.byte	0x14
 8009131:	00          	.byte	0x00
 8009132:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009136:	05e1      	lsls	r1, r4, #23
 8009138:	bf48      	it	mi
 800913a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800913e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009142:	0d1b      	lsrs	r3, r3, #20
 8009144:	051b      	lsls	r3, r3, #20
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1bb      	bne.n	80090c2 <_strtod_l+0x72>
 800914a:	f7fe fbe3 	bl	8007914 <__errno>
 800914e:	2322      	movs	r3, #34	@ 0x22
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	e7b6      	b.n	80090c2 <_strtod_l+0x72>
 8009154:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009158:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800915c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009160:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009164:	e7e7      	b.n	8009136 <_strtod_l+0xe6>
 8009166:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80092e4 <_strtod_l+0x294>
 800916a:	e7e4      	b.n	8009136 <_strtod_l+0xe6>
 800916c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009170:	f04f 3aff 	mov.w	sl, #4294967295
 8009174:	e7df      	b.n	8009136 <_strtod_l+0xe6>
 8009176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	9219      	str	r2, [sp, #100]	@ 0x64
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b30      	cmp	r3, #48	@ 0x30
 8009180:	d0f9      	beq.n	8009176 <_strtod_l+0x126>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d09d      	beq.n	80090c2 <_strtod_l+0x72>
 8009186:	2301      	movs	r3, #1
 8009188:	9309      	str	r3, [sp, #36]	@ 0x24
 800918a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800918c:	930c      	str	r3, [sp, #48]	@ 0x30
 800918e:	2300      	movs	r3, #0
 8009190:	9308      	str	r3, [sp, #32]
 8009192:	930a      	str	r3, [sp, #40]	@ 0x28
 8009194:	461f      	mov	r7, r3
 8009196:	220a      	movs	r2, #10
 8009198:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800919a:	7805      	ldrb	r5, [r0, #0]
 800919c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80091a0:	b2d9      	uxtb	r1, r3
 80091a2:	2909      	cmp	r1, #9
 80091a4:	d928      	bls.n	80091f8 <_strtod_l+0x1a8>
 80091a6:	494e      	ldr	r1, [pc, #312]	@ (80092e0 <_strtod_l+0x290>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	f7fe fb47 	bl	800783c <strncmp>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d032      	beq.n	8009218 <_strtod_l+0x1c8>
 80091b2:	2000      	movs	r0, #0
 80091b4:	462a      	mov	r2, r5
 80091b6:	4681      	mov	r9, r0
 80091b8:	463d      	mov	r5, r7
 80091ba:	4603      	mov	r3, r0
 80091bc:	2a65      	cmp	r2, #101	@ 0x65
 80091be:	d001      	beq.n	80091c4 <_strtod_l+0x174>
 80091c0:	2a45      	cmp	r2, #69	@ 0x45
 80091c2:	d114      	bne.n	80091ee <_strtod_l+0x19e>
 80091c4:	b91d      	cbnz	r5, 80091ce <_strtod_l+0x17e>
 80091c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c8:	4302      	orrs	r2, r0
 80091ca:	d095      	beq.n	80090f8 <_strtod_l+0xa8>
 80091cc:	2500      	movs	r5, #0
 80091ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091d0:	1c62      	adds	r2, r4, #1
 80091d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091d4:	7862      	ldrb	r2, [r4, #1]
 80091d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80091d8:	d077      	beq.n	80092ca <_strtod_l+0x27a>
 80091da:	2a2d      	cmp	r2, #45	@ 0x2d
 80091dc:	d07b      	beq.n	80092d6 <_strtod_l+0x286>
 80091de:	f04f 0c00 	mov.w	ip, #0
 80091e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091e6:	2909      	cmp	r1, #9
 80091e8:	f240 8082 	bls.w	80092f0 <_strtod_l+0x2a0>
 80091ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80091ee:	f04f 0800 	mov.w	r8, #0
 80091f2:	e0a2      	b.n	800933a <_strtod_l+0x2ea>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7c7      	b.n	8009188 <_strtod_l+0x138>
 80091f8:	2f08      	cmp	r7, #8
 80091fa:	bfd5      	itete	le
 80091fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80091fe:	9908      	ldrgt	r1, [sp, #32]
 8009200:	fb02 3301 	mlale	r3, r2, r1, r3
 8009204:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009208:	f100 0001 	add.w	r0, r0, #1
 800920c:	bfd4      	ite	le
 800920e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009210:	9308      	strgt	r3, [sp, #32]
 8009212:	3701      	adds	r7, #1
 8009214:	9019      	str	r0, [sp, #100]	@ 0x64
 8009216:	e7bf      	b.n	8009198 <_strtod_l+0x148>
 8009218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	9219      	str	r2, [sp, #100]	@ 0x64
 800921e:	785a      	ldrb	r2, [r3, #1]
 8009220:	b37f      	cbz	r7, 8009282 <_strtod_l+0x232>
 8009222:	4681      	mov	r9, r0
 8009224:	463d      	mov	r5, r7
 8009226:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800922a:	2b09      	cmp	r3, #9
 800922c:	d912      	bls.n	8009254 <_strtod_l+0x204>
 800922e:	2301      	movs	r3, #1
 8009230:	e7c4      	b.n	80091bc <_strtod_l+0x16c>
 8009232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	9219      	str	r2, [sp, #100]	@ 0x64
 8009238:	785a      	ldrb	r2, [r3, #1]
 800923a:	3001      	adds	r0, #1
 800923c:	2a30      	cmp	r2, #48	@ 0x30
 800923e:	d0f8      	beq.n	8009232 <_strtod_l+0x1e2>
 8009240:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009244:	2b08      	cmp	r3, #8
 8009246:	f200 84d3 	bhi.w	8009bf0 <_strtod_l+0xba0>
 800924a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800924c:	930c      	str	r3, [sp, #48]	@ 0x30
 800924e:	4681      	mov	r9, r0
 8009250:	2000      	movs	r0, #0
 8009252:	4605      	mov	r5, r0
 8009254:	3a30      	subs	r2, #48	@ 0x30
 8009256:	f100 0301 	add.w	r3, r0, #1
 800925a:	d02a      	beq.n	80092b2 <_strtod_l+0x262>
 800925c:	4499      	add	r9, r3
 800925e:	eb00 0c05 	add.w	ip, r0, r5
 8009262:	462b      	mov	r3, r5
 8009264:	210a      	movs	r1, #10
 8009266:	4563      	cmp	r3, ip
 8009268:	d10d      	bne.n	8009286 <_strtod_l+0x236>
 800926a:	1c69      	adds	r1, r5, #1
 800926c:	4401      	add	r1, r0
 800926e:	4428      	add	r0, r5
 8009270:	2808      	cmp	r0, #8
 8009272:	dc16      	bgt.n	80092a2 <_strtod_l+0x252>
 8009274:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009276:	230a      	movs	r3, #10
 8009278:	fb03 2300 	mla	r3, r3, r0, r2
 800927c:	930a      	str	r3, [sp, #40]	@ 0x28
 800927e:	2300      	movs	r3, #0
 8009280:	e018      	b.n	80092b4 <_strtod_l+0x264>
 8009282:	4638      	mov	r0, r7
 8009284:	e7da      	b.n	800923c <_strtod_l+0x1ec>
 8009286:	2b08      	cmp	r3, #8
 8009288:	f103 0301 	add.w	r3, r3, #1
 800928c:	dc03      	bgt.n	8009296 <_strtod_l+0x246>
 800928e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009290:	434e      	muls	r6, r1
 8009292:	960a      	str	r6, [sp, #40]	@ 0x28
 8009294:	e7e7      	b.n	8009266 <_strtod_l+0x216>
 8009296:	2b10      	cmp	r3, #16
 8009298:	bfde      	ittt	le
 800929a:	9e08      	ldrle	r6, [sp, #32]
 800929c:	434e      	mulle	r6, r1
 800929e:	9608      	strle	r6, [sp, #32]
 80092a0:	e7e1      	b.n	8009266 <_strtod_l+0x216>
 80092a2:	280f      	cmp	r0, #15
 80092a4:	dceb      	bgt.n	800927e <_strtod_l+0x22e>
 80092a6:	9808      	ldr	r0, [sp, #32]
 80092a8:	230a      	movs	r3, #10
 80092aa:	fb03 2300 	mla	r3, r3, r0, r2
 80092ae:	9308      	str	r3, [sp, #32]
 80092b0:	e7e5      	b.n	800927e <_strtod_l+0x22e>
 80092b2:	4629      	mov	r1, r5
 80092b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092b6:	1c50      	adds	r0, r2, #1
 80092b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ba:	7852      	ldrb	r2, [r2, #1]
 80092bc:	4618      	mov	r0, r3
 80092be:	460d      	mov	r5, r1
 80092c0:	e7b1      	b.n	8009226 <_strtod_l+0x1d6>
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	2301      	movs	r3, #1
 80092c8:	e77d      	b.n	80091c6 <_strtod_l+0x176>
 80092ca:	f04f 0c00 	mov.w	ip, #0
 80092ce:	1ca2      	adds	r2, r4, #2
 80092d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092d2:	78a2      	ldrb	r2, [r4, #2]
 80092d4:	e785      	b.n	80091e2 <_strtod_l+0x192>
 80092d6:	f04f 0c01 	mov.w	ip, #1
 80092da:	e7f8      	b.n	80092ce <_strtod_l+0x27e>
 80092dc:	0800b220 	.word	0x0800b220
 80092e0:	0800b208 	.word	0x0800b208
 80092e4:	7ff00000 	.word	0x7ff00000
 80092e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092ea:	1c51      	adds	r1, r2, #1
 80092ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80092ee:	7852      	ldrb	r2, [r2, #1]
 80092f0:	2a30      	cmp	r2, #48	@ 0x30
 80092f2:	d0f9      	beq.n	80092e8 <_strtod_l+0x298>
 80092f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092f8:	2908      	cmp	r1, #8
 80092fa:	f63f af78 	bhi.w	80091ee <_strtod_l+0x19e>
 80092fe:	3a30      	subs	r2, #48	@ 0x30
 8009300:	920e      	str	r2, [sp, #56]	@ 0x38
 8009302:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009304:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009306:	f04f 080a 	mov.w	r8, #10
 800930a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800930c:	1c56      	adds	r6, r2, #1
 800930e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009310:	7852      	ldrb	r2, [r2, #1]
 8009312:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009316:	f1be 0f09 	cmp.w	lr, #9
 800931a:	d939      	bls.n	8009390 <_strtod_l+0x340>
 800931c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800931e:	1a76      	subs	r6, r6, r1
 8009320:	2e08      	cmp	r6, #8
 8009322:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009326:	dc03      	bgt.n	8009330 <_strtod_l+0x2e0>
 8009328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800932a:	4588      	cmp	r8, r1
 800932c:	bfa8      	it	ge
 800932e:	4688      	movge	r8, r1
 8009330:	f1bc 0f00 	cmp.w	ip, #0
 8009334:	d001      	beq.n	800933a <_strtod_l+0x2ea>
 8009336:	f1c8 0800 	rsb	r8, r8, #0
 800933a:	2d00      	cmp	r5, #0
 800933c:	d14e      	bne.n	80093dc <_strtod_l+0x38c>
 800933e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009340:	4308      	orrs	r0, r1
 8009342:	f47f aebe 	bne.w	80090c2 <_strtod_l+0x72>
 8009346:	2b00      	cmp	r3, #0
 8009348:	f47f aed6 	bne.w	80090f8 <_strtod_l+0xa8>
 800934c:	2a69      	cmp	r2, #105	@ 0x69
 800934e:	d028      	beq.n	80093a2 <_strtod_l+0x352>
 8009350:	dc25      	bgt.n	800939e <_strtod_l+0x34e>
 8009352:	2a49      	cmp	r2, #73	@ 0x49
 8009354:	d025      	beq.n	80093a2 <_strtod_l+0x352>
 8009356:	2a4e      	cmp	r2, #78	@ 0x4e
 8009358:	f47f aece 	bne.w	80090f8 <_strtod_l+0xa8>
 800935c:	499b      	ldr	r1, [pc, #620]	@ (80095cc <_strtod_l+0x57c>)
 800935e:	a819      	add	r0, sp, #100	@ 0x64
 8009360:	f001 fb92 	bl	800aa88 <__match>
 8009364:	2800      	cmp	r0, #0
 8009366:	f43f aec7 	beq.w	80090f8 <_strtod_l+0xa8>
 800936a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b28      	cmp	r3, #40	@ 0x28
 8009370:	d12e      	bne.n	80093d0 <_strtod_l+0x380>
 8009372:	4997      	ldr	r1, [pc, #604]	@ (80095d0 <_strtod_l+0x580>)
 8009374:	aa1c      	add	r2, sp, #112	@ 0x70
 8009376:	a819      	add	r0, sp, #100	@ 0x64
 8009378:	f001 fb9a 	bl	800aab0 <__hexnan>
 800937c:	2805      	cmp	r0, #5
 800937e:	d127      	bne.n	80093d0 <_strtod_l+0x380>
 8009380:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009382:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009386:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800938a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800938e:	e698      	b.n	80090c2 <_strtod_l+0x72>
 8009390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009392:	fb08 2101 	mla	r1, r8, r1, r2
 8009396:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800939a:	920e      	str	r2, [sp, #56]	@ 0x38
 800939c:	e7b5      	b.n	800930a <_strtod_l+0x2ba>
 800939e:	2a6e      	cmp	r2, #110	@ 0x6e
 80093a0:	e7da      	b.n	8009358 <_strtod_l+0x308>
 80093a2:	498c      	ldr	r1, [pc, #560]	@ (80095d4 <_strtod_l+0x584>)
 80093a4:	a819      	add	r0, sp, #100	@ 0x64
 80093a6:	f001 fb6f 	bl	800aa88 <__match>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f43f aea4 	beq.w	80090f8 <_strtod_l+0xa8>
 80093b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b2:	4989      	ldr	r1, [pc, #548]	@ (80095d8 <_strtod_l+0x588>)
 80093b4:	3b01      	subs	r3, #1
 80093b6:	a819      	add	r0, sp, #100	@ 0x64
 80093b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80093ba:	f001 fb65 	bl	800aa88 <__match>
 80093be:	b910      	cbnz	r0, 80093c6 <_strtod_l+0x376>
 80093c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093c2:	3301      	adds	r3, #1
 80093c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80093c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80095e8 <_strtod_l+0x598>
 80093ca:	f04f 0a00 	mov.w	sl, #0
 80093ce:	e678      	b.n	80090c2 <_strtod_l+0x72>
 80093d0:	4882      	ldr	r0, [pc, #520]	@ (80095dc <_strtod_l+0x58c>)
 80093d2:	f001 f895 	bl	800a500 <nan>
 80093d6:	ec5b ab10 	vmov	sl, fp, d0
 80093da:	e672      	b.n	80090c2 <_strtod_l+0x72>
 80093dc:	eba8 0309 	sub.w	r3, r8, r9
 80093e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	2f00      	cmp	r7, #0
 80093e6:	bf08      	it	eq
 80093e8:	462f      	moveq	r7, r5
 80093ea:	2d10      	cmp	r5, #16
 80093ec:	462c      	mov	r4, r5
 80093ee:	bfa8      	it	ge
 80093f0:	2410      	movge	r4, #16
 80093f2:	f7f7 f8a7 	bl	8000544 <__aeabi_ui2d>
 80093f6:	2d09      	cmp	r5, #9
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	dc13      	bgt.n	8009426 <_strtod_l+0x3d6>
 80093fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	f43f ae5e 	beq.w	80090c2 <_strtod_l+0x72>
 8009406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009408:	dd78      	ble.n	80094fc <_strtod_l+0x4ac>
 800940a:	2b16      	cmp	r3, #22
 800940c:	dc5f      	bgt.n	80094ce <_strtod_l+0x47e>
 800940e:	4974      	ldr	r1, [pc, #464]	@ (80095e0 <_strtod_l+0x590>)
 8009410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009418:	4652      	mov	r2, sl
 800941a:	465b      	mov	r3, fp
 800941c:	f7f7 f90c 	bl	8000638 <__aeabi_dmul>
 8009420:	4682      	mov	sl, r0
 8009422:	468b      	mov	fp, r1
 8009424:	e64d      	b.n	80090c2 <_strtod_l+0x72>
 8009426:	4b6e      	ldr	r3, [pc, #440]	@ (80095e0 <_strtod_l+0x590>)
 8009428:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800942c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009430:	f7f7 f902 	bl	8000638 <__aeabi_dmul>
 8009434:	4682      	mov	sl, r0
 8009436:	9808      	ldr	r0, [sp, #32]
 8009438:	468b      	mov	fp, r1
 800943a:	f7f7 f883 	bl	8000544 <__aeabi_ui2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f6 ff41 	bl	80002cc <__adddf3>
 800944a:	2d0f      	cmp	r5, #15
 800944c:	4682      	mov	sl, r0
 800944e:	468b      	mov	fp, r1
 8009450:	ddd5      	ble.n	80093fe <_strtod_l+0x3ae>
 8009452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009454:	1b2c      	subs	r4, r5, r4
 8009456:	441c      	add	r4, r3
 8009458:	2c00      	cmp	r4, #0
 800945a:	f340 8096 	ble.w	800958a <_strtod_l+0x53a>
 800945e:	f014 030f 	ands.w	r3, r4, #15
 8009462:	d00a      	beq.n	800947a <_strtod_l+0x42a>
 8009464:	495e      	ldr	r1, [pc, #376]	@ (80095e0 <_strtod_l+0x590>)
 8009466:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800946a:	4652      	mov	r2, sl
 800946c:	465b      	mov	r3, fp
 800946e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009472:	f7f7 f8e1 	bl	8000638 <__aeabi_dmul>
 8009476:	4682      	mov	sl, r0
 8009478:	468b      	mov	fp, r1
 800947a:	f034 040f 	bics.w	r4, r4, #15
 800947e:	d073      	beq.n	8009568 <_strtod_l+0x518>
 8009480:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009484:	dd48      	ble.n	8009518 <_strtod_l+0x4c8>
 8009486:	2400      	movs	r4, #0
 8009488:	46a0      	mov	r8, r4
 800948a:	940a      	str	r4, [sp, #40]	@ 0x28
 800948c:	46a1      	mov	r9, r4
 800948e:	9a05      	ldr	r2, [sp, #20]
 8009490:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80095e8 <_strtod_l+0x598>
 8009494:	2322      	movs	r3, #34	@ 0x22
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f43f ae0f 	beq.w	80090c2 <_strtod_l+0x72>
 80094a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094a6:	9805      	ldr	r0, [sp, #20]
 80094a8:	f7ff f940 	bl	800872c <_Bfree>
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	4649      	mov	r1, r9
 80094b0:	f7ff f93c 	bl	800872c <_Bfree>
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	4641      	mov	r1, r8
 80094b8:	f7ff f938 	bl	800872c <_Bfree>
 80094bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f7ff f934 	bl	800872c <_Bfree>
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	4621      	mov	r1, r4
 80094c8:	f7ff f930 	bl	800872c <_Bfree>
 80094cc:	e5f9      	b.n	80090c2 <_strtod_l+0x72>
 80094ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dbbc      	blt.n	8009452 <_strtod_l+0x402>
 80094d8:	4c41      	ldr	r4, [pc, #260]	@ (80095e0 <_strtod_l+0x590>)
 80094da:	f1c5 050f 	rsb	r5, r5, #15
 80094de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f0:	1b5d      	subs	r5, r3, r5
 80094f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094fa:	e78f      	b.n	800941c <_strtod_l+0x3cc>
 80094fc:	3316      	adds	r3, #22
 80094fe:	dba8      	blt.n	8009452 <_strtod_l+0x402>
 8009500:	4b37      	ldr	r3, [pc, #220]	@ (80095e0 <_strtod_l+0x590>)
 8009502:	eba9 0808 	sub.w	r8, r9, r8
 8009506:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800950a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800950e:	4650      	mov	r0, sl
 8009510:	4659      	mov	r1, fp
 8009512:	f7f7 f9bb 	bl	800088c <__aeabi_ddiv>
 8009516:	e783      	b.n	8009420 <_strtod_l+0x3d0>
 8009518:	4b32      	ldr	r3, [pc, #200]	@ (80095e4 <_strtod_l+0x594>)
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	2300      	movs	r3, #0
 800951e:	1124      	asrs	r4, r4, #4
 8009520:	4650      	mov	r0, sl
 8009522:	4659      	mov	r1, fp
 8009524:	461e      	mov	r6, r3
 8009526:	2c01      	cmp	r4, #1
 8009528:	dc21      	bgt.n	800956e <_strtod_l+0x51e>
 800952a:	b10b      	cbz	r3, 8009530 <_strtod_l+0x4e0>
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	492c      	ldr	r1, [pc, #176]	@ (80095e4 <_strtod_l+0x594>)
 8009532:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009536:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800953a:	4652      	mov	r2, sl
 800953c:	465b      	mov	r3, fp
 800953e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009542:	f7f7 f879 	bl	8000638 <__aeabi_dmul>
 8009546:	4b28      	ldr	r3, [pc, #160]	@ (80095e8 <_strtod_l+0x598>)
 8009548:	460a      	mov	r2, r1
 800954a:	400b      	ands	r3, r1
 800954c:	4927      	ldr	r1, [pc, #156]	@ (80095ec <_strtod_l+0x59c>)
 800954e:	428b      	cmp	r3, r1
 8009550:	4682      	mov	sl, r0
 8009552:	d898      	bhi.n	8009486 <_strtod_l+0x436>
 8009554:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009558:	428b      	cmp	r3, r1
 800955a:	bf86      	itte	hi
 800955c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80095f0 <_strtod_l+0x5a0>
 8009560:	f04f 3aff 	movhi.w	sl, #4294967295
 8009564:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009568:	2300      	movs	r3, #0
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	e07a      	b.n	8009664 <_strtod_l+0x614>
 800956e:	07e2      	lsls	r2, r4, #31
 8009570:	d505      	bpl.n	800957e <_strtod_l+0x52e>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f85e 	bl	8000638 <__aeabi_dmul>
 800957c:	2301      	movs	r3, #1
 800957e:	9a08      	ldr	r2, [sp, #32]
 8009580:	3208      	adds	r2, #8
 8009582:	3601      	adds	r6, #1
 8009584:	1064      	asrs	r4, r4, #1
 8009586:	9208      	str	r2, [sp, #32]
 8009588:	e7cd      	b.n	8009526 <_strtod_l+0x4d6>
 800958a:	d0ed      	beq.n	8009568 <_strtod_l+0x518>
 800958c:	4264      	negs	r4, r4
 800958e:	f014 020f 	ands.w	r2, r4, #15
 8009592:	d00a      	beq.n	80095aa <_strtod_l+0x55a>
 8009594:	4b12      	ldr	r3, [pc, #72]	@ (80095e0 <_strtod_l+0x590>)
 8009596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f7 f973 	bl	800088c <__aeabi_ddiv>
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	1124      	asrs	r4, r4, #4
 80095ac:	d0dc      	beq.n	8009568 <_strtod_l+0x518>
 80095ae:	2c1f      	cmp	r4, #31
 80095b0:	dd20      	ble.n	80095f4 <_strtod_l+0x5a4>
 80095b2:	2400      	movs	r4, #0
 80095b4:	46a0      	mov	r8, r4
 80095b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80095b8:	46a1      	mov	r9, r4
 80095ba:	9a05      	ldr	r2, [sp, #20]
 80095bc:	2322      	movs	r3, #34	@ 0x22
 80095be:	f04f 0a00 	mov.w	sl, #0
 80095c2:	f04f 0b00 	mov.w	fp, #0
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e768      	b.n	800949c <_strtod_l+0x44c>
 80095ca:	bf00      	nop
 80095cc:	0800aff9 	.word	0x0800aff9
 80095d0:	0800b20c 	.word	0x0800b20c
 80095d4:	0800aff1 	.word	0x0800aff1
 80095d8:	0800b028 	.word	0x0800b028
 80095dc:	0800b3b5 	.word	0x0800b3b5
 80095e0:	0800b140 	.word	0x0800b140
 80095e4:	0800b118 	.word	0x0800b118
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	7ca00000 	.word	0x7ca00000
 80095f0:	7fefffff 	.word	0x7fefffff
 80095f4:	f014 0310 	ands.w	r3, r4, #16
 80095f8:	bf18      	it	ne
 80095fa:	236a      	movne	r3, #106	@ 0x6a
 80095fc:	4ea9      	ldr	r6, [pc, #676]	@ (80098a4 <_strtod_l+0x854>)
 80095fe:	9308      	str	r3, [sp, #32]
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	2300      	movs	r3, #0
 8009606:	07e2      	lsls	r2, r4, #31
 8009608:	d504      	bpl.n	8009614 <_strtod_l+0x5c4>
 800960a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800960e:	f7f7 f813 	bl	8000638 <__aeabi_dmul>
 8009612:	2301      	movs	r3, #1
 8009614:	1064      	asrs	r4, r4, #1
 8009616:	f106 0608 	add.w	r6, r6, #8
 800961a:	d1f4      	bne.n	8009606 <_strtod_l+0x5b6>
 800961c:	b10b      	cbz	r3, 8009622 <_strtod_l+0x5d2>
 800961e:	4682      	mov	sl, r0
 8009620:	468b      	mov	fp, r1
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	b1b3      	cbz	r3, 8009654 <_strtod_l+0x604>
 8009626:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800962a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800962e:	2b00      	cmp	r3, #0
 8009630:	4659      	mov	r1, fp
 8009632:	dd0f      	ble.n	8009654 <_strtod_l+0x604>
 8009634:	2b1f      	cmp	r3, #31
 8009636:	dd55      	ble.n	80096e4 <_strtod_l+0x694>
 8009638:	2b34      	cmp	r3, #52	@ 0x34
 800963a:	bfde      	ittt	le
 800963c:	f04f 33ff 	movle.w	r3, #4294967295
 8009640:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009644:	4093      	lslle	r3, r2
 8009646:	f04f 0a00 	mov.w	sl, #0
 800964a:	bfcc      	ite	gt
 800964c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009650:	ea03 0b01 	andle.w	fp, r3, r1
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	f7f7 fa54 	bl	8000b08 <__aeabi_dcmpeq>
 8009660:	2800      	cmp	r0, #0
 8009662:	d1a6      	bne.n	80095b2 <_strtod_l+0x562>
 8009664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800966a:	9805      	ldr	r0, [sp, #20]
 800966c:	462b      	mov	r3, r5
 800966e:	463a      	mov	r2, r7
 8009670:	f7ff f8c4 	bl	80087fc <__s2b>
 8009674:	900a      	str	r0, [sp, #40]	@ 0x28
 8009676:	2800      	cmp	r0, #0
 8009678:	f43f af05 	beq.w	8009486 <_strtod_l+0x436>
 800967c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800967e:	2a00      	cmp	r2, #0
 8009680:	eba9 0308 	sub.w	r3, r9, r8
 8009684:	bfa8      	it	ge
 8009686:	2300      	movge	r3, #0
 8009688:	9312      	str	r3, [sp, #72]	@ 0x48
 800968a:	2400      	movs	r4, #0
 800968c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009690:	9316      	str	r3, [sp, #88]	@ 0x58
 8009692:	46a0      	mov	r8, r4
 8009694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009696:	9805      	ldr	r0, [sp, #20]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	f7ff f807 	bl	80086ac <_Balloc>
 800969e:	4681      	mov	r9, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f43f aef4 	beq.w	800948e <_strtod_l+0x43e>
 80096a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	3202      	adds	r2, #2
 80096ac:	f103 010c 	add.w	r1, r3, #12
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	300c      	adds	r0, #12
 80096b4:	f000 ff16 	bl	800a4e4 <memcpy>
 80096b8:	ec4b ab10 	vmov	d0, sl, fp
 80096bc:	9805      	ldr	r0, [sp, #20]
 80096be:	aa1c      	add	r2, sp, #112	@ 0x70
 80096c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80096c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096c6:	f7ff fbd5 	bl	8008e74 <__d2b>
 80096ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80096cc:	2800      	cmp	r0, #0
 80096ce:	f43f aede 	beq.w	800948e <_strtod_l+0x43e>
 80096d2:	9805      	ldr	r0, [sp, #20]
 80096d4:	2101      	movs	r1, #1
 80096d6:	f7ff f927 	bl	8008928 <__i2b>
 80096da:	4680      	mov	r8, r0
 80096dc:	b948      	cbnz	r0, 80096f2 <_strtod_l+0x6a2>
 80096de:	f04f 0800 	mov.w	r8, #0
 80096e2:	e6d4      	b.n	800948e <_strtod_l+0x43e>
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	ea03 0a0a 	and.w	sl, r3, sl
 80096f0:	e7b0      	b.n	8009654 <_strtod_l+0x604>
 80096f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096f6:	2d00      	cmp	r5, #0
 80096f8:	bfab      	itete	ge
 80096fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009700:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009702:	bfac      	ite	ge
 8009704:	18ef      	addge	r7, r5, r3
 8009706:	1b5e      	sublt	r6, r3, r5
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	1aed      	subs	r5, r5, r3
 800970c:	4415      	add	r5, r2
 800970e:	4b66      	ldr	r3, [pc, #408]	@ (80098a8 <_strtod_l+0x858>)
 8009710:	3d01      	subs	r5, #1
 8009712:	429d      	cmp	r5, r3
 8009714:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009718:	da50      	bge.n	80097bc <_strtod_l+0x76c>
 800971a:	1b5b      	subs	r3, r3, r5
 800971c:	2b1f      	cmp	r3, #31
 800971e:	eba2 0203 	sub.w	r2, r2, r3
 8009722:	f04f 0101 	mov.w	r1, #1
 8009726:	dc3d      	bgt.n	80097a4 <_strtod_l+0x754>
 8009728:	fa01 f303 	lsl.w	r3, r1, r3
 800972c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800972e:	2300      	movs	r3, #0
 8009730:	9310      	str	r3, [sp, #64]	@ 0x40
 8009732:	18bd      	adds	r5, r7, r2
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	42af      	cmp	r7, r5
 8009738:	4416      	add	r6, r2
 800973a:	441e      	add	r6, r3
 800973c:	463b      	mov	r3, r7
 800973e:	bfa8      	it	ge
 8009740:	462b      	movge	r3, r5
 8009742:	42b3      	cmp	r3, r6
 8009744:	bfa8      	it	ge
 8009746:	4633      	movge	r3, r6
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfc2      	ittt	gt
 800974c:	1aed      	subgt	r5, r5, r3
 800974e:	1af6      	subgt	r6, r6, r3
 8009750:	1aff      	subgt	r7, r7, r3
 8009752:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd16      	ble.n	8009786 <_strtod_l+0x736>
 8009758:	4641      	mov	r1, r8
 800975a:	9805      	ldr	r0, [sp, #20]
 800975c:	461a      	mov	r2, r3
 800975e:	f7ff f9a3 	bl	8008aa8 <__pow5mult>
 8009762:	4680      	mov	r8, r0
 8009764:	2800      	cmp	r0, #0
 8009766:	d0ba      	beq.n	80096de <_strtod_l+0x68e>
 8009768:	4601      	mov	r1, r0
 800976a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	f7ff f8f1 	bl	8008954 <__multiply>
 8009772:	900e      	str	r0, [sp, #56]	@ 0x38
 8009774:	2800      	cmp	r0, #0
 8009776:	f43f ae8a 	beq.w	800948e <_strtod_l+0x43e>
 800977a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800977c:	9805      	ldr	r0, [sp, #20]
 800977e:	f7fe ffd5 	bl	800872c <_Bfree>
 8009782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009784:	931a      	str	r3, [sp, #104]	@ 0x68
 8009786:	2d00      	cmp	r5, #0
 8009788:	dc1d      	bgt.n	80097c6 <_strtod_l+0x776>
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	dd23      	ble.n	80097d8 <_strtod_l+0x788>
 8009790:	4649      	mov	r1, r9
 8009792:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009794:	9805      	ldr	r0, [sp, #20]
 8009796:	f7ff f987 	bl	8008aa8 <__pow5mult>
 800979a:	4681      	mov	r9, r0
 800979c:	b9e0      	cbnz	r0, 80097d8 <_strtod_l+0x788>
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	e674      	b.n	800948e <_strtod_l+0x43e>
 80097a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80097a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80097ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097b0:	35e2      	adds	r5, #226	@ 0xe2
 80097b2:	fa01 f305 	lsl.w	r3, r1, r5
 80097b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80097b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097ba:	e7ba      	b.n	8009732 <_strtod_l+0x6e2>
 80097bc:	2300      	movs	r3, #0
 80097be:	9310      	str	r3, [sp, #64]	@ 0x40
 80097c0:	2301      	movs	r3, #1
 80097c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097c4:	e7b5      	b.n	8009732 <_strtod_l+0x6e2>
 80097c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097c8:	9805      	ldr	r0, [sp, #20]
 80097ca:	462a      	mov	r2, r5
 80097cc:	f7ff f9c6 	bl	8008b5c <__lshift>
 80097d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d1d9      	bne.n	800978a <_strtod_l+0x73a>
 80097d6:	e65a      	b.n	800948e <_strtod_l+0x43e>
 80097d8:	2e00      	cmp	r6, #0
 80097da:	dd07      	ble.n	80097ec <_strtod_l+0x79c>
 80097dc:	4649      	mov	r1, r9
 80097de:	9805      	ldr	r0, [sp, #20]
 80097e0:	4632      	mov	r2, r6
 80097e2:	f7ff f9bb 	bl	8008b5c <__lshift>
 80097e6:	4681      	mov	r9, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0d8      	beq.n	800979e <_strtod_l+0x74e>
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	dd08      	ble.n	8009802 <_strtod_l+0x7b2>
 80097f0:	4641      	mov	r1, r8
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	463a      	mov	r2, r7
 80097f6:	f7ff f9b1 	bl	8008b5c <__lshift>
 80097fa:	4680      	mov	r8, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f43f ae46 	beq.w	800948e <_strtod_l+0x43e>
 8009802:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	464a      	mov	r2, r9
 8009808:	f7ff fa30 	bl	8008c6c <__mdiff>
 800980c:	4604      	mov	r4, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae3d 	beq.w	800948e <_strtod_l+0x43e>
 8009814:	68c3      	ldr	r3, [r0, #12]
 8009816:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009818:	2300      	movs	r3, #0
 800981a:	60c3      	str	r3, [r0, #12]
 800981c:	4641      	mov	r1, r8
 800981e:	f7ff fa09 	bl	8008c34 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	da46      	bge.n	80098b4 <_strtod_l+0x864>
 8009826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009828:	ea53 030a 	orrs.w	r3, r3, sl
 800982c:	d16c      	bne.n	8009908 <_strtod_l+0x8b8>
 800982e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009832:	2b00      	cmp	r3, #0
 8009834:	d168      	bne.n	8009908 <_strtod_l+0x8b8>
 8009836:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800983a:	0d1b      	lsrs	r3, r3, #20
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009842:	d961      	bls.n	8009908 <_strtod_l+0x8b8>
 8009844:	6963      	ldr	r3, [r4, #20]
 8009846:	b913      	cbnz	r3, 800984e <_strtod_l+0x7fe>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	2b01      	cmp	r3, #1
 800984c:	dd5c      	ble.n	8009908 <_strtod_l+0x8b8>
 800984e:	4621      	mov	r1, r4
 8009850:	2201      	movs	r2, #1
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	f7ff f982 	bl	8008b5c <__lshift>
 8009858:	4641      	mov	r1, r8
 800985a:	4604      	mov	r4, r0
 800985c:	f7ff f9ea 	bl	8008c34 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dd51      	ble.n	8009908 <_strtod_l+0x8b8>
 8009864:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009868:	9a08      	ldr	r2, [sp, #32]
 800986a:	0d1b      	lsrs	r3, r3, #20
 800986c:	051b      	lsls	r3, r3, #20
 800986e:	2a00      	cmp	r2, #0
 8009870:	d06b      	beq.n	800994a <_strtod_l+0x8fa>
 8009872:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009876:	d868      	bhi.n	800994a <_strtod_l+0x8fa>
 8009878:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800987c:	f67f ae9d 	bls.w	80095ba <_strtod_l+0x56a>
 8009880:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <_strtod_l+0x85c>)
 8009882:	4650      	mov	r0, sl
 8009884:	4659      	mov	r1, fp
 8009886:	2200      	movs	r2, #0
 8009888:	f7f6 fed6 	bl	8000638 <__aeabi_dmul>
 800988c:	4b08      	ldr	r3, [pc, #32]	@ (80098b0 <_strtod_l+0x860>)
 800988e:	400b      	ands	r3, r1
 8009890:	4682      	mov	sl, r0
 8009892:	468b      	mov	fp, r1
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f ae05 	bne.w	80094a4 <_strtod_l+0x454>
 800989a:	9a05      	ldr	r2, [sp, #20]
 800989c:	2322      	movs	r3, #34	@ 0x22
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e600      	b.n	80094a4 <_strtod_l+0x454>
 80098a2:	bf00      	nop
 80098a4:	0800b238 	.word	0x0800b238
 80098a8:	fffffc02 	.word	0xfffffc02
 80098ac:	39500000 	.word	0x39500000
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098b8:	d165      	bne.n	8009986 <_strtod_l+0x936>
 80098ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098c0:	b35a      	cbz	r2, 800991a <_strtod_l+0x8ca>
 80098c2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b40 <_strtod_l+0xaf0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d12b      	bne.n	8009920 <_strtod_l+0x8d0>
 80098c8:	9b08      	ldr	r3, [sp, #32]
 80098ca:	4651      	mov	r1, sl
 80098cc:	b303      	cbz	r3, 8009910 <_strtod_l+0x8c0>
 80098ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009b44 <_strtod_l+0xaf4>)
 80098d0:	465a      	mov	r2, fp
 80098d2:	4013      	ands	r3, r2
 80098d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	d81b      	bhi.n	8009916 <_strtod_l+0x8c6>
 80098de:	0d1b      	lsrs	r3, r3, #20
 80098e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d119      	bne.n	8009920 <_strtod_l+0x8d0>
 80098ec:	4b96      	ldr	r3, [pc, #600]	@ (8009b48 <_strtod_l+0xaf8>)
 80098ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d102      	bne.n	80098fa <_strtod_l+0x8aa>
 80098f4:	3101      	adds	r1, #1
 80098f6:	f43f adca 	beq.w	800948e <_strtod_l+0x43e>
 80098fa:	4b92      	ldr	r3, [pc, #584]	@ (8009b44 <_strtod_l+0xaf4>)
 80098fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098fe:	401a      	ands	r2, r3
 8009900:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009904:	f04f 0a00 	mov.w	sl, #0
 8009908:	9b08      	ldr	r3, [sp, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1b8      	bne.n	8009880 <_strtod_l+0x830>
 800990e:	e5c9      	b.n	80094a4 <_strtod_l+0x454>
 8009910:	f04f 33ff 	mov.w	r3, #4294967295
 8009914:	e7e8      	b.n	80098e8 <_strtod_l+0x898>
 8009916:	4613      	mov	r3, r2
 8009918:	e7e6      	b.n	80098e8 <_strtod_l+0x898>
 800991a:	ea53 030a 	orrs.w	r3, r3, sl
 800991e:	d0a1      	beq.n	8009864 <_strtod_l+0x814>
 8009920:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009922:	b1db      	cbz	r3, 800995c <_strtod_l+0x90c>
 8009924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009926:	4213      	tst	r3, r2
 8009928:	d0ee      	beq.n	8009908 <_strtod_l+0x8b8>
 800992a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992c:	9a08      	ldr	r2, [sp, #32]
 800992e:	4650      	mov	r0, sl
 8009930:	4659      	mov	r1, fp
 8009932:	b1bb      	cbz	r3, 8009964 <_strtod_l+0x914>
 8009934:	f7ff fb6c 	bl	8009010 <sulp>
 8009938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800993c:	ec53 2b10 	vmov	r2, r3, d0
 8009940:	f7f6 fcc4 	bl	80002cc <__adddf3>
 8009944:	4682      	mov	sl, r0
 8009946:	468b      	mov	fp, r1
 8009948:	e7de      	b.n	8009908 <_strtod_l+0x8b8>
 800994a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800994e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009952:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009956:	f04f 3aff 	mov.w	sl, #4294967295
 800995a:	e7d5      	b.n	8009908 <_strtod_l+0x8b8>
 800995c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800995e:	ea13 0f0a 	tst.w	r3, sl
 8009962:	e7e1      	b.n	8009928 <_strtod_l+0x8d8>
 8009964:	f7ff fb54 	bl	8009010 <sulp>
 8009968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800996c:	ec53 2b10 	vmov	r2, r3, d0
 8009970:	f7f6 fcaa 	bl	80002c8 <__aeabi_dsub>
 8009974:	2200      	movs	r2, #0
 8009976:	2300      	movs	r3, #0
 8009978:	4682      	mov	sl, r0
 800997a:	468b      	mov	fp, r1
 800997c:	f7f7 f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0c1      	beq.n	8009908 <_strtod_l+0x8b8>
 8009984:	e619      	b.n	80095ba <_strtod_l+0x56a>
 8009986:	4641      	mov	r1, r8
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff facb 	bl	8008f24 <__ratio>
 800998e:	ec57 6b10 	vmov	r6, r7, d0
 8009992:	2200      	movs	r2, #0
 8009994:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f7 f8c8 	bl	8000b30 <__aeabi_dcmple>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d06f      	beq.n	8009a84 <_strtod_l+0xa34>
 80099a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d17a      	bne.n	8009aa0 <_strtod_l+0xa50>
 80099aa:	f1ba 0f00 	cmp.w	sl, #0
 80099ae:	d158      	bne.n	8009a62 <_strtod_l+0xa12>
 80099b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d15a      	bne.n	8009a70 <_strtod_l+0xa20>
 80099ba:	4b64      	ldr	r3, [pc, #400]	@ (8009b4c <_strtod_l+0xafc>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f7 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d159      	bne.n	8009a7e <_strtod_l+0xa2e>
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	4b60      	ldr	r3, [pc, #384]	@ (8009b50 <_strtod_l+0xb00>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	f7f6 fe31 	bl	8000638 <__aeabi_dmul>
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099de:	9606      	str	r6, [sp, #24]
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099e6:	4d57      	ldr	r5, [pc, #348]	@ (8009b44 <_strtod_l+0xaf4>)
 80099e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ee:	401d      	ands	r5, r3
 80099f0:	4b58      	ldr	r3, [pc, #352]	@ (8009b54 <_strtod_l+0xb04>)
 80099f2:	429d      	cmp	r5, r3
 80099f4:	f040 80b2 	bne.w	8009b5c <_strtod_l+0xb0c>
 80099f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099fe:	ec4b ab10 	vmov	d0, sl, fp
 8009a02:	f7ff f9c7 	bl	8008d94 <__ulp>
 8009a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a0a:	ec51 0b10 	vmov	r0, r1, d0
 8009a0e:	f7f6 fe13 	bl	8000638 <__aeabi_dmul>
 8009a12:	4652      	mov	r2, sl
 8009a14:	465b      	mov	r3, fp
 8009a16:	f7f6 fc59 	bl	80002cc <__adddf3>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4949      	ldr	r1, [pc, #292]	@ (8009b44 <_strtod_l+0xaf4>)
 8009a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8009b58 <_strtod_l+0xb08>)
 8009a20:	4019      	ands	r1, r3
 8009a22:	4291      	cmp	r1, r2
 8009a24:	4682      	mov	sl, r0
 8009a26:	d942      	bls.n	8009aae <_strtod_l+0xa5e>
 8009a28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a2a:	4b47      	ldr	r3, [pc, #284]	@ (8009b48 <_strtod_l+0xaf8>)
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d103      	bne.n	8009a38 <_strtod_l+0x9e8>
 8009a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a32:	3301      	adds	r3, #1
 8009a34:	f43f ad2b 	beq.w	800948e <_strtod_l+0x43e>
 8009a38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b48 <_strtod_l+0xaf8>
 8009a3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a42:	9805      	ldr	r0, [sp, #20]
 8009a44:	f7fe fe72 	bl	800872c <_Bfree>
 8009a48:	9805      	ldr	r0, [sp, #20]
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7fe fe6e 	bl	800872c <_Bfree>
 8009a50:	9805      	ldr	r0, [sp, #20]
 8009a52:	4641      	mov	r1, r8
 8009a54:	f7fe fe6a 	bl	800872c <_Bfree>
 8009a58:	9805      	ldr	r0, [sp, #20]
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	f7fe fe66 	bl	800872c <_Bfree>
 8009a60:	e618      	b.n	8009694 <_strtod_l+0x644>
 8009a62:	f1ba 0f01 	cmp.w	sl, #1
 8009a66:	d103      	bne.n	8009a70 <_strtod_l+0xa20>
 8009a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f43f ada5 	beq.w	80095ba <_strtod_l+0x56a>
 8009a70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b20 <_strtod_l+0xad0>
 8009a74:	4f35      	ldr	r7, [pc, #212]	@ (8009b4c <_strtod_l+0xafc>)
 8009a76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	e7b1      	b.n	80099e2 <_strtod_l+0x992>
 8009a7e:	4f34      	ldr	r7, [pc, #208]	@ (8009b50 <_strtod_l+0xb00>)
 8009a80:	2600      	movs	r6, #0
 8009a82:	e7aa      	b.n	80099da <_strtod_l+0x98a>
 8009a84:	4b32      	ldr	r3, [pc, #200]	@ (8009b50 <_strtod_l+0xb00>)
 8009a86:	4630      	mov	r0, r6
 8009a88:	4639      	mov	r1, r7
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f7f6 fdd4 	bl	8000638 <__aeabi_dmul>
 8009a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d09f      	beq.n	80099da <_strtod_l+0x98a>
 8009a9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a9e:	e7a0      	b.n	80099e2 <_strtod_l+0x992>
 8009aa0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b28 <_strtod_l+0xad8>
 8009aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aa8:	ec57 6b17 	vmov	r6, r7, d7
 8009aac:	e799      	b.n	80099e2 <_strtod_l+0x992>
 8009aae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ab2:	9b08      	ldr	r3, [sp, #32]
 8009ab4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1c1      	bne.n	8009a40 <_strtod_l+0x9f0>
 8009abc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ac0:	0d1b      	lsrs	r3, r3, #20
 8009ac2:	051b      	lsls	r3, r3, #20
 8009ac4:	429d      	cmp	r5, r3
 8009ac6:	d1bb      	bne.n	8009a40 <_strtod_l+0x9f0>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f7 f964 	bl	8000d98 <__aeabi_d2lz>
 8009ad0:	f7f6 fd84 	bl	80005dc <__aeabi_l2d>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 fbf4 	bl	80002c8 <__aeabi_dsub>
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ae8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	ea46 060a 	orr.w	r6, r6, sl
 8009af2:	431e      	orrs	r6, r3
 8009af4:	d06f      	beq.n	8009bd6 <_strtod_l+0xb86>
 8009af6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b30 <_strtod_l+0xae0>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f7 f80e 	bl	8000b1c <__aeabi_dcmplt>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f47f accf 	bne.w	80094a4 <_strtod_l+0x454>
 8009b06:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b38 <_strtod_l+0xae8>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b10:	f7f7 f822 	bl	8000b58 <__aeabi_dcmpgt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d093      	beq.n	8009a40 <_strtod_l+0x9f0>
 8009b18:	e4c4      	b.n	80094a4 <_strtod_l+0x454>
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w
 8009b20:	00000000 	.word	0x00000000
 8009b24:	bff00000 	.word	0xbff00000
 8009b28:	00000000 	.word	0x00000000
 8009b2c:	3ff00000 	.word	0x3ff00000
 8009b30:	94a03595 	.word	0x94a03595
 8009b34:	3fdfffff 	.word	0x3fdfffff
 8009b38:	35afe535 	.word	0x35afe535
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	000fffff 	.word	0x000fffff
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	7fefffff 	.word	0x7fefffff
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	3fe00000 	.word	0x3fe00000
 8009b54:	7fe00000 	.word	0x7fe00000
 8009b58:	7c9fffff 	.word	0x7c9fffff
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	b323      	cbz	r3, 8009baa <_strtod_l+0xb5a>
 8009b60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b64:	d821      	bhi.n	8009baa <_strtod_l+0xb5a>
 8009b66:	a328      	add	r3, pc, #160	@ (adr r3, 8009c08 <_strtod_l+0xbb8>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ffde 	bl	8000b30 <__aeabi_dcmple>
 8009b74:	b1a0      	cbz	r0, 8009ba0 <_strtod_l+0xb50>
 8009b76:	4639      	mov	r1, r7
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7f7 f835 	bl	8000be8 <__aeabi_d2uiz>
 8009b7e:	2801      	cmp	r0, #1
 8009b80:	bf38      	it	cc
 8009b82:	2001      	movcc	r0, #1
 8009b84:	f7f6 fcde 	bl	8000544 <__aeabi_ui2d>
 8009b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	b9fb      	cbnz	r3, 8009bd0 <_strtod_l+0xb80>
 8009b90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b94:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b96:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ba0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ba2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009ba6:	1b5b      	subs	r3, r3, r5
 8009ba8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009baa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009bae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009bb2:	f7ff f8ef 	bl	8008d94 <__ulp>
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	ec53 2b10 	vmov	r2, r3, d0
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	f7f6 fd3b 	bl	8000638 <__aeabi_dmul>
 8009bc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bc6:	f7f6 fb81 	bl	80002cc <__adddf3>
 8009bca:	4682      	mov	sl, r0
 8009bcc:	468b      	mov	fp, r1
 8009bce:	e770      	b.n	8009ab2 <_strtod_l+0xa62>
 8009bd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bd4:	e7e0      	b.n	8009b98 <_strtod_l+0xb48>
 8009bd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c10 <_strtod_l+0xbc0>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 ff9e 	bl	8000b1c <__aeabi_dcmplt>
 8009be0:	e798      	b.n	8009b14 <_strtod_l+0xac4>
 8009be2:	2300      	movs	r3, #0
 8009be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	f7ff ba6d 	b.w	80090ca <_strtod_l+0x7a>
 8009bf0:	2a65      	cmp	r2, #101	@ 0x65
 8009bf2:	f43f ab66 	beq.w	80092c2 <_strtod_l+0x272>
 8009bf6:	2a45      	cmp	r2, #69	@ 0x45
 8009bf8:	f43f ab63 	beq.w	80092c2 <_strtod_l+0x272>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f7ff bb9e 	b.w	800933e <_strtod_l+0x2ee>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	ffc00000 	.word	0xffc00000
 8009c0c:	41dfffff 	.word	0x41dfffff
 8009c10:	94a03595 	.word	0x94a03595
 8009c14:	3fcfffff 	.word	0x3fcfffff

08009c18 <_strtod_r>:
 8009c18:	4b01      	ldr	r3, [pc, #4]	@ (8009c20 <_strtod_r+0x8>)
 8009c1a:	f7ff ba19 	b.w	8009050 <_strtod_l>
 8009c1e:	bf00      	nop
 8009c20:	20000068 	.word	0x20000068

08009c24 <_strtol_l.constprop.0>:
 8009c24:	2b24      	cmp	r3, #36	@ 0x24
 8009c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2a:	4686      	mov	lr, r0
 8009c2c:	4690      	mov	r8, r2
 8009c2e:	d801      	bhi.n	8009c34 <_strtol_l.constprop.0+0x10>
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d106      	bne.n	8009c42 <_strtol_l.constprop.0+0x1e>
 8009c34:	f7fd fe6e 	bl	8007914 <__errno>
 8009c38:	2316      	movs	r3, #22
 8009c3a:	6003      	str	r3, [r0, #0]
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	4834      	ldr	r0, [pc, #208]	@ (8009d14 <_strtol_l.constprop.0+0xf0>)
 8009c44:	460d      	mov	r5, r1
 8009c46:	462a      	mov	r2, r5
 8009c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c4c:	5d06      	ldrb	r6, [r0, r4]
 8009c4e:	f016 0608 	ands.w	r6, r6, #8
 8009c52:	d1f8      	bne.n	8009c46 <_strtol_l.constprop.0+0x22>
 8009c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c56:	d12d      	bne.n	8009cb4 <_strtol_l.constprop.0+0x90>
 8009c58:	782c      	ldrb	r4, [r5, #0]
 8009c5a:	2601      	movs	r6, #1
 8009c5c:	1c95      	adds	r5, r2, #2
 8009c5e:	f033 0210 	bics.w	r2, r3, #16
 8009c62:	d109      	bne.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009c64:	2c30      	cmp	r4, #48	@ 0x30
 8009c66:	d12a      	bne.n	8009cbe <_strtol_l.constprop.0+0x9a>
 8009c68:	782a      	ldrb	r2, [r5, #0]
 8009c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c6e:	2a58      	cmp	r2, #88	@ 0x58
 8009c70:	d125      	bne.n	8009cbe <_strtol_l.constprop.0+0x9a>
 8009c72:	786c      	ldrb	r4, [r5, #1]
 8009c74:	2310      	movs	r3, #16
 8009c76:	3502      	adds	r5, #2
 8009c78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c80:	2200      	movs	r2, #0
 8009c82:	fbbc f9f3 	udiv	r9, ip, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c90:	2f09      	cmp	r7, #9
 8009c92:	d81b      	bhi.n	8009ccc <_strtol_l.constprop.0+0xa8>
 8009c94:	463c      	mov	r4, r7
 8009c96:	42a3      	cmp	r3, r4
 8009c98:	dd27      	ble.n	8009cea <_strtol_l.constprop.0+0xc6>
 8009c9a:	1c57      	adds	r7, r2, #1
 8009c9c:	d007      	beq.n	8009cae <_strtol_l.constprop.0+0x8a>
 8009c9e:	4581      	cmp	r9, r0
 8009ca0:	d320      	bcc.n	8009ce4 <_strtol_l.constprop.0+0xc0>
 8009ca2:	d101      	bne.n	8009ca8 <_strtol_l.constprop.0+0x84>
 8009ca4:	45a2      	cmp	sl, r4
 8009ca6:	db1d      	blt.n	8009ce4 <_strtol_l.constprop.0+0xc0>
 8009ca8:	fb00 4003 	mla	r0, r0, r3, r4
 8009cac:	2201      	movs	r2, #1
 8009cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb2:	e7eb      	b.n	8009c8c <_strtol_l.constprop.0+0x68>
 8009cb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009cb6:	bf04      	itt	eq
 8009cb8:	782c      	ldrbeq	r4, [r5, #0]
 8009cba:	1c95      	addeq	r5, r2, #2
 8009cbc:	e7cf      	b.n	8009c5e <_strtol_l.constprop.0+0x3a>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1da      	bne.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009cc2:	2c30      	cmp	r4, #48	@ 0x30
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2308      	moveq	r3, #8
 8009cc8:	230a      	movne	r3, #10
 8009cca:	e7d5      	b.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009cd0:	2f19      	cmp	r7, #25
 8009cd2:	d801      	bhi.n	8009cd8 <_strtol_l.constprop.0+0xb4>
 8009cd4:	3c37      	subs	r4, #55	@ 0x37
 8009cd6:	e7de      	b.n	8009c96 <_strtol_l.constprop.0+0x72>
 8009cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009cdc:	2f19      	cmp	r7, #25
 8009cde:	d804      	bhi.n	8009cea <_strtol_l.constprop.0+0xc6>
 8009ce0:	3c57      	subs	r4, #87	@ 0x57
 8009ce2:	e7d8      	b.n	8009c96 <_strtol_l.constprop.0+0x72>
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce8:	e7e1      	b.n	8009cae <_strtol_l.constprop.0+0x8a>
 8009cea:	1c53      	adds	r3, r2, #1
 8009cec:	d108      	bne.n	8009d00 <_strtol_l.constprop.0+0xdc>
 8009cee:	2322      	movs	r3, #34	@ 0x22
 8009cf0:	f8ce 3000 	str.w	r3, [lr]
 8009cf4:	4660      	mov	r0, ip
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d0a0      	beq.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009cfc:	1e69      	subs	r1, r5, #1
 8009cfe:	e006      	b.n	8009d0e <_strtol_l.constprop.0+0xea>
 8009d00:	b106      	cbz	r6, 8009d04 <_strtol_l.constprop.0+0xe0>
 8009d02:	4240      	negs	r0, r0
 8009d04:	f1b8 0f00 	cmp.w	r8, #0
 8009d08:	d099      	beq.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	d1f6      	bne.n	8009cfc <_strtol_l.constprop.0+0xd8>
 8009d0e:	f8c8 1000 	str.w	r1, [r8]
 8009d12:	e794      	b.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009d14:	0800b261 	.word	0x0800b261

08009d18 <_strtol_r>:
 8009d18:	f7ff bf84 	b.w	8009c24 <_strtol_l.constprop.0>

08009d1c <__ssputs_r>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	688e      	ldr	r6, [r1, #8]
 8009d22:	461f      	mov	r7, r3
 8009d24:	42be      	cmp	r6, r7
 8009d26:	680b      	ldr	r3, [r1, #0]
 8009d28:	4682      	mov	sl, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4690      	mov	r8, r2
 8009d2e:	d82d      	bhi.n	8009d8c <__ssputs_r+0x70>
 8009d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d38:	d026      	beq.n	8009d88 <__ssputs_r+0x6c>
 8009d3a:	6965      	ldr	r5, [r4, #20]
 8009d3c:	6909      	ldr	r1, [r1, #16]
 8009d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d42:	eba3 0901 	sub.w	r9, r3, r1
 8009d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d4a:	1c7b      	adds	r3, r7, #1
 8009d4c:	444b      	add	r3, r9
 8009d4e:	106d      	asrs	r5, r5, #1
 8009d50:	429d      	cmp	r5, r3
 8009d52:	bf38      	it	cc
 8009d54:	461d      	movcc	r5, r3
 8009d56:	0553      	lsls	r3, r2, #21
 8009d58:	d527      	bpl.n	8009daa <__ssputs_r+0x8e>
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7fc fc10 	bl	8006580 <_malloc_r>
 8009d60:	4606      	mov	r6, r0
 8009d62:	b360      	cbz	r0, 8009dbe <__ssputs_r+0xa2>
 8009d64:	6921      	ldr	r1, [r4, #16]
 8009d66:	464a      	mov	r2, r9
 8009d68:	f000 fbbc 	bl	800a4e4 <memcpy>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	6126      	str	r6, [r4, #16]
 8009d7a:	6165      	str	r5, [r4, #20]
 8009d7c:	444e      	add	r6, r9
 8009d7e:	eba5 0509 	sub.w	r5, r5, r9
 8009d82:	6026      	str	r6, [r4, #0]
 8009d84:	60a5      	str	r5, [r4, #8]
 8009d86:	463e      	mov	r6, r7
 8009d88:	42be      	cmp	r6, r7
 8009d8a:	d900      	bls.n	8009d8e <__ssputs_r+0x72>
 8009d8c:	463e      	mov	r6, r7
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	4632      	mov	r2, r6
 8009d92:	4641      	mov	r1, r8
 8009d94:	f000 fb6a 	bl	800a46c <memmove>
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	1b9b      	subs	r3, r3, r6
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	4433      	add	r3, r6
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	2000      	movs	r0, #0
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	462a      	mov	r2, r5
 8009dac:	f000 ff2d 	bl	800ac0a <_realloc_r>
 8009db0:	4606      	mov	r6, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d1e0      	bne.n	8009d78 <__ssputs_r+0x5c>
 8009db6:	6921      	ldr	r1, [r4, #16]
 8009db8:	4650      	mov	r0, sl
 8009dba:	f7fe fc2d 	bl	8008618 <_free_r>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	f8ca 3000 	str.w	r3, [sl]
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	e7e9      	b.n	8009da6 <__ssputs_r+0x8a>
	...

08009dd4 <_svfiprintf_r>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	4698      	mov	r8, r3
 8009dda:	898b      	ldrh	r3, [r1, #12]
 8009ddc:	061b      	lsls	r3, r3, #24
 8009dde:	b09d      	sub	sp, #116	@ 0x74
 8009de0:	4607      	mov	r7, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	4614      	mov	r4, r2
 8009de6:	d510      	bpl.n	8009e0a <_svfiprintf_r+0x36>
 8009de8:	690b      	ldr	r3, [r1, #16]
 8009dea:	b973      	cbnz	r3, 8009e0a <_svfiprintf_r+0x36>
 8009dec:	2140      	movs	r1, #64	@ 0x40
 8009dee:	f7fc fbc7 	bl	8006580 <_malloc_r>
 8009df2:	6028      	str	r0, [r5, #0]
 8009df4:	6128      	str	r0, [r5, #16]
 8009df6:	b930      	cbnz	r0, 8009e06 <_svfiprintf_r+0x32>
 8009df8:	230c      	movs	r3, #12
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	b01d      	add	sp, #116	@ 0x74
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	2340      	movs	r3, #64	@ 0x40
 8009e08:	616b      	str	r3, [r5, #20]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0e:	2320      	movs	r3, #32
 8009e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e18:	2330      	movs	r3, #48	@ 0x30
 8009e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fb8 <_svfiprintf_r+0x1e4>
 8009e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e22:	f04f 0901 	mov.w	r9, #1
 8009e26:	4623      	mov	r3, r4
 8009e28:	469a      	mov	sl, r3
 8009e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2e:	b10a      	cbz	r2, 8009e34 <_svfiprintf_r+0x60>
 8009e30:	2a25      	cmp	r2, #37	@ 0x25
 8009e32:	d1f9      	bne.n	8009e28 <_svfiprintf_r+0x54>
 8009e34:	ebba 0b04 	subs.w	fp, sl, r4
 8009e38:	d00b      	beq.n	8009e52 <_svfiprintf_r+0x7e>
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ff6b 	bl	8009d1c <__ssputs_r>
 8009e46:	3001      	adds	r0, #1
 8009e48:	f000 80a7 	beq.w	8009f9a <_svfiprintf_r+0x1c6>
 8009e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e4e:	445a      	add	r2, fp
 8009e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e52:	f89a 3000 	ldrb.w	r3, [sl]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 809f 	beq.w	8009f9a <_svfiprintf_r+0x1c6>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e66:	f10a 0a01 	add.w	sl, sl, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e74:	4654      	mov	r4, sl
 8009e76:	2205      	movs	r2, #5
 8009e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7c:	484e      	ldr	r0, [pc, #312]	@ (8009fb8 <_svfiprintf_r+0x1e4>)
 8009e7e:	f7f6 f9c7 	bl	8000210 <memchr>
 8009e82:	9a04      	ldr	r2, [sp, #16]
 8009e84:	b9d8      	cbnz	r0, 8009ebe <_svfiprintf_r+0xea>
 8009e86:	06d0      	lsls	r0, r2, #27
 8009e88:	bf44      	itt	mi
 8009e8a:	2320      	movmi	r3, #32
 8009e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e90:	0711      	lsls	r1, r2, #28
 8009e92:	bf44      	itt	mi
 8009e94:	232b      	movmi	r3, #43	@ 0x2b
 8009e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea0:	d015      	beq.n	8009ece <_svfiprintf_r+0xfa>
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f04f 0c0a 	mov.w	ip, #10
 8009eac:	4621      	mov	r1, r4
 8009eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb2:	3b30      	subs	r3, #48	@ 0x30
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d94b      	bls.n	8009f50 <_svfiprintf_r+0x17c>
 8009eb8:	b1b0      	cbz	r0, 8009ee8 <_svfiprintf_r+0x114>
 8009eba:	9207      	str	r2, [sp, #28]
 8009ebc:	e014      	b.n	8009ee8 <_svfiprintf_r+0x114>
 8009ebe:	eba0 0308 	sub.w	r3, r0, r8
 8009ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	46a2      	mov	sl, r4
 8009ecc:	e7d2      	b.n	8009e74 <_svfiprintf_r+0xa0>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	1d19      	adds	r1, r3, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9103      	str	r1, [sp, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfbb      	ittet	lt
 8009eda:	425b      	neglt	r3, r3
 8009edc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee0:	9307      	strge	r3, [sp, #28]
 8009ee2:	9307      	strlt	r3, [sp, #28]
 8009ee4:	bfb8      	it	lt
 8009ee6:	9204      	strlt	r2, [sp, #16]
 8009ee8:	7823      	ldrb	r3, [r4, #0]
 8009eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eec:	d10a      	bne.n	8009f04 <_svfiprintf_r+0x130>
 8009eee:	7863      	ldrb	r3, [r4, #1]
 8009ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef2:	d132      	bne.n	8009f5a <_svfiprintf_r+0x186>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f00:	3402      	adds	r4, #2
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fc8 <_svfiprintf_r+0x1f4>
 8009f08:	7821      	ldrb	r1, [r4, #0]
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	f7f6 f97f 	bl	8000210 <memchr>
 8009f12:	b138      	cbz	r0, 8009f24 <_svfiprintf_r+0x150>
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	eba0 000a 	sub.w	r0, r0, sl
 8009f1a:	2240      	movs	r2, #64	@ 0x40
 8009f1c:	4082      	lsls	r2, r0
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	3401      	adds	r4, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f28:	4824      	ldr	r0, [pc, #144]	@ (8009fbc <_svfiprintf_r+0x1e8>)
 8009f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f2e:	2206      	movs	r2, #6
 8009f30:	f7f6 f96e 	bl	8000210 <memchr>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d036      	beq.n	8009fa6 <_svfiprintf_r+0x1d2>
 8009f38:	4b21      	ldr	r3, [pc, #132]	@ (8009fc0 <_svfiprintf_r+0x1ec>)
 8009f3a:	bb1b      	cbnz	r3, 8009f84 <_svfiprintf_r+0x1b0>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	3307      	adds	r3, #7
 8009f40:	f023 0307 	bic.w	r3, r3, #7
 8009f44:	3308      	adds	r3, #8
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4a:	4433      	add	r3, r6
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	e76a      	b.n	8009e26 <_svfiprintf_r+0x52>
 8009f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f54:	460c      	mov	r4, r1
 8009f56:	2001      	movs	r0, #1
 8009f58:	e7a8      	b.n	8009eac <_svfiprintf_r+0xd8>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	3401      	adds	r4, #1
 8009f5e:	9305      	str	r3, [sp, #20]
 8009f60:	4619      	mov	r1, r3
 8009f62:	f04f 0c0a 	mov.w	ip, #10
 8009f66:	4620      	mov	r0, r4
 8009f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6c:	3a30      	subs	r2, #48	@ 0x30
 8009f6e:	2a09      	cmp	r2, #9
 8009f70:	d903      	bls.n	8009f7a <_svfiprintf_r+0x1a6>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0c6      	beq.n	8009f04 <_svfiprintf_r+0x130>
 8009f76:	9105      	str	r1, [sp, #20]
 8009f78:	e7c4      	b.n	8009f04 <_svfiprintf_r+0x130>
 8009f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f7e:	4604      	mov	r4, r0
 8009f80:	2301      	movs	r3, #1
 8009f82:	e7f0      	b.n	8009f66 <_svfiprintf_r+0x192>
 8009f84:	ab03      	add	r3, sp, #12
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc4 <_svfiprintf_r+0x1f0>)
 8009f8c:	a904      	add	r1, sp, #16
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7fc fc22 	bl	80067d8 <_printf_float>
 8009f94:	1c42      	adds	r2, r0, #1
 8009f96:	4606      	mov	r6, r0
 8009f98:	d1d6      	bne.n	8009f48 <_svfiprintf_r+0x174>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	065b      	lsls	r3, r3, #25
 8009f9e:	f53f af2d 	bmi.w	8009dfc <_svfiprintf_r+0x28>
 8009fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fa4:	e72c      	b.n	8009e00 <_svfiprintf_r+0x2c>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <_svfiprintf_r+0x1f0>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7fc fea9 	bl	8006d08 <_printf_i>
 8009fb6:	e7ed      	b.n	8009f94 <_svfiprintf_r+0x1c0>
 8009fb8:	0800b361 	.word	0x0800b361
 8009fbc:	0800b36b 	.word	0x0800b36b
 8009fc0:	080067d9 	.word	0x080067d9
 8009fc4:	08009d1d 	.word	0x08009d1d
 8009fc8:	0800b367 	.word	0x0800b367

08009fcc <__sfputc_r>:
 8009fcc:	6893      	ldr	r3, [r2, #8]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	b410      	push	{r4}
 8009fd4:	6093      	str	r3, [r2, #8]
 8009fd6:	da08      	bge.n	8009fea <__sfputc_r+0x1e>
 8009fd8:	6994      	ldr	r4, [r2, #24]
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	db01      	blt.n	8009fe2 <__sfputc_r+0x16>
 8009fde:	290a      	cmp	r1, #10
 8009fe0:	d103      	bne.n	8009fea <__sfputc_r+0x1e>
 8009fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe6:	f7fd bb8c 	b.w	8007702 <__swbuf_r>
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	1c58      	adds	r0, r3, #1
 8009fee:	6010      	str	r0, [r2, #0]
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <__sfputs_r>:
 8009ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	4614      	mov	r4, r2
 800a002:	18d5      	adds	r5, r2, r3
 800a004:	42ac      	cmp	r4, r5
 800a006:	d101      	bne.n	800a00c <__sfputs_r+0x12>
 800a008:	2000      	movs	r0, #0
 800a00a:	e007      	b.n	800a01c <__sfputs_r+0x22>
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	463a      	mov	r2, r7
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffda 	bl	8009fcc <__sfputc_r>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d1f3      	bne.n	800a004 <__sfputs_r+0xa>
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a020 <_vfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	460d      	mov	r5, r1
 800a026:	b09d      	sub	sp, #116	@ 0x74
 800a028:	4614      	mov	r4, r2
 800a02a:	4698      	mov	r8, r3
 800a02c:	4606      	mov	r6, r0
 800a02e:	b118      	cbz	r0, 800a038 <_vfiprintf_r+0x18>
 800a030:	6a03      	ldr	r3, [r0, #32]
 800a032:	b90b      	cbnz	r3, 800a038 <_vfiprintf_r+0x18>
 800a034:	f7fd fa28 	bl	8007488 <__sinit>
 800a038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a03a:	07d9      	lsls	r1, r3, #31
 800a03c:	d405      	bmi.n	800a04a <_vfiprintf_r+0x2a>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	059a      	lsls	r2, r3, #22
 800a042:	d402      	bmi.n	800a04a <_vfiprintf_r+0x2a>
 800a044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a046:	f7fd fc90 	bl	800796a <__retarget_lock_acquire_recursive>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	071b      	lsls	r3, r3, #28
 800a04e:	d501      	bpl.n	800a054 <_vfiprintf_r+0x34>
 800a050:	692b      	ldr	r3, [r5, #16]
 800a052:	b99b      	cbnz	r3, 800a07c <_vfiprintf_r+0x5c>
 800a054:	4629      	mov	r1, r5
 800a056:	4630      	mov	r0, r6
 800a058:	f7fd fb92 	bl	8007780 <__swsetup_r>
 800a05c:	b170      	cbz	r0, 800a07c <_vfiprintf_r+0x5c>
 800a05e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a060:	07dc      	lsls	r4, r3, #31
 800a062:	d504      	bpl.n	800a06e <_vfiprintf_r+0x4e>
 800a064:	f04f 30ff 	mov.w	r0, #4294967295
 800a068:	b01d      	add	sp, #116	@ 0x74
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	0598      	lsls	r0, r3, #22
 800a072:	d4f7      	bmi.n	800a064 <_vfiprintf_r+0x44>
 800a074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a076:	f7fd fc79 	bl	800796c <__retarget_lock_release_recursive>
 800a07a:	e7f3      	b.n	800a064 <_vfiprintf_r+0x44>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a080:	2320      	movs	r3, #32
 800a082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a086:	f8cd 800c 	str.w	r8, [sp, #12]
 800a08a:	2330      	movs	r3, #48	@ 0x30
 800a08c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a23c <_vfiprintf_r+0x21c>
 800a090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a094:	f04f 0901 	mov.w	r9, #1
 800a098:	4623      	mov	r3, r4
 800a09a:	469a      	mov	sl, r3
 800a09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a0:	b10a      	cbz	r2, 800a0a6 <_vfiprintf_r+0x86>
 800a0a2:	2a25      	cmp	r2, #37	@ 0x25
 800a0a4:	d1f9      	bne.n	800a09a <_vfiprintf_r+0x7a>
 800a0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0aa:	d00b      	beq.n	800a0c4 <_vfiprintf_r+0xa4>
 800a0ac:	465b      	mov	r3, fp
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ffa1 	bl	8009ffa <__sfputs_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f000 80a7 	beq.w	800a20c <_vfiprintf_r+0x1ec>
 800a0be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0c0:	445a      	add	r2, fp
 800a0c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 809f 	beq.w	800a20c <_vfiprintf_r+0x1ec>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d8:	f10a 0a01 	add.w	sl, sl, #1
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	9307      	str	r3, [sp, #28]
 800a0e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0e6:	4654      	mov	r4, sl
 800a0e8:	2205      	movs	r2, #5
 800a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ee:	4853      	ldr	r0, [pc, #332]	@ (800a23c <_vfiprintf_r+0x21c>)
 800a0f0:	f7f6 f88e 	bl	8000210 <memchr>
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	b9d8      	cbnz	r0, 800a130 <_vfiprintf_r+0x110>
 800a0f8:	06d1      	lsls	r1, r2, #27
 800a0fa:	bf44      	itt	mi
 800a0fc:	2320      	movmi	r3, #32
 800a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a102:	0713      	lsls	r3, r2, #28
 800a104:	bf44      	itt	mi
 800a106:	232b      	movmi	r3, #43	@ 0x2b
 800a108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a10c:	f89a 3000 	ldrb.w	r3, [sl]
 800a110:	2b2a      	cmp	r3, #42	@ 0x2a
 800a112:	d015      	beq.n	800a140 <_vfiprintf_r+0x120>
 800a114:	9a07      	ldr	r2, [sp, #28]
 800a116:	4654      	mov	r4, sl
 800a118:	2000      	movs	r0, #0
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4621      	mov	r1, r4
 800a120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a124:	3b30      	subs	r3, #48	@ 0x30
 800a126:	2b09      	cmp	r3, #9
 800a128:	d94b      	bls.n	800a1c2 <_vfiprintf_r+0x1a2>
 800a12a:	b1b0      	cbz	r0, 800a15a <_vfiprintf_r+0x13a>
 800a12c:	9207      	str	r2, [sp, #28]
 800a12e:	e014      	b.n	800a15a <_vfiprintf_r+0x13a>
 800a130:	eba0 0308 	sub.w	r3, r0, r8
 800a134:	fa09 f303 	lsl.w	r3, r9, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	46a2      	mov	sl, r4
 800a13e:	e7d2      	b.n	800a0e6 <_vfiprintf_r+0xc6>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	1d19      	adds	r1, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	9103      	str	r1, [sp, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfbb      	ittet	lt
 800a14c:	425b      	neglt	r3, r3
 800a14e:	f042 0202 	orrlt.w	r2, r2, #2
 800a152:	9307      	strge	r3, [sp, #28]
 800a154:	9307      	strlt	r3, [sp, #28]
 800a156:	bfb8      	it	lt
 800a158:	9204      	strlt	r2, [sp, #16]
 800a15a:	7823      	ldrb	r3, [r4, #0]
 800a15c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a15e:	d10a      	bne.n	800a176 <_vfiprintf_r+0x156>
 800a160:	7863      	ldrb	r3, [r4, #1]
 800a162:	2b2a      	cmp	r3, #42	@ 0x2a
 800a164:	d132      	bne.n	800a1cc <_vfiprintf_r+0x1ac>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9203      	str	r2, [sp, #12]
 800a16e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a172:	3402      	adds	r4, #2
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a24c <_vfiprintf_r+0x22c>
 800a17a:	7821      	ldrb	r1, [r4, #0]
 800a17c:	2203      	movs	r2, #3
 800a17e:	4650      	mov	r0, sl
 800a180:	f7f6 f846 	bl	8000210 <memchr>
 800a184:	b138      	cbz	r0, 800a196 <_vfiprintf_r+0x176>
 800a186:	9b04      	ldr	r3, [sp, #16]
 800a188:	eba0 000a 	sub.w	r0, r0, sl
 800a18c:	2240      	movs	r2, #64	@ 0x40
 800a18e:	4082      	lsls	r2, r0
 800a190:	4313      	orrs	r3, r2
 800a192:	3401      	adds	r4, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4829      	ldr	r0, [pc, #164]	@ (800a240 <_vfiprintf_r+0x220>)
 800a19c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	f7f6 f835 	bl	8000210 <memchr>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d03f      	beq.n	800a22a <_vfiprintf_r+0x20a>
 800a1aa:	4b26      	ldr	r3, [pc, #152]	@ (800a244 <_vfiprintf_r+0x224>)
 800a1ac:	bb1b      	cbnz	r3, 800a1f6 <_vfiprintf_r+0x1d6>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3307      	adds	r3, #7
 800a1b2:	f023 0307 	bic.w	r3, r3, #7
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1bc:	443b      	add	r3, r7
 800a1be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c0:	e76a      	b.n	800a098 <_vfiprintf_r+0x78>
 800a1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e7a8      	b.n	800a11e <_vfiprintf_r+0xfe>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1de:	3a30      	subs	r2, #48	@ 0x30
 800a1e0:	2a09      	cmp	r2, #9
 800a1e2:	d903      	bls.n	800a1ec <_vfiprintf_r+0x1cc>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c6      	beq.n	800a176 <_vfiprintf_r+0x156>
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	e7c4      	b.n	800a176 <_vfiprintf_r+0x156>
 800a1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7f0      	b.n	800a1d8 <_vfiprintf_r+0x1b8>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b12      	ldr	r3, [pc, #72]	@ (800a248 <_vfiprintf_r+0x228>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4630      	mov	r0, r6
 800a202:	f7fc fae9 	bl	80067d8 <_printf_float>
 800a206:	4607      	mov	r7, r0
 800a208:	1c78      	adds	r0, r7, #1
 800a20a:	d1d6      	bne.n	800a1ba <_vfiprintf_r+0x19a>
 800a20c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d405      	bmi.n	800a21e <_vfiprintf_r+0x1fe>
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d402      	bmi.n	800a21e <_vfiprintf_r+0x1fe>
 800a218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a21a:	f7fd fba7 	bl	800796c <__retarget_lock_release_recursive>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	065b      	lsls	r3, r3, #25
 800a222:	f53f af1f 	bmi.w	800a064 <_vfiprintf_r+0x44>
 800a226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a228:	e71e      	b.n	800a068 <_vfiprintf_r+0x48>
 800a22a:	ab03      	add	r3, sp, #12
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	462a      	mov	r2, r5
 800a230:	4b05      	ldr	r3, [pc, #20]	@ (800a248 <_vfiprintf_r+0x228>)
 800a232:	a904      	add	r1, sp, #16
 800a234:	4630      	mov	r0, r6
 800a236:	f7fc fd67 	bl	8006d08 <_printf_i>
 800a23a:	e7e4      	b.n	800a206 <_vfiprintf_r+0x1e6>
 800a23c:	0800b361 	.word	0x0800b361
 800a240:	0800b36b 	.word	0x0800b36b
 800a244:	080067d9 	.word	0x080067d9
 800a248:	08009ffb 	.word	0x08009ffb
 800a24c:	0800b367 	.word	0x0800b367

0800a250 <__sflush_r>:
 800a250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a258:	0716      	lsls	r6, r2, #28
 800a25a:	4605      	mov	r5, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	d454      	bmi.n	800a30a <__sflush_r+0xba>
 800a260:	684b      	ldr	r3, [r1, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	dc02      	bgt.n	800a26c <__sflush_r+0x1c>
 800a266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dd48      	ble.n	800a2fe <__sflush_r+0xae>
 800a26c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d045      	beq.n	800a2fe <__sflush_r+0xae>
 800a272:	2300      	movs	r3, #0
 800a274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a278:	682f      	ldr	r7, [r5, #0]
 800a27a:	6a21      	ldr	r1, [r4, #32]
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	d030      	beq.n	800a2e2 <__sflush_r+0x92>
 800a280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	0759      	lsls	r1, r3, #29
 800a286:	d505      	bpl.n	800a294 <__sflush_r+0x44>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a28e:	b10b      	cbz	r3, 800a294 <__sflush_r+0x44>
 800a290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a292:	1ad2      	subs	r2, r2, r3
 800a294:	2300      	movs	r3, #0
 800a296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a298:	6a21      	ldr	r1, [r4, #32]
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b0      	blx	r6
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	d106      	bne.n	800a2b2 <__sflush_r+0x62>
 800a2a4:	6829      	ldr	r1, [r5, #0]
 800a2a6:	291d      	cmp	r1, #29
 800a2a8:	d82b      	bhi.n	800a302 <__sflush_r+0xb2>
 800a2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a354 <__sflush_r+0x104>)
 800a2ac:	410a      	asrs	r2, r1
 800a2ae:	07d6      	lsls	r6, r2, #31
 800a2b0:	d427      	bmi.n	800a302 <__sflush_r+0xb2>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6062      	str	r2, [r4, #4]
 800a2b6:	04d9      	lsls	r1, r3, #19
 800a2b8:	6922      	ldr	r2, [r4, #16]
 800a2ba:	6022      	str	r2, [r4, #0]
 800a2bc:	d504      	bpl.n	800a2c8 <__sflush_r+0x78>
 800a2be:	1c42      	adds	r2, r0, #1
 800a2c0:	d101      	bne.n	800a2c6 <__sflush_r+0x76>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b903      	cbnz	r3, 800a2c8 <__sflush_r+0x78>
 800a2c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ca:	602f      	str	r7, [r5, #0]
 800a2cc:	b1b9      	cbz	r1, 800a2fe <__sflush_r+0xae>
 800a2ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	d002      	beq.n	800a2dc <__sflush_r+0x8c>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7fe f99e 	bl	8008618 <_free_r>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2e0:	e00d      	b.n	800a2fe <__sflush_r+0xae>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b0      	blx	r6
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	1c50      	adds	r0, r2, #1
 800a2ec:	d1c9      	bne.n	800a282 <__sflush_r+0x32>
 800a2ee:	682b      	ldr	r3, [r5, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c6      	beq.n	800a282 <__sflush_r+0x32>
 800a2f4:	2b1d      	cmp	r3, #29
 800a2f6:	d001      	beq.n	800a2fc <__sflush_r+0xac>
 800a2f8:	2b16      	cmp	r3, #22
 800a2fa:	d11e      	bne.n	800a33a <__sflush_r+0xea>
 800a2fc:	602f      	str	r7, [r5, #0]
 800a2fe:	2000      	movs	r0, #0
 800a300:	e022      	b.n	800a348 <__sflush_r+0xf8>
 800a302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a306:	b21b      	sxth	r3, r3
 800a308:	e01b      	b.n	800a342 <__sflush_r+0xf2>
 800a30a:	690f      	ldr	r7, [r1, #16]
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d0f6      	beq.n	800a2fe <__sflush_r+0xae>
 800a310:	0793      	lsls	r3, r2, #30
 800a312:	680e      	ldr	r6, [r1, #0]
 800a314:	bf08      	it	eq
 800a316:	694b      	ldreq	r3, [r1, #20]
 800a318:	600f      	str	r7, [r1, #0]
 800a31a:	bf18      	it	ne
 800a31c:	2300      	movne	r3, #0
 800a31e:	eba6 0807 	sub.w	r8, r6, r7
 800a322:	608b      	str	r3, [r1, #8]
 800a324:	f1b8 0f00 	cmp.w	r8, #0
 800a328:	dde9      	ble.n	800a2fe <__sflush_r+0xae>
 800a32a:	6a21      	ldr	r1, [r4, #32]
 800a32c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a32e:	4643      	mov	r3, r8
 800a330:	463a      	mov	r2, r7
 800a332:	4628      	mov	r0, r5
 800a334:	47b0      	blx	r6
 800a336:	2800      	cmp	r0, #0
 800a338:	dc08      	bgt.n	800a34c <__sflush_r+0xfc>
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34c:	4407      	add	r7, r0
 800a34e:	eba8 0800 	sub.w	r8, r8, r0
 800a352:	e7e7      	b.n	800a324 <__sflush_r+0xd4>
 800a354:	dfbffffe 	.word	0xdfbffffe

0800a358 <_fflush_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	690b      	ldr	r3, [r1, #16]
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	b913      	cbnz	r3, 800a368 <_fflush_r+0x10>
 800a362:	2500      	movs	r5, #0
 800a364:	4628      	mov	r0, r5
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	b118      	cbz	r0, 800a372 <_fflush_r+0x1a>
 800a36a:	6a03      	ldr	r3, [r0, #32]
 800a36c:	b90b      	cbnz	r3, 800a372 <_fflush_r+0x1a>
 800a36e:	f7fd f88b 	bl	8007488 <__sinit>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f3      	beq.n	800a362 <_fflush_r+0xa>
 800a37a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a37c:	07d0      	lsls	r0, r2, #31
 800a37e:	d404      	bmi.n	800a38a <_fflush_r+0x32>
 800a380:	0599      	lsls	r1, r3, #22
 800a382:	d402      	bmi.n	800a38a <_fflush_r+0x32>
 800a384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a386:	f7fd faf0 	bl	800796a <__retarget_lock_acquire_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7ff ff5f 	bl	800a250 <__sflush_r>
 800a392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a394:	07da      	lsls	r2, r3, #31
 800a396:	4605      	mov	r5, r0
 800a398:	d4e4      	bmi.n	800a364 <_fflush_r+0xc>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	059b      	lsls	r3, r3, #22
 800a39e:	d4e1      	bmi.n	800a364 <_fflush_r+0xc>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3a2:	f7fd fae3 	bl	800796c <__retarget_lock_release_recursive>
 800a3a6:	e7dd      	b.n	800a364 <_fflush_r+0xc>

0800a3a8 <__swhatbuf_r>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	b096      	sub	sp, #88	@ 0x58
 800a3b4:	4615      	mov	r5, r2
 800a3b6:	461e      	mov	r6, r3
 800a3b8:	da0d      	bge.n	800a3d6 <__swhatbuf_r+0x2e>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3c0:	f04f 0100 	mov.w	r1, #0
 800a3c4:	bf14      	ite	ne
 800a3c6:	2340      	movne	r3, #64	@ 0x40
 800a3c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	6031      	str	r1, [r6, #0]
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	b016      	add	sp, #88	@ 0x58
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	466a      	mov	r2, sp
 800a3d8:	f000 f862 	bl	800a4a0 <_fstat_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	dbec      	blt.n	800a3ba <__swhatbuf_r+0x12>
 800a3e0:	9901      	ldr	r1, [sp, #4]
 800a3e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3ea:	4259      	negs	r1, r3
 800a3ec:	4159      	adcs	r1, r3
 800a3ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3f2:	e7eb      	b.n	800a3cc <__swhatbuf_r+0x24>

0800a3f4 <__smakebuf_r>:
 800a3f4:	898b      	ldrh	r3, [r1, #12]
 800a3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3f8:	079d      	lsls	r5, r3, #30
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	d507      	bpl.n	800a410 <__smakebuf_r+0x1c>
 800a400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	2301      	movs	r3, #1
 800a40a:	6163      	str	r3, [r4, #20]
 800a40c:	b003      	add	sp, #12
 800a40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a410:	ab01      	add	r3, sp, #4
 800a412:	466a      	mov	r2, sp
 800a414:	f7ff ffc8 	bl	800a3a8 <__swhatbuf_r>
 800a418:	9f00      	ldr	r7, [sp, #0]
 800a41a:	4605      	mov	r5, r0
 800a41c:	4639      	mov	r1, r7
 800a41e:	4630      	mov	r0, r6
 800a420:	f7fc f8ae 	bl	8006580 <_malloc_r>
 800a424:	b948      	cbnz	r0, 800a43a <__smakebuf_r+0x46>
 800a426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42a:	059a      	lsls	r2, r3, #22
 800a42c:	d4ee      	bmi.n	800a40c <__smakebuf_r+0x18>
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	f043 0302 	orr.w	r3, r3, #2
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	e7e2      	b.n	800a400 <__smakebuf_r+0xc>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	6020      	str	r0, [r4, #0]
 800a43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	9b01      	ldr	r3, [sp, #4]
 800a446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a44a:	b15b      	cbz	r3, 800a464 <__smakebuf_r+0x70>
 800a44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a450:	4630      	mov	r0, r6
 800a452:	f000 f837 	bl	800a4c4 <_isatty_r>
 800a456:	b128      	cbz	r0, 800a464 <__smakebuf_r+0x70>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f023 0303 	bic.w	r3, r3, #3
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	431d      	orrs	r5, r3
 800a468:	81a5      	strh	r5, [r4, #12]
 800a46a:	e7cf      	b.n	800a40c <__smakebuf_r+0x18>

0800a46c <memmove>:
 800a46c:	4288      	cmp	r0, r1
 800a46e:	b510      	push	{r4, lr}
 800a470:	eb01 0402 	add.w	r4, r1, r2
 800a474:	d902      	bls.n	800a47c <memmove+0x10>
 800a476:	4284      	cmp	r4, r0
 800a478:	4623      	mov	r3, r4
 800a47a:	d807      	bhi.n	800a48c <memmove+0x20>
 800a47c:	1e43      	subs	r3, r0, #1
 800a47e:	42a1      	cmp	r1, r4
 800a480:	d008      	beq.n	800a494 <memmove+0x28>
 800a482:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a48a:	e7f8      	b.n	800a47e <memmove+0x12>
 800a48c:	4402      	add	r2, r0
 800a48e:	4601      	mov	r1, r0
 800a490:	428a      	cmp	r2, r1
 800a492:	d100      	bne.n	800a496 <memmove+0x2a>
 800a494:	bd10      	pop	{r4, pc}
 800a496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a49a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a49e:	e7f7      	b.n	800a490 <memmove+0x24>

0800a4a0 <_fstat_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	@ (800a4c0 <_fstat_r+0x20>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	f7f8 f851 	bl	8002554 <_fstat>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d102      	bne.n	800a4bc <_fstat_r+0x1c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <_fstat_r+0x1c>
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	bf00      	nop
 800a4c0:	200004b0 	.word	0x200004b0

0800a4c4 <_isatty_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d06      	ldr	r5, [pc, #24]	@ (800a4e0 <_isatty_r+0x1c>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f8 f850 	bl	8002574 <_isatty>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_isatty_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_isatty_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	200004b0 	.word	0x200004b0

0800a4e4 <memcpy>:
 800a4e4:	440a      	add	r2, r1
 800a4e6:	4291      	cmp	r1, r2
 800a4e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ec:	d100      	bne.n	800a4f0 <memcpy+0xc>
 800a4ee:	4770      	bx	lr
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4fa:	4291      	cmp	r1, r2
 800a4fc:	d1f9      	bne.n	800a4f2 <memcpy+0xe>
 800a4fe:	bd10      	pop	{r4, pc}

0800a500 <nan>:
 800a500:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a508 <nan+0x8>
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	00000000 	.word	0x00000000
 800a50c:	7ff80000 	.word	0x7ff80000

0800a510 <__assert_func>:
 800a510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a512:	4614      	mov	r4, r2
 800a514:	461a      	mov	r2, r3
 800a516:	4b09      	ldr	r3, [pc, #36]	@ (800a53c <__assert_func+0x2c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4605      	mov	r5, r0
 800a51c:	68d8      	ldr	r0, [r3, #12]
 800a51e:	b954      	cbnz	r4, 800a536 <__assert_func+0x26>
 800a520:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <__assert_func+0x30>)
 800a522:	461c      	mov	r4, r3
 800a524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a528:	9100      	str	r1, [sp, #0]
 800a52a:	462b      	mov	r3, r5
 800a52c:	4905      	ldr	r1, [pc, #20]	@ (800a544 <__assert_func+0x34>)
 800a52e:	f000 fba7 	bl	800ac80 <fiprintf>
 800a532:	f000 fbb7 	bl	800aca4 <abort>
 800a536:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <__assert_func+0x38>)
 800a538:	e7f4      	b.n	800a524 <__assert_func+0x14>
 800a53a:	bf00      	nop
 800a53c:	20000018 	.word	0x20000018
 800a540:	0800b3b5 	.word	0x0800b3b5
 800a544:	0800b387 	.word	0x0800b387
 800a548:	0800b37a 	.word	0x0800b37a

0800a54c <_calloc_r>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	fba1 5402 	umull	r5, r4, r1, r2
 800a552:	b93c      	cbnz	r4, 800a564 <_calloc_r+0x18>
 800a554:	4629      	mov	r1, r5
 800a556:	f7fc f813 	bl	8006580 <_malloc_r>
 800a55a:	4606      	mov	r6, r0
 800a55c:	b928      	cbnz	r0, 800a56a <_calloc_r+0x1e>
 800a55e:	2600      	movs	r6, #0
 800a560:	4630      	mov	r0, r6
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	220c      	movs	r2, #12
 800a566:	6002      	str	r2, [r0, #0]
 800a568:	e7f9      	b.n	800a55e <_calloc_r+0x12>
 800a56a:	462a      	mov	r2, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7fd f95d 	bl	800782c <memset>
 800a572:	e7f5      	b.n	800a560 <_calloc_r+0x14>

0800a574 <rshift>:
 800a574:	6903      	ldr	r3, [r0, #16]
 800a576:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a57a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a57e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a582:	f100 0414 	add.w	r4, r0, #20
 800a586:	dd45      	ble.n	800a614 <rshift+0xa0>
 800a588:	f011 011f 	ands.w	r1, r1, #31
 800a58c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a590:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a594:	d10c      	bne.n	800a5b0 <rshift+0x3c>
 800a596:	f100 0710 	add.w	r7, r0, #16
 800a59a:	4629      	mov	r1, r5
 800a59c:	42b1      	cmp	r1, r6
 800a59e:	d334      	bcc.n	800a60a <rshift+0x96>
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	1eea      	subs	r2, r5, #3
 800a5a6:	4296      	cmp	r6, r2
 800a5a8:	bf38      	it	cc
 800a5aa:	2300      	movcc	r3, #0
 800a5ac:	4423      	add	r3, r4
 800a5ae:	e015      	b.n	800a5dc <rshift+0x68>
 800a5b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5b4:	f1c1 0820 	rsb	r8, r1, #32
 800a5b8:	40cf      	lsrs	r7, r1
 800a5ba:	f105 0e04 	add.w	lr, r5, #4
 800a5be:	46a1      	mov	r9, r4
 800a5c0:	4576      	cmp	r6, lr
 800a5c2:	46f4      	mov	ip, lr
 800a5c4:	d815      	bhi.n	800a5f2 <rshift+0x7e>
 800a5c6:	1a9a      	subs	r2, r3, r2
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	3a04      	subs	r2, #4
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	42ae      	cmp	r6, r5
 800a5d0:	bf38      	it	cc
 800a5d2:	2200      	movcc	r2, #0
 800a5d4:	18a3      	adds	r3, r4, r2
 800a5d6:	50a7      	str	r7, [r4, r2]
 800a5d8:	b107      	cbz	r7, 800a5dc <rshift+0x68>
 800a5da:	3304      	adds	r3, #4
 800a5dc:	1b1a      	subs	r2, r3, r4
 800a5de:	42a3      	cmp	r3, r4
 800a5e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5e4:	bf08      	it	eq
 800a5e6:	2300      	moveq	r3, #0
 800a5e8:	6102      	str	r2, [r0, #16]
 800a5ea:	bf08      	it	eq
 800a5ec:	6143      	streq	r3, [r0, #20]
 800a5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	f8dc c000 	ldr.w	ip, [ip]
 800a5f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5fa:	ea4c 0707 	orr.w	r7, ip, r7
 800a5fe:	f849 7b04 	str.w	r7, [r9], #4
 800a602:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a606:	40cf      	lsrs	r7, r1
 800a608:	e7da      	b.n	800a5c0 <rshift+0x4c>
 800a60a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a60e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a612:	e7c3      	b.n	800a59c <rshift+0x28>
 800a614:	4623      	mov	r3, r4
 800a616:	e7e1      	b.n	800a5dc <rshift+0x68>

0800a618 <__hexdig_fun>:
 800a618:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a61c:	2b09      	cmp	r3, #9
 800a61e:	d802      	bhi.n	800a626 <__hexdig_fun+0xe>
 800a620:	3820      	subs	r0, #32
 800a622:	b2c0      	uxtb	r0, r0
 800a624:	4770      	bx	lr
 800a626:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d801      	bhi.n	800a632 <__hexdig_fun+0x1a>
 800a62e:	3847      	subs	r0, #71	@ 0x47
 800a630:	e7f7      	b.n	800a622 <__hexdig_fun+0xa>
 800a632:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a636:	2b05      	cmp	r3, #5
 800a638:	d801      	bhi.n	800a63e <__hexdig_fun+0x26>
 800a63a:	3827      	subs	r0, #39	@ 0x27
 800a63c:	e7f1      	b.n	800a622 <__hexdig_fun+0xa>
 800a63e:	2000      	movs	r0, #0
 800a640:	4770      	bx	lr
	...

0800a644 <__gethex>:
 800a644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	b085      	sub	sp, #20
 800a64a:	468a      	mov	sl, r1
 800a64c:	9302      	str	r3, [sp, #8]
 800a64e:	680b      	ldr	r3, [r1, #0]
 800a650:	9001      	str	r0, [sp, #4]
 800a652:	4690      	mov	r8, r2
 800a654:	1c9c      	adds	r4, r3, #2
 800a656:	46a1      	mov	r9, r4
 800a658:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a65c:	2830      	cmp	r0, #48	@ 0x30
 800a65e:	d0fa      	beq.n	800a656 <__gethex+0x12>
 800a660:	eba9 0303 	sub.w	r3, r9, r3
 800a664:	f1a3 0b02 	sub.w	fp, r3, #2
 800a668:	f7ff ffd6 	bl	800a618 <__hexdig_fun>
 800a66c:	4605      	mov	r5, r0
 800a66e:	2800      	cmp	r0, #0
 800a670:	d168      	bne.n	800a744 <__gethex+0x100>
 800a672:	49a0      	ldr	r1, [pc, #640]	@ (800a8f4 <__gethex+0x2b0>)
 800a674:	2201      	movs	r2, #1
 800a676:	4648      	mov	r0, r9
 800a678:	f7fd f8e0 	bl	800783c <strncmp>
 800a67c:	4607      	mov	r7, r0
 800a67e:	2800      	cmp	r0, #0
 800a680:	d167      	bne.n	800a752 <__gethex+0x10e>
 800a682:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a686:	4626      	mov	r6, r4
 800a688:	f7ff ffc6 	bl	800a618 <__hexdig_fun>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d062      	beq.n	800a756 <__gethex+0x112>
 800a690:	4623      	mov	r3, r4
 800a692:	7818      	ldrb	r0, [r3, #0]
 800a694:	2830      	cmp	r0, #48	@ 0x30
 800a696:	4699      	mov	r9, r3
 800a698:	f103 0301 	add.w	r3, r3, #1
 800a69c:	d0f9      	beq.n	800a692 <__gethex+0x4e>
 800a69e:	f7ff ffbb 	bl	800a618 <__hexdig_fun>
 800a6a2:	fab0 f580 	clz	r5, r0
 800a6a6:	096d      	lsrs	r5, r5, #5
 800a6a8:	f04f 0b01 	mov.w	fp, #1
 800a6ac:	464a      	mov	r2, r9
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	3201      	adds	r2, #1
 800a6b2:	7830      	ldrb	r0, [r6, #0]
 800a6b4:	f7ff ffb0 	bl	800a618 <__hexdig_fun>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1f8      	bne.n	800a6ae <__gethex+0x6a>
 800a6bc:	498d      	ldr	r1, [pc, #564]	@ (800a8f4 <__gethex+0x2b0>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7fd f8bb 	bl	800783c <strncmp>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d13f      	bne.n	800a74a <__gethex+0x106>
 800a6ca:	b944      	cbnz	r4, 800a6de <__gethex+0x9a>
 800a6cc:	1c74      	adds	r4, r6, #1
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	7830      	ldrb	r0, [r6, #0]
 800a6d6:	f7ff ff9f 	bl	800a618 <__hexdig_fun>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d1f8      	bne.n	800a6d0 <__gethex+0x8c>
 800a6de:	1ba4      	subs	r4, r4, r6
 800a6e0:	00a7      	lsls	r7, r4, #2
 800a6e2:	7833      	ldrb	r3, [r6, #0]
 800a6e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a6e8:	2b50      	cmp	r3, #80	@ 0x50
 800a6ea:	d13e      	bne.n	800a76a <__gethex+0x126>
 800a6ec:	7873      	ldrb	r3, [r6, #1]
 800a6ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800a6f0:	d033      	beq.n	800a75a <__gethex+0x116>
 800a6f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a6f4:	d034      	beq.n	800a760 <__gethex+0x11c>
 800a6f6:	1c71      	adds	r1, r6, #1
 800a6f8:	2400      	movs	r4, #0
 800a6fa:	7808      	ldrb	r0, [r1, #0]
 800a6fc:	f7ff ff8c 	bl	800a618 <__hexdig_fun>
 800a700:	1e43      	subs	r3, r0, #1
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b18      	cmp	r3, #24
 800a706:	d830      	bhi.n	800a76a <__gethex+0x126>
 800a708:	f1a0 0210 	sub.w	r2, r0, #16
 800a70c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a710:	f7ff ff82 	bl	800a618 <__hexdig_fun>
 800a714:	f100 3cff 	add.w	ip, r0, #4294967295
 800a718:	fa5f fc8c 	uxtb.w	ip, ip
 800a71c:	f1bc 0f18 	cmp.w	ip, #24
 800a720:	f04f 030a 	mov.w	r3, #10
 800a724:	d91e      	bls.n	800a764 <__gethex+0x120>
 800a726:	b104      	cbz	r4, 800a72a <__gethex+0xe6>
 800a728:	4252      	negs	r2, r2
 800a72a:	4417      	add	r7, r2
 800a72c:	f8ca 1000 	str.w	r1, [sl]
 800a730:	b1ed      	cbz	r5, 800a76e <__gethex+0x12a>
 800a732:	f1bb 0f00 	cmp.w	fp, #0
 800a736:	bf0c      	ite	eq
 800a738:	2506      	moveq	r5, #6
 800a73a:	2500      	movne	r5, #0
 800a73c:	4628      	mov	r0, r5
 800a73e:	b005      	add	sp, #20
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	2500      	movs	r5, #0
 800a746:	462c      	mov	r4, r5
 800a748:	e7b0      	b.n	800a6ac <__gethex+0x68>
 800a74a:	2c00      	cmp	r4, #0
 800a74c:	d1c7      	bne.n	800a6de <__gethex+0x9a>
 800a74e:	4627      	mov	r7, r4
 800a750:	e7c7      	b.n	800a6e2 <__gethex+0x9e>
 800a752:	464e      	mov	r6, r9
 800a754:	462f      	mov	r7, r5
 800a756:	2501      	movs	r5, #1
 800a758:	e7c3      	b.n	800a6e2 <__gethex+0x9e>
 800a75a:	2400      	movs	r4, #0
 800a75c:	1cb1      	adds	r1, r6, #2
 800a75e:	e7cc      	b.n	800a6fa <__gethex+0xb6>
 800a760:	2401      	movs	r4, #1
 800a762:	e7fb      	b.n	800a75c <__gethex+0x118>
 800a764:	fb03 0002 	mla	r0, r3, r2, r0
 800a768:	e7ce      	b.n	800a708 <__gethex+0xc4>
 800a76a:	4631      	mov	r1, r6
 800a76c:	e7de      	b.n	800a72c <__gethex+0xe8>
 800a76e:	eba6 0309 	sub.w	r3, r6, r9
 800a772:	3b01      	subs	r3, #1
 800a774:	4629      	mov	r1, r5
 800a776:	2b07      	cmp	r3, #7
 800a778:	dc0a      	bgt.n	800a790 <__gethex+0x14c>
 800a77a:	9801      	ldr	r0, [sp, #4]
 800a77c:	f7fd ff96 	bl	80086ac <_Balloc>
 800a780:	4604      	mov	r4, r0
 800a782:	b940      	cbnz	r0, 800a796 <__gethex+0x152>
 800a784:	4b5c      	ldr	r3, [pc, #368]	@ (800a8f8 <__gethex+0x2b4>)
 800a786:	4602      	mov	r2, r0
 800a788:	21e4      	movs	r1, #228	@ 0xe4
 800a78a:	485c      	ldr	r0, [pc, #368]	@ (800a8fc <__gethex+0x2b8>)
 800a78c:	f7ff fec0 	bl	800a510 <__assert_func>
 800a790:	3101      	adds	r1, #1
 800a792:	105b      	asrs	r3, r3, #1
 800a794:	e7ef      	b.n	800a776 <__gethex+0x132>
 800a796:	f100 0a14 	add.w	sl, r0, #20
 800a79a:	2300      	movs	r3, #0
 800a79c:	4655      	mov	r5, sl
 800a79e:	469b      	mov	fp, r3
 800a7a0:	45b1      	cmp	r9, r6
 800a7a2:	d337      	bcc.n	800a814 <__gethex+0x1d0>
 800a7a4:	f845 bb04 	str.w	fp, [r5], #4
 800a7a8:	eba5 050a 	sub.w	r5, r5, sl
 800a7ac:	10ad      	asrs	r5, r5, #2
 800a7ae:	6125      	str	r5, [r4, #16]
 800a7b0:	4658      	mov	r0, fp
 800a7b2:	f7fe f86d 	bl	8008890 <__hi0bits>
 800a7b6:	016d      	lsls	r5, r5, #5
 800a7b8:	f8d8 6000 	ldr.w	r6, [r8]
 800a7bc:	1a2d      	subs	r5, r5, r0
 800a7be:	42b5      	cmp	r5, r6
 800a7c0:	dd54      	ble.n	800a86c <__gethex+0x228>
 800a7c2:	1bad      	subs	r5, r5, r6
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7fe fc01 	bl	8008fce <__any_on>
 800a7cc:	4681      	mov	r9, r0
 800a7ce:	b178      	cbz	r0, 800a7f0 <__gethex+0x1ac>
 800a7d0:	1e6b      	subs	r3, r5, #1
 800a7d2:	1159      	asrs	r1, r3, #5
 800a7d4:	f003 021f 	and.w	r2, r3, #31
 800a7d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7dc:	f04f 0901 	mov.w	r9, #1
 800a7e0:	fa09 f202 	lsl.w	r2, r9, r2
 800a7e4:	420a      	tst	r2, r1
 800a7e6:	d003      	beq.n	800a7f0 <__gethex+0x1ac>
 800a7e8:	454b      	cmp	r3, r9
 800a7ea:	dc36      	bgt.n	800a85a <__gethex+0x216>
 800a7ec:	f04f 0902 	mov.w	r9, #2
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff febe 	bl	800a574 <rshift>
 800a7f8:	442f      	add	r7, r5
 800a7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7fe:	42bb      	cmp	r3, r7
 800a800:	da42      	bge.n	800a888 <__gethex+0x244>
 800a802:	9801      	ldr	r0, [sp, #4]
 800a804:	4621      	mov	r1, r4
 800a806:	f7fd ff91 	bl	800872c <_Bfree>
 800a80a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a80c:	2300      	movs	r3, #0
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	25a3      	movs	r5, #163	@ 0xa3
 800a812:	e793      	b.n	800a73c <__gethex+0xf8>
 800a814:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a818:	2a2e      	cmp	r2, #46	@ 0x2e
 800a81a:	d012      	beq.n	800a842 <__gethex+0x1fe>
 800a81c:	2b20      	cmp	r3, #32
 800a81e:	d104      	bne.n	800a82a <__gethex+0x1e6>
 800a820:	f845 bb04 	str.w	fp, [r5], #4
 800a824:	f04f 0b00 	mov.w	fp, #0
 800a828:	465b      	mov	r3, fp
 800a82a:	7830      	ldrb	r0, [r6, #0]
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	f7ff fef3 	bl	800a618 <__hexdig_fun>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	f000 000f 	and.w	r0, r0, #15
 800a838:	4098      	lsls	r0, r3
 800a83a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a83e:	3304      	adds	r3, #4
 800a840:	e7ae      	b.n	800a7a0 <__gethex+0x15c>
 800a842:	45b1      	cmp	r9, r6
 800a844:	d8ea      	bhi.n	800a81c <__gethex+0x1d8>
 800a846:	492b      	ldr	r1, [pc, #172]	@ (800a8f4 <__gethex+0x2b0>)
 800a848:	9303      	str	r3, [sp, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7fc fff5 	bl	800783c <strncmp>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	2800      	cmp	r0, #0
 800a856:	d1e1      	bne.n	800a81c <__gethex+0x1d8>
 800a858:	e7a2      	b.n	800a7a0 <__gethex+0x15c>
 800a85a:	1ea9      	subs	r1, r5, #2
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7fe fbb6 	bl	8008fce <__any_on>
 800a862:	2800      	cmp	r0, #0
 800a864:	d0c2      	beq.n	800a7ec <__gethex+0x1a8>
 800a866:	f04f 0903 	mov.w	r9, #3
 800a86a:	e7c1      	b.n	800a7f0 <__gethex+0x1ac>
 800a86c:	da09      	bge.n	800a882 <__gethex+0x23e>
 800a86e:	1b75      	subs	r5, r6, r5
 800a870:	4621      	mov	r1, r4
 800a872:	9801      	ldr	r0, [sp, #4]
 800a874:	462a      	mov	r2, r5
 800a876:	f7fe f971 	bl	8008b5c <__lshift>
 800a87a:	1b7f      	subs	r7, r7, r5
 800a87c:	4604      	mov	r4, r0
 800a87e:	f100 0a14 	add.w	sl, r0, #20
 800a882:	f04f 0900 	mov.w	r9, #0
 800a886:	e7b8      	b.n	800a7fa <__gethex+0x1b6>
 800a888:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a88c:	42bd      	cmp	r5, r7
 800a88e:	dd6f      	ble.n	800a970 <__gethex+0x32c>
 800a890:	1bed      	subs	r5, r5, r7
 800a892:	42ae      	cmp	r6, r5
 800a894:	dc34      	bgt.n	800a900 <__gethex+0x2bc>
 800a896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d022      	beq.n	800a8e4 <__gethex+0x2a0>
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d024      	beq.n	800a8ec <__gethex+0x2a8>
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d115      	bne.n	800a8d2 <__gethex+0x28e>
 800a8a6:	42ae      	cmp	r6, r5
 800a8a8:	d113      	bne.n	800a8d2 <__gethex+0x28e>
 800a8aa:	2e01      	cmp	r6, #1
 800a8ac:	d10b      	bne.n	800a8c6 <__gethex+0x282>
 800a8ae:	9a02      	ldr	r2, [sp, #8]
 800a8b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	f8ca 3000 	str.w	r3, [sl]
 800a8be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8c0:	2562      	movs	r5, #98	@ 0x62
 800a8c2:	601c      	str	r4, [r3, #0]
 800a8c4:	e73a      	b.n	800a73c <__gethex+0xf8>
 800a8c6:	1e71      	subs	r1, r6, #1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7fe fb80 	bl	8008fce <__any_on>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1ed      	bne.n	800a8ae <__gethex+0x26a>
 800a8d2:	9801      	ldr	r0, [sp, #4]
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	f7fd ff29 	bl	800872c <_Bfree>
 800a8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8dc:	2300      	movs	r3, #0
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	2550      	movs	r5, #80	@ 0x50
 800a8e2:	e72b      	b.n	800a73c <__gethex+0xf8>
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f3      	bne.n	800a8d2 <__gethex+0x28e>
 800a8ea:	e7e0      	b.n	800a8ae <__gethex+0x26a>
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1dd      	bne.n	800a8ae <__gethex+0x26a>
 800a8f2:	e7ee      	b.n	800a8d2 <__gethex+0x28e>
 800a8f4:	0800b208 	.word	0x0800b208
 800a8f8:	0800b0a1 	.word	0x0800b0a1
 800a8fc:	0800b3b6 	.word	0x0800b3b6
 800a900:	1e6f      	subs	r7, r5, #1
 800a902:	f1b9 0f00 	cmp.w	r9, #0
 800a906:	d130      	bne.n	800a96a <__gethex+0x326>
 800a908:	b127      	cbz	r7, 800a914 <__gethex+0x2d0>
 800a90a:	4639      	mov	r1, r7
 800a90c:	4620      	mov	r0, r4
 800a90e:	f7fe fb5e 	bl	8008fce <__any_on>
 800a912:	4681      	mov	r9, r0
 800a914:	117a      	asrs	r2, r7, #5
 800a916:	2301      	movs	r3, #1
 800a918:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a91c:	f007 071f 	and.w	r7, r7, #31
 800a920:	40bb      	lsls	r3, r7
 800a922:	4213      	tst	r3, r2
 800a924:	4629      	mov	r1, r5
 800a926:	4620      	mov	r0, r4
 800a928:	bf18      	it	ne
 800a92a:	f049 0902 	orrne.w	r9, r9, #2
 800a92e:	f7ff fe21 	bl	800a574 <rshift>
 800a932:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a936:	1b76      	subs	r6, r6, r5
 800a938:	2502      	movs	r5, #2
 800a93a:	f1b9 0f00 	cmp.w	r9, #0
 800a93e:	d047      	beq.n	800a9d0 <__gethex+0x38c>
 800a940:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d015      	beq.n	800a974 <__gethex+0x330>
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d017      	beq.n	800a97c <__gethex+0x338>
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d109      	bne.n	800a964 <__gethex+0x320>
 800a950:	f019 0f02 	tst.w	r9, #2
 800a954:	d006      	beq.n	800a964 <__gethex+0x320>
 800a956:	f8da 3000 	ldr.w	r3, [sl]
 800a95a:	ea49 0903 	orr.w	r9, r9, r3
 800a95e:	f019 0f01 	tst.w	r9, #1
 800a962:	d10e      	bne.n	800a982 <__gethex+0x33e>
 800a964:	f045 0510 	orr.w	r5, r5, #16
 800a968:	e032      	b.n	800a9d0 <__gethex+0x38c>
 800a96a:	f04f 0901 	mov.w	r9, #1
 800a96e:	e7d1      	b.n	800a914 <__gethex+0x2d0>
 800a970:	2501      	movs	r5, #1
 800a972:	e7e2      	b.n	800a93a <__gethex+0x2f6>
 800a974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a976:	f1c3 0301 	rsb	r3, r3, #1
 800a97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0f0      	beq.n	800a964 <__gethex+0x320>
 800a982:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a986:	f104 0314 	add.w	r3, r4, #20
 800a98a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a98e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a992:	f04f 0c00 	mov.w	ip, #0
 800a996:	4618      	mov	r0, r3
 800a998:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9a0:	d01b      	beq.n	800a9da <__gethex+0x396>
 800a9a2:	3201      	adds	r2, #1
 800a9a4:	6002      	str	r2, [r0, #0]
 800a9a6:	2d02      	cmp	r5, #2
 800a9a8:	f104 0314 	add.w	r3, r4, #20
 800a9ac:	d13c      	bne.n	800aa28 <__gethex+0x3e4>
 800a9ae:	f8d8 2000 	ldr.w	r2, [r8]
 800a9b2:	3a01      	subs	r2, #1
 800a9b4:	42b2      	cmp	r2, r6
 800a9b6:	d109      	bne.n	800a9cc <__gethex+0x388>
 800a9b8:	1171      	asrs	r1, r6, #5
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9c0:	f006 061f 	and.w	r6, r6, #31
 800a9c4:	fa02 f606 	lsl.w	r6, r2, r6
 800a9c8:	421e      	tst	r6, r3
 800a9ca:	d13a      	bne.n	800aa42 <__gethex+0x3fe>
 800a9cc:	f045 0520 	orr.w	r5, r5, #32
 800a9d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9d2:	601c      	str	r4, [r3, #0]
 800a9d4:	9b02      	ldr	r3, [sp, #8]
 800a9d6:	601f      	str	r7, [r3, #0]
 800a9d8:	e6b0      	b.n	800a73c <__gethex+0xf8>
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9e0:	d8d9      	bhi.n	800a996 <__gethex+0x352>
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	459b      	cmp	fp, r3
 800a9e6:	db17      	blt.n	800aa18 <__gethex+0x3d4>
 800a9e8:	6861      	ldr	r1, [r4, #4]
 800a9ea:	9801      	ldr	r0, [sp, #4]
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	f7fd fe5d 	bl	80086ac <_Balloc>
 800a9f2:	4681      	mov	r9, r0
 800a9f4:	b918      	cbnz	r0, 800a9fe <__gethex+0x3ba>
 800a9f6:	4b1a      	ldr	r3, [pc, #104]	@ (800aa60 <__gethex+0x41c>)
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	2184      	movs	r1, #132	@ 0x84
 800a9fc:	e6c5      	b.n	800a78a <__gethex+0x146>
 800a9fe:	6922      	ldr	r2, [r4, #16]
 800aa00:	3202      	adds	r2, #2
 800aa02:	f104 010c 	add.w	r1, r4, #12
 800aa06:	0092      	lsls	r2, r2, #2
 800aa08:	300c      	adds	r0, #12
 800aa0a:	f7ff fd6b 	bl	800a4e4 <memcpy>
 800aa0e:	4621      	mov	r1, r4
 800aa10:	9801      	ldr	r0, [sp, #4]
 800aa12:	f7fd fe8b 	bl	800872c <_Bfree>
 800aa16:	464c      	mov	r4, r9
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa20:	6122      	str	r2, [r4, #16]
 800aa22:	2201      	movs	r2, #1
 800aa24:	615a      	str	r2, [r3, #20]
 800aa26:	e7be      	b.n	800a9a6 <__gethex+0x362>
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	455a      	cmp	r2, fp
 800aa2c:	dd0b      	ble.n	800aa46 <__gethex+0x402>
 800aa2e:	2101      	movs	r1, #1
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7ff fd9f 	bl	800a574 <rshift>
 800aa36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa3a:	3701      	adds	r7, #1
 800aa3c:	42bb      	cmp	r3, r7
 800aa3e:	f6ff aee0 	blt.w	800a802 <__gethex+0x1be>
 800aa42:	2501      	movs	r5, #1
 800aa44:	e7c2      	b.n	800a9cc <__gethex+0x388>
 800aa46:	f016 061f 	ands.w	r6, r6, #31
 800aa4a:	d0fa      	beq.n	800aa42 <__gethex+0x3fe>
 800aa4c:	4453      	add	r3, sl
 800aa4e:	f1c6 0620 	rsb	r6, r6, #32
 800aa52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa56:	f7fd ff1b 	bl	8008890 <__hi0bits>
 800aa5a:	42b0      	cmp	r0, r6
 800aa5c:	dbe7      	blt.n	800aa2e <__gethex+0x3ea>
 800aa5e:	e7f0      	b.n	800aa42 <__gethex+0x3fe>
 800aa60:	0800b0a1 	.word	0x0800b0a1

0800aa64 <L_shift>:
 800aa64:	f1c2 0208 	rsb	r2, r2, #8
 800aa68:	0092      	lsls	r2, r2, #2
 800aa6a:	b570      	push	{r4, r5, r6, lr}
 800aa6c:	f1c2 0620 	rsb	r6, r2, #32
 800aa70:	6843      	ldr	r3, [r0, #4]
 800aa72:	6804      	ldr	r4, [r0, #0]
 800aa74:	fa03 f506 	lsl.w	r5, r3, r6
 800aa78:	432c      	orrs	r4, r5
 800aa7a:	40d3      	lsrs	r3, r2
 800aa7c:	6004      	str	r4, [r0, #0]
 800aa7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa82:	4288      	cmp	r0, r1
 800aa84:	d3f4      	bcc.n	800aa70 <L_shift+0xc>
 800aa86:	bd70      	pop	{r4, r5, r6, pc}

0800aa88 <__match>:
 800aa88:	b530      	push	{r4, r5, lr}
 800aa8a:	6803      	ldr	r3, [r0, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa92:	b914      	cbnz	r4, 800aa9a <__match+0x12>
 800aa94:	6003      	str	r3, [r0, #0]
 800aa96:	2001      	movs	r0, #1
 800aa98:	bd30      	pop	{r4, r5, pc}
 800aa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aaa2:	2d19      	cmp	r5, #25
 800aaa4:	bf98      	it	ls
 800aaa6:	3220      	addls	r2, #32
 800aaa8:	42a2      	cmp	r2, r4
 800aaaa:	d0f0      	beq.n	800aa8e <__match+0x6>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7f3      	b.n	800aa98 <__match+0x10>

0800aab0 <__hexnan>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	680b      	ldr	r3, [r1, #0]
 800aab6:	6801      	ldr	r1, [r0, #0]
 800aab8:	115e      	asrs	r6, r3, #5
 800aaba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aabe:	f013 031f 	ands.w	r3, r3, #31
 800aac2:	b087      	sub	sp, #28
 800aac4:	bf18      	it	ne
 800aac6:	3604      	addne	r6, #4
 800aac8:	2500      	movs	r5, #0
 800aaca:	1f37      	subs	r7, r6, #4
 800aacc:	4682      	mov	sl, r0
 800aace:	4690      	mov	r8, r2
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aad6:	46b9      	mov	r9, r7
 800aad8:	463c      	mov	r4, r7
 800aada:	9502      	str	r5, [sp, #8]
 800aadc:	46ab      	mov	fp, r5
 800aade:	784a      	ldrb	r2, [r1, #1]
 800aae0:	1c4b      	adds	r3, r1, #1
 800aae2:	9303      	str	r3, [sp, #12]
 800aae4:	b342      	cbz	r2, 800ab38 <__hexnan+0x88>
 800aae6:	4610      	mov	r0, r2
 800aae8:	9105      	str	r1, [sp, #20]
 800aaea:	9204      	str	r2, [sp, #16]
 800aaec:	f7ff fd94 	bl	800a618 <__hexdig_fun>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d151      	bne.n	800ab98 <__hexnan+0xe8>
 800aaf4:	9a04      	ldr	r2, [sp, #16]
 800aaf6:	9905      	ldr	r1, [sp, #20]
 800aaf8:	2a20      	cmp	r2, #32
 800aafa:	d818      	bhi.n	800ab2e <__hexnan+0x7e>
 800aafc:	9b02      	ldr	r3, [sp, #8]
 800aafe:	459b      	cmp	fp, r3
 800ab00:	dd13      	ble.n	800ab2a <__hexnan+0x7a>
 800ab02:	454c      	cmp	r4, r9
 800ab04:	d206      	bcs.n	800ab14 <__hexnan+0x64>
 800ab06:	2d07      	cmp	r5, #7
 800ab08:	dc04      	bgt.n	800ab14 <__hexnan+0x64>
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7ff ffa8 	bl	800aa64 <L_shift>
 800ab14:	4544      	cmp	r4, r8
 800ab16:	d952      	bls.n	800abbe <__hexnan+0x10e>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab22:	f8cd b008 	str.w	fp, [sp, #8]
 800ab26:	464c      	mov	r4, r9
 800ab28:	461d      	mov	r5, r3
 800ab2a:	9903      	ldr	r1, [sp, #12]
 800ab2c:	e7d7      	b.n	800aade <__hexnan+0x2e>
 800ab2e:	2a29      	cmp	r2, #41	@ 0x29
 800ab30:	d157      	bne.n	800abe2 <__hexnan+0x132>
 800ab32:	3102      	adds	r1, #2
 800ab34:	f8ca 1000 	str.w	r1, [sl]
 800ab38:	f1bb 0f00 	cmp.w	fp, #0
 800ab3c:	d051      	beq.n	800abe2 <__hexnan+0x132>
 800ab3e:	454c      	cmp	r4, r9
 800ab40:	d206      	bcs.n	800ab50 <__hexnan+0xa0>
 800ab42:	2d07      	cmp	r5, #7
 800ab44:	dc04      	bgt.n	800ab50 <__hexnan+0xa0>
 800ab46:	462a      	mov	r2, r5
 800ab48:	4649      	mov	r1, r9
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7ff ff8a 	bl	800aa64 <L_shift>
 800ab50:	4544      	cmp	r4, r8
 800ab52:	d936      	bls.n	800abc2 <__hexnan+0x112>
 800ab54:	f1a8 0204 	sub.w	r2, r8, #4
 800ab58:	4623      	mov	r3, r4
 800ab5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab62:	429f      	cmp	r7, r3
 800ab64:	d2f9      	bcs.n	800ab5a <__hexnan+0xaa>
 800ab66:	1b3b      	subs	r3, r7, r4
 800ab68:	f023 0303 	bic.w	r3, r3, #3
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	3401      	adds	r4, #1
 800ab70:	3e03      	subs	r6, #3
 800ab72:	42b4      	cmp	r4, r6
 800ab74:	bf88      	it	hi
 800ab76:	2304      	movhi	r3, #4
 800ab78:	4443      	add	r3, r8
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f843 2b04 	str.w	r2, [r3], #4
 800ab80:	429f      	cmp	r7, r3
 800ab82:	d2fb      	bcs.n	800ab7c <__hexnan+0xcc>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	b91b      	cbnz	r3, 800ab90 <__hexnan+0xe0>
 800ab88:	4547      	cmp	r7, r8
 800ab8a:	d128      	bne.n	800abde <__hexnan+0x12e>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	2005      	movs	r0, #5
 800ab92:	b007      	add	sp, #28
 800ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab98:	3501      	adds	r5, #1
 800ab9a:	2d08      	cmp	r5, #8
 800ab9c:	f10b 0b01 	add.w	fp, fp, #1
 800aba0:	dd06      	ble.n	800abb0 <__hexnan+0x100>
 800aba2:	4544      	cmp	r4, r8
 800aba4:	d9c1      	bls.n	800ab2a <__hexnan+0x7a>
 800aba6:	2300      	movs	r3, #0
 800aba8:	f844 3c04 	str.w	r3, [r4, #-4]
 800abac:	2501      	movs	r5, #1
 800abae:	3c04      	subs	r4, #4
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	f000 000f 	and.w	r0, r0, #15
 800abb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abba:	6020      	str	r0, [r4, #0]
 800abbc:	e7b5      	b.n	800ab2a <__hexnan+0x7a>
 800abbe:	2508      	movs	r5, #8
 800abc0:	e7b3      	b.n	800ab2a <__hexnan+0x7a>
 800abc2:	9b01      	ldr	r3, [sp, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0dd      	beq.n	800ab84 <__hexnan+0xd4>
 800abc8:	f1c3 0320 	rsb	r3, r3, #32
 800abcc:	f04f 32ff 	mov.w	r2, #4294967295
 800abd0:	40da      	lsrs	r2, r3
 800abd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abd6:	4013      	ands	r3, r2
 800abd8:	f846 3c04 	str.w	r3, [r6, #-4]
 800abdc:	e7d2      	b.n	800ab84 <__hexnan+0xd4>
 800abde:	3f04      	subs	r7, #4
 800abe0:	e7d0      	b.n	800ab84 <__hexnan+0xd4>
 800abe2:	2004      	movs	r0, #4
 800abe4:	e7d5      	b.n	800ab92 <__hexnan+0xe2>

0800abe6 <__ascii_mbtowc>:
 800abe6:	b082      	sub	sp, #8
 800abe8:	b901      	cbnz	r1, 800abec <__ascii_mbtowc+0x6>
 800abea:	a901      	add	r1, sp, #4
 800abec:	b142      	cbz	r2, 800ac00 <__ascii_mbtowc+0x1a>
 800abee:	b14b      	cbz	r3, 800ac04 <__ascii_mbtowc+0x1e>
 800abf0:	7813      	ldrb	r3, [r2, #0]
 800abf2:	600b      	str	r3, [r1, #0]
 800abf4:	7812      	ldrb	r2, [r2, #0]
 800abf6:	1e10      	subs	r0, r2, #0
 800abf8:	bf18      	it	ne
 800abfa:	2001      	movne	r0, #1
 800abfc:	b002      	add	sp, #8
 800abfe:	4770      	bx	lr
 800ac00:	4610      	mov	r0, r2
 800ac02:	e7fb      	b.n	800abfc <__ascii_mbtowc+0x16>
 800ac04:	f06f 0001 	mvn.w	r0, #1
 800ac08:	e7f8      	b.n	800abfc <__ascii_mbtowc+0x16>

0800ac0a <_realloc_r>:
 800ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4615      	mov	r5, r2
 800ac12:	460c      	mov	r4, r1
 800ac14:	b921      	cbnz	r1, 800ac20 <_realloc_r+0x16>
 800ac16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	f7fb bcb0 	b.w	8006580 <_malloc_r>
 800ac20:	b92a      	cbnz	r2, 800ac2e <_realloc_r+0x24>
 800ac22:	f7fd fcf9 	bl	8008618 <_free_r>
 800ac26:	2400      	movs	r4, #0
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2e:	f000 f840 	bl	800acb2 <_malloc_usable_size_r>
 800ac32:	4285      	cmp	r5, r0
 800ac34:	4606      	mov	r6, r0
 800ac36:	d802      	bhi.n	800ac3e <_realloc_r+0x34>
 800ac38:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac3c:	d8f4      	bhi.n	800ac28 <_realloc_r+0x1e>
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4640      	mov	r0, r8
 800ac42:	f7fb fc9d 	bl	8006580 <_malloc_r>
 800ac46:	4607      	mov	r7, r0
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d0ec      	beq.n	800ac26 <_realloc_r+0x1c>
 800ac4c:	42b5      	cmp	r5, r6
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4621      	mov	r1, r4
 800ac52:	bf28      	it	cs
 800ac54:	4632      	movcs	r2, r6
 800ac56:	f7ff fc45 	bl	800a4e4 <memcpy>
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4640      	mov	r0, r8
 800ac5e:	f7fd fcdb 	bl	8008618 <_free_r>
 800ac62:	463c      	mov	r4, r7
 800ac64:	e7e0      	b.n	800ac28 <_realloc_r+0x1e>

0800ac66 <__ascii_wctomb>:
 800ac66:	4603      	mov	r3, r0
 800ac68:	4608      	mov	r0, r1
 800ac6a:	b141      	cbz	r1, 800ac7e <__ascii_wctomb+0x18>
 800ac6c:	2aff      	cmp	r2, #255	@ 0xff
 800ac6e:	d904      	bls.n	800ac7a <__ascii_wctomb+0x14>
 800ac70:	228a      	movs	r2, #138	@ 0x8a
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	4770      	bx	lr
 800ac7a:	700a      	strb	r2, [r1, #0]
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	4770      	bx	lr

0800ac80 <fiprintf>:
 800ac80:	b40e      	push	{r1, r2, r3}
 800ac82:	b503      	push	{r0, r1, lr}
 800ac84:	4601      	mov	r1, r0
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	4805      	ldr	r0, [pc, #20]	@ (800aca0 <fiprintf+0x20>)
 800ac8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8e:	6800      	ldr	r0, [r0, #0]
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	f7ff f9c5 	bl	800a020 <_vfiprintf_r>
 800ac96:	b002      	add	sp, #8
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b003      	add	sp, #12
 800ac9e:	4770      	bx	lr
 800aca0:	20000018 	.word	0x20000018

0800aca4 <abort>:
 800aca4:	b508      	push	{r3, lr}
 800aca6:	2006      	movs	r0, #6
 800aca8:	f000 f834 	bl	800ad14 <raise>
 800acac:	2001      	movs	r0, #1
 800acae:	f7f7 fc01 	bl	80024b4 <_exit>

0800acb2 <_malloc_usable_size_r>:
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	1f18      	subs	r0, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bfbc      	itt	lt
 800acbc:	580b      	ldrlt	r3, [r1, r0]
 800acbe:	18c0      	addlt	r0, r0, r3
 800acc0:	4770      	bx	lr

0800acc2 <_raise_r>:
 800acc2:	291f      	cmp	r1, #31
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4605      	mov	r5, r0
 800acc8:	460c      	mov	r4, r1
 800acca:	d904      	bls.n	800acd6 <_raise_r+0x14>
 800accc:	2316      	movs	r3, #22
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acd8:	b112      	cbz	r2, 800ace0 <_raise_r+0x1e>
 800acda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acde:	b94b      	cbnz	r3, 800acf4 <_raise_r+0x32>
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f831 	bl	800ad48 <_getpid_r>
 800ace6:	4622      	mov	r2, r4
 800ace8:	4601      	mov	r1, r0
 800acea:	4628      	mov	r0, r5
 800acec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf0:	f000 b818 	b.w	800ad24 <_kill_r>
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d00a      	beq.n	800ad0e <_raise_r+0x4c>
 800acf8:	1c59      	adds	r1, r3, #1
 800acfa:	d103      	bne.n	800ad04 <_raise_r+0x42>
 800acfc:	2316      	movs	r3, #22
 800acfe:	6003      	str	r3, [r0, #0]
 800ad00:	2001      	movs	r0, #1
 800ad02:	e7e7      	b.n	800acd4 <_raise_r+0x12>
 800ad04:	2100      	movs	r1, #0
 800ad06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4798      	blx	r3
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e7e0      	b.n	800acd4 <_raise_r+0x12>
	...

0800ad14 <raise>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	@ (800ad20 <raise+0xc>)
 800ad16:	4601      	mov	r1, r0
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f7ff bfd2 	b.w	800acc2 <_raise_r>
 800ad1e:	bf00      	nop
 800ad20:	20000018 	.word	0x20000018

0800ad24 <_kill_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	@ (800ad44 <_kill_r+0x20>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	4611      	mov	r1, r2
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	f7f7 fbaf 	bl	8002494 <_kill>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d102      	bne.n	800ad40 <_kill_r+0x1c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	b103      	cbz	r3, 800ad40 <_kill_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	200004b0 	.word	0x200004b0

0800ad48 <_getpid_r>:
 800ad48:	f7f7 bb9c 	b.w	8002484 <_getpid>

0800ad4c <_init>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	bf00      	nop
 800ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad52:	bc08      	pop	{r3}
 800ad54:	469e      	mov	lr, r3
 800ad56:	4770      	bx	lr

0800ad58 <_fini>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr
