
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080071a4  080071a4  000081a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007398  08007398  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007398  08007398  00008398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a0  080073a0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a0  080073a0  000083a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080073a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08007410  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007410  00009308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e74e  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232b  00000000  00000000  000177e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00019b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d1  00000000  00000000  0001a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023019  00000000  00000000  0001b189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b7a  00000000  00000000  0003e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa3f  00000000  00000000  0004ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e75b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  0011e7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001225a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800718c 	.word	0x0800718c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800718c 	.word	0x0800718c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0a:	f000 b9b5 	b.w	8000e78 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96a 	b.w	8000e78 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14e      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	458c      	cmp	ip, r1
 8000bcc:	4686      	mov	lr, r0
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	d962      	bls.n	8000c9a <__udivmoddi4+0xde>
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	4319      	orrs	r1, r3
 8000be6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bee:	fa1f f68c 	uxth.w	r6, ip
 8000bf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb04 f106 	mul.w	r1, r4, r6
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c12:	f080 8112 	bcs.w	8000e3a <__udivmoddi4+0x27e>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 810f 	bls.w	8000e3a <__udivmoddi4+0x27e>
 8000c1c:	3c02      	subs	r4, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb00 f606 	mul.w	r6, r0, r6
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x94>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c42:	f080 80fc 	bcs.w	8000e3e <__udivmoddi4+0x282>
 8000c46:	429e      	cmp	r6, r3
 8000c48:	f240 80f9 	bls.w	8000e3e <__udivmoddi4+0x282>
 8000c4c:	4463      	add	r3, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	1b9b      	subs	r3, r3, r6
 8000c52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11d      	cbz	r5, 8000c62 <__udivmoddi4+0xa6>
 8000c5a:	40d3      	lsrs	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d905      	bls.n	8000c76 <__udivmoddi4+0xba>
 8000c6a:	b10d      	cbz	r5, 8000c70 <__udivmoddi4+0xb4>
 8000c6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4608      	mov	r0, r1
 8000c74:	e7f5      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c76:	fab3 f183 	clz	r1, r3
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	d146      	bne.n	8000d0c <__udivmoddi4+0x150>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xcc>
 8000c82:	4290      	cmp	r0, r2
 8000c84:	f0c0 80f0 	bcc.w	8000e68 <__udivmoddi4+0x2ac>
 8000c88:	1a86      	subs	r6, r0, r2
 8000c8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d0e6      	beq.n	8000c62 <__udivmoddi4+0xa6>
 8000c94:	e9c5 6300 	strd	r6, r3, [r5]
 8000c98:	e7e3      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x204>
 8000ca0:	eba1 040c 	sub.w	r4, r1, ip
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa1f f78c 	uxth.w	r7, ip
 8000cac:	2101      	movs	r1, #1
 8000cae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cbe:	fb07 f006 	mul.w	r0, r7, r6
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x11c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x11a>
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	f200 80cd 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000cd6:	4626      	mov	r6, r4
 8000cd8:	1a1c      	subs	r4, r3, r0
 8000cda:	fa1f f38e 	uxth.w	r3, lr
 8000cde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb00 f707 	mul.w	r7, r0, r7
 8000cee:	429f      	cmp	r7, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x148>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x146>
 8000cfc:	429f      	cmp	r7, r3
 8000cfe:	f200 80b0 	bhi.w	8000e62 <__udivmoddi4+0x2a6>
 8000d02:	4620      	mov	r0, r4
 8000d04:	1bdb      	subs	r3, r3, r7
 8000d06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0x9c>
 8000d0c:	f1c1 0620 	rsb	r6, r1, #32
 8000d10:	408b      	lsls	r3, r1
 8000d12:	fa22 f706 	lsr.w	r7, r2, r6
 8000d16:	431f      	orrs	r7, r3
 8000d18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d20:	ea43 030c 	orr.w	r3, r3, ip
 8000d24:	40f4      	lsrs	r4, r6
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	0c38      	lsrs	r0, r7, #16
 8000d2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d30:	fbb4 fef0 	udiv	lr, r4, r0
 8000d34:	fa1f fc87 	uxth.w	ip, r7
 8000d38:	fb00 441e 	mls	r4, r0, lr, r4
 8000d3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d40:	fb0e f90c 	mul.w	r9, lr, ip
 8000d44:	45a1      	cmp	r9, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x1a6>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d52:	f080 8084 	bcs.w	8000e5e <__udivmoddi4+0x2a2>
 8000d56:	45a1      	cmp	r9, r4
 8000d58:	f240 8081 	bls.w	8000e5e <__udivmoddi4+0x2a2>
 8000d5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	eba4 0409 	sub.w	r4, r4, r9
 8000d66:	fa1f f983 	uxth.w	r9, r3
 8000d6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x1d2>
 8000d7e:	193c      	adds	r4, r7, r4
 8000d80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d84:	d267      	bcs.n	8000e56 <__udivmoddi4+0x29a>
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0x29a>
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d92:	fba0 9302 	umull	r9, r3, r0, r2
 8000d96:	eba4 040c 	sub.w	r4, r4, ip
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	46ce      	mov	lr, r9
 8000d9e:	469c      	mov	ip, r3
 8000da0:	d351      	bcc.n	8000e46 <__udivmoddi4+0x28a>
 8000da2:	d04e      	beq.n	8000e42 <__udivmoddi4+0x286>
 8000da4:	b155      	cbz	r5, 8000dbc <__udivmoddi4+0x200>
 8000da6:	ebb8 030e 	subs.w	r3, r8, lr
 8000daa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dae:	fa04 f606 	lsl.w	r6, r4, r6
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	431e      	orrs	r6, r3
 8000db6:	40cc      	lsrs	r4, r1
 8000db8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	e750      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ddc:	fa1f f78c 	uxth.w	r7, ip
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3110 	mls	r1, r8, r0, r3
 8000de8:	0c23      	lsrs	r3, r4, #16
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f107 	mul.w	r1, r0, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x24c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfe:	d22c      	bcs.n	8000e5a <__udivmoddi4+0x29e>
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d92a      	bls.n	8000e5a <__udivmoddi4+0x29e>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e10:	fb08 3311 	mls	r3, r8, r1, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb01 f307 	mul.w	r3, r1, r7
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x276>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e28:	d213      	bcs.n	8000e52 <__udivmoddi4+0x296>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d911      	bls.n	8000e52 <__udivmoddi4+0x296>
 8000e2e:	3902      	subs	r1, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	1ae4      	subs	r4, r4, r3
 8000e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e38:	e739      	b.n	8000cae <__udivmoddi4+0xf2>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	e6f0      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e706      	b.n	8000c50 <__udivmoddi4+0x94>
 8000e42:	45c8      	cmp	r8, r9
 8000e44:	d2ae      	bcs.n	8000da4 <__udivmoddi4+0x1e8>
 8000e46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7a8      	b.n	8000da4 <__udivmoddi4+0x1e8>
 8000e52:	4631      	mov	r1, r6
 8000e54:	e7ed      	b.n	8000e32 <__udivmoddi4+0x276>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e799      	b.n	8000d8e <__udivmoddi4+0x1d2>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e7d4      	b.n	8000e08 <__udivmoddi4+0x24c>
 8000e5e:	46d6      	mov	lr, sl
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1a6>
 8000e62:	4463      	add	r3, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	e74d      	b.n	8000d04 <__udivmoddi4+0x148>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e70f      	b.n	8000c90 <__udivmoddi4+0xd4>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	e730      	b.n	8000cd8 <__udivmoddi4+0x11c>
 8000e76:	bf00      	nop

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <BMP280_get_trimming>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

void BMP280_get_trimming() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af04      	add	r7, sp, #16
	uint8_t calib_data[24];
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, 1, calib_data, 24, HAL_MAX_DELAY);
 8000e82:	23ee      	movs	r3, #238	@ 0xee
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2318      	movs	r3, #24
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	463b      	mov	r3, r7
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2288      	movs	r2, #136	@ 0x88
 8000e98:	483b      	ldr	r0, [pc, #236]	@ (8000f88 <BMP280_get_trimming+0x10c>)
 8000e9a:	f002 fc5b 	bl	8003754 <HAL_I2C_Mem_Read>

	dig_T1 = (calib_data[1] << 8) | calib_data[0];
 8000e9e:	787b      	ldrb	r3, [r7, #1]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	783b      	ldrb	r3, [r7, #0]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <BMP280_get_trimming+0x110>)
 8000eb0:	801a      	strh	r2, [r3, #0]
	dig_T2 = (calib_data[3] << 8) | calib_data[2];
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	78bb      	ldrb	r3, [r7, #2]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b33      	ldr	r3, [pc, #204]	@ (8000f90 <BMP280_get_trimming+0x114>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8000ec4:	797b      	ldrb	r3, [r7, #5]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	793b      	ldrb	r3, [r7, #4]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <BMP280_get_trimming+0x118>)
 8000ed4:	801a      	strh	r2, [r3, #0]

	dig_P1 = (calib_data[7] << 8) | calib_data[6];
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <BMP280_get_trimming+0x11c>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8000eea:	7a7b      	ldrb	r3, [r7, #9]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	7a3b      	ldrb	r3, [r7, #8]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <BMP280_get_trimming+0x120>)
 8000efa:	801a      	strh	r2, [r3, #0]
	dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8000efc:	7afb      	ldrb	r3, [r7, #11]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	4b25      	ldr	r3, [pc, #148]	@ (8000fa0 <BMP280_get_trimming+0x124>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	dig_P4 = (calib_data[13] << 8) | calib_data[12];
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	7b3b      	ldrb	r3, [r7, #12]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <BMP280_get_trimming+0x128>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	dig_P5 = (calib_data[15] << 8) | calib_data[14];
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <BMP280_get_trimming+0x12c>)
 8000f30:	801a      	strh	r2, [r3, #0]
	dig_P6 = (calib_data[17] << 8) | calib_data[16];
 8000f32:	7c7b      	ldrb	r3, [r7, #17]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7c3b      	ldrb	r3, [r7, #16]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <BMP280_get_trimming+0x130>)
 8000f42:	801a      	strh	r2, [r3, #0]
	dig_P7 = (calib_data[19] << 8) | calib_data[18];
 8000f44:	7cfb      	ldrb	r3, [r7, #19]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7cbb      	ldrb	r3, [r7, #18]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <BMP280_get_trimming+0x134>)
 8000f54:	801a      	strh	r2, [r3, #0]
	dig_P8 = (calib_data[21] << 8) | calib_data[20];
 8000f56:	7d7b      	ldrb	r3, [r7, #21]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7d3b      	ldrb	r3, [r7, #20]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <BMP280_get_trimming+0x138>)
 8000f66:	801a      	strh	r2, [r3, #0]
	dig_P9 = (calib_data[23] << 8) | calib_data[22];
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <BMP280_get_trimming+0x13c>)
 8000f78:	801a      	strh	r2, [r3, #0]

	printf("Calibration parameters read successfully.\n");
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <BMP280_get_trimming+0x140>)
 8000f7c:	f005 fb50 	bl	8006620 <puts>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000c8 	.word	0x200000c8
 8000f8c:	20000084 	.word	0x20000084
 8000f90:	20000086 	.word	0x20000086
 8000f94:	20000088 	.word	0x20000088
 8000f98:	2000008a 	.word	0x2000008a
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	2000008e 	.word	0x2000008e
 8000fa4:	20000090 	.word	0x20000090
 8000fa8:	20000092 	.word	0x20000092
 8000fac:	20000094 	.word	0x20000094
 8000fb0:	20000096 	.word	0x20000096
 8000fb4:	20000098 	.word	0x20000098
 8000fb8:	2000009a 	.word	0x2000009a
 8000fbc:	080071a4 	.word	0x080071a4

08000fc0 <BMP280_check>:


int BMP280_check() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8000fc6:	23d0      	movs	r3, #208	@ 0xd0
 8000fc8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fca:	23ee      	movs	r3, #238	@ 0xee
 8000fcc:	4619      	mov	r1, r3
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	481a      	ldr	r0, [pc, #104]	@ (8001044 <BMP280_check+0x84>)
 8000fda:	f001 ff91 	bl	8002f00 <HAL_I2C_Master_Transmit>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8000fe8:	4817      	ldr	r0, [pc, #92]	@ (8001048 <BMP280_check+0x88>)
 8000fea:	f005 fb19 	bl	8006620 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 8000fee:	23ee      	movs	r3, #238	@ 0xee
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	1d3a      	adds	r2, r7, #4
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4603      	mov	r3, r0
 8001000:	4810      	ldr	r0, [pc, #64]	@ (8001044 <BMP280_check+0x84>)
 8001002:	f002 f87b 	bl	80030fc <HAL_I2C_Master_Receive>
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 8001010:	480e      	ldr	r0, [pc, #56]	@ (800104c <BMP280_check+0x8c>)
 8001012:	f005 fb05 	bl	8006620 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_check+0x90>)
 800101c:	f005 fa98 	bl	8006550 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	2258      	movs	r2, #88	@ 0x58
 8001024:	4293      	cmp	r3, r2
 8001026:	d104      	bne.n	8001032 <BMP280_check+0x72>
		printf("Ok\r\n");
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <BMP280_check+0x94>)
 800102a:	f005 faf9 	bl	8006620 <puts>
		return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e003      	b.n	800103a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8001032:	4809      	ldr	r0, [pc, #36]	@ (8001058 <BMP280_check+0x98>)
 8001034:	f005 faf4 	bl	8006620 <puts>
		return 1;
 8001038:	2301      	movs	r3, #1
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000c8 	.word	0x200000c8
 8001048:	080071d0 	.word	0x080071d0
 800104c:	080071f4 	.word	0x080071f4
 8001050:	08007218 	.word	0x08007218
 8001054:	08007224 	.word	0x08007224
 8001058:	08007228 	.word	0x08007228

0800105c <BMP280_init>:

int BMP280_init() {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8001062:	2357      	movs	r3, #87	@ 0x57
 8001064:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <BMP280_init+0x44>)
 8001068:	f005 fada 	bl	8006620 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800106c:	22f4      	movs	r2, #244	@ 0xf4
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f000 f81a 	bl	80010ac <BMP280_Write_Reg>
 8001078:	4603      	mov	r3, r0
 800107a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d106      	bne.n	8001090 <BMP280_init+0x34>
		printf("Config Ok\r\n");
 8001082:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <BMP280_init+0x48>)
 8001084:	f005 facc 	bl	8006620 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 8001088:	f7ff fef8 	bl	8000e7c <BMP280_get_trimming>
	return 0;
 800108c:	2300      	movs	r3, #0
 800108e:	e003      	b.n	8001098 <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <BMP280_init+0x4c>)
 8001092:	f005 fac5 	bl	8006620 <puts>
		return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08007234 	.word	0x08007234
 80010a4:	08007244 	.word	0x08007244
 80010a8:	08007250 	.word	0x08007250

080010ac <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80010c4:	23ee      	movs	r3, #238	@ 0xee
 80010c6:	4619      	mov	r1, r3
 80010c8:	f107 020c 	add.w	r2, r7, #12
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	4814      	ldr	r0, [pc, #80]	@ (8001128 <BMP280_Write_Reg+0x7c>)
 80010d6:	f001 ff13 	bl	8002f00 <HAL_I2C_Master_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <BMP280_Write_Reg+0x80>)
 80010e6:	f005 fa9b 	bl	8006620 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80010ea:	23ee      	movs	r3, #238	@ 0xee
 80010ec:	4619      	mov	r1, r3
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <BMP280_Write_Reg+0x7c>)
 80010fc:	f001 fffe 	bl	80030fc <HAL_I2C_Master_Receive>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 800110a:	4809      	ldr	r0, [pc, #36]	@ (8001130 <BMP280_Write_Reg+0x84>)
 800110c:	f005 fa88 	bl	8006620 <puts>
	}

	if (buf[0] == value) {
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	429a      	cmp	r2, r3
 8001116:	d101      	bne.n	800111c <BMP280_Write_Reg+0x70>
		return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 800111c:	2301      	movs	r3, #1
	}
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000c8 	.word	0x200000c8
 800112c:	08007260 	.word	0x08007260
 8001130:	0800727c 	.word	0x0800727c

08001134 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001144:	23ee      	movs	r3, #238	@ 0xee
 8001146:	4619      	mov	r1, r3
 8001148:	1dfa      	adds	r2, r7, #7
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <BMP280_Read_Reg+0x70>)
 8001154:	f001 fed4 	bl	8002f00 <HAL_I2C_Master_Transmit>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <BMP280_Read_Reg+0x74>)
 8001164:	f005 fa5c 	bl	8006620 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f005 f870 	bl	8006250 <malloc>
 8001170:	4603      	mov	r3, r0
 8001172:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8001174:	23ee      	movs	r3, #238	@ 0xee
 8001176:	4619      	mov	r1, r3
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	9200      	str	r2, [sp, #0]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <BMP280_Read_Reg+0x70>)
 8001186:	f001 ffb9 	bl	80030fc <HAL_I2C_Master_Receive>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <BMP280_Read_Reg+0x78>)
 8001196:	f005 fa43 	bl	8006620 <puts>
	}

	return buf;
 800119a:	68bb      	ldr	r3, [r7, #8]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000c8 	.word	0x200000c8
 80011a8:	08007260 	.word	0x08007260
 80011ac:	0800727c 	.word	0x0800727c

080011b0 <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	10da      	asrs	r2, r3, #3
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <bmp280_compensate_T_int32+0x74>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <bmp280_compensate_T_int32+0x78>)
 80011c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	12db      	asrs	r3, r3, #11
 80011d0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	111b      	asrs	r3, r3, #4
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <bmp280_compensate_T_int32+0x74>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	1112      	asrs	r2, r2, #4
 80011e0:	4910      	ldr	r1, [pc, #64]	@ (8001224 <bmp280_compensate_T_int32+0x74>)
 80011e2:	8809      	ldrh	r1, [r1, #0]
 80011e4:	1a52      	subs	r2, r2, r1
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 80011ec:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <bmp280_compensate_T_int32+0x7c>)
 80011ee:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	139b      	asrs	r3, r3, #14
 80011f8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4413      	add	r3, r2
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <bmp280_compensate_T_int32+0x80>)
 8001202:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <bmp280_compensate_T_int32+0x80>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3380      	adds	r3, #128	@ 0x80
 8001210:	121b      	asrs	r3, r3, #8
 8001212:	60fb      	str	r3, [r7, #12]
	return T;
 8001214:	68fb      	ldr	r3, [r7, #12]
}
 8001216:	4618      	mov	r0, r3
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000084 	.word	0x20000084
 8001228:	20000086 	.word	0x20000086
 800122c:	20000088 	.word	0x20000088
 8001230:	2000009c 	.word	0x2000009c

08001234 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8001234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001238:	b0ca      	sub	sp, #296	@ 0x128
 800123a:	af00      	add	r7, sp, #0
 800123c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001240:	4baf      	ldr	r3, [pc, #700]	@ (8001500 <bmp280_compensate_P_int64+0x2cc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	17da      	asrs	r2, r3, #31
 8001246:	461c      	mov	r4, r3
 8001248:	4615      	mov	r5, r2
 800124a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800124e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001252:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8001256:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800125a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800125e:	fb03 f102 	mul.w	r1, r3, r2
 8001262:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001266:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	18ca      	adds	r2, r1, r3
 8001270:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001274:	fba3 8903 	umull	r8, r9, r3, r3
 8001278:	eb02 0309 	add.w	r3, r2, r9
 800127c:	4699      	mov	r9, r3
 800127e:	4ba1      	ldr	r3, [pc, #644]	@ (8001504 <bmp280_compensate_P_int64+0x2d0>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	b21b      	sxth	r3, r3
 8001286:	17da      	asrs	r2, r3, #31
 8001288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800128c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001290:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001294:	4603      	mov	r3, r0
 8001296:	fb03 f209 	mul.w	r2, r3, r9
 800129a:	460b      	mov	r3, r1
 800129c:	fb08 f303 	mul.w	r3, r8, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	4602      	mov	r2, r0
 80012a4:	fba8 1202 	umull	r1, r2, r8, r2
 80012a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012ac:	460a      	mov	r2, r1
 80012ae:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012b6:	4413      	add	r3, r2
 80012b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012bc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 80012c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001508 <bmp280_compensate_P_int64+0x2d4>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	17da      	asrs	r2, r3, #31
 80012d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012d6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012e2:	462a      	mov	r2, r5
 80012e4:	fb02 f203 	mul.w	r2, r2, r3
 80012e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012ec:	4621      	mov	r1, r4
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	441a      	add	r2, r3
 80012f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012f8:	4621      	mov	r1, r4
 80012fa:	fba3 1301 	umull	r1, r3, r3, r1
 80012fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001302:	460b      	mov	r3, r1
 8001304:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800130c:	18d3      	adds	r3, r2, r3
 800130e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800131e:	462b      	mov	r3, r5
 8001320:	0459      	lsls	r1, r3, #17
 8001322:	4623      	mov	r3, r4
 8001324:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001328:	4623      	mov	r3, r4
 800132a:	0458      	lsls	r0, r3, #17
 800132c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001330:	1814      	adds	r4, r2, r0
 8001332:	643c      	str	r4, [r7, #64]	@ 0x40
 8001334:	414b      	adcs	r3, r1
 8001336:	647b      	str	r3, [r7, #68]	@ 0x44
 8001338:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800133c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8001340:	4b72      	ldr	r3, [pc, #456]	@ (800150c <bmp280_compensate_P_int64+0x2d8>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	b21b      	sxth	r3, r3
 8001348:	17da      	asrs	r2, r3, #31
 800134a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800134e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800135e:	00d9      	lsls	r1, r3, #3
 8001360:	2000      	movs	r0, #0
 8001362:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001366:	1814      	adds	r4, r2, r0
 8001368:	63bc      	str	r4, [r7, #56]	@ 0x38
 800136a:	414b      	adcs	r3, r1
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800136e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001372:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 8001376:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800137a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800137e:	fb03 f102 	mul.w	r1, r3, r2
 8001382:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	18ca      	adds	r2, r1, r3
 8001390:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001394:	fba3 1303 	umull	r1, r3, r3, r3
 8001398:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800139c:	460b      	mov	r3, r1
 800139e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013ac:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <bmp280_compensate_P_int64+0x2dc>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	17da      	asrs	r2, r3, #31
 80013b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013be:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013c2:	462b      	mov	r3, r5
 80013c4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013c8:	4642      	mov	r2, r8
 80013ca:	fb02 f203 	mul.w	r2, r2, r3
 80013ce:	464b      	mov	r3, r9
 80013d0:	4621      	mov	r1, r4
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	4622      	mov	r2, r4
 80013da:	4641      	mov	r1, r8
 80013dc:	fba2 1201 	umull	r1, r2, r2, r1
 80013e0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013e4:	460a      	mov	r2, r1
 80013e6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013ee:	4413      	add	r3, r2
 80013f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013f4:	f04f 0000 	mov.w	r0, #0
 80013f8:	f04f 0100 	mov.w	r1, #0
 80013fc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001400:	4623      	mov	r3, r4
 8001402:	0a18      	lsrs	r0, r3, #8
 8001404:	462b      	mov	r3, r5
 8001406:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800140a:	462b      	mov	r3, r5
 800140c:	1219      	asrs	r1, r3, #8
 800140e:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <bmp280_compensate_P_int64+0x2e0>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b21b      	sxth	r3, r3
 8001416:	17da      	asrs	r2, r3, #31
 8001418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800141c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001420:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001424:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001428:	464a      	mov	r2, r9
 800142a:	fb02 f203 	mul.w	r2, r2, r3
 800142e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001432:	4644      	mov	r4, r8
 8001434:	fb04 f303 	mul.w	r3, r4, r3
 8001438:	441a      	add	r2, r3
 800143a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800143e:	4644      	mov	r4, r8
 8001440:	fba3 4304 	umull	r4, r3, r3, r4
 8001444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001448:	4623      	mov	r3, r4
 800144a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800144e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001452:	18d3      	adds	r3, r2, r3
 8001454:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001464:	464c      	mov	r4, r9
 8001466:	0323      	lsls	r3, r4, #12
 8001468:	4644      	mov	r4, r8
 800146a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800146e:	4644      	mov	r4, r8
 8001470:	0322      	lsls	r2, r4, #12
 8001472:	1884      	adds	r4, r0, r2
 8001474:	633c      	str	r4, [r7, #48]	@ 0x30
 8001476:	eb41 0303 	adc.w	r3, r1, r3
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
 800147c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001480:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 8001484:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001488:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800148c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001490:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001494:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <bmp280_compensate_P_int64+0x2e4>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	2200      	movs	r2, #0
 800149c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014a4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014a8:	462b      	mov	r3, r5
 80014aa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ae:	4642      	mov	r2, r8
 80014b0:	fb02 f203 	mul.w	r2, r2, r3
 80014b4:	464b      	mov	r3, r9
 80014b6:	4621      	mov	r1, r4
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	4622      	mov	r2, r4
 80014c0:	4641      	mov	r1, r8
 80014c2:	fba2 1201 	umull	r1, r2, r2, r1
 80014c6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014ca:	460a      	mov	r2, r1
 80014cc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014d4:	4413      	add	r3, r2
 80014d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014e6:	4629      	mov	r1, r5
 80014e8:	104a      	asrs	r2, r1, #1
 80014ea:	4629      	mov	r1, r5
 80014ec:	17cb      	asrs	r3, r1, #31
 80014ee:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 80014f2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014f6:	4313      	orrs	r3, r2
 80014f8:	d110      	bne.n	800151c <bmp280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80014fa:	2300      	movs	r3, #0
 80014fc:	e154      	b.n	80017a8 <bmp280_compensate_P_int64+0x574>
 80014fe:	bf00      	nop
 8001500:	2000009c 	.word	0x2000009c
 8001504:	20000094 	.word	0x20000094
 8001508:	20000092 	.word	0x20000092
 800150c:	20000090 	.word	0x20000090
 8001510:	2000008e 	.word	0x2000008e
 8001514:	2000008c 	.word	0x2000008c
 8001518:	2000008a 	.word	0x2000008a
	}

	p = 1048576 - adc_P;
 800151c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001520:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001524:	17da      	asrs	r2, r3, #31
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800152a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800152e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8001532:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001536:	105b      	asrs	r3, r3, #1
 8001538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800153c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001540:	07db      	lsls	r3, r3, #31
 8001542:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001546:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800154a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800154e:	4621      	mov	r1, r4
 8001550:	1a89      	subs	r1, r1, r2
 8001552:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001554:	4629      	mov	r1, r5
 8001556:	eb61 0303 	sbc.w	r3, r1, r3
 800155a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800155c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001560:	4622      	mov	r2, r4
 8001562:	462b      	mov	r3, r5
 8001564:	1891      	adds	r1, r2, r2
 8001566:	6239      	str	r1, [r7, #32]
 8001568:	415b      	adcs	r3, r3
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
 800156c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001570:	4621      	mov	r1, r4
 8001572:	1851      	adds	r1, r2, r1
 8001574:	61b9      	str	r1, [r7, #24]
 8001576:	4629      	mov	r1, r5
 8001578:	414b      	adcs	r3, r1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001588:	4649      	mov	r1, r9
 800158a:	018b      	lsls	r3, r1, #6
 800158c:	4641      	mov	r1, r8
 800158e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001592:	4641      	mov	r1, r8
 8001594:	018a      	lsls	r2, r1, #6
 8001596:	4641      	mov	r1, r8
 8001598:	1889      	adds	r1, r1, r2
 800159a:	6139      	str	r1, [r7, #16]
 800159c:	4649      	mov	r1, r9
 800159e:	eb43 0101 	adc.w	r1, r3, r1
 80015a2:	6179      	str	r1, [r7, #20]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b0:	4649      	mov	r1, r9
 80015b2:	008b      	lsls	r3, r1, #2
 80015b4:	4641      	mov	r1, r8
 80015b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ba:	4641      	mov	r1, r8
 80015bc:	008a      	lsls	r2, r1, #2
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	4622      	mov	r2, r4
 80015c6:	189b      	adds	r3, r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	460b      	mov	r3, r1
 80015cc:	462a      	mov	r2, r5
 80015ce:	eb42 0303 	adc.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015e0:	4649      	mov	r1, r9
 80015e2:	008b      	lsls	r3, r1, #2
 80015e4:	4641      	mov	r1, r8
 80015e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ea:	4641      	mov	r1, r8
 80015ec:	008a      	lsls	r2, r1, #2
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	4622      	mov	r2, r4
 80015f6:	189b      	adds	r3, r3, r2
 80015f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80015fa:	462b      	mov	r3, r5
 80015fc:	460a      	mov	r2, r1
 80015fe:	eb42 0303 	adc.w	r3, r2, r3
 8001602:	677b      	str	r3, [r7, #116]	@ 0x74
 8001604:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001608:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800160c:	f7ff fa6e 	bl	8000aec <__aeabi_ldivmod>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001618:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <bmp280_compensate_P_int64+0x580>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	b21b      	sxth	r3, r3
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001624:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001626:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0b50      	lsrs	r0, r2, #13
 8001634:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001638:	1359      	asrs	r1, r3, #13
 800163a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800163e:	462b      	mov	r3, r5
 8001640:	fb00 f203 	mul.w	r2, r0, r3
 8001644:	4623      	mov	r3, r4
 8001646:	fb03 f301 	mul.w	r3, r3, r1
 800164a:	4413      	add	r3, r2
 800164c:	4622      	mov	r2, r4
 800164e:	fba2 1200 	umull	r1, r2, r2, r0
 8001652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001656:	460a      	mov	r2, r1
 8001658:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800165c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001660:	4413      	add	r3, r2
 8001662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001666:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0b50      	lsrs	r0, r2, #13
 8001674:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001678:	1359      	asrs	r1, r3, #13
 800167a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800167e:	462b      	mov	r3, r5
 8001680:	fb00 f203 	mul.w	r2, r0, r3
 8001684:	4623      	mov	r3, r4
 8001686:	fb03 f301 	mul.w	r3, r3, r1
 800168a:	4413      	add	r3, r2
 800168c:	4622      	mov	r2, r4
 800168e:	fba2 1200 	umull	r1, r2, r2, r0
 8001692:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800169c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016b2:	4621      	mov	r1, r4
 80016b4:	0e4a      	lsrs	r2, r1, #25
 80016b6:	4629      	mov	r1, r5
 80016b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016bc:	4629      	mov	r1, r5
 80016be:	164b      	asrs	r3, r1, #25
 80016c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 80016c4:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <bmp280_compensate_P_int64+0x584>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	17da      	asrs	r2, r3, #31
 80016ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80016d0:	667a      	str	r2, [r7, #100]	@ 0x64
 80016d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016da:	462a      	mov	r2, r5
 80016dc:	fb02 f203 	mul.w	r2, r2, r3
 80016e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016e4:	4621      	mov	r1, r4
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016f0:	4621      	mov	r1, r4
 80016f2:	fba2 1201 	umull	r1, r2, r2, r1
 80016f6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016fa:	460a      	mov	r2, r1
 80016fc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001700:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001704:	4413      	add	r3, r2
 8001706:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001716:	4621      	mov	r1, r4
 8001718:	0cca      	lsrs	r2, r1, #19
 800171a:	4629      	mov	r1, r5
 800171c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001720:	4629      	mov	r1, r5
 8001722:	14cb      	asrs	r3, r1, #19
 8001724:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = (((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7) << 4));
 8001728:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800172c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001730:	1884      	adds	r4, r0, r2
 8001732:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001734:	eb41 0303 	adc.w	r3, r1, r3
 8001738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800173a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800173e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001742:	4621      	mov	r1, r4
 8001744:	1889      	adds	r1, r1, r2
 8001746:	6539      	str	r1, [r7, #80]	@ 0x50
 8001748:	4629      	mov	r1, r5
 800174a:	eb43 0101 	adc.w	r1, r3, r1
 800174e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001750:	f04f 0000 	mov.w	r0, #0
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800175c:	4623      	mov	r3, r4
 800175e:	0a18      	lsrs	r0, r3, #8
 8001760:	462b      	mov	r3, r5
 8001762:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001766:	462b      	mov	r3, r5
 8001768:	1219      	asrs	r1, r3, #8
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <bmp280_compensate_P_int64+0x588>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b21b      	sxth	r3, r3
 8001772:	17da      	asrs	r2, r3, #31
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001776:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001784:	464c      	mov	r4, r9
 8001786:	0123      	lsls	r3, r4, #4
 8001788:	4644      	mov	r4, r8
 800178a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800178e:	4644      	mov	r4, r8
 8001790:	0122      	lsls	r2, r4, #4
 8001792:	1884      	adds	r4, r0, r2
 8001794:	603c      	str	r4, [r7, #0]
 8001796:	eb41 0303 	adc.w	r3, r1, r3
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 80017a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ae:	46bd      	mov	sp, r7
 80017b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017b4:	2000009a 	.word	0x2000009a
 80017b8:	20000098 	.word	0x20000098
 80017bc:	20000096 	.word	0x20000096

080017c0 <BMP280_get_temperature>:
BMP280_S32_t BMP280_get_temperature() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 80017c6:	23fa      	movs	r3, #250	@ 0xfa
 80017c8:	2203      	movs	r2, #3
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fcb1 	bl	8001134 <BMP280_Read_Reg>
 80017d2:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	031a      	lsls	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	3202      	adds	r2, #2
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	0912      	lsrs	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	603b      	str	r3, [r7, #0]

	free(buf);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f004 fd34 	bl	8006260 <free>

	return adc_T;
 80017f8:	683b      	ldr	r3, [r7, #0]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8001808:	23f7      	movs	r3, #247	@ 0xf7
 800180a:	2203      	movs	r2, #3
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc90 	bl	8001134 <BMP280_Read_Reg>
 8001814:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	031a      	lsls	r2, r3, #12
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	3202      	adds	r2, #2
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	0912      	lsrs	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001830:	4313      	orrs	r3, r2
 8001832:	603b      	str	r3, [r7, #0]

	free(buf);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f004 fd13 	bl	8006260 <free>

	return adc_P;
 800183a:	683b      	ldr	r3, [r7, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <MPU9250_Init>:
	if (angle < 5) angle = 5;   // Limite à 5°
	return angle;
}
 */

void MPU9250_Init(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af04      	add	r7, sp, #16
    uint8_t data = 0x00; // Sortie de mode veille
 800184a:	2300      	movs	r3, #0
 800184c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR << 1, MPU9250_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	2301      	movs	r3, #1
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	1dfb      	adds	r3, r7, #7
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	226b      	movs	r2, #107	@ 0x6b
 8001860:	21d0      	movs	r1, #208	@ 0xd0
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MPU9250_Init+0x34>)
 8001864:	f001 fe7c 	bl	8003560 <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Attente pour la stabilisation
 8001868:	2064      	movs	r0, #100	@ 0x64
 800186a:	f000 fd4f 	bl	800230c <HAL_Delay>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000c8 	.word	0x200000c8

0800187c <MPU9250_Read_Accel>:
void MPU9250_Read_Accel(float *accelX, float *accelY, float *accelZ) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af04      	add	r7, sp, #16
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
    uint8_t accelData[6];
    int16_t rawAccelX, rawAccelY, rawAccelZ;

    // Lecture des 6 octets de données d'accélération
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR << 1, MPU9250_ACCEL_XOUT_H, 1, accelData, 6, HAL_MAX_DELAY);
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2306      	movs	r3, #6
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	223b      	movs	r2, #59	@ 0x3b
 800189c:	21d0      	movs	r1, #208	@ 0xd0
 800189e:	482a      	ldr	r0, [pc, #168]	@ (8001948 <MPU9250_Read_Accel+0xcc>)
 80018a0:	f001 ff58 	bl	8003754 <HAL_I2C_Mem_Read>

    // Conversion des données brutes en valeurs signées
    rawAccelX = (int16_t)(accelData[0] << 8 | accelData[1]);
 80018a4:	7d3b      	ldrb	r3, [r7, #20]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	7d7b      	ldrb	r3, [r7, #21]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	83fb      	strh	r3, [r7, #30]
    rawAccelY = (int16_t)(accelData[2] << 8 | accelData[3]);
 80018b2:	7dbb      	ldrb	r3, [r7, #22]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	83bb      	strh	r3, [r7, #28]
    rawAccelZ = (int16_t)(accelData[4] << 8 | accelData[5]);
 80018c0:	7e3b      	ldrb	r3, [r7, #24]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	7e7b      	ldrb	r3, [r7, #25]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	837b      	strh	r3, [r7, #26]

    // Conversion en "g" (accélération gravitationnelle)
    *accelX = rawAccelX / MPU9250_ACCEL_SCALE;
 80018ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe3e 	bl	8000554 <__aeabi_i2d>
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <MPU9250_Read_Accel+0xd0>)
 80018de:	f7fe ffcd 	bl	800087c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f8af 	bl	8000a4c <__aeabi_d2f>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]
    *accelY = rawAccelY / MPU9250_ACCEL_SCALE;
 80018f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe2b 	bl	8000554 <__aeabi_i2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MPU9250_Read_Accel+0xd0>)
 8001904:	f7fe ffba 	bl	800087c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f89c 	bl	8000a4c <__aeabi_d2f>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	601a      	str	r2, [r3, #0]
    *accelZ = rawAccelZ / MPU9250_ACCEL_SCALE;
 800191a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe18 	bl	8000554 <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <MPU9250_Read_Accel+0xd0>)
 800192a:	f7fe ffa7 	bl	800087c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f889 	bl	8000a4c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000c8 	.word	0x200000c8
 800194c:	40d00000 	.word	0x40d00000

08001950 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001954:	b08c      	sub	sp, #48	@ 0x30
 8001956:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001958:	f000 fc66 	bl	8002228 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800195c:	f000 f862 	bl	8001a24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001960:	f000 f986 	bl	8001c70 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001964:	f000 f95a 	bl	8001c1c <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001968:	f000 f92e 	bl	8001bc8 <MX_UART4_Init>
	MX_CAN1_Init();
 800196c:	f000 f8c8 	bl	8001b00 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001970:	f000 f8fc 	bl	8001b6c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	BMP280_S32_t raw_temp, raw_press;
	BMP280_S32_t comp_temp;
	BMP280_U32_t comp_press;
	printf("======= Démarrage du système =======\r\n");
 8001974:	4825      	ldr	r0, [pc, #148]	@ (8001a0c <main+0xbc>)
 8001976:	f004 fe53 	bl	8006620 <puts>
	BMP280_check();
 800197a:	f7ff fb21 	bl	8000fc0 <BMP280_check>
	BMP280_init();
 800197e:	f7ff fb6d 	bl	800105c <BMP280_init>
	HAL_CAN_Start(&hcan1);
 8001982:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <main+0xc0>)
 8001984:	f000 fde1 	bl	800254a <HAL_CAN_Start>

	// Activation de la réception UART
	HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001988:	2207      	movs	r2, #7
 800198a:	4922      	ldr	r1, [pc, #136]	@ (8001a14 <main+0xc4>)
 800198c:	4822      	ldr	r0, [pc, #136]	@ (8001a18 <main+0xc8>)
 800198e:	f003 fcda 	bl	8005346 <HAL_UART_Receive_IT>
	MPU9250_Init();
 8001992:	f7ff ff57 	bl	8001844 <MPU9250_Init>
	printf("MPU-9250 Initialized.\r\n");
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <main+0xcc>)
 8001998:	f004 fe42 	bl	8006620 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		raw_temp = BMP280_get_temperature();
 800199c:	f7ff ff10 	bl	80017c0 <BMP280_get_temperature>
 80019a0:	61f8      	str	r0, [r7, #28]
		raw_press = BMP280_get_pressure();
 80019a2:	f7ff ff2e 	bl	8001802 <BMP280_get_pressure>
 80019a6:	61b8      	str	r0, [r7, #24]

		// Compensation des valeurs
		comp_temp = bmp280_compensate_T_int32(raw_temp);
 80019a8:	69f8      	ldr	r0, [r7, #28]
 80019aa:	f7ff fc01 	bl	80011b0 <bmp280_compensate_T_int32>
 80019ae:	6178      	str	r0, [r7, #20]
		comp_press = bmp280_compensate_P_int64(raw_press);
 80019b0:	69b8      	ldr	r0, [r7, #24]
 80019b2:	f7ff fc3f 	bl	8001234 <bmp280_compensate_P_int64>
 80019b6:	4603      	mov	r3, r0
 80019b8:	613b      	str	r3, [r7, #16]
		// Faire tourner le moteur avec l'angle calculé
		rotate_motor_dynamic(angle, 0); // 0 pour sens horaire*/
		float accelX, accelY, accelZ;

		// Lire les valeurs d'accélération
		MPU9250_Read_Accel(&accelX, &accelY, &accelZ);
 80019ba:	1d3a      	adds	r2, r7, #4
 80019bc:	f107 0108 	add.w	r1, r7, #8
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff59 	bl	800187c <MPU9250_Read_Accel>

		// Afficher les valeurs sur UART
		printf("Accélération (g) : X=%.2f, Y=%.2f, Z=%.2f\r\n", accelX, accelY, accelZ);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdd3 	bl	8000578 <__aeabi_f2d>
 80019d2:	4680      	mov	r8, r0
 80019d4:	4689      	mov	r9, r1
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdcd 	bl	8000578 <__aeabi_f2d>
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdc7 	bl	8000578 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019f2:	e9cd 4500 	strd	r4, r5, [sp]
 80019f6:	4642      	mov	r2, r8
 80019f8:	464b      	mov	r3, r9
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <main+0xd0>)
 80019fc:	f004 fda8 	bl	8006550 <iprintf>

		// Attendre un peu avant de refaire le calcul
		HAL_Delay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a04:	f000 fc82 	bl	800230c <HAL_Delay>
	{
 8001a08:	bf00      	nop
 8001a0a:	e7c7      	b.n	800199c <main+0x4c>
 8001a0c:	080072dc 	.word	0x080072dc
 8001a10:	200000a0 	.word	0x200000a0
 8001a14:	200001ac 	.word	0x200001ac
 8001a18:	2000011c 	.word	0x2000011c
 8001a1c:	08007304 	.word	0x08007304
 8001a20:	0800731c 	.word	0x0800731c

08001a24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	@ 0x50
 8001a28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2234      	movs	r2, #52	@ 0x34
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fed4 	bl	80067e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <SystemClock_Config+0xd4>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	4a29      	ldr	r2, [pc, #164]	@ (8001af8 <SystemClock_Config+0xd4>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <SystemClock_Config+0xd4>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <SystemClock_Config+0xd8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <SystemClock_Config+0xd8>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <SystemClock_Config+0xd8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2302      	movs	r3, #2
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001a9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001aa0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 f8ce 	bl	8004c54 <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001abe:	f000 f945 	bl	8001d4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	2102      	movs	r1, #2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fd6e 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001aea:	f000 f92f 	bl	8001d4c <Error_Handler>
	}
}
 8001aee:	bf00      	nop
 8001af0:	3750      	adds	r7, #80	@ 0x50
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MX_CAN1_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b0c:	2206      	movs	r2, #6
 8001b0e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b1e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001b22:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b2a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_CAN1_Init+0x64>)
 8001b52:	f000 fbff 	bl	8002354 <HAL_CAN_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001b5c:	f000 f8f6 	bl	8001d4c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200000a0 	.word	0x200000a0
 8001b68:	40006400 	.word	0x40006400

08001b6c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <MX_I2C1_Init+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <MX_I2C1_Init+0x58>)
 8001b7a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001baa:	f001 f865 	bl	8002c78 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001bb4:	f000 f8ca 	bl	8001d4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000c8 	.word	0x200000c8
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	000186a0 	.word	0x000186a0

08001bc8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <MX_UART4_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_UART4_Init+0x4c>)
 8001c00:	f003 fac6 	bl	8005190 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001c0a:	f000 f89f 	bl	8001d4c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000011c 	.word	0x2000011c
 8001c18:	40004c00 	.word	0x40004c00

08001c1c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f003 fa9c 	bl	8005190 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001c5e:	f000 f875 	bl	8001d4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000164 	.word	0x20000164
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_GPIO_Init+0xd0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <MX_GPIO_Init+0xd4>)
 8001cfc:	f000 ffa2 	bl	8002c44 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001d00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <MX_GPIO_Init+0xd8>)
 8001d18:	f000 fe00 	bl	800291c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <MX_GPIO_Init+0xd4>)
 8001d34:	f000 fdf2 	bl	800291c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020800 	.word	0x40020800

08001d4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <Error_Handler+0x8>

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f000 fcec 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	@ 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_CAN_MspInit+0x84>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12c      	bne.n	8001e24 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a10      	ldr	r2, [pc, #64]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_CAN_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e14:	2309      	movs	r3, #9
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <HAL_CAN_MspInit+0x8c>)
 8001e20:	f000 fd7c 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	@ 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40006400 	.word	0x40006400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	@ (8001ebc <HAL_I2C_MspInit+0x84>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12b      	bne.n	8001eb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e76:	23c0      	movs	r3, #192	@ 0xc0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7a:	2312      	movs	r3, #18
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e86:	2304      	movs	r3, #4
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <HAL_I2C_MspInit+0x8c>)
 8001e92:	f000 fd43 	bl	800291c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001ea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a36      	ldr	r2, [pc, #216]	@ (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d134      	bne.n	8001f54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	4b35      	ldr	r3, [pc, #212]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a34      	ldr	r2, [pc, #208]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b32      	ldr	r3, [pc, #200]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f22:	2303      	movs	r3, #3
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f32:	2308      	movs	r3, #8
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4822      	ldr	r0, [pc, #136]	@ (8001fc8 <HAL_UART_MspInit+0x100>)
 8001f3e:	f000 fced 	bl	800291c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2034      	movs	r0, #52	@ 0x34
 8001f48:	f000 fc1f 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f4c:	2034      	movs	r0, #52	@ 0x34
 8001f4e:	f000 fc38 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f52:	e030      	b.n	8001fb6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <HAL_UART_MspInit+0x104>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12b      	bne.n	8001fb6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f96:	230c      	movs	r3, #12
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_UART_MspInit+0x100>)
 8001fb2:	f000 fcb3 	bl	800291c <HAL_GPIO_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	3730      	adds	r7, #48	@ 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40004c00 	.word	0x40004c00
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40004400 	.word	0x40004400

08001fd0 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001fd8:	1d39      	adds	r1, r7, #4
 8001fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4803      	ldr	r0, [pc, #12]	@ (8001ff0 <__io_putchar+0x20>)
 8001fe2:	f003 f925 	bl	8005230 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000164 	.word	0x20000164

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204a:	f000 f93f 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <UART4_IRQHandler+0x10>)
 800205a:	f003 f999 	bl	8005390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000011c 	.word	0x2000011c

08002068 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e00a      	b.n	8002090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800207a:	f3af 8000 	nop.w
 800207e:	4601      	mov	r1, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf0      	blt.n	800207a <_read+0x12>
  }

  return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e009      	b.n	80020c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff87 	bl	8001fd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf1      	blt.n	80020b4 <_write+0x12>
  }
  return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_close>:

int _close(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002102:	605a      	str	r2, [r3, #4]
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_isatty>:

int _isatty(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f004 fb92 	bl	800689c <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20020000 	.word	0x20020000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	200001b4 	.word	0x200001b4
 80021ac:	20000308 	.word	0x20000308

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800220c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021d8:	f7ff ffea 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021dc:	480c      	ldr	r0, [pc, #48]	@ (8002210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021de:	490d      	ldr	r1, [pc, #52]	@ (8002214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002202:	f004 fb51 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7ff fba3 	bl	8001950 <main>
  bx  lr    
 800220a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800220c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002218:	080073a8 	.word	0x080073a8
  ldr r2, =_sbss
 800221c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002220:	20000308 	.word	0x20000308

08002224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <HAL_Init+0x40>)
 8002232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <HAL_Init+0x40>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <HAL_Init+0x40>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 fa8f 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fd7c 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 faa7 	bl	80027de <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 fa6f 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	200001b8 	.word	0x200001b8

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200001b8 	.word	0x200001b8

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff ffee 	bl	80022f4 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffde 	bl	80022f4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0ed      	b.n	8002542 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fd18 	bl	8001da8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7ff ffb4 	bl	80022f4 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800238e:	e012      	b.n	80023b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7ff ffb0 	bl	80022f4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d90b      	bls.n	80023b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0c5      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0e5      	beq.n	8002390 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0202 	bic.w	r2, r2, #2
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7ff ff8e 	bl	80022f4 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023da:	e012      	b.n	8002402 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023dc:	f7ff ff8a 	bl	80022f4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	d90b      	bls.n	8002402 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e09f      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e5      	bne.n	80023dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e9b      	ldrb	r3, [r3, #26]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0220 	bic.w	r2, r2, #32
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7edb      	ldrb	r3, [r3, #27]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0210 	bic.w	r2, r2, #16
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f1b      	ldrb	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0208 	bic.w	r2, r2, #8
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f5b      	ldrb	r3, [r3, #29]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0204 	orr.w	r2, r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	ea42 0103 	orr.w	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d12e      	bne.n	80025bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002576:	f7ff febd 	bl	80022f4 <HAL_GetTick>
 800257a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800257c:	e012      	b.n	80025a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800257e:	f7ff feb9 	bl	80022f4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b0a      	cmp	r3, #10
 800258a:	d90b      	bls.n	80025a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2205      	movs	r2, #5
 800259c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e012      	b.n	80025ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e5      	bne.n	800257e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e006      	b.n	80025ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	@ (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	@ (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	@ (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fd76 	bl	80022f4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d008      	beq.n	8002828 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2280      	movs	r2, #128	@ 0x80
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e052      	b.n	80028ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0216 	bic.w	r2, r2, #22
 8002836:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002846:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_DMA_Abort+0x62>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0208 	bic.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e013      	b.n	80028a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff fd3b 	bl	80022f4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d90c      	bls.n	80028a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e015      	b.n	80028ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e4      	bne.n	800287a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	223f      	movs	r2, #63	@ 0x3f
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	@ 0x80
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e00c      	b.n	800290e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2205      	movs	r2, #5
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e165      	b.n	8002c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	f040 8154 	bne.w	8002bfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d005      	beq.n	800296e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	2b02      	cmp	r3, #2
 800296c:	d130      	bne.n	80029d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 0201 	and.w	r2, r3, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d017      	beq.n	8002a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d123      	bne.n	8002a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80ae 	beq.w	8002bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a5c      	ldr	r2, [pc, #368]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002abe:	4a58      	ldr	r2, [pc, #352]	@ (8002c20 <HAL_GPIO_Init+0x304>)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8002c24 <HAL_GPIO_Init+0x308>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d025      	beq.n	8002b36 <HAL_GPIO_Init+0x21a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	@ (8002c28 <HAL_GPIO_Init+0x30c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <HAL_GPIO_Init+0x216>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4d      	ldr	r2, [pc, #308]	@ (8002c2c <HAL_GPIO_Init+0x310>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d019      	beq.n	8002b2e <HAL_GPIO_Init+0x212>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <HAL_GPIO_Init+0x314>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0x20e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4b      	ldr	r2, [pc, #300]	@ (8002c34 <HAL_GPIO_Init+0x318>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00d      	beq.n	8002b26 <HAL_GPIO_Init+0x20a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c38 <HAL_GPIO_Init+0x31c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <HAL_GPIO_Init+0x206>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a49      	ldr	r2, [pc, #292]	@ (8002c3c <HAL_GPIO_Init+0x320>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_GPIO_Init+0x202>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00c      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00a      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b22:	2305      	movs	r3, #5
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x21c>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	@ (8002c20 <HAL_GPIO_Init+0x304>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a31      	ldr	r2, [pc, #196]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b2f      	ldr	r3, [pc, #188]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a26      	ldr	r2, [pc, #152]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a11      	ldr	r2, [pc, #68]	@ (8002c40 <HAL_GPIO_Init+0x324>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f ae96 	bls.w	8002938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c60:	e003      	b.n	8002c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e12b      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f8ca 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	@ 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f001 fd62 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a81      	ldr	r2, [pc, #516]	@ (8002eec <HAL_I2C_Init+0x274>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d807      	bhi.n	8002cfc <HAL_I2C_Init+0x84>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a80      	ldr	r2, [pc, #512]	@ (8002ef0 <HAL_I2C_Init+0x278>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e006      	b.n	8002d0a <HAL_I2C_Init+0x92>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	@ (8002ef4 <HAL_I2C_Init+0x27c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0e7      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a78      	ldr	r2, [pc, #480]	@ (8002ef8 <HAL_I2C_Init+0x280>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_I2C_Init+0x274>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d802      	bhi.n	8002d4c <HAL_I2C_Init+0xd4>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e009      	b.n	8002d60 <HAL_I2C_Init+0xe8>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	4a69      	ldr	r2, [pc, #420]	@ (8002efc <HAL_I2C_Init+0x284>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	495c      	ldr	r1, [pc, #368]	@ (8002eec <HAL_I2C_Init+0x274>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d819      	bhi.n	8002db4 <HAL_I2C_Init+0x13c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e59      	subs	r1, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d94:	400b      	ands	r3, r1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_I2C_Init+0x138>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e59      	subs	r1, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	e051      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e04f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <HAL_I2C_Init+0x168>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_I2C_Init+0x18e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x196>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_Init+0x1bc>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e58      	subs	r0, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	440b      	add	r3, r1
 8002e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6911      	ldr	r1, [r2, #16]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
 8002f10:	4613      	mov	r3, r2
 8002f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff f9ee 	bl	80022f4 <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 80e0 	bne.w	80030e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4970      	ldr	r1, [pc, #448]	@ (80030f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f001 f90e 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0d3      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x50>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0cc      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	@ 0x21
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	893a      	ldrh	r2, [r7, #8]
 8002fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fdfa 	bl	8003bb8 <I2C_MasterRequestWrite>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08d      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fe4:	e066      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f001 f9cc 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11b      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x188>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f001 f9c3 	bl	8004418 <I2C_WaitOnBTFFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2b04      	cmp	r3, #4
 800309e:	d107      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01a      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d194      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	00100002 	.word	0x00100002
 80030f8:	ffff0000 	.word	0xffff0000

080030fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	@ 0x30
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
 800310c:	4613      	mov	r3, r2
 800310e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff f8f0 	bl	80022f4 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	f040 8217 	bne.w	8003552 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2319      	movs	r3, #25
 800312a:	2201      	movs	r2, #1
 800312c:	497c      	ldr	r1, [pc, #496]	@ (8003320 <HAL_I2C_Master_Receive+0x224>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f001 f810 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e20a      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2C_Master_Receive+0x50>
 8003148:	2302      	movs	r3, #2
 800314a:	e203      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d007      	beq.n	8003172 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2222      	movs	r2, #34	@ 0x22
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2210      	movs	r2, #16
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	893a      	ldrh	r2, [r7, #8]
 80031a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003324 <HAL_I2C_Master_Receive+0x228>)
 80031b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fd7e 	bl	8003cbc <I2C_MasterRequestRead>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1c4      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d113      	bne.n	80031fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e198      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d11b      	bne.n	800323a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e178      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	2b02      	cmp	r3, #2
 8003240:	d11b      	bne.n	800327a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	e158      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032a0:	e144      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	f200 80f1 	bhi.w	800348e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d123      	bne.n	80032fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f001 f8f5 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e145      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032fa:	e117      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003300:	2b02      	cmp	r3, #2
 8003302:	d14e      	bne.n	80033a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	2200      	movs	r2, #0
 800330c:	4906      	ldr	r1, [pc, #24]	@ (8003328 <HAL_I2C_Master_Receive+0x22c>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 ff20 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e11a      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000
 8003328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033a0:	e0c4      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	2200      	movs	r2, #0
 80033aa:	496c      	ldr	r1, [pc, #432]	@ (800355c <HAL_I2C_Master_Receive+0x460>)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fed1 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0cb      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	2200      	movs	r2, #0
 8003406:	4955      	ldr	r1, [pc, #340]	@ (800355c <HAL_I2C_Master_Receive+0x460>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fea3 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e09d      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800348c:	e04e      	b.n	800352c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f001 f808 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e058      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d124      	bne.n	800352c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f aeb6 	bne.w	80032a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3728      	adds	r7, #40	@ 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010004 	.word	0x00010004

08003560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357a:	f7fe febb 	bl	80022f4 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 80d9 	bne.w	8003740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2319      	movs	r3, #25
 8003594:	2201      	movs	r2, #1
 8003596:	496d      	ldr	r1, [pc, #436]	@ (800374c <HAL_I2C_Mem_Write+0x1ec>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fddb 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0cc      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Write+0x56>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0c5      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2221      	movs	r2, #33	@ 0x21
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a4d      	ldr	r2, [pc, #308]	@ (8003750 <HAL_I2C_Mem_Write+0x1f0>)
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361e:	88f8      	ldrh	r0, [r7, #6]
 8003620:	893a      	ldrh	r2, [r7, #8]
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4603      	mov	r3, r0
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fc12 	bl	8003e58 <I2C_RequestMemoryWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d052      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e081      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fea0 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x180>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d017      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1aa      	bne.n	800363e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fe93 	bl	8004418 <I2C_WaitOnBTFFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e016      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00100002 	.word	0x00100002
 8003750:	ffff0000 	.word	0xffff0000

08003754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	@ 0x30
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800376e:	f7fe fdc1 	bl	80022f4 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	f040 8214 	bne.w	8003baa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2319      	movs	r3, #25
 8003788:	2201      	movs	r2, #1
 800378a:	497b      	ldr	r1, [pc, #492]	@ (8003978 <HAL_I2C_Mem_Read+0x224>)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fce1 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
 800379a:	e207      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Mem_Read+0x56>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e200      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d007      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2222      	movs	r2, #34	@ 0x22
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2240      	movs	r2, #64	@ 0x40
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a5b      	ldr	r2, [pc, #364]	@ (800397c <HAL_I2C_Mem_Read+0x228>)
 8003810:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003812:	88f8      	ldrh	r0, [r7, #6]
 8003814:	893a      	ldrh	r2, [r7, #8]
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fbae 	bl	8003f84 <I2C_RequestMemoryRead>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1bc      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d113      	bne.n	8003862 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e190      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	2b01      	cmp	r3, #1
 8003868:	d11b      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e170      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d11b      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	e150      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038f8:	e144      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f200 80f1 	bhi.w	8003ae6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	2b01      	cmp	r3, #1
 800390a:	d123      	bne.n	8003954 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fdc9 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e145      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003952:	e117      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	2b02      	cmp	r3, #2
 800395a:	d14e      	bne.n	80039fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	4906      	ldr	r1, [pc, #24]	@ (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fbf4 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e11a      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
 8003976:	bf00      	nop
 8003978:	00100002 	.word	0x00100002
 800397c:	ffff0000 	.word	0xffff0000
 8003980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039f8:	e0c4      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a00:	2200      	movs	r2, #0
 8003a02:	496c      	ldr	r1, [pc, #432]	@ (8003bb4 <HAL_I2C_Mem_Read+0x460>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fba5 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0cb      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4955      	ldr	r1, [pc, #340]	@ (8003bb4 <HAL_I2C_Mem_Read+0x460>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb77 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e09d      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ae4:	e04e      	b.n	8003b84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fcdc 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e058      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d124      	bne.n	8003b84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f aeb6 	bne.w	80038fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3728      	adds	r7, #40	@ 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	00010004 	.word	0x00010004

08003bb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d006      	beq.n	8003be2 <I2C_MasterRequestWrite+0x2a>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d003      	beq.n	8003be2 <I2C_MasterRequestWrite+0x2a>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e00b      	b.n	8003c0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	2b12      	cmp	r3, #18
 8003bfa:	d107      	bne.n	8003c0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fa9b 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c32:	d103      	bne.n	8003c3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e035      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c48:	d108      	bne.n	8003c5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	e01b      	b.n	8003c94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	11db      	asrs	r3, r3, #7
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f063 030f 	orn	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <I2C_MasterRequestWrite+0xfc>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fae4 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e010      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4907      	ldr	r1, [pc, #28]	@ (8003cb8 <I2C_MasterRequestWrite+0x100>)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fad4 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	00010008 	.word	0x00010008
 8003cb8:	00010002 	.word	0x00010002

08003cbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d006      	beq.n	8003cf6 <I2C_MasterRequestRead+0x3a>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d003      	beq.n	8003cf6 <I2C_MasterRequestRead+0x3a>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cf4:	d108      	bne.n	8003d08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e00b      	b.n	8003d20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	2b11      	cmp	r3, #17
 8003d0e:	d107      	bne.n	8003d20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fa11 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d103      	bne.n	8003d50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e079      	b.n	8003e48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d5c:	d108      	bne.n	8003d70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	611a      	str	r2, [r3, #16]
 8003d6e:	e05f      	b.n	8003e30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	11db      	asrs	r3, r3, #7
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0306 	and.w	r3, r3, #6
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f063 030f 	orn	r3, r3, #15
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4930      	ldr	r1, [pc, #192]	@ (8003e50 <I2C_MasterRequestRead+0x194>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa5a 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e054      	b.n	8003e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4929      	ldr	r1, [pc, #164]	@ (8003e54 <I2C_MasterRequestRead+0x198>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa4a 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e044      	b.n	8003e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003de2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f9af 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0a:	d103      	bne.n	8003e14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e017      	b.n	8003e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e18:	897b      	ldrh	r3, [r7, #10]
 8003e1a:	11db      	asrs	r3, r3, #7
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f063 030e 	orn	r3, r3, #14
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <I2C_MasterRequestRead+0x198>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa06 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	00010008 	.word	0x00010008
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f960 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea8:	d103      	bne.n	8003eb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e05f      	b.n	8003f76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eb6:	897b      	ldrh	r3, [r7, #10]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ec4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	492d      	ldr	r1, [pc, #180]	@ (8003f80 <I2C_RequestMemoryWrite+0x128>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f9bb 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04c      	b.n	8003f76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fa46 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02b      	b.n	8003f76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f24:	893b      	ldrh	r3, [r7, #8]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]
 8003f2e:	e021      	b.n	8003f74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f30:	893b      	ldrh	r3, [r7, #8]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa20 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d107      	bne.n	8003f66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e005      	b.n	8003f76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f6a:	893b      	ldrh	r3, [r7, #8]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	00010002 	.word	0x00010002

08003f84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	460b      	mov	r3, r1
 8003f98:	813b      	strh	r3, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8c2 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe4:	d103      	bne.n	8003fee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0aa      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	4952      	ldr	r1, [pc, #328]	@ (8004150 <I2C_RequestMemoryRead+0x1cc>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f91d 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e097      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	6a39      	ldr	r1, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f9a8 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b04      	cmp	r3, #4
 8004044:	d107      	bne.n	8004056 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e076      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004060:	893b      	ldrh	r3, [r7, #8]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]
 800406a:	e021      	b.n	80040b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800406c:	893b      	ldrh	r3, [r7, #8]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f982 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e050      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a6:	893b      	ldrh	r3, [r7, #8]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b2:	6a39      	ldr	r1, [r7, #32]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f967 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d107      	bne.n	80040d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e035      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f82b 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004112:	d103      	bne.n	800411c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e013      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	4906      	ldr	r1, [pc, #24]	@ (8004150 <I2C_RequestMemoryRead+0x1cc>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f886 	bl	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010002 	.word	0x00010002

08004154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004164:	e048      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d044      	beq.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe f8c1 	bl	80022f4 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x30>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d139      	bne.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10d      	bne.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	e00c      	b.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d116      	bne.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e023      	b.n	8004240 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10d      	bne.n	800421e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	43da      	mvns	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	e00c      	b.n	8004238 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	43da      	mvns	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	429a      	cmp	r2, r3
 800423c:	d093      	beq.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004256:	e071      	b.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d123      	bne.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004276:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e067      	b.n	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d041      	beq.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fe f81c 	bl	80022f4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d136      	bne.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d10c      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e00b      	b.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e021      	b.n	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10c      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	43da      	mvns	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4013      	ands	r3, r2
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e00b      	b.n	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af6d 	bne.w	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004394:	e034      	b.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f8e3 	bl	8004562 <I2C_IsAcknowledgeFailed>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e034      	b.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d028      	beq.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fd ffa1 	bl	80022f4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b80      	cmp	r3, #128	@ 0x80
 80043d0:	d016      	beq.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e007      	b.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d1c3      	bne.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004424:	e034      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f89b 	bl	8004562 <I2C_IsAcknowledgeFailed>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e034      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d028      	beq.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fd ff59 	bl	80022f4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11d      	bne.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d016      	beq.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e007      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d1c3      	bne.n	8004426 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b4:	e049      	b.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d119      	bne.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e030      	b.n	800455a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fd fefc 	bl	80022f4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	d016      	beq.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e007      	b.n	800455a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004554:	2b40      	cmp	r3, #64	@ 0x40
 8004556:	d1ae      	bne.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004578:	d11b      	bne.n	80045b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004582:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fe20 	bl	80022f4 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fe1c 	bl	80022f4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f855 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fd80 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	0800734c 	.word	0x0800734c
 8004784:	20000000 	.word	0x20000000
 8004788:	20000004 	.word	0x20000004

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	@ (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4903      	ldr	r1, [pc, #12]	@ (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	0800735c 	.word	0x0800735c

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047d0:	f7ff ffdc 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	@ (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	0800735c 	.word	0x0800735c

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f8:	b0ae      	sub	sp, #184	@ 0xb8
 80047fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481a:	4bcb      	ldr	r3, [pc, #812]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b0c      	cmp	r3, #12
 8004824:	f200 8206 	bhi.w	8004c34 <HAL_RCC_GetSysClockFreq+0x440>
 8004828:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <HAL_RCC_GetSysClockFreq+0x3c>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004865 	.word	0x08004865
 8004834:	08004c35 	.word	0x08004c35
 8004838:	08004c35 	.word	0x08004c35
 800483c:	08004c35 	.word	0x08004c35
 8004840:	0800486d 	.word	0x0800486d
 8004844:	08004c35 	.word	0x08004c35
 8004848:	08004c35 	.word	0x08004c35
 800484c:	08004c35 	.word	0x08004c35
 8004850:	08004875 	.word	0x08004875
 8004854:	08004c35 	.word	0x08004c35
 8004858:	08004c35 	.word	0x08004c35
 800485c:	08004c35 	.word	0x08004c35
 8004860:	08004a65 	.word	0x08004a65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4bb9      	ldr	r3, [pc, #740]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x358>)
 8004866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800486a:	e1e7      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486c:	4bb8      	ldr	r3, [pc, #736]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800486e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004872:	e1e3      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004874:	4bb4      	ldr	r3, [pc, #720]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800487c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004880:	4bb1      	ldr	r3, [pc, #708]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d071      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488c:	4bae      	ldr	r3, [pc, #696]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004898:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800489c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	0159      	lsls	r1, r3, #5
 80048c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c4:	0150      	lsls	r0, r2, #5
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4621      	mov	r1, r4
 80048cc:	1a51      	subs	r1, r2, r1
 80048ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb63 0301 	sbc.w	r3, r3, r1
 80048d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80048e4:	4649      	mov	r1, r9
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	4641      	mov	r1, r8
 80048ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ee:	4641      	mov	r1, r8
 80048f0:	018a      	lsls	r2, r1, #6
 80048f2:	4641      	mov	r1, r8
 80048f4:	1a51      	subs	r1, r2, r1
 80048f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048f8:	4649      	mov	r1, r9
 80048fa:	eb63 0301 	sbc.w	r3, r3, r1
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800490c:	4649      	mov	r1, r9
 800490e:	00cb      	lsls	r3, r1, #3
 8004910:	4641      	mov	r1, r8
 8004912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004916:	4641      	mov	r1, r8
 8004918:	00ca      	lsls	r2, r1, #3
 800491a:	4610      	mov	r0, r2
 800491c:	4619      	mov	r1, r3
 800491e:	4603      	mov	r3, r0
 8004920:	4622      	mov	r2, r4
 8004922:	189b      	adds	r3, r3, r2
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30
 8004926:	462b      	mov	r3, r5
 8004928:	460a      	mov	r2, r1
 800492a:	eb42 0303 	adc.w	r3, r2, r3
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800493c:	4629      	mov	r1, r5
 800493e:	024b      	lsls	r3, r1, #9
 8004940:	4621      	mov	r1, r4
 8004942:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004946:	4621      	mov	r1, r4
 8004948:	024a      	lsls	r2, r1, #9
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800495c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004960:	f7fc f914 	bl	8000b8c <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800496e:	e067      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004970:	4b75      	ldr	r3, [pc, #468]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800497c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800498a:	2300      	movs	r3, #0
 800498c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800498e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	f04f 0000 	mov.w	r0, #0
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	0159      	lsls	r1, r3, #5
 80049a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a4:	0150      	lsls	r0, r2, #5
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4621      	mov	r1, r4
 80049ac:	1a51      	subs	r1, r2, r1
 80049ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049b0:	4629      	mov	r1, r5
 80049b2:	eb63 0301 	sbc.w	r3, r3, r1
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049c4:	4649      	mov	r1, r9
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	4641      	mov	r1, r8
 80049ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ce:	4641      	mov	r1, r8
 80049d0:	018a      	lsls	r2, r1, #6
 80049d2:	4641      	mov	r1, r8
 80049d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d8:	4649      	mov	r1, r9
 80049da:	eb63 0b01 	sbc.w	fp, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f2:	4692      	mov	sl, r2
 80049f4:	469b      	mov	fp, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb1a 0303 	adds.w	r3, sl, r3
 80049fc:	623b      	str	r3, [r7, #32]
 80049fe:	462b      	mov	r3, r5
 8004a00:	eb4b 0303 	adc.w	r3, fp, r3
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a12:	4629      	mov	r1, r5
 8004a14:	028b      	lsls	r3, r1, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	028a      	lsls	r2, r1, #10
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a28:	2200      	movs	r2, #0
 8004a2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a2c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a32:	f7fc f8ab 	bl	8000b8c <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a40:	4b41      	ldr	r3, [pc, #260]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a62:	e0eb      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4b38      	ldr	r3, [pc, #224]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a70:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d06b      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7c:	4b32      	ldr	r3, [pc, #200]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	2200      	movs	r2, #0
 8004a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a90:	2300      	movs	r3, #0
 8004a92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	0159      	lsls	r1, r3, #5
 8004aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aaa:	0150      	lsls	r0, r2, #5
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	1a51      	subs	r1, r2, r1
 8004ab4:	61b9      	str	r1, [r7, #24]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	eb63 0301 	sbc.w	r3, r3, r1
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004aca:	4659      	mov	r1, fp
 8004acc:	018b      	lsls	r3, r1, #6
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	018a      	lsls	r2, r1, #6
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ebb2 0801 	subs.w	r8, r2, r1
 8004ade:	4659      	mov	r1, fp
 8004ae0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af8:	4690      	mov	r8, r2
 8004afa:	4699      	mov	r9, r3
 8004afc:	4623      	mov	r3, r4
 8004afe:	eb18 0303 	adds.w	r3, r8, r3
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	462b      	mov	r3, r5
 8004b06:	eb49 0303 	adc.w	r3, r9, r3
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	024b      	lsls	r3, r1, #9
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b22:	4621      	mov	r1, r4
 8004b24:	024a      	lsls	r2, r1, #9
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2e:	2200      	movs	r2, #0
 8004b30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b38:	f7fc f828 	bl	8000b8c <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b46:	e065      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x420>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b54:	4b3d      	ldr	r3, [pc, #244]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	4611      	mov	r1, r2
 8004b60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b64:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b66:	2300      	movs	r3, #0
 8004b68:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b6e:	4642      	mov	r2, r8
 8004b70:	464b      	mov	r3, r9
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0159      	lsls	r1, r3, #5
 8004b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b80:	0150      	lsls	r0, r2, #5
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4641      	mov	r1, r8
 8004b88:	1a51      	subs	r1, r2, r1
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	018b      	lsls	r3, r1, #6
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004baa:	4651      	mov	r1, sl
 8004bac:	018a      	lsls	r2, r1, #6
 8004bae:	4651      	mov	r1, sl
 8004bb0:	1a54      	subs	r4, r2, r1
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	eb63 0501 	sbc.w	r5, r3, r1
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	eb45 0303 	adc.w	r3, r5, r3
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be6:	4629      	mov	r1, r5
 8004be8:	028b      	lsls	r3, r1, #10
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	028a      	lsls	r2, r1, #10
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c06:	f7fb ffc1 	bl	8000b8c <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4613      	mov	r3, r2
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x458>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0f1b      	lsrs	r3, r3, #28
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c32:	e003      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	37b8      	adds	r7, #184	@ 0xb8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	00f42400 	.word	0x00f42400

08004c54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e28d      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8083 	beq.w	8004d7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c74:	4b94      	ldr	r3, [pc, #592]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d019      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c80:	4b91      	ldr	r3, [pc, #580]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c8c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c98:	d00c      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ca2:	2b0c      	cmp	r3, #12
 8004ca4:	d112      	bne.n	8004ccc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca6:	4b88      	ldr	r3, [pc, #544]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	4b84      	ldr	r3, [pc, #528]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05b      	beq.n	8004d78 <HAL_RCC_OscConfig+0x124>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d157      	bne.n	8004d78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e25a      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x90>
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e01d      	b.n	8004d20 <HAL_RCC_OscConfig+0xcc>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0xb4>
 8004cee:	4b76      	ldr	r3, [pc, #472]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a75      	ldr	r2, [pc, #468]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b73      	ldr	r3, [pc, #460]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a72      	ldr	r2, [pc, #456]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0xcc>
 8004d08:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d28:	f7fd fae4 	bl	80022f4 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d30:	f7fd fae0 	bl	80022f4 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	@ 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e21f      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0xdc>
 8004d4e:	e014      	b.n	8004d7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd fad0 	bl	80022f4 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fd facc 	bl	80022f4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e20b      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	4b57      	ldr	r3, [pc, #348]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x104>
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d06f      	beq.n	8004e66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d86:	4b50      	ldr	r3, [pc, #320]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d92:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d105      	bne.n	8004daa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b47      	ldr	r3, [pc, #284]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b44      	ldr	r3, [pc, #272]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b41      	ldr	r3, [pc, #260]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x186>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1d3      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4937      	ldr	r1, [pc, #220]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b34      	ldr	r3, [pc, #208]	@ (8004ecc <HAL_RCC_OscConfig+0x278>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fa79 	bl	80022f4 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fd fa75 	bl	80022f4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1b4      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4925      	ldr	r1, [pc, #148]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_RCC_OscConfig+0x278>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd fa58 	bl	80022f4 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fd fa54 	bl	80022f4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e193      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d036      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <HAL_RCC_OscConfig+0x27c>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fd fa38 	bl	80022f4 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd fa34 	bl	80022f4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e173      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x234>
 8004ea6:	e01b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd fa21 	bl	80022f4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e00e      	b.n	8004ed4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fa1d 	bl	80022f4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d907      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e15c      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	42470000 	.word	0x42470000
 8004ed0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ea      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8097 	beq.w	800501c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef2:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	4b7f      	ldr	r3, [pc, #508]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	4a7e      	ldr	r2, [pc, #504]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1e:	4b79      	ldr	r3, [pc, #484]	@ (8005104 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d118      	bne.n	8004f5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2a:	4b76      	ldr	r3, [pc, #472]	@ (8005104 <HAL_RCC_OscConfig+0x4b0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a75      	ldr	r2, [pc, #468]	@ (8005104 <HAL_RCC_OscConfig+0x4b0>)
 8004f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f36:	f7fd f9dd 	bl	80022f4 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3e:	f7fd f9d9 	bl	80022f4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e118      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f50:	4b6c      	ldr	r3, [pc, #432]	@ (8005104 <HAL_RCC_OscConfig+0x4b0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <HAL_RCC_OscConfig+0x31e>
 8004f64:	4b66      	ldr	r3, [pc, #408]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f68:	4a65      	ldr	r2, [pc, #404]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f70:	e01c      	b.n	8004fac <HAL_RCC_OscConfig+0x358>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x340>
 8004f7a:	4b61      	ldr	r3, [pc, #388]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	4a60      	ldr	r2, [pc, #384]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f86:	4b5e      	ldr	r3, [pc, #376]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0x358>
 8004f94:	4b5a      	ldr	r3, [pc, #360]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	4a59      	ldr	r2, [pc, #356]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa0:	4b57      	ldr	r3, [pc, #348]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	4a56      	ldr	r2, [pc, #344]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004fa6:	f023 0304 	bic.w	r3, r3, #4
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d015      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fd f99e 	bl	80022f4 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fd f99a 	bl	80022f4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0d7      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0ee      	beq.n	8004fbc <HAL_RCC_OscConfig+0x368>
 8004fde:	e014      	b.n	800500a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fd f988 	bl	80022f4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fd f984 	bl	80022f4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e0c1      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffe:	4b40      	ldr	r3, [pc, #256]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ee      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005010:	4b3b      	ldr	r3, [pc, #236]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	4a3a      	ldr	r2, [pc, #232]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80ad 	beq.w	8005180 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005026:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b08      	cmp	r3, #8
 8005030:	d060      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d145      	bne.n	80050c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b33      	ldr	r3, [pc, #204]	@ (8005108 <HAL_RCC_OscConfig+0x4b4>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd f958 	bl	80022f4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd f954 	bl	80022f4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e093      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	491b      	ldr	r1, [pc, #108]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCC_OscConfig+0x4b4>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd f929 	bl	80022f4 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fd f925 	bl	80022f4 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e064      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x452>
 80050c4:	e05c      	b.n	8005180 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c6:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <HAL_RCC_OscConfig+0x4b4>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd f912 	bl	80022f4 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fd f90e 	bl	80022f4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e04d      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_RCC_OscConfig+0x4ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x480>
 80050f2:	e045      	b.n	8005180 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e040      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
 8005108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800510c:	4b1f      	ldr	r3, [pc, #124]	@ (800518c <HAL_RCC_OscConfig+0x538>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d030      	beq.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d129      	bne.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d122      	bne.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005144:	4293      	cmp	r3, r2
 8005146:	d119      	bne.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	3b01      	subs	r3, #1
 8005156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d10f      	bne.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d107      	bne.n	800517c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800

08005190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e042      	b.n	8005228 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc fe86 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	@ 0x24
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fdc7 	bl	8005d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	@ 0x28
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b20      	cmp	r3, #32
 800524e:	d175      	bne.n	800533c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Transmit+0x2c>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e06e      	b.n	800533e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	@ 0x21
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526e:	f7fd f841 	bl	80022f4 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x6c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a4:	e02e      	b.n	8005304 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	@ 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb29 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e03a      	b.n	800533e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e007      	b.n	80052f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cb      	bne.n	80052a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	@ 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 faf5 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e006      	b.n	800533e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e000      	b.n	800533e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b20      	cmp	r3, #32
 800535e:	d112      	bne.n	8005386 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_UART_Receive_IT+0x26>
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e00b      	b.n	8005388 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	461a      	mov	r2, r3
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fb1c 	bl	80059ba <UART_Start_Receive_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	e000      	b.n	8005388 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b0ba      	sub	sp, #232	@ 0xe8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_UART_IRQHandler+0x66>
 80053e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fbfc 	bl	8005bec <UART_Receive_IT>
      return;
 80053f4:	e25b      	b.n	80058ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80de 	beq.w	80055bc <HAL_UART_IRQHandler+0x22c>
 8005400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005410:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80d1 	beq.w	80055bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <HAL_UART_IRQHandler+0xae>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f043 0201 	orr.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_UART_IRQHandler+0xd2>
 800544a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f043 0202 	orr.w	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xf6>
 800546e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d011      	beq.n	80054b6 <HAL_UART_IRQHandler+0x126>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f043 0208 	orr.w	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 81f2 	beq.w	80058a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_UART_IRQHandler+0x14e>
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fb87 	bl	8005bec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e8:	2b40      	cmp	r3, #64	@ 0x40
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <HAL_UART_IRQHandler+0x17a>
 8005502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d04f      	beq.n	80055aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa8f 	bl	8005a2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b40      	cmp	r3, #64	@ 0x40
 800551c:	d141      	bne.n	80055a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800554a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800554e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1d9      	bne.n	800551e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005576:	4a7e      	ldr	r2, [pc, #504]	@ (8005770 <HAL_UART_IRQHandler+0x3e0>)
 8005578:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd f9a9 	bl	80028d6 <HAL_DMA_Abort_IT>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005594:	4610      	mov	r0, r2
 8005596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	e00e      	b.n	80055b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f99e 	bl	80058dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e00a      	b.n	80055b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f99a 	bl	80058dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e006      	b.n	80055b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f996 	bl	80058dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055b6:	e175      	b.n	80058a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	bf00      	nop
    return;
 80055ba:	e173      	b.n	80058a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	f040 814f 	bne.w	8005864 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8148 	beq.w	8005864 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8141 	beq.w	8005864 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	f040 80b6 	bne.w	8005774 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005614:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8145 	beq.w	80058a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005626:	429a      	cmp	r2, r3
 8005628:	f080 813e 	bcs.w	80058a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005632:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563e:	f000 8088 	beq.w	8005752 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800565c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800566e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800567a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d9      	bne.n	8005642 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3314      	adds	r3, #20
 8005694:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800569e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e1      	bne.n	800568e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3314      	adds	r3, #20
 80056d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e3      	bne.n	80056ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005722:	f023 0310 	bic.w	r3, r3, #16
 8005726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005734:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005736:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800573a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e3      	bne.n	8005710 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	4618      	mov	r0, r3
 800574e:	f7fd f852 	bl	80027f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005760:	b29b      	uxth	r3, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	b29b      	uxth	r3, r3
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8c1 	bl	80058f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576e:	e09b      	b.n	80058a8 <HAL_UART_IRQHandler+0x518>
 8005770:	08005af5 	.word	0x08005af5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800577c:	b29b      	uxth	r3, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 808e 	beq.w	80058ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8089 	beq.w	80058ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057be:	647a      	str	r2, [r7, #68]	@ 0x44
 80057c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e3      	bne.n	800579a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3314      	adds	r3, #20
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	623b      	str	r3, [r7, #32]
   return(result);
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e3      	bne.n	80057d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	60fb      	str	r3, [r7, #12]
   return(result);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	617b      	str	r3, [r7, #20]
   return(result);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e3      	bne.n	8005818 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f847 	bl	80058f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005862:	e023      	b.n	80058ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_IRQHandler+0x4f4>
 8005870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f94d 	bl	8005b1c <UART_Transmit_IT>
    return;
 8005882:	e014      	b.n	80058ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <HAL_UART_IRQHandler+0x51e>
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f98d 	bl	8005bbc <UART_EndTransmit_IT>
    return;
 80058a2:	e004      	b.n	80058ae <HAL_UART_IRQHandler+0x51e>
    return;
 80058a4:	bf00      	nop
 80058a6:	e002      	b.n	80058ae <HAL_UART_IRQHandler+0x51e>
      return;
 80058a8:	bf00      	nop
 80058aa:	e000      	b.n	80058ae <HAL_UART_IRQHandler+0x51e>
      return;
 80058ac:	bf00      	nop
  }
}
 80058ae:	37e8      	adds	r7, #232	@ 0xe8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005918:	e03b      	b.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d037      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fc fce7 	bl	80022f4 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <UART_WaitOnFlagUntilTimeout+0x30>
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e03a      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d023      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b80      	cmp	r3, #128	@ 0x80
 800594e:	d020      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b40      	cmp	r3, #64	@ 0x40
 8005954:	d01d      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d116      	bne.n	8005992 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f857 	bl	8005a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2208      	movs	r2, #8
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e00f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d0b4      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2222      	movs	r2, #34	@ 0x22
 80059e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0220 	orr.w	r2, r2, #32
 8005a1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b095      	sub	sp, #84	@ 0x54
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a56:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d119      	bne.n	8005ada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f023 0310 	bic.w	r3, r3, #16
 8005abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac6:	61ba      	str	r2, [r7, #24]
 8005ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6979      	ldr	r1, [r7, #20]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ae8:	bf00      	nop
 8005aea:	3754      	adds	r7, #84	@ 0x54
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fee4 	bl	80058dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b21      	cmp	r3, #33	@ 0x21
 8005b2e:	d13e      	bne.n	8005bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b38:	d114      	bne.n	8005b64 <UART_Transmit_IT+0x48>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d110      	bne.n	8005b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]
 8005b62:	e008      	b.n	8005b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6211      	str	r1, [r2, #32]
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4619      	mov	r1, r3
 8005b84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fe69 	bl	80058b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	@ 0x30
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b22      	cmp	r3, #34	@ 0x22
 8005bfe:	f040 80ae 	bne.w	8005d5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0a:	d117      	bne.n	8005c3c <UART_Receive_IT+0x50>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d113      	bne.n	8005c3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	1c9a      	adds	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c3a:	e026      	b.n	8005c8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4e:	d007      	beq.n	8005c60 <UART_Receive_IT+0x74>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <UART_Receive_IT+0x82>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e008      	b.n	8005c80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4619      	mov	r1, r3
 8005c98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d15d      	bne.n	8005d5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0220 	bic.w	r2, r2, #32
 8005cac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d135      	bne.n	8005d50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f023 0310 	bic.w	r3, r3, #16
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0a:	623a      	str	r2, [r7, #32]
 8005d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	69f9      	ldr	r1, [r7, #28]
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d10a      	bne.n	8005d42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fdd1 	bl	80058f0 <HAL_UARTEx_RxEventCallback>
 8005d4e:	e002      	b.n	8005d56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fdb9 	bl	80058c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e002      	b.n	8005d60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3730      	adds	r7, #48	@ 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d6c:	b0c0      	sub	sp, #256	@ 0x100
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	ea40 0301 	orr.w	r3, r0, r1
 8005d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dc0:	f021 010c 	bic.w	r1, r1, #12
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	6999      	ldr	r1, [r3, #24]
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	ea40 0301 	orr.w	r3, r0, r1
 8005dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b8f      	ldr	r3, [pc, #572]	@ (8006034 <UART_SetConfig+0x2cc>)
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d005      	beq.n	8005e08 <UART_SetConfig+0xa0>
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b8d      	ldr	r3, [pc, #564]	@ (8006038 <UART_SetConfig+0x2d0>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d104      	bne.n	8005e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7fe fce0 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8005e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e10:	e003      	b.n	8005e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fe fcc7 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8005e16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e24:	f040 810c 	bne.w	8006040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	1891      	adds	r1, r2, r2
 8005e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e42:	415b      	adcs	r3, r3
 8005e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	eb12 0801 	adds.w	r8, r2, r1
 8005e50:	4629      	mov	r1, r5
 8005e52:	eb43 0901 	adc.w	r9, r3, r1
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e6a:	4690      	mov	r8, r2
 8005e6c:	4699      	mov	r9, r3
 8005e6e:	4623      	mov	r3, r4
 8005e70:	eb18 0303 	adds.w	r3, r8, r3
 8005e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e78:	462b      	mov	r3, r5
 8005e7a:	eb49 0303 	adc.w	r3, r9, r3
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e96:	460b      	mov	r3, r1
 8005e98:	18db      	adds	r3, r3, r3
 8005e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005eac:	f7fa fe6e 	bl	8000b8c <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4b61      	ldr	r3, [pc, #388]	@ (800603c <UART_SetConfig+0x2d4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	011c      	lsls	r4, r3, #4
 8005ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f00:	4692      	mov	sl, r2
 8005f02:	469b      	mov	fp, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	eb1a 0303 	adds.w	r3, sl, r3
 8005f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	eb4b 0303 	adc.w	r3, fp, r3
 8005f14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	18db      	adds	r3, r3, r3
 8005f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f32:	4613      	mov	r3, r2
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f42:	f7fa fe23 	bl	8000b8c <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <UART_SetConfig+0x2d4>)
 8005f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2264      	movs	r2, #100	@ 0x64
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	1acb      	subs	r3, r1, r3
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f62:	4b36      	ldr	r3, [pc, #216]	@ (800603c <UART_SetConfig+0x2d4>)
 8005f64:	fba3 2302 	umull	r2, r3, r3, r2
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f70:	441c      	add	r4, r3
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	1891      	adds	r1, r2, r2
 8005f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f8c:	415b      	adcs	r3, r3
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f94:	4641      	mov	r1, r8
 8005f96:	1851      	adds	r1, r2, r1
 8005f98:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	414b      	adcs	r3, r1
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fac:	4659      	mov	r1, fp
 8005fae:	00cb      	lsls	r3, r1, #3
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	00ca      	lsls	r2, r1, #3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fc8:	464b      	mov	r3, r9
 8005fca:	460a      	mov	r2, r1
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fe8:	460b      	mov	r3, r1
 8005fea:	18db      	adds	r3, r3, r3
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fee:	4613      	mov	r3, r2
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ffe:	f7fa fdc5 	bl	8000b8c <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <UART_SetConfig+0x2d4>)
 8006008:	fba3 1302 	umull	r1, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2164      	movs	r1, #100	@ 0x64
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	3332      	adds	r3, #50	@ 0x32
 800601a:	4a08      	ldr	r2, [pc, #32]	@ (800603c <UART_SetConfig+0x2d4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 0207 	and.w	r2, r3, #7
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4422      	add	r2, r4
 800602e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006030:	e106      	b.n	8006240 <UART_SetConfig+0x4d8>
 8006032:	bf00      	nop
 8006034:	40011000 	.word	0x40011000
 8006038:	40011400 	.word	0x40011400
 800603c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800604a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800604e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006052:	4642      	mov	r2, r8
 8006054:	464b      	mov	r3, r9
 8006056:	1891      	adds	r1, r2, r2
 8006058:	6239      	str	r1, [r7, #32]
 800605a:	415b      	adcs	r3, r3
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
 800605e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006062:	4641      	mov	r1, r8
 8006064:	1854      	adds	r4, r2, r1
 8006066:	4649      	mov	r1, r9
 8006068:	eb43 0501 	adc.w	r5, r3, r1
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	00eb      	lsls	r3, r5, #3
 8006076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607a:	00e2      	lsls	r2, r4, #3
 800607c:	4614      	mov	r4, r2
 800607e:	461d      	mov	r5, r3
 8006080:	4643      	mov	r3, r8
 8006082:	18e3      	adds	r3, r4, r3
 8006084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006088:	464b      	mov	r3, r9
 800608a:	eb45 0303 	adc.w	r3, r5, r3
 800608e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800609e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060ae:	4629      	mov	r1, r5
 80060b0:	008b      	lsls	r3, r1, #2
 80060b2:	4621      	mov	r1, r4
 80060b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b8:	4621      	mov	r1, r4
 80060ba:	008a      	lsls	r2, r1, #2
 80060bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060c0:	f7fa fd64 	bl	8000b8c <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4b60      	ldr	r3, [pc, #384]	@ (800624c <UART_SetConfig+0x4e4>)
 80060ca:	fba3 2302 	umull	r2, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	011c      	lsls	r4, r3, #4
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060e4:	4642      	mov	r2, r8
 80060e6:	464b      	mov	r3, r9
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	61b9      	str	r1, [r7, #24]
 80060ec:	415b      	adcs	r3, r3
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f4:	4641      	mov	r1, r8
 80060f6:	1851      	adds	r1, r2, r1
 80060f8:	6139      	str	r1, [r7, #16]
 80060fa:	4649      	mov	r1, r9
 80060fc:	414b      	adcs	r3, r1
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800610c:	4659      	mov	r1, fp
 800610e:	00cb      	lsls	r3, r1, #3
 8006110:	4651      	mov	r1, sl
 8006112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006116:	4651      	mov	r1, sl
 8006118:	00ca      	lsls	r2, r1, #3
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	4603      	mov	r3, r0
 8006120:	4642      	mov	r2, r8
 8006122:	189b      	adds	r3, r3, r2
 8006124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006128:	464b      	mov	r3, r9
 800612a:	460a      	mov	r2, r1
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800613e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800614c:	4649      	mov	r1, r9
 800614e:	008b      	lsls	r3, r1, #2
 8006150:	4641      	mov	r1, r8
 8006152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006156:	4641      	mov	r1, r8
 8006158:	008a      	lsls	r2, r1, #2
 800615a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800615e:	f7fa fd15 	bl	8000b8c <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4611      	mov	r1, r2
 8006168:	4b38      	ldr	r3, [pc, #224]	@ (800624c <UART_SetConfig+0x4e4>)
 800616a:	fba3 2301 	umull	r2, r3, r3, r1
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2264      	movs	r2, #100	@ 0x64
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	1acb      	subs	r3, r1, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	3332      	adds	r3, #50	@ 0x32
 800617c:	4a33      	ldr	r2, [pc, #204]	@ (800624c <UART_SetConfig+0x4e4>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006188:	441c      	add	r4, r3
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618e:	2200      	movs	r2, #0
 8006190:	673b      	str	r3, [r7, #112]	@ 0x70
 8006192:	677a      	str	r2, [r7, #116]	@ 0x74
 8006194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	415b      	adcs	r3, r3
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a8:	4641      	mov	r1, r8
 80061aa:	1851      	adds	r1, r2, r1
 80061ac:	6039      	str	r1, [r7, #0]
 80061ae:	4649      	mov	r1, r9
 80061b0:	414b      	adcs	r3, r1
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061c0:	4659      	mov	r1, fp
 80061c2:	00cb      	lsls	r3, r1, #3
 80061c4:	4651      	mov	r1, sl
 80061c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ca:	4651      	mov	r1, sl
 80061cc:	00ca      	lsls	r2, r1, #3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	4642      	mov	r2, r8
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061da:	464b      	mov	r3, r9
 80061dc:	460a      	mov	r2, r1
 80061de:	eb42 0303 	adc.w	r3, r2, r3
 80061e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061fc:	4649      	mov	r1, r9
 80061fe:	008b      	lsls	r3, r1, #2
 8006200:	4641      	mov	r1, r8
 8006202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006206:	4641      	mov	r1, r8
 8006208:	008a      	lsls	r2, r1, #2
 800620a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800620e:	f7fa fcbd 	bl	8000b8c <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <UART_SetConfig+0x4e4>)
 8006218:	fba3 1302 	umull	r1, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	2164      	movs	r1, #100	@ 0x64
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	3332      	adds	r3, #50	@ 0x32
 800622a:	4a08      	ldr	r2, [pc, #32]	@ (800624c <UART_SetConfig+0x4e4>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4422      	add	r2, r4
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800624c:	51eb851f 	.word	0x51eb851f

08006250 <malloc>:
 8006250:	4b02      	ldr	r3, [pc, #8]	@ (800625c <malloc+0xc>)
 8006252:	4601      	mov	r1, r0
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	f000 b82d 	b.w	80062b4 <_malloc_r>
 800625a:	bf00      	nop
 800625c:	20000018 	.word	0x20000018

08006260 <free>:
 8006260:	4b02      	ldr	r3, [pc, #8]	@ (800626c <free+0xc>)
 8006262:	4601      	mov	r1, r0
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f000 bb47 	b.w	80068f8 <_free_r>
 800626a:	bf00      	nop
 800626c:	20000018 	.word	0x20000018

08006270 <sbrk_aligned>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4e0f      	ldr	r6, [pc, #60]	@ (80062b0 <sbrk_aligned+0x40>)
 8006274:	460c      	mov	r4, r1
 8006276:	6831      	ldr	r1, [r6, #0]
 8006278:	4605      	mov	r5, r0
 800627a:	b911      	cbnz	r1, 8006282 <sbrk_aligned+0x12>
 800627c:	f000 faec 	bl	8006858 <_sbrk_r>
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fae7 	bl	8006858 <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d103      	bne.n	8006296 <sbrk_aligned+0x26>
 800628e:	f04f 34ff 	mov.w	r4, #4294967295
 8006292:	4620      	mov	r0, r4
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d0f8      	beq.n	8006292 <sbrk_aligned+0x22>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 fad8 	bl	8006858 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f2      	bne.n	8006292 <sbrk_aligned+0x22>
 80062ac:	e7ef      	b.n	800628e <sbrk_aligned+0x1e>
 80062ae:	bf00      	nop
 80062b0:	200001bc 	.word	0x200001bc

080062b4 <_malloc_r>:
 80062b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b8:	1ccd      	adds	r5, r1, #3
 80062ba:	f025 0503 	bic.w	r5, r5, #3
 80062be:	3508      	adds	r5, #8
 80062c0:	2d0c      	cmp	r5, #12
 80062c2:	bf38      	it	cc
 80062c4:	250c      	movcc	r5, #12
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	4606      	mov	r6, r0
 80062ca:	db01      	blt.n	80062d0 <_malloc_r+0x1c>
 80062cc:	42a9      	cmp	r1, r5
 80062ce:	d904      	bls.n	80062da <_malloc_r+0x26>
 80062d0:	230c      	movs	r3, #12
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063b0 <_malloc_r+0xfc>
 80062de:	f000 f869 	bl	80063b4 <__malloc_lock>
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	461c      	mov	r4, r3
 80062e8:	bb44      	cbnz	r4, 800633c <_malloc_r+0x88>
 80062ea:	4629      	mov	r1, r5
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbf 	bl	8006270 <sbrk_aligned>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	4604      	mov	r4, r0
 80062f6:	d158      	bne.n	80063aa <_malloc_r+0xf6>
 80062f8:	f8d8 4000 	ldr.w	r4, [r8]
 80062fc:	4627      	mov	r7, r4
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d143      	bne.n	800638a <_malloc_r+0xd6>
 8006302:	2c00      	cmp	r4, #0
 8006304:	d04b      	beq.n	800639e <_malloc_r+0xea>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	4639      	mov	r1, r7
 800630a:	4630      	mov	r0, r6
 800630c:	eb04 0903 	add.w	r9, r4, r3
 8006310:	f000 faa2 	bl	8006858 <_sbrk_r>
 8006314:	4581      	cmp	r9, r0
 8006316:	d142      	bne.n	800639e <_malloc_r+0xea>
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	1a6d      	subs	r5, r5, r1
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffa6 	bl	8006270 <sbrk_aligned>
 8006324:	3001      	adds	r0, #1
 8006326:	d03a      	beq.n	800639e <_malloc_r+0xea>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	442b      	add	r3, r5
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	f8d8 3000 	ldr.w	r3, [r8]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	bb62      	cbnz	r2, 8006390 <_malloc_r+0xdc>
 8006336:	f8c8 7000 	str.w	r7, [r8]
 800633a:	e00f      	b.n	800635c <_malloc_r+0xa8>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1b52      	subs	r2, r2, r5
 8006340:	d420      	bmi.n	8006384 <_malloc_r+0xd0>
 8006342:	2a0b      	cmp	r2, #11
 8006344:	d917      	bls.n	8006376 <_malloc_r+0xc2>
 8006346:	1961      	adds	r1, r4, r5
 8006348:	42a3      	cmp	r3, r4
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	bf18      	it	ne
 800634e:	6059      	strne	r1, [r3, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	bf08      	it	eq
 8006354:	f8c8 1000 	streq.w	r1, [r8]
 8006358:	5162      	str	r2, [r4, r5]
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f82f 	bl	80063c0 <__malloc_unlock>
 8006362:	f104 000b 	add.w	r0, r4, #11
 8006366:	1d23      	adds	r3, r4, #4
 8006368:	f020 0007 	bic.w	r0, r0, #7
 800636c:	1ac2      	subs	r2, r0, r3
 800636e:	bf1c      	itt	ne
 8006370:	1a1b      	subne	r3, r3, r0
 8006372:	50a3      	strne	r3, [r4, r2]
 8006374:	e7af      	b.n	80062d6 <_malloc_r+0x22>
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	42a3      	cmp	r3, r4
 800637a:	bf0c      	ite	eq
 800637c:	f8c8 2000 	streq.w	r2, [r8]
 8006380:	605a      	strne	r2, [r3, #4]
 8006382:	e7eb      	b.n	800635c <_malloc_r+0xa8>
 8006384:	4623      	mov	r3, r4
 8006386:	6864      	ldr	r4, [r4, #4]
 8006388:	e7ae      	b.n	80062e8 <_malloc_r+0x34>
 800638a:	463c      	mov	r4, r7
 800638c:	687f      	ldr	r7, [r7, #4]
 800638e:	e7b6      	b.n	80062fe <_malloc_r+0x4a>
 8006390:	461a      	mov	r2, r3
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	42a3      	cmp	r3, r4
 8006396:	d1fb      	bne.n	8006390 <_malloc_r+0xdc>
 8006398:	2300      	movs	r3, #0
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e7de      	b.n	800635c <_malloc_r+0xa8>
 800639e:	230c      	movs	r3, #12
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 f80c 	bl	80063c0 <__malloc_unlock>
 80063a8:	e794      	b.n	80062d4 <_malloc_r+0x20>
 80063aa:	6005      	str	r5, [r0, #0]
 80063ac:	e7d6      	b.n	800635c <_malloc_r+0xa8>
 80063ae:	bf00      	nop
 80063b0:	200001c0 	.word	0x200001c0

080063b4 <__malloc_lock>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__malloc_lock+0x8>)
 80063b6:	f000 ba9c 	b.w	80068f2 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000304 	.word	0x20000304

080063c0 <__malloc_unlock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_unlock+0x8>)
 80063c2:	f000 ba97 	b.w	80068f4 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000304 	.word	0x20000304

080063cc <std>:
 80063cc:	2300      	movs	r3, #0
 80063ce:	b510      	push	{r4, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	e9c0 3300 	strd	r3, r3, [r0]
 80063d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063da:	6083      	str	r3, [r0, #8]
 80063dc:	8181      	strh	r1, [r0, #12]
 80063de:	6643      	str	r3, [r0, #100]	@ 0x64
 80063e0:	81c2      	strh	r2, [r0, #14]
 80063e2:	6183      	str	r3, [r0, #24]
 80063e4:	4619      	mov	r1, r3
 80063e6:	2208      	movs	r2, #8
 80063e8:	305c      	adds	r0, #92	@ 0x5c
 80063ea:	f000 f9f9 	bl	80067e0 <memset>
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <std+0x58>)
 80063f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <std+0x5c>)
 80063f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <std+0x60>)
 80063f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <std+0x64>)
 80063fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <std+0x68>)
 8006400:	6224      	str	r4, [r4, #32]
 8006402:	429c      	cmp	r4, r3
 8006404:	d006      	beq.n	8006414 <std+0x48>
 8006406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800640a:	4294      	cmp	r4, r2
 800640c:	d002      	beq.n	8006414 <std+0x48>
 800640e:	33d0      	adds	r3, #208	@ 0xd0
 8006410:	429c      	cmp	r4, r3
 8006412:	d105      	bne.n	8006420 <std+0x54>
 8006414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641c:	f000 ba68 	b.w	80068f0 <__retarget_lock_init_recursive>
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	08006631 	.word	0x08006631
 8006428:	08006653 	.word	0x08006653
 800642c:	0800668b 	.word	0x0800668b
 8006430:	080066af 	.word	0x080066af
 8006434:	200001c4 	.word	0x200001c4

08006438 <stdio_exit_handler>:
 8006438:	4a02      	ldr	r2, [pc, #8]	@ (8006444 <stdio_exit_handler+0xc>)
 800643a:	4903      	ldr	r1, [pc, #12]	@ (8006448 <stdio_exit_handler+0x10>)
 800643c:	4803      	ldr	r0, [pc, #12]	@ (800644c <stdio_exit_handler+0x14>)
 800643e:	f000 b869 	b.w	8006514 <_fwalk_sglue>
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
 8006448:	08007035 	.word	0x08007035
 800644c:	2000001c 	.word	0x2000001c

08006450 <cleanup_stdio>:
 8006450:	6841      	ldr	r1, [r0, #4]
 8006452:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <cleanup_stdio+0x34>)
 8006454:	4299      	cmp	r1, r3
 8006456:	b510      	push	{r4, lr}
 8006458:	4604      	mov	r4, r0
 800645a:	d001      	beq.n	8006460 <cleanup_stdio+0x10>
 800645c:	f000 fdea 	bl	8007034 <_fflush_r>
 8006460:	68a1      	ldr	r1, [r4, #8]
 8006462:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <cleanup_stdio+0x38>)
 8006464:	4299      	cmp	r1, r3
 8006466:	d002      	beq.n	800646e <cleanup_stdio+0x1e>
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fde3 	bl	8007034 <_fflush_r>
 800646e:	68e1      	ldr	r1, [r4, #12]
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <cleanup_stdio+0x3c>)
 8006472:	4299      	cmp	r1, r3
 8006474:	d004      	beq.n	8006480 <cleanup_stdio+0x30>
 8006476:	4620      	mov	r0, r4
 8006478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800647c:	f000 bdda 	b.w	8007034 <_fflush_r>
 8006480:	bd10      	pop	{r4, pc}
 8006482:	bf00      	nop
 8006484:	200001c4 	.word	0x200001c4
 8006488:	2000022c 	.word	0x2000022c
 800648c:	20000294 	.word	0x20000294

08006490 <global_stdio_init.part.0>:
 8006490:	b510      	push	{r4, lr}
 8006492:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <global_stdio_init.part.0+0x30>)
 8006494:	4c0b      	ldr	r4, [pc, #44]	@ (80064c4 <global_stdio_init.part.0+0x34>)
 8006496:	4a0c      	ldr	r2, [pc, #48]	@ (80064c8 <global_stdio_init.part.0+0x38>)
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	4620      	mov	r0, r4
 800649c:	2200      	movs	r2, #0
 800649e:	2104      	movs	r1, #4
 80064a0:	f7ff ff94 	bl	80063cc <std>
 80064a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064a8:	2201      	movs	r2, #1
 80064aa:	2109      	movs	r1, #9
 80064ac:	f7ff ff8e 	bl	80063cc <std>
 80064b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064b4:	2202      	movs	r2, #2
 80064b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ba:	2112      	movs	r1, #18
 80064bc:	f7ff bf86 	b.w	80063cc <std>
 80064c0:	200002fc 	.word	0x200002fc
 80064c4:	200001c4 	.word	0x200001c4
 80064c8:	08006439 	.word	0x08006439

080064cc <__sfp_lock_acquire>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__sfp_lock_acquire+0x8>)
 80064ce:	f000 ba10 	b.w	80068f2 <__retarget_lock_acquire_recursive>
 80064d2:	bf00      	nop
 80064d4:	20000305 	.word	0x20000305

080064d8 <__sfp_lock_release>:
 80064d8:	4801      	ldr	r0, [pc, #4]	@ (80064e0 <__sfp_lock_release+0x8>)
 80064da:	f000 ba0b 	b.w	80068f4 <__retarget_lock_release_recursive>
 80064de:	bf00      	nop
 80064e0:	20000305 	.word	0x20000305

080064e4 <__sinit>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	f7ff fff0 	bl	80064cc <__sfp_lock_acquire>
 80064ec:	6a23      	ldr	r3, [r4, #32]
 80064ee:	b11b      	cbz	r3, 80064f8 <__sinit+0x14>
 80064f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f4:	f7ff bff0 	b.w	80064d8 <__sfp_lock_release>
 80064f8:	4b04      	ldr	r3, [pc, #16]	@ (800650c <__sinit+0x28>)
 80064fa:	6223      	str	r3, [r4, #32]
 80064fc:	4b04      	ldr	r3, [pc, #16]	@ (8006510 <__sinit+0x2c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f5      	bne.n	80064f0 <__sinit+0xc>
 8006504:	f7ff ffc4 	bl	8006490 <global_stdio_init.part.0>
 8006508:	e7f2      	b.n	80064f0 <__sinit+0xc>
 800650a:	bf00      	nop
 800650c:	08006451 	.word	0x08006451
 8006510:	200002fc 	.word	0x200002fc

08006514 <_fwalk_sglue>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	4607      	mov	r7, r0
 800651a:	4688      	mov	r8, r1
 800651c:	4614      	mov	r4, r2
 800651e:	2600      	movs	r6, #0
 8006520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006524:	f1b9 0901 	subs.w	r9, r9, #1
 8006528:	d505      	bpl.n	8006536 <_fwalk_sglue+0x22>
 800652a:	6824      	ldr	r4, [r4, #0]
 800652c:	2c00      	cmp	r4, #0
 800652e:	d1f7      	bne.n	8006520 <_fwalk_sglue+0xc>
 8006530:	4630      	mov	r0, r6
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	89ab      	ldrh	r3, [r5, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d907      	bls.n	800654c <_fwalk_sglue+0x38>
 800653c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006540:	3301      	adds	r3, #1
 8006542:	d003      	beq.n	800654c <_fwalk_sglue+0x38>
 8006544:	4629      	mov	r1, r5
 8006546:	4638      	mov	r0, r7
 8006548:	47c0      	blx	r8
 800654a:	4306      	orrs	r6, r0
 800654c:	3568      	adds	r5, #104	@ 0x68
 800654e:	e7e9      	b.n	8006524 <_fwalk_sglue+0x10>

08006550 <iprintf>:
 8006550:	b40f      	push	{r0, r1, r2, r3}
 8006552:	b507      	push	{r0, r1, r2, lr}
 8006554:	4906      	ldr	r1, [pc, #24]	@ (8006570 <iprintf+0x20>)
 8006556:	ab04      	add	r3, sp, #16
 8006558:	6808      	ldr	r0, [r1, #0]
 800655a:	f853 2b04 	ldr.w	r2, [r3], #4
 800655e:	6881      	ldr	r1, [r0, #8]
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	f000 fa3d 	bl	80069e0 <_vfiprintf_r>
 8006566:	b003      	add	sp, #12
 8006568:	f85d eb04 	ldr.w	lr, [sp], #4
 800656c:	b004      	add	sp, #16
 800656e:	4770      	bx	lr
 8006570:	20000018 	.word	0x20000018

08006574 <_puts_r>:
 8006574:	6a03      	ldr	r3, [r0, #32]
 8006576:	b570      	push	{r4, r5, r6, lr}
 8006578:	6884      	ldr	r4, [r0, #8]
 800657a:	4605      	mov	r5, r0
 800657c:	460e      	mov	r6, r1
 800657e:	b90b      	cbnz	r3, 8006584 <_puts_r+0x10>
 8006580:	f7ff ffb0 	bl	80064e4 <__sinit>
 8006584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006586:	07db      	lsls	r3, r3, #31
 8006588:	d405      	bmi.n	8006596 <_puts_r+0x22>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	0598      	lsls	r0, r3, #22
 800658e:	d402      	bmi.n	8006596 <_puts_r+0x22>
 8006590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006592:	f000 f9ae 	bl	80068f2 <__retarget_lock_acquire_recursive>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	0719      	lsls	r1, r3, #28
 800659a:	d502      	bpl.n	80065a2 <_puts_r+0x2e>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d135      	bne.n	800660e <_puts_r+0x9a>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	f000 f8c5 	bl	8006734 <__swsetup_r>
 80065aa:	b380      	cbz	r0, 800660e <_puts_r+0x9a>
 80065ac:	f04f 35ff 	mov.w	r5, #4294967295
 80065b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065b2:	07da      	lsls	r2, r3, #31
 80065b4:	d405      	bmi.n	80065c2 <_puts_r+0x4e>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	059b      	lsls	r3, r3, #22
 80065ba:	d402      	bmi.n	80065c2 <_puts_r+0x4e>
 80065bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065be:	f000 f999 	bl	80068f4 <__retarget_lock_release_recursive>
 80065c2:	4628      	mov	r0, r5
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da04      	bge.n	80065d4 <_puts_r+0x60>
 80065ca:	69a2      	ldr	r2, [r4, #24]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	dc17      	bgt.n	8006600 <_puts_r+0x8c>
 80065d0:	290a      	cmp	r1, #10
 80065d2:	d015      	beq.n	8006600 <_puts_r+0x8c>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	6022      	str	r2, [r4, #0]
 80065da:	7019      	strb	r1, [r3, #0]
 80065dc:	68a3      	ldr	r3, [r4, #8]
 80065de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065e2:	3b01      	subs	r3, #1
 80065e4:	60a3      	str	r3, [r4, #8]
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d1ed      	bne.n	80065c6 <_puts_r+0x52>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da11      	bge.n	8006612 <_puts_r+0x9e>
 80065ee:	4622      	mov	r2, r4
 80065f0:	210a      	movs	r1, #10
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f85f 	bl	80066b6 <__swbuf_r>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0d7      	beq.n	80065ac <_puts_r+0x38>
 80065fc:	250a      	movs	r5, #10
 80065fe:	e7d7      	b.n	80065b0 <_puts_r+0x3c>
 8006600:	4622      	mov	r2, r4
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f857 	bl	80066b6 <__swbuf_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d1e7      	bne.n	80065dc <_puts_r+0x68>
 800660c:	e7ce      	b.n	80065ac <_puts_r+0x38>
 800660e:	3e01      	subs	r6, #1
 8006610:	e7e4      	b.n	80065dc <_puts_r+0x68>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	220a      	movs	r2, #10
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	e7ee      	b.n	80065fc <_puts_r+0x88>
	...

08006620 <puts>:
 8006620:	4b02      	ldr	r3, [pc, #8]	@ (800662c <puts+0xc>)
 8006622:	4601      	mov	r1, r0
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	f7ff bfa5 	b.w	8006574 <_puts_r>
 800662a:	bf00      	nop
 800662c:	20000018 	.word	0x20000018

08006630 <__sread>:
 8006630:	b510      	push	{r4, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006638:	f000 f8fc 	bl	8006834 <_read_r>
 800663c:	2800      	cmp	r0, #0
 800663e:	bfab      	itete	ge
 8006640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006642:	89a3      	ldrhlt	r3, [r4, #12]
 8006644:	181b      	addge	r3, r3, r0
 8006646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800664a:	bfac      	ite	ge
 800664c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800664e:	81a3      	strhlt	r3, [r4, #12]
 8006650:	bd10      	pop	{r4, pc}

08006652 <__swrite>:
 8006652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006656:	461f      	mov	r7, r3
 8006658:	898b      	ldrh	r3, [r1, #12]
 800665a:	05db      	lsls	r3, r3, #23
 800665c:	4605      	mov	r5, r0
 800665e:	460c      	mov	r4, r1
 8006660:	4616      	mov	r6, r2
 8006662:	d505      	bpl.n	8006670 <__swrite+0x1e>
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	2302      	movs	r3, #2
 800666a:	2200      	movs	r2, #0
 800666c:	f000 f8d0 	bl	8006810 <_lseek_r>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	4628      	mov	r0, r5
 8006682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	f000 b8f7 	b.w	8006878 <_write_r>

0800668a <__sseek>:
 800668a:	b510      	push	{r4, lr}
 800668c:	460c      	mov	r4, r1
 800668e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006692:	f000 f8bd 	bl	8006810 <_lseek_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	bf15      	itete	ne
 800669c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800669e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066a6:	81a3      	strheq	r3, [r4, #12]
 80066a8:	bf18      	it	ne
 80066aa:	81a3      	strhne	r3, [r4, #12]
 80066ac:	bd10      	pop	{r4, pc}

080066ae <__sclose>:
 80066ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b2:	f000 b89d 	b.w	80067f0 <_close_r>

080066b6 <__swbuf_r>:
 80066b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b8:	460e      	mov	r6, r1
 80066ba:	4614      	mov	r4, r2
 80066bc:	4605      	mov	r5, r0
 80066be:	b118      	cbz	r0, 80066c8 <__swbuf_r+0x12>
 80066c0:	6a03      	ldr	r3, [r0, #32]
 80066c2:	b90b      	cbnz	r3, 80066c8 <__swbuf_r+0x12>
 80066c4:	f7ff ff0e 	bl	80064e4 <__sinit>
 80066c8:	69a3      	ldr	r3, [r4, #24]
 80066ca:	60a3      	str	r3, [r4, #8]
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	071a      	lsls	r2, r3, #28
 80066d0:	d501      	bpl.n	80066d6 <__swbuf_r+0x20>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	b943      	cbnz	r3, 80066e8 <__swbuf_r+0x32>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 f82b 	bl	8006734 <__swsetup_r>
 80066de:	b118      	cbz	r0, 80066e8 <__swbuf_r+0x32>
 80066e0:	f04f 37ff 	mov.w	r7, #4294967295
 80066e4:	4638      	mov	r0, r7
 80066e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	6922      	ldr	r2, [r4, #16]
 80066ec:	1a98      	subs	r0, r3, r2
 80066ee:	6963      	ldr	r3, [r4, #20]
 80066f0:	b2f6      	uxtb	r6, r6
 80066f2:	4283      	cmp	r3, r0
 80066f4:	4637      	mov	r7, r6
 80066f6:	dc05      	bgt.n	8006704 <__swbuf_r+0x4e>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fc9a 	bl	8007034 <_fflush_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	d1ed      	bne.n	80066e0 <__swbuf_r+0x2a>
 8006704:	68a3      	ldr	r3, [r4, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	60a3      	str	r3, [r4, #8]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	701e      	strb	r6, [r3, #0]
 8006712:	6962      	ldr	r2, [r4, #20]
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	429a      	cmp	r2, r3
 8006718:	d004      	beq.n	8006724 <__swbuf_r+0x6e>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	07db      	lsls	r3, r3, #31
 800671e:	d5e1      	bpl.n	80066e4 <__swbuf_r+0x2e>
 8006720:	2e0a      	cmp	r6, #10
 8006722:	d1df      	bne.n	80066e4 <__swbuf_r+0x2e>
 8006724:	4621      	mov	r1, r4
 8006726:	4628      	mov	r0, r5
 8006728:	f000 fc84 	bl	8007034 <_fflush_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	d0d9      	beq.n	80066e4 <__swbuf_r+0x2e>
 8006730:	e7d6      	b.n	80066e0 <__swbuf_r+0x2a>
	...

08006734 <__swsetup_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4b29      	ldr	r3, [pc, #164]	@ (80067dc <__swsetup_r+0xa8>)
 8006738:	4605      	mov	r5, r0
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	460c      	mov	r4, r1
 800673e:	b118      	cbz	r0, 8006748 <__swsetup_r+0x14>
 8006740:	6a03      	ldr	r3, [r0, #32]
 8006742:	b90b      	cbnz	r3, 8006748 <__swsetup_r+0x14>
 8006744:	f7ff fece 	bl	80064e4 <__sinit>
 8006748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674c:	0719      	lsls	r1, r3, #28
 800674e:	d422      	bmi.n	8006796 <__swsetup_r+0x62>
 8006750:	06da      	lsls	r2, r3, #27
 8006752:	d407      	bmi.n	8006764 <__swsetup_r+0x30>
 8006754:	2209      	movs	r2, #9
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	f04f 30ff 	mov.w	r0, #4294967295
 8006762:	e033      	b.n	80067cc <__swsetup_r+0x98>
 8006764:	0758      	lsls	r0, r3, #29
 8006766:	d512      	bpl.n	800678e <__swsetup_r+0x5a>
 8006768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800676a:	b141      	cbz	r1, 800677e <__swsetup_r+0x4a>
 800676c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006770:	4299      	cmp	r1, r3
 8006772:	d002      	beq.n	800677a <__swsetup_r+0x46>
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f8bf 	bl	80068f8 <_free_r>
 800677a:	2300      	movs	r3, #0
 800677c:	6363      	str	r3, [r4, #52]	@ 0x34
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	2300      	movs	r3, #0
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	b94b      	cbnz	r3, 80067ae <__swsetup_r+0x7a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a4:	d003      	beq.n	80067ae <__swsetup_r+0x7a>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 fc91 	bl	80070d0 <__smakebuf_r>
 80067ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b2:	f013 0201 	ands.w	r2, r3, #1
 80067b6:	d00a      	beq.n	80067ce <__swsetup_r+0x9a>
 80067b8:	2200      	movs	r2, #0
 80067ba:	60a2      	str	r2, [r4, #8]
 80067bc:	6962      	ldr	r2, [r4, #20]
 80067be:	4252      	negs	r2, r2
 80067c0:	61a2      	str	r2, [r4, #24]
 80067c2:	6922      	ldr	r2, [r4, #16]
 80067c4:	b942      	cbnz	r2, 80067d8 <__swsetup_r+0xa4>
 80067c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067ca:	d1c5      	bne.n	8006758 <__swsetup_r+0x24>
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
 80067ce:	0799      	lsls	r1, r3, #30
 80067d0:	bf58      	it	pl
 80067d2:	6962      	ldrpl	r2, [r4, #20]
 80067d4:	60a2      	str	r2, [r4, #8]
 80067d6:	e7f4      	b.n	80067c2 <__swsetup_r+0x8e>
 80067d8:	2000      	movs	r0, #0
 80067da:	e7f7      	b.n	80067cc <__swsetup_r+0x98>
 80067dc:	20000018 	.word	0x20000018

080067e0 <memset>:
 80067e0:	4402      	add	r2, r0
 80067e2:	4603      	mov	r3, r0
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d100      	bne.n	80067ea <memset+0xa>
 80067e8:	4770      	bx	lr
 80067ea:	f803 1b01 	strb.w	r1, [r3], #1
 80067ee:	e7f9      	b.n	80067e4 <memset+0x4>

080067f0 <_close_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	@ (800680c <_close_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fb fc6d 	bl	80020da <_close>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_close_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_close_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20000300 	.word	0x20000300

08006810 <_lseek_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	@ (8006830 <_lseek_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7fb fc82 	bl	8002128 <_lseek>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_lseek_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_lseek_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000300 	.word	0x20000300

08006834 <_read_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	@ (8006854 <_read_r+0x20>)
 8006838:	4604      	mov	r4, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb fc10 	bl	8002068 <_read>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_read_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_read_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20000300 	.word	0x20000300

08006858 <_sbrk_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d06      	ldr	r5, [pc, #24]	@ (8006874 <_sbrk_r+0x1c>)
 800685c:	2300      	movs	r3, #0
 800685e:	4604      	mov	r4, r0
 8006860:	4608      	mov	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fb fc6e 	bl	8002144 <_sbrk>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_sbrk_r+0x1a>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_sbrk_r+0x1a>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	20000300 	.word	0x20000300

08006878 <_write_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d07      	ldr	r5, [pc, #28]	@ (8006898 <_write_r+0x20>)
 800687c:	4604      	mov	r4, r0
 800687e:	4608      	mov	r0, r1
 8006880:	4611      	mov	r1, r2
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	f7fb fc0b 	bl	80020a2 <_write>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d102      	bne.n	8006896 <_write_r+0x1e>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b103      	cbz	r3, 8006896 <_write_r+0x1e>
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	20000300 	.word	0x20000300

0800689c <__errno>:
 800689c:	4b01      	ldr	r3, [pc, #4]	@ (80068a4 <__errno+0x8>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000018 	.word	0x20000018

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	4d0d      	ldr	r5, [pc, #52]	@ (80068e0 <__libc_init_array+0x38>)
 80068ac:	4c0d      	ldr	r4, [pc, #52]	@ (80068e4 <__libc_init_array+0x3c>)
 80068ae:	1b64      	subs	r4, r4, r5
 80068b0:	10a4      	asrs	r4, r4, #2
 80068b2:	2600      	movs	r6, #0
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	4d0b      	ldr	r5, [pc, #44]	@ (80068e8 <__libc_init_array+0x40>)
 80068ba:	4c0c      	ldr	r4, [pc, #48]	@ (80068ec <__libc_init_array+0x44>)
 80068bc:	f000 fc66 	bl	800718c <_init>
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	2600      	movs	r6, #0
 80068c6:	42a6      	cmp	r6, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d0:	4798      	blx	r3
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068da:	4798      	blx	r3
 80068dc:	3601      	adds	r6, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	080073a0 	.word	0x080073a0
 80068e4:	080073a0 	.word	0x080073a0
 80068e8:	080073a0 	.word	0x080073a0
 80068ec:	080073a4 	.word	0x080073a4

080068f0 <__retarget_lock_init_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <__retarget_lock_acquire_recursive>:
 80068f2:	4770      	bx	lr

080068f4 <__retarget_lock_release_recursive>:
 80068f4:	4770      	bx	lr
	...

080068f8 <_free_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4605      	mov	r5, r0
 80068fc:	2900      	cmp	r1, #0
 80068fe:	d041      	beq.n	8006984 <_free_r+0x8c>
 8006900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006904:	1f0c      	subs	r4, r1, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	bfb8      	it	lt
 800690a:	18e4      	addlt	r4, r4, r3
 800690c:	f7ff fd52 	bl	80063b4 <__malloc_lock>
 8006910:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <_free_r+0x90>)
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	b933      	cbnz	r3, 8006924 <_free_r+0x2c>
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6014      	str	r4, [r2, #0]
 800691a:	4628      	mov	r0, r5
 800691c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006920:	f7ff bd4e 	b.w	80063c0 <__malloc_unlock>
 8006924:	42a3      	cmp	r3, r4
 8006926:	d908      	bls.n	800693a <_free_r+0x42>
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	1821      	adds	r1, r4, r0
 800692c:	428b      	cmp	r3, r1
 800692e:	bf01      	itttt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	1809      	addeq	r1, r1, r0
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	e7ed      	b.n	8006916 <_free_r+0x1e>
 800693a:	461a      	mov	r2, r3
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b10b      	cbz	r3, 8006944 <_free_r+0x4c>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d9fa      	bls.n	800693a <_free_r+0x42>
 8006944:	6811      	ldr	r1, [r2, #0]
 8006946:	1850      	adds	r0, r2, r1
 8006948:	42a0      	cmp	r0, r4
 800694a:	d10b      	bne.n	8006964 <_free_r+0x6c>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	4401      	add	r1, r0
 8006950:	1850      	adds	r0, r2, r1
 8006952:	4283      	cmp	r3, r0
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	d1e0      	bne.n	800691a <_free_r+0x22>
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	4408      	add	r0, r1
 8006960:	6010      	str	r0, [r2, #0]
 8006962:	e7da      	b.n	800691a <_free_r+0x22>
 8006964:	d902      	bls.n	800696c <_free_r+0x74>
 8006966:	230c      	movs	r3, #12
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	e7d6      	b.n	800691a <_free_r+0x22>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	1821      	adds	r1, r4, r0
 8006970:	428b      	cmp	r3, r1
 8006972:	bf04      	itt	eq
 8006974:	6819      	ldreq	r1, [r3, #0]
 8006976:	685b      	ldreq	r3, [r3, #4]
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	bf04      	itt	eq
 800697c:	1809      	addeq	r1, r1, r0
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	6054      	str	r4, [r2, #4]
 8006982:	e7ca      	b.n	800691a <_free_r+0x22>
 8006984:	bd38      	pop	{r3, r4, r5, pc}
 8006986:	bf00      	nop
 8006988:	200001c0 	.word	0x200001c0

0800698c <__sfputc_r>:
 800698c:	6893      	ldr	r3, [r2, #8]
 800698e:	3b01      	subs	r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	b410      	push	{r4}
 8006994:	6093      	str	r3, [r2, #8]
 8006996:	da08      	bge.n	80069aa <__sfputc_r+0x1e>
 8006998:	6994      	ldr	r4, [r2, #24]
 800699a:	42a3      	cmp	r3, r4
 800699c:	db01      	blt.n	80069a2 <__sfputc_r+0x16>
 800699e:	290a      	cmp	r1, #10
 80069a0:	d103      	bne.n	80069aa <__sfputc_r+0x1e>
 80069a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a6:	f7ff be86 	b.w	80066b6 <__swbuf_r>
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	1c58      	adds	r0, r3, #1
 80069ae:	6010      	str	r0, [r2, #0]
 80069b0:	7019      	strb	r1, [r3, #0]
 80069b2:	4608      	mov	r0, r1
 80069b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <__sfputs_r>:
 80069ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069bc:	4606      	mov	r6, r0
 80069be:	460f      	mov	r7, r1
 80069c0:	4614      	mov	r4, r2
 80069c2:	18d5      	adds	r5, r2, r3
 80069c4:	42ac      	cmp	r4, r5
 80069c6:	d101      	bne.n	80069cc <__sfputs_r+0x12>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e007      	b.n	80069dc <__sfputs_r+0x22>
 80069cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d0:	463a      	mov	r2, r7
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ffda 	bl	800698c <__sfputc_r>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d1f3      	bne.n	80069c4 <__sfputs_r+0xa>
 80069dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069e0 <_vfiprintf_r>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	460d      	mov	r5, r1
 80069e6:	b09d      	sub	sp, #116	@ 0x74
 80069e8:	4614      	mov	r4, r2
 80069ea:	4698      	mov	r8, r3
 80069ec:	4606      	mov	r6, r0
 80069ee:	b118      	cbz	r0, 80069f8 <_vfiprintf_r+0x18>
 80069f0:	6a03      	ldr	r3, [r0, #32]
 80069f2:	b90b      	cbnz	r3, 80069f8 <_vfiprintf_r+0x18>
 80069f4:	f7ff fd76 	bl	80064e4 <__sinit>
 80069f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069fa:	07d9      	lsls	r1, r3, #31
 80069fc:	d405      	bmi.n	8006a0a <_vfiprintf_r+0x2a>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	059a      	lsls	r2, r3, #22
 8006a02:	d402      	bmi.n	8006a0a <_vfiprintf_r+0x2a>
 8006a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a06:	f7ff ff74 	bl	80068f2 <__retarget_lock_acquire_recursive>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	071b      	lsls	r3, r3, #28
 8006a0e:	d501      	bpl.n	8006a14 <_vfiprintf_r+0x34>
 8006a10:	692b      	ldr	r3, [r5, #16]
 8006a12:	b99b      	cbnz	r3, 8006a3c <_vfiprintf_r+0x5c>
 8006a14:	4629      	mov	r1, r5
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff fe8c 	bl	8006734 <__swsetup_r>
 8006a1c:	b170      	cbz	r0, 8006a3c <_vfiprintf_r+0x5c>
 8006a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a20:	07dc      	lsls	r4, r3, #31
 8006a22:	d504      	bpl.n	8006a2e <_vfiprintf_r+0x4e>
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	b01d      	add	sp, #116	@ 0x74
 8006a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	0598      	lsls	r0, r3, #22
 8006a32:	d4f7      	bmi.n	8006a24 <_vfiprintf_r+0x44>
 8006a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a36:	f7ff ff5d 	bl	80068f4 <__retarget_lock_release_recursive>
 8006a3a:	e7f3      	b.n	8006a24 <_vfiprintf_r+0x44>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a40:	2320      	movs	r3, #32
 8006a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a4a:	2330      	movs	r3, #48	@ 0x30
 8006a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bfc <_vfiprintf_r+0x21c>
 8006a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a54:	f04f 0901 	mov.w	r9, #1
 8006a58:	4623      	mov	r3, r4
 8006a5a:	469a      	mov	sl, r3
 8006a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a60:	b10a      	cbz	r2, 8006a66 <_vfiprintf_r+0x86>
 8006a62:	2a25      	cmp	r2, #37	@ 0x25
 8006a64:	d1f9      	bne.n	8006a5a <_vfiprintf_r+0x7a>
 8006a66:	ebba 0b04 	subs.w	fp, sl, r4
 8006a6a:	d00b      	beq.n	8006a84 <_vfiprintf_r+0xa4>
 8006a6c:	465b      	mov	r3, fp
 8006a6e:	4622      	mov	r2, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff ffa1 	bl	80069ba <__sfputs_r>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f000 80a7 	beq.w	8006bcc <_vfiprintf_r+0x1ec>
 8006a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a80:	445a      	add	r2, fp
 8006a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a84:	f89a 3000 	ldrb.w	r3, [sl]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 809f 	beq.w	8006bcc <_vfiprintf_r+0x1ec>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f04f 32ff 	mov.w	r2, #4294967295
 8006a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a98:	f10a 0a01 	add.w	sl, sl, #1
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	9307      	str	r3, [sp, #28]
 8006aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aa6:	4654      	mov	r4, sl
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aae:	4853      	ldr	r0, [pc, #332]	@ (8006bfc <_vfiprintf_r+0x21c>)
 8006ab0:	f7f9 fbae 	bl	8000210 <memchr>
 8006ab4:	9a04      	ldr	r2, [sp, #16]
 8006ab6:	b9d8      	cbnz	r0, 8006af0 <_vfiprintf_r+0x110>
 8006ab8:	06d1      	lsls	r1, r2, #27
 8006aba:	bf44      	itt	mi
 8006abc:	2320      	movmi	r3, #32
 8006abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ac2:	0713      	lsls	r3, r2, #28
 8006ac4:	bf44      	itt	mi
 8006ac6:	232b      	movmi	r3, #43	@ 0x2b
 8006ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006acc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad2:	d015      	beq.n	8006b00 <_vfiprintf_r+0x120>
 8006ad4:	9a07      	ldr	r2, [sp, #28]
 8006ad6:	4654      	mov	r4, sl
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f04f 0c0a 	mov.w	ip, #10
 8006ade:	4621      	mov	r1, r4
 8006ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae4:	3b30      	subs	r3, #48	@ 0x30
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	d94b      	bls.n	8006b82 <_vfiprintf_r+0x1a2>
 8006aea:	b1b0      	cbz	r0, 8006b1a <_vfiprintf_r+0x13a>
 8006aec:	9207      	str	r2, [sp, #28]
 8006aee:	e014      	b.n	8006b1a <_vfiprintf_r+0x13a>
 8006af0:	eba0 0308 	sub.w	r3, r0, r8
 8006af4:	fa09 f303 	lsl.w	r3, r9, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	46a2      	mov	sl, r4
 8006afe:	e7d2      	b.n	8006aa6 <_vfiprintf_r+0xc6>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	1d19      	adds	r1, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	9103      	str	r1, [sp, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfbb      	ittet	lt
 8006b0c:	425b      	neglt	r3, r3
 8006b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b12:	9307      	strge	r3, [sp, #28]
 8006b14:	9307      	strlt	r3, [sp, #28]
 8006b16:	bfb8      	it	lt
 8006b18:	9204      	strlt	r2, [sp, #16]
 8006b1a:	7823      	ldrb	r3, [r4, #0]
 8006b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b1e:	d10a      	bne.n	8006b36 <_vfiprintf_r+0x156>
 8006b20:	7863      	ldrb	r3, [r4, #1]
 8006b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b24:	d132      	bne.n	8006b8c <_vfiprintf_r+0x1ac>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	1d1a      	adds	r2, r3, #4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	9203      	str	r2, [sp, #12]
 8006b2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b32:	3402      	adds	r4, #2
 8006b34:	9305      	str	r3, [sp, #20]
 8006b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c0c <_vfiprintf_r+0x22c>
 8006b3a:	7821      	ldrb	r1, [r4, #0]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	4650      	mov	r0, sl
 8006b40:	f7f9 fb66 	bl	8000210 <memchr>
 8006b44:	b138      	cbz	r0, 8006b56 <_vfiprintf_r+0x176>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	eba0 000a 	sub.w	r0, r0, sl
 8006b4c:	2240      	movs	r2, #64	@ 0x40
 8006b4e:	4082      	lsls	r2, r0
 8006b50:	4313      	orrs	r3, r2
 8006b52:	3401      	adds	r4, #1
 8006b54:	9304      	str	r3, [sp, #16]
 8006b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5a:	4829      	ldr	r0, [pc, #164]	@ (8006c00 <_vfiprintf_r+0x220>)
 8006b5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b60:	2206      	movs	r2, #6
 8006b62:	f7f9 fb55 	bl	8000210 <memchr>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d03f      	beq.n	8006bea <_vfiprintf_r+0x20a>
 8006b6a:	4b26      	ldr	r3, [pc, #152]	@ (8006c04 <_vfiprintf_r+0x224>)
 8006b6c:	bb1b      	cbnz	r3, 8006bb6 <_vfiprintf_r+0x1d6>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	3307      	adds	r3, #7
 8006b72:	f023 0307 	bic.w	r3, r3, #7
 8006b76:	3308      	adds	r3, #8
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7c:	443b      	add	r3, r7
 8006b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b80:	e76a      	b.n	8006a58 <_vfiprintf_r+0x78>
 8006b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b86:	460c      	mov	r4, r1
 8006b88:	2001      	movs	r0, #1
 8006b8a:	e7a8      	b.n	8006ade <_vfiprintf_r+0xfe>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	3401      	adds	r4, #1
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	4619      	mov	r1, r3
 8006b94:	f04f 0c0a 	mov.w	ip, #10
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b9e:	3a30      	subs	r2, #48	@ 0x30
 8006ba0:	2a09      	cmp	r2, #9
 8006ba2:	d903      	bls.n	8006bac <_vfiprintf_r+0x1cc>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0c6      	beq.n	8006b36 <_vfiprintf_r+0x156>
 8006ba8:	9105      	str	r1, [sp, #20]
 8006baa:	e7c4      	b.n	8006b36 <_vfiprintf_r+0x156>
 8006bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e7f0      	b.n	8006b98 <_vfiprintf_r+0x1b8>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <_vfiprintf_r+0x228>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f3af 8000 	nop.w
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	1c78      	adds	r0, r7, #1
 8006bca:	d1d6      	bne.n	8006b7a <_vfiprintf_r+0x19a>
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x1fe>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x1fe>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bda:	f7ff fe8b 	bl	80068f4 <__retarget_lock_release_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	065b      	lsls	r3, r3, #25
 8006be2:	f53f af1f 	bmi.w	8006a24 <_vfiprintf_r+0x44>
 8006be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006be8:	e71e      	b.n	8006a28 <_vfiprintf_r+0x48>
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <_vfiprintf_r+0x228>)
 8006bf2:	a904      	add	r1, sp, #16
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f000 f879 	bl	8006cec <_printf_i>
 8006bfa:	e7e4      	b.n	8006bc6 <_vfiprintf_r+0x1e6>
 8006bfc:	08007364 	.word	0x08007364
 8006c00:	0800736e 	.word	0x0800736e
 8006c04:	00000000 	.word	0x00000000
 8006c08:	080069bb 	.word	0x080069bb
 8006c0c:	0800736a 	.word	0x0800736a

08006c10 <_printf_common>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4616      	mov	r6, r2
 8006c16:	4698      	mov	r8, r3
 8006c18:	688a      	ldr	r2, [r1, #8]
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfb8      	it	lt
 8006c24:	4613      	movlt	r3, r2
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b10a      	cbz	r2, 8006c36 <_printf_common+0x26>
 8006c32:	3301      	adds	r3, #1
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	0699      	lsls	r1, r3, #26
 8006c3a:	bf42      	ittt	mi
 8006c3c:	6833      	ldrmi	r3, [r6, #0]
 8006c3e:	3302      	addmi	r3, #2
 8006c40:	6033      	strmi	r3, [r6, #0]
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	f015 0506 	ands.w	r5, r5, #6
 8006c48:	d106      	bne.n	8006c58 <_printf_common+0x48>
 8006c4a:	f104 0a19 	add.w	sl, r4, #25
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc26      	bgt.n	8006ca6 <_printf_common+0x96>
 8006c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	3b00      	subs	r3, #0
 8006c60:	bf18      	it	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	0692      	lsls	r2, r2, #26
 8006c66:	d42b      	bmi.n	8006cc0 <_printf_common+0xb0>
 8006c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c8      	blx	r9
 8006c72:	3001      	adds	r0, #1
 8006c74:	d01e      	beq.n	8006cb4 <_printf_common+0xa4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	f003 0306 	and.w	r3, r3, #6
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	bf02      	ittt	eq
 8006c82:	68e5      	ldreq	r5, [r4, #12]
 8006c84:	6833      	ldreq	r3, [r6, #0]
 8006c86:	1aed      	subeq	r5, r5, r3
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	bf0c      	ite	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	2500      	movne	r5, #0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfc4      	itt	gt
 8006c96:	1a9b      	subgt	r3, r3, r2
 8006c98:	18ed      	addgt	r5, r5, r3
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	341a      	adds	r4, #26
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	d11a      	bne.n	8006cd8 <_printf_common+0xc8>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e008      	b.n	8006cb8 <_printf_common+0xa8>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4641      	mov	r1, r8
 8006cac:	4638      	mov	r0, r7
 8006cae:	47c8      	blx	r9
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_printf_common+0xac>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	e7c6      	b.n	8006c4e <_printf_common+0x3e>
 8006cc0:	18e1      	adds	r1, r4, r3
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	2030      	movs	r0, #48	@ 0x30
 8006cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cca:	4422      	add	r2, r4
 8006ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	e7c7      	b.n	8006c68 <_printf_common+0x58>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4641      	mov	r1, r8
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c8      	blx	r9
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d0e6      	beq.n	8006cb4 <_printf_common+0xa4>
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7d9      	b.n	8006c9e <_printf_common+0x8e>
	...

08006cec <_printf_i>:
 8006cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	7e0f      	ldrb	r7, [r1, #24]
 8006cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cf4:	2f78      	cmp	r7, #120	@ 0x78
 8006cf6:	4691      	mov	r9, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d02:	d807      	bhi.n	8006d14 <_printf_i+0x28>
 8006d04:	2f62      	cmp	r7, #98	@ 0x62
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x32>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	f000 80d2 	beq.w	8006eb2 <_printf_i+0x1c6>
 8006d0e:	2f58      	cmp	r7, #88	@ 0x58
 8006d10:	f000 80b9 	beq.w	8006e86 <_printf_i+0x19a>
 8006d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d1c:	e03a      	b.n	8006d94 <_printf_i+0xa8>
 8006d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d22:	2b15      	cmp	r3, #21
 8006d24:	d8f6      	bhi.n	8006d14 <_printf_i+0x28>
 8006d26:	a101      	add	r1, pc, #4	@ (adr r1, 8006d2c <_printf_i+0x40>)
 8006d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d15 	.word	0x08006d15
 8006d38:	08006d15 	.word	0x08006d15
 8006d3c:	08006d15 	.word	0x08006d15
 8006d40:	08006d15 	.word	0x08006d15
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d15 	.word	0x08006d15
 8006d4c:	08006d15 	.word	0x08006d15
 8006d50:	08006d15 	.word	0x08006d15
 8006d54:	08006d15 	.word	0x08006d15
 8006d58:	08006e99 	.word	0x08006e99
 8006d5c:	08006dc3 	.word	0x08006dc3
 8006d60:	08006e53 	.word	0x08006e53
 8006d64:	08006d15 	.word	0x08006d15
 8006d68:	08006d15 	.word	0x08006d15
 8006d6c:	08006ebb 	.word	0x08006ebb
 8006d70:	08006d15 	.word	0x08006d15
 8006d74:	08006dc3 	.word	0x08006dc3
 8006d78:	08006d15 	.word	0x08006d15
 8006d7c:	08006d15 	.word	0x08006d15
 8006d80:	08006e5b 	.word	0x08006e5b
 8006d84:	6833      	ldr	r3, [r6, #0]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6032      	str	r2, [r6, #0]
 8006d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d94:	2301      	movs	r3, #1
 8006d96:	e09d      	b.n	8006ed4 <_printf_i+0x1e8>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	6820      	ldr	r0, [r4, #0]
 8006d9c:	1d19      	adds	r1, r3, #4
 8006d9e:	6031      	str	r1, [r6, #0]
 8006da0:	0606      	lsls	r6, r0, #24
 8006da2:	d501      	bpl.n	8006da8 <_printf_i+0xbc>
 8006da4:	681d      	ldr	r5, [r3, #0]
 8006da6:	e003      	b.n	8006db0 <_printf_i+0xc4>
 8006da8:	0645      	lsls	r5, r0, #25
 8006daa:	d5fb      	bpl.n	8006da4 <_printf_i+0xb8>
 8006dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	da03      	bge.n	8006dbc <_printf_i+0xd0>
 8006db4:	232d      	movs	r3, #45	@ 0x2d
 8006db6:	426d      	negs	r5, r5
 8006db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dbc:	4859      	ldr	r0, [pc, #356]	@ (8006f24 <_printf_i+0x238>)
 8006dbe:	230a      	movs	r3, #10
 8006dc0:	e011      	b.n	8006de6 <_printf_i+0xfa>
 8006dc2:	6821      	ldr	r1, [r4, #0]
 8006dc4:	6833      	ldr	r3, [r6, #0]
 8006dc6:	0608      	lsls	r0, r1, #24
 8006dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dcc:	d402      	bmi.n	8006dd4 <_printf_i+0xe8>
 8006dce:	0649      	lsls	r1, r1, #25
 8006dd0:	bf48      	it	mi
 8006dd2:	b2ad      	uxthmi	r5, r5
 8006dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dd6:	4853      	ldr	r0, [pc, #332]	@ (8006f24 <_printf_i+0x238>)
 8006dd8:	6033      	str	r3, [r6, #0]
 8006dda:	bf14      	ite	ne
 8006ddc:	230a      	movne	r3, #10
 8006dde:	2308      	moveq	r3, #8
 8006de0:	2100      	movs	r1, #0
 8006de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006de6:	6866      	ldr	r6, [r4, #4]
 8006de8:	60a6      	str	r6, [r4, #8]
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	bfa2      	ittt	ge
 8006dee:	6821      	ldrge	r1, [r4, #0]
 8006df0:	f021 0104 	bicge.w	r1, r1, #4
 8006df4:	6021      	strge	r1, [r4, #0]
 8006df6:	b90d      	cbnz	r5, 8006dfc <_printf_i+0x110>
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	d04b      	beq.n	8006e94 <_printf_i+0x1a8>
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e02:	fb03 5711 	mls	r7, r3, r1, r5
 8006e06:	5dc7      	ldrb	r7, [r0, r7]
 8006e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e0c:	462f      	mov	r7, r5
 8006e0e:	42bb      	cmp	r3, r7
 8006e10:	460d      	mov	r5, r1
 8006e12:	d9f4      	bls.n	8006dfe <_printf_i+0x112>
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d10b      	bne.n	8006e30 <_printf_i+0x144>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	07df      	lsls	r7, r3, #31
 8006e1c:	d508      	bpl.n	8006e30 <_printf_i+0x144>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	6861      	ldr	r1, [r4, #4]
 8006e22:	4299      	cmp	r1, r3
 8006e24:	bfde      	ittt	le
 8006e26:	2330      	movle	r3, #48	@ 0x30
 8006e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e30:	1b92      	subs	r2, r2, r6
 8006e32:	6122      	str	r2, [r4, #16]
 8006e34:	f8cd a000 	str.w	sl, [sp]
 8006e38:	464b      	mov	r3, r9
 8006e3a:	aa03      	add	r2, sp, #12
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4640      	mov	r0, r8
 8006e40:	f7ff fee6 	bl	8006c10 <_printf_common>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d14a      	bne.n	8006ede <_printf_i+0x1f2>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	b004      	add	sp, #16
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	f043 0320 	orr.w	r3, r3, #32
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	4833      	ldr	r0, [pc, #204]	@ (8006f28 <_printf_i+0x23c>)
 8006e5c:	2778      	movs	r7, #120	@ 0x78
 8006e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	6831      	ldr	r1, [r6, #0]
 8006e66:	061f      	lsls	r7, r3, #24
 8006e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e6c:	d402      	bmi.n	8006e74 <_printf_i+0x188>
 8006e6e:	065f      	lsls	r7, r3, #25
 8006e70:	bf48      	it	mi
 8006e72:	b2ad      	uxthmi	r5, r5
 8006e74:	6031      	str	r1, [r6, #0]
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	bf44      	itt	mi
 8006e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7e:	6023      	strmi	r3, [r4, #0]
 8006e80:	b11d      	cbz	r5, 8006e8a <_printf_i+0x19e>
 8006e82:	2310      	movs	r3, #16
 8006e84:	e7ac      	b.n	8006de0 <_printf_i+0xf4>
 8006e86:	4827      	ldr	r0, [pc, #156]	@ (8006f24 <_printf_i+0x238>)
 8006e88:	e7e9      	b.n	8006e5e <_printf_i+0x172>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	f023 0320 	bic.w	r3, r3, #32
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	e7f6      	b.n	8006e82 <_printf_i+0x196>
 8006e94:	4616      	mov	r6, r2
 8006e96:	e7bd      	b.n	8006e14 <_printf_i+0x128>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	6961      	ldr	r1, [r4, #20]
 8006e9e:	1d18      	adds	r0, r3, #4
 8006ea0:	6030      	str	r0, [r6, #0]
 8006ea2:	062e      	lsls	r6, r5, #24
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0x1c0>
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <_printf_i+0x1c6>
 8006eac:	0668      	lsls	r0, r5, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0x1bc>
 8006eb0:	8019      	strh	r1, [r3, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	4616      	mov	r6, r2
 8006eb8:	e7bc      	b.n	8006e34 <_printf_i+0x148>
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	6032      	str	r2, [r6, #0]
 8006ec0:	681e      	ldr	r6, [r3, #0]
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7f9 f9a2 	bl	8000210 <memchr>
 8006ecc:	b108      	cbz	r0, 8006ed2 <_printf_i+0x1e6>
 8006ece:	1b80      	subs	r0, r0, r6
 8006ed0:	6060      	str	r0, [r4, #4]
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006edc:	e7aa      	b.n	8006e34 <_printf_i+0x148>
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	47d0      	blx	sl
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0ad      	beq.n	8006e48 <_printf_i+0x15c>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	079b      	lsls	r3, r3, #30
 8006ef0:	d413      	bmi.n	8006f1a <_printf_i+0x22e>
 8006ef2:	68e0      	ldr	r0, [r4, #12]
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	bfb8      	it	lt
 8006efa:	4618      	movlt	r0, r3
 8006efc:	e7a6      	b.n	8006e4c <_printf_i+0x160>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4632      	mov	r2, r6
 8006f02:	4649      	mov	r1, r9
 8006f04:	4640      	mov	r0, r8
 8006f06:	47d0      	blx	sl
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d09d      	beq.n	8006e48 <_printf_i+0x15c>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	9903      	ldr	r1, [sp, #12]
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dcf2      	bgt.n	8006efe <_printf_i+0x212>
 8006f18:	e7eb      	b.n	8006ef2 <_printf_i+0x206>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	f104 0619 	add.w	r6, r4, #25
 8006f20:	e7f5      	b.n	8006f0e <_printf_i+0x222>
 8006f22:	bf00      	nop
 8006f24:	08007375 	.word	0x08007375
 8006f28:	08007386 	.word	0x08007386

08006f2c <__sflush_r>:
 8006f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	0716      	lsls	r6, r2, #28
 8006f36:	4605      	mov	r5, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d454      	bmi.n	8006fe6 <__sflush_r+0xba>
 8006f3c:	684b      	ldr	r3, [r1, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dc02      	bgt.n	8006f48 <__sflush_r+0x1c>
 8006f42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd48      	ble.n	8006fda <__sflush_r+0xae>
 8006f48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d045      	beq.n	8006fda <__sflush_r+0xae>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f54:	682f      	ldr	r7, [r5, #0]
 8006f56:	6a21      	ldr	r1, [r4, #32]
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	d030      	beq.n	8006fbe <__sflush_r+0x92>
 8006f5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	0759      	lsls	r1, r3, #29
 8006f62:	d505      	bpl.n	8006f70 <__sflush_r+0x44>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f6a:	b10b      	cbz	r3, 8006f70 <__sflush_r+0x44>
 8006f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	2300      	movs	r3, #0
 8006f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f74:	6a21      	ldr	r1, [r4, #32]
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b0      	blx	r6
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	d106      	bne.n	8006f8e <__sflush_r+0x62>
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	291d      	cmp	r1, #29
 8006f84:	d82b      	bhi.n	8006fde <__sflush_r+0xb2>
 8006f86:	4a2a      	ldr	r2, [pc, #168]	@ (8007030 <__sflush_r+0x104>)
 8006f88:	410a      	asrs	r2, r1
 8006f8a:	07d6      	lsls	r6, r2, #31
 8006f8c:	d427      	bmi.n	8006fde <__sflush_r+0xb2>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6062      	str	r2, [r4, #4]
 8006f92:	04d9      	lsls	r1, r3, #19
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	d504      	bpl.n	8006fa4 <__sflush_r+0x78>
 8006f9a:	1c42      	adds	r2, r0, #1
 8006f9c:	d101      	bne.n	8006fa2 <__sflush_r+0x76>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	b903      	cbnz	r3, 8006fa4 <__sflush_r+0x78>
 8006fa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fa6:	602f      	str	r7, [r5, #0]
 8006fa8:	b1b9      	cbz	r1, 8006fda <__sflush_r+0xae>
 8006faa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d002      	beq.n	8006fb8 <__sflush_r+0x8c>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7ff fca0 	bl	80068f8 <_free_r>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fbc:	e00d      	b.n	8006fda <__sflush_r+0xae>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b0      	blx	r6
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	1c50      	adds	r0, r2, #1
 8006fc8:	d1c9      	bne.n	8006f5e <__sflush_r+0x32>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0c6      	beq.n	8006f5e <__sflush_r+0x32>
 8006fd0:	2b1d      	cmp	r3, #29
 8006fd2:	d001      	beq.n	8006fd8 <__sflush_r+0xac>
 8006fd4:	2b16      	cmp	r3, #22
 8006fd6:	d11e      	bne.n	8007016 <__sflush_r+0xea>
 8006fd8:	602f      	str	r7, [r5, #0]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e022      	b.n	8007024 <__sflush_r+0xf8>
 8006fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	e01b      	b.n	800701e <__sflush_r+0xf2>
 8006fe6:	690f      	ldr	r7, [r1, #16]
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	d0f6      	beq.n	8006fda <__sflush_r+0xae>
 8006fec:	0793      	lsls	r3, r2, #30
 8006fee:	680e      	ldr	r6, [r1, #0]
 8006ff0:	bf08      	it	eq
 8006ff2:	694b      	ldreq	r3, [r1, #20]
 8006ff4:	600f      	str	r7, [r1, #0]
 8006ff6:	bf18      	it	ne
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	eba6 0807 	sub.w	r8, r6, r7
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	dde9      	ble.n	8006fda <__sflush_r+0xae>
 8007006:	6a21      	ldr	r1, [r4, #32]
 8007008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800700a:	4643      	mov	r3, r8
 800700c:	463a      	mov	r2, r7
 800700e:	4628      	mov	r0, r5
 8007010:	47b0      	blx	r6
 8007012:	2800      	cmp	r0, #0
 8007014:	dc08      	bgt.n	8007028 <__sflush_r+0xfc>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	4407      	add	r7, r0
 800702a:	eba8 0800 	sub.w	r8, r8, r0
 800702e:	e7e7      	b.n	8007000 <__sflush_r+0xd4>
 8007030:	dfbffffe 	.word	0xdfbffffe

08007034 <_fflush_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b913      	cbnz	r3, 8007044 <_fflush_r+0x10>
 800703e:	2500      	movs	r5, #0
 8007040:	4628      	mov	r0, r5
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	b118      	cbz	r0, 800704e <_fflush_r+0x1a>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <_fflush_r+0x1a>
 800704a:	f7ff fa4b 	bl	80064e4 <__sinit>
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f3      	beq.n	800703e <_fflush_r+0xa>
 8007056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	d404      	bmi.n	8007066 <_fflush_r+0x32>
 800705c:	0599      	lsls	r1, r3, #22
 800705e:	d402      	bmi.n	8007066 <_fflush_r+0x32>
 8007060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007062:	f7ff fc46 	bl	80068f2 <__retarget_lock_acquire_recursive>
 8007066:	4628      	mov	r0, r5
 8007068:	4621      	mov	r1, r4
 800706a:	f7ff ff5f 	bl	8006f2c <__sflush_r>
 800706e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007070:	07da      	lsls	r2, r3, #31
 8007072:	4605      	mov	r5, r0
 8007074:	d4e4      	bmi.n	8007040 <_fflush_r+0xc>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d4e1      	bmi.n	8007040 <_fflush_r+0xc>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f7ff fc39 	bl	80068f4 <__retarget_lock_release_recursive>
 8007082:	e7dd      	b.n	8007040 <_fflush_r+0xc>

08007084 <__swhatbuf_r>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	2900      	cmp	r1, #0
 800708e:	b096      	sub	sp, #88	@ 0x58
 8007090:	4615      	mov	r5, r2
 8007092:	461e      	mov	r6, r3
 8007094:	da0d      	bge.n	80070b2 <__swhatbuf_r+0x2e>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	bf14      	ite	ne
 80070a2:	2340      	movne	r3, #64	@ 0x40
 80070a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070a8:	2000      	movs	r0, #0
 80070aa:	6031      	str	r1, [r6, #0]
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	b016      	add	sp, #88	@ 0x58
 80070b0:	bd70      	pop	{r4, r5, r6, pc}
 80070b2:	466a      	mov	r2, sp
 80070b4:	f000 f848 	bl	8007148 <_fstat_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	dbec      	blt.n	8007096 <__swhatbuf_r+0x12>
 80070bc:	9901      	ldr	r1, [sp, #4]
 80070be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070c6:	4259      	negs	r1, r3
 80070c8:	4159      	adcs	r1, r3
 80070ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ce:	e7eb      	b.n	80070a8 <__swhatbuf_r+0x24>

080070d0 <__smakebuf_r>:
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d4:	079d      	lsls	r5, r3, #30
 80070d6:	4606      	mov	r6, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	d507      	bpl.n	80070ec <__smakebuf_r+0x1c>
 80070dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	2301      	movs	r3, #1
 80070e6:	6163      	str	r3, [r4, #20]
 80070e8:	b003      	add	sp, #12
 80070ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ec:	ab01      	add	r3, sp, #4
 80070ee:	466a      	mov	r2, sp
 80070f0:	f7ff ffc8 	bl	8007084 <__swhatbuf_r>
 80070f4:	9f00      	ldr	r7, [sp, #0]
 80070f6:	4605      	mov	r5, r0
 80070f8:	4639      	mov	r1, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff f8da 	bl	80062b4 <_malloc_r>
 8007100:	b948      	cbnz	r0, 8007116 <__smakebuf_r+0x46>
 8007102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007106:	059a      	lsls	r2, r3, #22
 8007108:	d4ee      	bmi.n	80070e8 <__smakebuf_r+0x18>
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	f043 0302 	orr.w	r3, r3, #2
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	e7e2      	b.n	80070dc <__smakebuf_r+0xc>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	6020      	str	r0, [r4, #0]
 800711a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007126:	b15b      	cbz	r3, 8007140 <__smakebuf_r+0x70>
 8007128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712c:	4630      	mov	r0, r6
 800712e:	f000 f81d 	bl	800716c <_isatty_r>
 8007132:	b128      	cbz	r0, 8007140 <__smakebuf_r+0x70>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	431d      	orrs	r5, r3
 8007144:	81a5      	strh	r5, [r4, #12]
 8007146:	e7cf      	b.n	80070e8 <__smakebuf_r+0x18>

08007148 <_fstat_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	@ (8007168 <_fstat_r+0x20>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7fa ffcc 	bl	80020f2 <_fstat>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_fstat_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_fstat_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	20000300 	.word	0x20000300

0800716c <_isatty_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d06      	ldr	r5, [pc, #24]	@ (8007188 <_isatty_r+0x1c>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fa ffcb 	bl	8002112 <_isatty>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_isatty_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_isatty_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20000300 	.word	0x20000300

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
