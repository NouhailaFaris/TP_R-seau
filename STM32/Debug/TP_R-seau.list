
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08006718  08006718  00007718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b60  08006b60  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b68  08006b68  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006b70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001e4  08006d54  000081e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08006d54  000084c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b07d  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a89  00000000  00000000  00013291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00014d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000806  00000000  00000000  00015768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002221c  00000000  00000000  00015f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbb6  00000000  00000000  0003818a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca36  00000000  00000000  00045d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d94  00000000  00000000  001127bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00116550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006700 	.word	0x08006700

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08006700 	.word	0x08006700

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b9a0 	b.w	8000f04 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83c 	bl	8000c48 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	f7ff ff99 	bl	8000b1c <__aeabi_dcmplt>
 8000bea:	b928      	cbnz	r0, 8000bf8 <__aeabi_d2lz+0x1c>
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf4:	f000 b80a 	b.w	8000c0c <__aeabi_d2ulz>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bfe:	f000 f805 	bl	8000c0c <__aeabi_d2ulz>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2ulz>:
 8000c0c:	b5d0      	push	{r4, r6, r7, lr}
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__aeabi_d2ulz+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	460f      	mov	r7, r1
 8000c16:	f7ff fd0f 	bl	8000638 <__aeabi_dmul>
 8000c1a:	f7ff ffa7 	bl	8000b6c <__aeabi_d2uiz>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f7ff fc90 	bl	8000544 <__aeabi_ui2d>
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <__aeabi_d2ulz+0x38>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f7ff fd06 	bl	8000638 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4630      	mov	r0, r6
 8000c32:	4639      	mov	r1, r7
 8000c34:	f7ff fb48 	bl	80002c8 <__aeabi_dsub>
 8000c38:	f7ff ff98 	bl	8000b6c <__aeabi_d2uiz>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c40:	3df00000 	.word	0x3df00000
 8000c44:	41f00000 	.word	0x41f00000

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fcf0 	bl	80018f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f8f0 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 fa08 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 f9dc 	bl	80012d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f1c:	f000 f958 	bl	80011d0 <MX_I2C1_Init>
  MX_UART4_Init();
 8000f20:	f000 f984 	bl	800122c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000f24:	f000 f9ac 	bl	8001280 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("=======demarage Systeme=======\r\n");
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <main+0x40>)
 8000f2a:	f003 fae1 	bl	80044f0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		 HAL_UART_Receive(&huart1, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	2214      	movs	r2, #20
 8000f34:	4905      	ldr	r1, [pc, #20]	@ (8000f4c <main+0x44>)
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <main+0x48>)
 8000f38:	f001 ffe7 	bl	8002f0a <HAL_UART_Receive>
		 process_command(rx_buffer);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <main+0x44>)
 8000f3e:	f000 f809 	bl	8000f54 <process_command>
		 HAL_UART_Receive(&huart1, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000f42:	bf00      	nop
 8000f44:	e7f3      	b.n	8000f2e <main+0x26>
 8000f46:	bf00      	nop
 8000f48:	08006718 	.word	0x08006718
 8000f4c:	2000032c 	.word	0x2000032c
 8000f50:	2000029c 	.word	0x2000029c

08000f54 <process_command>:
    /* USER CODE BEGIN 3 */

	}
  /* USER CODE END 3 */
}
void process_command(uint8_t* command) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
    if (strncmp((char*)command, "GET_T", 5) == 0) {
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	4955      	ldr	r1, [pc, #340]	@ (80010b4 <process_command+0x160>)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f003 fbe1 	bl	8004728 <strncmp>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d119      	bne.n	8000fa0 <process_command+0x4c>

        snprintf((char*)tx_buffer, sizeof(tx_buffer), "T=+%.2f_C", temperature);
 8000f6c:	4b52      	ldr	r3, [pc, #328]	@ (80010b8 <process_command+0x164>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb09 	bl	8000588 <__aeabi_f2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7e:	4a4f      	ldr	r2, [pc, #316]	@ (80010bc <process_command+0x168>)
 8000f80:	2132      	movs	r1, #50	@ 0x32
 8000f82:	484f      	ldr	r0, [pc, #316]	@ (80010c0 <process_command+0x16c>)
 8000f84:	f003 fabc 	bl	8004500 <sniprintf>
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
 8000f88:	484d      	ldr	r0, [pc, #308]	@ (80010c0 <process_command+0x16c>)
 8000f8a:	f7ff f941 	bl	8000210 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	494a      	ldr	r1, [pc, #296]	@ (80010c0 <process_command+0x16c>)
 8000f98:	484a      	ldr	r0, [pc, #296]	@ (80010c4 <process_command+0x170>)
 8000f9a:	f001 ff2b 	bl	8002df4 <HAL_UART_Transmit>

    } else if (strncmp((char*)command, "GET_A", 5) == 0) {
        snprintf((char*)tx_buffer, sizeof(tx_buffer), "A=%.6f", angle);
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
    }
}
 8000f9e:	e084      	b.n	80010aa <process_command+0x156>
    } else if (strncmp((char*)command, "GET_P", 5) == 0) {
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	4949      	ldr	r1, [pc, #292]	@ (80010c8 <process_command+0x174>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f003 fbbf 	bl	8004728 <strncmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d112      	bne.n	8000fd6 <process_command+0x82>
        snprintf((char*)tx_buffer, sizeof(tx_buffer), "P=%dPa", pression);
 8000fb0:	4b46      	ldr	r3, [pc, #280]	@ (80010cc <process_command+0x178>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a46      	ldr	r2, [pc, #280]	@ (80010d0 <process_command+0x17c>)
 8000fb6:	2132      	movs	r1, #50	@ 0x32
 8000fb8:	4841      	ldr	r0, [pc, #260]	@ (80010c0 <process_command+0x16c>)
 8000fba:	f003 faa1 	bl	8004500 <sniprintf>
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
 8000fbe:	4840      	ldr	r0, [pc, #256]	@ (80010c0 <process_command+0x16c>)
 8000fc0:	f7ff f926 	bl	8000210 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	493c      	ldr	r1, [pc, #240]	@ (80010c0 <process_command+0x16c>)
 8000fce:	483d      	ldr	r0, [pc, #244]	@ (80010c4 <process_command+0x170>)
 8000fd0:	f001 ff10 	bl	8002df4 <HAL_UART_Transmit>
}
 8000fd4:	e069      	b.n	80010aa <process_command+0x156>
    } else if (strncmp((char*)command, "SET_K=", 6) == 0) {
 8000fd6:	2206      	movs	r2, #6
 8000fd8:	493e      	ldr	r1, [pc, #248]	@ (80010d4 <process_command+0x180>)
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f003 fba4 	bl	8004728 <strncmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11e      	bne.n	8001024 <process_command+0xd0>
        float new_k = atof((char*)command + 6);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fb54 	bl	8003698 <atof>
 8000ff0:	ee07 0a90 	vmov	s15, r0
 8000ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff8:	edc7 7a03 	vstr	s15, [r7, #12]
        coefficient_k = new_k;
 8000ffc:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <process_command+0x184>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6013      	str	r3, [r2, #0]
        snprintf((char*)tx_buffer, sizeof(tx_buffer), "SET_K=OK");
 8001002:	4a36      	ldr	r2, [pc, #216]	@ (80010dc <process_command+0x188>)
 8001004:	2132      	movs	r1, #50	@ 0x32
 8001006:	482e      	ldr	r0, [pc, #184]	@ (80010c0 <process_command+0x16c>)
 8001008:	f003 fa7a 	bl	8004500 <sniprintf>
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
 800100c:	482c      	ldr	r0, [pc, #176]	@ (80010c0 <process_command+0x16c>)
 800100e:	f7ff f8ff 	bl	8000210 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	4929      	ldr	r1, [pc, #164]	@ (80010c0 <process_command+0x16c>)
 800101c:	4829      	ldr	r0, [pc, #164]	@ (80010c4 <process_command+0x170>)
 800101e:	f001 fee9 	bl	8002df4 <HAL_UART_Transmit>
}
 8001022:	e042      	b.n	80010aa <process_command+0x156>
    } else if (strncmp((char*)command, "GET_K", 5) == 0) {
 8001024:	2205      	movs	r2, #5
 8001026:	492e      	ldr	r1, [pc, #184]	@ (80010e0 <process_command+0x18c>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f003 fb7d 	bl	8004728 <strncmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d119      	bne.n	8001068 <process_command+0x114>
        snprintf((char*)tx_buffer, sizeof(tx_buffer), "K=%.6f", coefficient_k);
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <process_command+0x184>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff faa5 	bl	8000588 <__aeabi_f2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9cd 2300 	strd	r2, r3, [sp]
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <process_command+0x190>)
 8001048:	2132      	movs	r1, #50	@ 0x32
 800104a:	481d      	ldr	r0, [pc, #116]	@ (80010c0 <process_command+0x16c>)
 800104c:	f003 fa58 	bl	8004500 <sniprintf>
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
 8001050:	481b      	ldr	r0, [pc, #108]	@ (80010c0 <process_command+0x16c>)
 8001052:	f7ff f8dd 	bl	8000210 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	4918      	ldr	r1, [pc, #96]	@ (80010c0 <process_command+0x16c>)
 8001060:	4818      	ldr	r0, [pc, #96]	@ (80010c4 <process_command+0x170>)
 8001062:	f001 fec7 	bl	8002df4 <HAL_UART_Transmit>
}
 8001066:	e020      	b.n	80010aa <process_command+0x156>
    } else if (strncmp((char*)command, "GET_A", 5) == 0) {
 8001068:	2205      	movs	r2, #5
 800106a:	491f      	ldr	r1, [pc, #124]	@ (80010e8 <process_command+0x194>)
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f003 fb5b 	bl	8004728 <strncmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d118      	bne.n	80010aa <process_command+0x156>
        snprintf((char*)tx_buffer, sizeof(tx_buffer), "A=%.6f", angle);
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <process_command+0x198>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa83 	bl	8000588 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	e9cd 2300 	strd	r2, r3, [sp]
 800108a:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <process_command+0x19c>)
 800108c:	2132      	movs	r1, #50	@ 0x32
 800108e:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <process_command+0x16c>)
 8001090:	f003 fa36 	bl	8004500 <sniprintf>
        HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
 8001094:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <process_command+0x16c>)
 8001096:	f7ff f8bb 	bl	8000210 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	4907      	ldr	r1, [pc, #28]	@ (80010c0 <process_command+0x16c>)
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <process_command+0x170>)
 80010a6:	f001 fea5 	bl	8002df4 <HAL_UART_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08006738 	.word	0x08006738
 80010b8:	20000000 	.word	0x20000000
 80010bc:	08006740 	.word	0x08006740
 80010c0:	20000340 	.word	0x20000340
 80010c4:	2000029c 	.word	0x2000029c
 80010c8:	0800674c 	.word	0x0800674c
 80010cc:	20000004 	.word	0x20000004
 80010d0:	08006754 	.word	0x08006754
 80010d4:	0800675c 	.word	0x0800675c
 80010d8:	20000008 	.word	0x20000008
 80010dc:	08006764 	.word	0x08006764
 80010e0:	08006770 	.word	0x08006770
 80010e4:	08006778 	.word	0x08006778
 80010e8:	08006780 	.word	0x08006780
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	08006788 	.word	0x08006788

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2234      	movs	r2, #52	@ 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fb08 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a29      	ldr	r2, [pc, #164]	@ (80011c8 <SystemClock_Config+0xd4>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <SystemClock_Config+0xd4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <SystemClock_Config+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001140:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <SystemClock_Config+0xd8>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001168:	2310      	movs	r3, #16
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001170:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fb48 	bl	8002818 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800118e:	f000 f939 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 ffe8 	bl	8002184 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ba:	f000 f923 	bl	8001404 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C1_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C1_Init+0x50>)
 800120e:	f000 fe75 	bl	8001efc <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 f8f4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000200 	.word	0x20000200
 8001224:	40005400 	.word	0x40005400
 8001228:	000186a0 	.word	0x000186a0

0800122c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_UART4_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_UART4_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_UART4_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001264:	f001 fd76 	bl	8002d54 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f8c9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000254 	.word	0x20000254
 800127c:	40004c00 	.word	0x40004c00

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_USART1_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b8:	f001 fd4c 	bl	8002d54 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f89f 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000029c 	.word	0x2000029c
 80012d0:	40011000 	.word	0x40011000

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f001 fd22 	bl	8002d54 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f875 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002e4 	.word	0x200002e4
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a2c      	ldr	r2, [pc, #176]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a25      	ldr	r2, [pc, #148]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4812      	ldr	r0, [pc, #72]	@ (80013fc <MX_GPIO_Init+0xd4>)
 80013b4:	f000 fd88 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_GPIO_Init+0xd8>)
 80013d0:	f000 fbe6 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d4:	2320      	movs	r3, #32
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_GPIO_Init+0xd4>)
 80013ec:	f000 fbd8 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800144e:	2007      	movs	r0, #7
 8001450:	f000 fb72 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	@ (80014ec <HAL_I2C_MspInit+0x8c>)
 80014bc:	f000 fb70 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	@ 0x38
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a4b      	ldr	r2, [pc, #300]	@ (800163c <HAL_UART_MspInit+0x14c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12c      	bne.n	800156c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a49      	ldr	r2, [pc, #292]	@ (8001640 <HAL_UART_MspInit+0x150>)
 800151c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154a:	2303      	movs	r3, #3
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800155a:	2308      	movs	r3, #8
 800155c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4837      	ldr	r0, [pc, #220]	@ (8001644 <HAL_UART_MspInit+0x154>)
 8001566:	f000 fb1b 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	e062      	b.n	8001632 <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a35      	ldr	r2, [pc, #212]	@ (8001648 <HAL_UART_MspInit+0x158>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12c      	bne.n	80015d0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_UART_MspInit+0x150>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6453      	str	r3, [r2, #68]	@ 0x44
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <HAL_UART_MspInit+0x150>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_UART_MspInit+0x150>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ae:	23c0      	movs	r3, #192	@ 0xc0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015be:	2307      	movs	r3, #7
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4820      	ldr	r0, [pc, #128]	@ (800164c <HAL_UART_MspInit+0x15c>)
 80015ca:	f000 fae9 	bl	8001ba0 <HAL_GPIO_Init>
}
 80015ce:	e030      	b.n	8001632 <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_UART_MspInit+0x160>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_UART_MspInit+0x150>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_UART_MspInit+0x150>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_UART_MspInit+0x150>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_UART_MspInit+0x150>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_UART_MspInit+0x150>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001612:	230c      	movs	r3, #12
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_UART_MspInit+0x154>)
 800162e:	f000 fab7 	bl	8001ba0 <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	@ 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40004c00 	.word	0x40004c00
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40011000 	.word	0x40011000
 800164c:	40020400 	.word	0x40020400
 8001650:	40004400 	.word	0x40004400

08001654 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	2201      	movs	r2, #1
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <__io_putchar+0x30>)
 8001666:	f001 fbc5 	bl	8002df4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800166a:	1d39      	adds	r1, r7, #4
 800166c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001670:	2201      	movs	r2, #1
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <__io_putchar+0x34>)
 8001674:	f001 fbbe 	bl	8002df4 <HAL_UART_Transmit>
	return ch;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002e4 	.word	0x200002e4
 8001688:	2000029c 	.word	0x2000029c

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f957 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_kill>:

int _kill(int pid, int sig)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001704:	f003 f868 	bl	80047d8 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	2216      	movs	r2, #22
 800170c:	601a      	str	r2, [r3, #0]
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_exit>:

void _exit (int status)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001722:	f04f 31ff 	mov.w	r1, #4294967295
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffe7 	bl	80016fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <_exit+0x12>

08001730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
  }

  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff65 	bl	8001654 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
  }
  return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
  return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f002 ffcc 	bl	80047d8 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	20000374 	.word	0x20000374
 8001874:	200004c8 	.word	0x200004c8

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a0:	f7ff ffea 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018a6:	490d      	ldr	r1, [pc, #52]	@ (80018dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f002 ff8b 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fb1b 	bl	8000f08 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80018e0:	08006b70 	.word	0x08006b70
  ldr r2, =_sbss
 80018e4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018e8:	200004c8 	.word	0x200004c8

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f90d 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fd74 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f917 	bl	8001b86 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f8ed 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000010 	.word	0x20000010
 800198c:	20000018 	.word	0x20000018
 8001990:	20000014 	.word	0x20000014

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000018 	.word	0x20000018
 80019b8:	20000378 	.word	0x20000378

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000378 	.word	0x20000378

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff47 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff5c 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffb0 	bl	8001af4 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e165      	b.n	8001e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8154 	bne.w	8001e82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ae 	beq.w	8001e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a58      	ldr	r2, [pc, #352]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <HAL_GPIO_Init+0x308>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x216>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x212>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <HAL_GPIO_Init+0x314>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb8 <HAL_GPIO_Init+0x318>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x20a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_GPIO_Init+0x31c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a49      	ldr	r2, [pc, #292]	@ (8001ec0 <HAL_GPIO_Init+0x320>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d9e:	2306      	movs	r3, #6
 8001da0:	e00c      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00a      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001da6:	2305      	movs	r3, #5
 8001da8:	e008      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e004      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x21c>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	f002 0203 	and.w	r2, r2, #3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dcc:	4935      	ldr	r1, [pc, #212]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dda:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfe:	4a31      	ldr	r2, [pc, #196]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e28:	4a26      	ldr	r2, [pc, #152]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	f67f ae96 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3724      	adds	r7, #36	@ 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020c00 	.word	0x40020c00
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40021400 	.word	0x40021400
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e12b      	b.n	8002166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fa9c 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f60:	f000 fa02 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a81      	ldr	r2, [pc, #516]	@ (8002170 <HAL_I2C_Init+0x274>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d807      	bhi.n	8001f80 <HAL_I2C_Init+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a80      	ldr	r2, [pc, #512]	@ (8002174 <HAL_I2C_Init+0x278>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e006      	b.n	8001f8e <HAL_I2C_Init+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a7d      	ldr	r2, [pc, #500]	@ (8002178 <HAL_I2C_Init+0x27c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0e7      	b.n	8002166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a78      	ldr	r2, [pc, #480]	@ (800217c <HAL_I2C_Init+0x280>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002170 <HAL_I2C_Init+0x274>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_I2C_Init+0xd4>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	e009      	b.n	8001fe4 <HAL_I2C_Init+0xe8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_I2C_Init+0x284>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	495c      	ldr	r1, [pc, #368]	@ (8002170 <HAL_I2C_Init+0x274>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d819      	bhi.n	8002038 <HAL_I2C_Init+0x13c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e59      	subs	r1, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002018:	400b      	ands	r3, r1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_I2C_Init+0x138>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e59      	subs	r1, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	e051      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002034:	2304      	movs	r3, #4
 8002036:	e04f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <HAL_I2C_Init+0x168>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e012      	b.n	800208a <HAL_I2C_Init+0x18e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x196>
 800208e:	2301      	movs	r3, #1
 8002090:	e022      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_I2C_Init+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e58      	subs	r0, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b6:	e00f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	6809      	ldr	r1, [r1, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6911      	ldr	r1, [r2, #16]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68d2      	ldr	r2, [r2, #12]
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	000186a0 	.word	0x000186a0
 8002174:	001e847f 	.word	0x001e847f
 8002178:	003d08ff 	.word	0x003d08ff
 800217c:	431bde83 	.word	0x431bde83
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0cc      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d90c      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a58      	ldr	r2, [pc, #352]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d044      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d119      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d003      	beq.n	8002242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223e:	2b03      	cmp	r3, #3
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e067      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4934      	ldr	r1, [pc, #208]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7ff fba2 	bl	80019bc <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7ff fb9e 	bl	80019bc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e04f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d20c      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f855 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb02 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00
 8002340:	40023800 	.word	0x40023800
 8002344:	08006790 	.word	0x08006790
 8002348:	20000010 	.word	0x20000010
 800234c:	20000014 	.word	0x20000014

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff0 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	080067a0 	.word	0x080067a0

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffdc 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0b5b      	lsrs	r3, r3, #13
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	080067a0 	.word	0x080067a0

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b0ae      	sub	sp, #184	@ 0xb8
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023de:	4bcb      	ldr	r3, [pc, #812]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	f200 8206 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x440>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002429 	.word	0x08002429
 80023f8:	080027f9 	.word	0x080027f9
 80023fc:	080027f9 	.word	0x080027f9
 8002400:	080027f9 	.word	0x080027f9
 8002404:	08002431 	.word	0x08002431
 8002408:	080027f9 	.word	0x080027f9
 800240c:	080027f9 	.word	0x080027f9
 8002410:	080027f9 	.word	0x080027f9
 8002414:	08002439 	.word	0x08002439
 8002418:	080027f9 	.word	0x080027f9
 800241c:	080027f9 	.word	0x080027f9
 8002420:	080027f9 	.word	0x080027f9
 8002424:	08002629 	.word	0x08002629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4bb9      	ldr	r3, [pc, #740]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x358>)
 800242a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800242e:	e1e7      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4bb8      	ldr	r3, [pc, #736]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002436:	e1e3      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002438:	4bb4      	ldr	r3, [pc, #720]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002444:	4bb1      	ldr	r3, [pc, #708]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d071      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002450:	4bae      	ldr	r3, [pc, #696]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800245c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4621      	mov	r1, r4
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	6439      	str	r1, [r7, #64]	@ 0x40
 8002494:	4629      	mov	r1, r5
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	647b      	str	r3, [r7, #68]	@ 0x44
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024a8:	4649      	mov	r1, r9
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4641      	mov	r1, r8
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4641      	mov	r1, r8
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4641      	mov	r1, r8
 80024b8:	1a51      	subs	r1, r2, r1
 80024ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024bc:	4649      	mov	r1, r9
 80024be:	eb63 0301 	sbc.w	r3, r3, r1
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024d0:	4649      	mov	r1, r9
 80024d2:	00cb      	lsls	r3, r1, #3
 80024d4:	4641      	mov	r1, r8
 80024d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024da:	4641      	mov	r1, r8
 80024dc:	00ca      	lsls	r2, r1, #3
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	4622      	mov	r2, r4
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ea:	462b      	mov	r3, r5
 80024ec:	460a      	mov	r2, r1
 80024ee:	eb42 0303 	adc.w	r3, r2, r3
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002500:	4629      	mov	r1, r5
 8002502:	024b      	lsls	r3, r1, #9
 8002504:	4621      	mov	r1, r4
 8002506:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800250a:	4621      	mov	r1, r4
 800250c:	024a      	lsls	r2, r1, #9
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800251c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002520:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002524:	f7fe fb42 	bl	8000bac <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002532:	e067      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002540:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002544:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800254e:	2300      	movs	r3, #0
 8002550:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002552:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002556:	4622      	mov	r2, r4
 8002558:	462b      	mov	r3, r5
 800255a:	f04f 0000 	mov.w	r0, #0
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	0159      	lsls	r1, r3, #5
 8002564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002568:	0150      	lsls	r0, r2, #5
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4621      	mov	r1, r4
 8002570:	1a51      	subs	r1, r2, r1
 8002572:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002574:	4629      	mov	r1, r5
 8002576:	eb63 0301 	sbc.w	r3, r3, r1
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002588:	4649      	mov	r1, r9
 800258a:	018b      	lsls	r3, r1, #6
 800258c:	4641      	mov	r1, r8
 800258e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002592:	4641      	mov	r1, r8
 8002594:	018a      	lsls	r2, r1, #6
 8002596:	4641      	mov	r1, r8
 8002598:	ebb2 0a01 	subs.w	sl, r2, r1
 800259c:	4649      	mov	r1, r9
 800259e:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b6:	4692      	mov	sl, r2
 80025b8:	469b      	mov	fp, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	eb1a 0303 	adds.w	r3, sl, r3
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	462b      	mov	r3, r5
 80025c4:	eb4b 0303 	adc.w	r3, fp, r3
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025d6:	4629      	mov	r1, r5
 80025d8:	028b      	lsls	r3, r1, #10
 80025da:	4621      	mov	r1, r4
 80025dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e0:	4621      	mov	r1, r4
 80025e2:	028a      	lsls	r2, r1, #10
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ec:	2200      	movs	r2, #0
 80025ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80025f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80025f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025f6:	f7fe fad9 	bl	8000bac <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4613      	mov	r3, r2
 8002600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800261a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002626:	e0eb      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06b      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002640:	4b32      	ldr	r3, [pc, #200]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	2200      	movs	r2, #0
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800264a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800264c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800264e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002652:	663b      	str	r3, [r7, #96]	@ 0x60
 8002654:	2300      	movs	r3, #0
 8002656:	667b      	str	r3, [r7, #100]	@ 0x64
 8002658:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800265c:	4622      	mov	r2, r4
 800265e:	462b      	mov	r3, r5
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	0159      	lsls	r1, r3, #5
 800266a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266e:	0150      	lsls	r0, r2, #5
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4621      	mov	r1, r4
 8002676:	1a51      	subs	r1, r2, r1
 8002678:	61b9      	str	r1, [r7, #24]
 800267a:	4629      	mov	r1, r5
 800267c:	eb63 0301 	sbc.w	r3, r3, r1
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800268e:	4659      	mov	r1, fp
 8002690:	018b      	lsls	r3, r1, #6
 8002692:	4651      	mov	r1, sl
 8002694:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002698:	4651      	mov	r1, sl
 800269a:	018a      	lsls	r2, r1, #6
 800269c:	4651      	mov	r1, sl
 800269e:	ebb2 0801 	subs.w	r8, r2, r1
 80026a2:	4659      	mov	r1, fp
 80026a4:	eb63 0901 	sbc.w	r9, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026bc:	4690      	mov	r8, r2
 80026be:	4699      	mov	r9, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	eb18 0303 	adds.w	r3, r8, r3
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	462b      	mov	r3, r5
 80026ca:	eb49 0303 	adc.w	r3, r9, r3
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026dc:	4629      	mov	r1, r5
 80026de:	024b      	lsls	r3, r1, #9
 80026e0:	4621      	mov	r1, r4
 80026e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e6:	4621      	mov	r1, r4
 80026e8:	024a      	lsls	r2, r1, #9
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026f2:	2200      	movs	r2, #0
 80026f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026fc:	f7fe fa56 	bl	8000bac <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270a:	e065      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x420>
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x458>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	4618      	mov	r0, r3
 8002722:	4611      	mov	r1, r2
 8002724:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002728:	653b      	str	r3, [r7, #80]	@ 0x50
 800272a:	2300      	movs	r3, #0
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
 800272e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002732:	4642      	mov	r2, r8
 8002734:	464b      	mov	r3, r9
 8002736:	f04f 0000 	mov.w	r0, #0
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	0159      	lsls	r1, r3, #5
 8002740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002744:	0150      	lsls	r0, r2, #5
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4641      	mov	r1, r8
 800274c:	1a51      	subs	r1, r2, r1
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	4649      	mov	r1, r9
 8002752:	eb63 0301 	sbc.w	r3, r3, r1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002764:	4659      	mov	r1, fp
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	4651      	mov	r1, sl
 800276a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276e:	4651      	mov	r1, sl
 8002770:	018a      	lsls	r2, r1, #6
 8002772:	4651      	mov	r1, sl
 8002774:	1a54      	subs	r4, r2, r1
 8002776:	4659      	mov	r1, fp
 8002778:	eb63 0501 	sbc.w	r5, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	00eb      	lsls	r3, r5, #3
 8002786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4643      	mov	r3, r8
 8002792:	18e3      	adds	r3, r4, r3
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	464b      	mov	r3, r9
 8002798:	eb45 0303 	adc.w	r3, r5, r3
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027aa:	4629      	mov	r1, r5
 80027ac:	028b      	lsls	r3, r1, #10
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b4:	4621      	mov	r1, r4
 80027b6:	028a      	lsls	r2, r1, #10
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027c0:	2200      	movs	r2, #0
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027ca:	f7fe f9ef 	bl	8000bac <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4613      	mov	r3, r2
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x458>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0f1b      	lsrs	r3, r3, #28
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f6:	e003      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002804:	4618      	mov	r0, r3
 8002806:	37b8      	adds	r7, #184	@ 0xb8
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400

08002818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e28d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8083 	beq.w	800293e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002838:	4b94      	ldr	r3, [pc, #592]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d019      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002844:	4b91      	ldr	r3, [pc, #580]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
        || \
 800284c:	2b08      	cmp	r3, #8
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002850:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285c:	d00c      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d112      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	4b84      	ldr	r3, [pc, #528]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05b      	beq.n	800293c <HAL_RCC_OscConfig+0x124>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d157      	bne.n	800293c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e25a      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x90>
 800289a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xb4>
 80028b2:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a75      	ldr	r2, [pc, #468]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a72      	ldr	r2, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028cc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff f866 	bl	80019bc <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f862 	bl	80019bc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e21f      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xdc>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7ff f852 	bl	80019bc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff f84e 	bl	80019bc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e20b      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	4b57      	ldr	r3, [pc, #348]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x104>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06f      	beq.n	8002a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800294a:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002956:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
        || \
 800295e:	2b08      	cmp	r3, #8
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002962:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1d3      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fffb 	bl	80019bc <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe fff7 	bl	80019bc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1b4      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4925      	ldr	r1, [pc, #148]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe ffda 	bl	80019bc <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ffd6 	bl	80019bc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e193      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d036      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe ffba 	bl	80019bc <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe ffb6 	bl	80019bc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e173      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x234>
 8002a6a:	e01b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe ffa3 	bl	80019bc <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e00e      	b.n	8002a98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe ff9f 	bl	80019bc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d907      	bls.n	8002a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e15c      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470000 	.word	0x42470000
 8002a94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ea      	bne.n	8002a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8097 	beq.w	8002be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b83      	ldr	r3, [pc, #524]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b79      	ldr	r3, [pc, #484]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe ff5f 	bl	80019bc <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe ff5b 	bl	80019bc <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e118      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x31e>
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	4a65      	ldr	r2, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b34:	e01c      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x340>
 8002b3e:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a60      	ldr	r2, [pc, #384]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b58:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a59      	ldr	r2, [pc, #356]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b64:	4b57      	ldr	r3, [pc, #348]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	4a56      	ldr	r2, [pc, #344]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe ff20 	bl	80019bc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe ff1c 	bl	80019bc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0d7      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCC_OscConfig+0x368>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe ff0a 	bl	80019bc <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe ff06 	bl	80019bc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0c1      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc2:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ee      	bne.n	8002bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ad 	beq.w	8002d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d060      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d145      	bne.n	8002c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe feda 	bl	80019bc <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fed6 	bl	80019bc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e093      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	071b      	lsls	r3, r3, #28
 8002c56:	491b      	ldr	r1, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe feab 	bl	80019bc <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fea7 	bl	80019bc <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e064      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x452>
 8002c88:	e05c      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fe94 	bl	80019bc <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fe90 	bl	80019bc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x480>
 8002cb6:	e045      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e040      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <HAL_RCC_OscConfig+0x538>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d030      	beq.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d129      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d122      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d119      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e042      	b.n	8002dec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fbb8 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa09 	bl	80031b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	@ 0x28
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d175      	bne.n	8002f00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_UART_Transmit+0x2c>
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e06e      	b.n	8002f02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2221      	movs	r2, #33	@ 0x21
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e32:	f7fe fdc3 	bl	80019bc <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4c:	d108      	bne.n	8002e60 <HAL_UART_Transmit+0x6c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	e003      	b.n	8002e68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e68:	e02e      	b.n	8002ec8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8df 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03a      	b.n	8002f02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e007      	b.n	8002eba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1cb      	bne.n	8002e6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2140      	movs	r1, #64	@ 0x40
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f8ab 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e006      	b.n	8002f02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b08a      	sub	sp, #40	@ 0x28
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	f040 8081 	bne.w	800302e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Receive+0x2e>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e079      	b.n	8003030 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2222      	movs	r2, #34	@ 0x22
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fd34 	bl	80019bc <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6a:	d108      	bne.n	8002f7e <HAL_UART_Receive+0x74>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	e003      	b.n	8002f86 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f86:	e047      	b.n	8003018 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2120      	movs	r1, #32
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f850 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e042      	b.n	8003030 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10c      	bne.n	8002fca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e01f      	b.n	800300a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d007      	beq.n	8002fe4 <HAL_UART_Receive+0xda>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_UART_Receive+0xe8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e008      	b.n	8003004 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1b2      	bne.n	8002f88 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e03b      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d037      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fcb3 	bl	80019bc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e03a      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d023      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b80      	cmp	r3, #128	@ 0x80
 800307e:	d020      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d01d      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d116      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f81d 	bl	80030ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2208      	movs	r2, #8
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00f      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d0b4      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b095      	sub	sp, #84	@ 0x54
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003112:	643a      	str	r2, [r7, #64]	@ 0x40
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003118:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	61fb      	str	r3, [r7, #28]
   return(result);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800314c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	2b01      	cmp	r3, #1
 8003160:	d119      	bne.n	8003196 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	60bb      	str	r3, [r7, #8]
   return(result);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 0310 	bic.w	r3, r3, #16
 8003178:	647b      	str	r3, [r7, #68]	@ 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003182:	61ba      	str	r2, [r7, #24]
 8003184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	613b      	str	r3, [r7, #16]
   return(result);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031a4:	bf00      	nop
 80031a6:	3754      	adds	r7, #84	@ 0x54
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b0c0      	sub	sp, #256	@ 0x100
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	ea40 0301 	orr.w	r3, r0, r1
 80031d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003208:	f021 010c 	bic.w	r1, r1, #12
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322a:	6999      	ldr	r1, [r3, #24]
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	ea40 0301 	orr.w	r3, r0, r1
 8003236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b8f      	ldr	r3, [pc, #572]	@ (800347c <UART_SetConfig+0x2cc>)
 8003240:	429a      	cmp	r2, r3
 8003242:	d005      	beq.n	8003250 <UART_SetConfig+0xa0>
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b8d      	ldr	r3, [pc, #564]	@ (8003480 <UART_SetConfig+0x2d0>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f89e 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003258:	e003      	b.n	8003262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325a:	f7ff f885 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 800325e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326c:	f040 810c 	bne.w	8003488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800327a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800327e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003282:	4622      	mov	r2, r4
 8003284:	462b      	mov	r3, r5
 8003286:	1891      	adds	r1, r2, r2
 8003288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800328a:	415b      	adcs	r3, r3
 800328c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800328e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003292:	4621      	mov	r1, r4
 8003294:	eb12 0801 	adds.w	r8, r2, r1
 8003298:	4629      	mov	r1, r5
 800329a:	eb43 0901 	adc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb49 0303 	adc.w	r3, r9, r3
 80032c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032de:	460b      	mov	r3, r1
 80032e0:	18db      	adds	r3, r3, r3
 80032e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e4:	4613      	mov	r3, r2
 80032e6:	eb42 0303 	adc.w	r3, r2, r3
 80032ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f4:	f7fd fc5a 	bl	8000bac <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b61      	ldr	r3, [pc, #388]	@ (8003484 <UART_SetConfig+0x2d4>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011c      	lsls	r4, r3, #4
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003320:	415b      	adcs	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003328:	4641      	mov	r1, r8
 800332a:	eb12 0a01 	adds.w	sl, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0b01 	adc.w	fp, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003348:	4692      	mov	sl, r2
 800334a:	469b      	mov	fp, r3
 800334c:	4643      	mov	r3, r8
 800334e:	eb1a 0303 	adds.w	r3, sl, r3
 8003352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003356:	464b      	mov	r3, r9
 8003358:	eb4b 0303 	adc.w	r3, fp, r3
 800335c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800336c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003374:	460b      	mov	r3, r1
 8003376:	18db      	adds	r3, r3, r3
 8003378:	643b      	str	r3, [r7, #64]	@ 0x40
 800337a:	4613      	mov	r3, r2
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	647b      	str	r3, [r7, #68]	@ 0x44
 8003382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800338a:	f7fd fc0f 	bl	8000bac <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4611      	mov	r1, r2
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003396:	fba3 2301 	umull	r2, r3, r3, r1
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2264      	movs	r2, #100	@ 0x64
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033aa:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <UART_SetConfig+0x2d4>)
 80033ac:	fba3 2302 	umull	r2, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033b8:	441c      	add	r4, r3
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d4:	415b      	adcs	r3, r3
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003410:	464b      	mov	r3, r9
 8003412:	460a      	mov	r2, r1
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800342c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003446:	f7fd fbb1 	bl	8000bac <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	@ 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3332      	adds	r3, #50	@ 0x32
 8003462:	4a08      	ldr	r2, [pc, #32]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4422      	add	r2, r4
 8003476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003478:	e106      	b.n	8003688 <UART_SetConfig+0x4d8>
 800347a:	bf00      	nop
 800347c:	40011000 	.word	0x40011000
 8003480:	40011400 	.word	0x40011400
 8003484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800349a:	4642      	mov	r2, r8
 800349c:	464b      	mov	r3, r9
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	6239      	str	r1, [r7, #32]
 80034a2:	415b      	adcs	r3, r3
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034aa:	4641      	mov	r1, r8
 80034ac:	1854      	adds	r4, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb43 0501 	adc.w	r5, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d0:	464b      	mov	r3, r9
 80034d2:	eb45 0303 	adc.w	r3, r5, r3
 80034d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034f6:	4629      	mov	r1, r5
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	4621      	mov	r1, r4
 80034fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003500:	4621      	mov	r1, r4
 8003502:	008a      	lsls	r2, r1, #2
 8003504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003508:	f7fd fb50 	bl	8000bac <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003512:	fba3 2302 	umull	r2, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	011c      	lsls	r4, r3, #4
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	61b9      	str	r1, [r7, #24]
 8003534:	415b      	adcs	r3, r3
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	4641      	mov	r1, r8
 800353e:	1851      	adds	r1, r2, r1
 8003540:	6139      	str	r1, [r7, #16]
 8003542:	4649      	mov	r1, r9
 8003544:	414b      	adcs	r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355e:	4651      	mov	r1, sl
 8003560:	00ca      	lsls	r2, r1, #3
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	4603      	mov	r3, r0
 8003568:	4642      	mov	r2, r8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003594:	4649      	mov	r1, r9
 8003596:	008b      	lsls	r3, r1, #2
 8003598:	4641      	mov	r1, r8
 800359a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359e:	4641      	mov	r1, r8
 80035a0:	008a      	lsls	r2, r1, #2
 80035a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035a6:	f7fd fb01 	bl	8000bac <__aeabi_uldivmod>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2301 	umull	r2, r3, r3, r1
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2264      	movs	r2, #100	@ 0x64
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	1acb      	subs	r3, r1, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	@ 0x32
 80035c4:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035da:	677a      	str	r2, [r7, #116]	@ 0x74
 80035dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	415b      	adcs	r3, r3
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003622:	464b      	mov	r3, r9
 8003624:	460a      	mov	r2, r1
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	663b      	str	r3, [r7, #96]	@ 0x60
 8003636:	667a      	str	r2, [r7, #100]	@ 0x64
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003644:	4649      	mov	r1, r9
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364e:	4641      	mov	r1, r8
 8003650:	008a      	lsls	r2, r1, #2
 8003652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003656:	f7fd faa9 	bl	8000bac <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	@ 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	@ 0x32
 8003672:	4a08      	ldr	r2, [pc, #32]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4422      	add	r2, r4
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800368e:	46bd      	mov	sp, r7
 8003690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <atof>:
 8003698:	2100      	movs	r1, #0
 800369a:	f000 be05 	b.w	80042a8 <strtod>

0800369e <sulp>:
 800369e:	b570      	push	{r4, r5, r6, lr}
 80036a0:	4604      	mov	r4, r0
 80036a2:	460d      	mov	r5, r1
 80036a4:	ec45 4b10 	vmov	d0, r4, r5
 80036a8:	4616      	mov	r6, r2
 80036aa:	f002 f891 	bl	80057d0 <__ulp>
 80036ae:	ec51 0b10 	vmov	r0, r1, d0
 80036b2:	b17e      	cbz	r6, 80036d4 <sulp+0x36>
 80036b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80036b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80036bc:	2b00      	cmp	r3, #0
 80036be:	dd09      	ble.n	80036d4 <sulp+0x36>
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80036c6:	2400      	movs	r4, #0
 80036c8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80036cc:	4622      	mov	r2, r4
 80036ce:	462b      	mov	r3, r5
 80036d0:	f7fc ffb2 	bl	8000638 <__aeabi_dmul>
 80036d4:	ec41 0b10 	vmov	d0, r0, r1
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
 80036da:	0000      	movs	r0, r0
 80036dc:	0000      	movs	r0, r0
	...

080036e0 <_strtod_l>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	b09f      	sub	sp, #124	@ 0x7c
 80036e6:	460c      	mov	r4, r1
 80036e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80036ea:	2200      	movs	r2, #0
 80036ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80036ee:	9005      	str	r0, [sp, #20]
 80036f0:	f04f 0a00 	mov.w	sl, #0
 80036f4:	f04f 0b00 	mov.w	fp, #0
 80036f8:	460a      	mov	r2, r1
 80036fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80036fc:	7811      	ldrb	r1, [r2, #0]
 80036fe:	292b      	cmp	r1, #43	@ 0x2b
 8003700:	d04a      	beq.n	8003798 <_strtod_l+0xb8>
 8003702:	d838      	bhi.n	8003776 <_strtod_l+0x96>
 8003704:	290d      	cmp	r1, #13
 8003706:	d832      	bhi.n	800376e <_strtod_l+0x8e>
 8003708:	2908      	cmp	r1, #8
 800370a:	d832      	bhi.n	8003772 <_strtod_l+0x92>
 800370c:	2900      	cmp	r1, #0
 800370e:	d03b      	beq.n	8003788 <_strtod_l+0xa8>
 8003710:	2200      	movs	r2, #0
 8003712:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003716:	782a      	ldrb	r2, [r5, #0]
 8003718:	2a30      	cmp	r2, #48	@ 0x30
 800371a:	f040 80b3 	bne.w	8003884 <_strtod_l+0x1a4>
 800371e:	786a      	ldrb	r2, [r5, #1]
 8003720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003724:	2a58      	cmp	r2, #88	@ 0x58
 8003726:	d16e      	bne.n	8003806 <_strtod_l+0x126>
 8003728:	9302      	str	r3, [sp, #8]
 800372a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	ab1a      	add	r3, sp, #104	@ 0x68
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4a8e      	ldr	r2, [pc, #568]	@ (800396c <_strtod_l+0x28c>)
 8003734:	9805      	ldr	r0, [sp, #20]
 8003736:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003738:	a919      	add	r1, sp, #100	@ 0x64
 800373a:	f001 f943 	bl	80049c4 <__gethex>
 800373e:	f010 060f 	ands.w	r6, r0, #15
 8003742:	4604      	mov	r4, r0
 8003744:	d005      	beq.n	8003752 <_strtod_l+0x72>
 8003746:	2e06      	cmp	r6, #6
 8003748:	d128      	bne.n	800379c <_strtod_l+0xbc>
 800374a:	3501      	adds	r5, #1
 800374c:	2300      	movs	r3, #0
 800374e:	9519      	str	r5, [sp, #100]	@ 0x64
 8003750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003754:	2b00      	cmp	r3, #0
 8003756:	f040 858e 	bne.w	8004276 <_strtod_l+0xb96>
 800375a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800375c:	b1cb      	cbz	r3, 8003792 <_strtod_l+0xb2>
 800375e:	4652      	mov	r2, sl
 8003760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8003764:	ec43 2b10 	vmov	d0, r2, r3
 8003768:	b01f      	add	sp, #124	@ 0x7c
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	2920      	cmp	r1, #32
 8003770:	d1ce      	bne.n	8003710 <_strtod_l+0x30>
 8003772:	3201      	adds	r2, #1
 8003774:	e7c1      	b.n	80036fa <_strtod_l+0x1a>
 8003776:	292d      	cmp	r1, #45	@ 0x2d
 8003778:	d1ca      	bne.n	8003710 <_strtod_l+0x30>
 800377a:	2101      	movs	r1, #1
 800377c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800377e:	1c51      	adds	r1, r2, #1
 8003780:	9119      	str	r1, [sp, #100]	@ 0x64
 8003782:	7852      	ldrb	r2, [r2, #1]
 8003784:	2a00      	cmp	r2, #0
 8003786:	d1c5      	bne.n	8003714 <_strtod_l+0x34>
 8003788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800378a:	9419      	str	r4, [sp, #100]	@ 0x64
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 8570 	bne.w	8004272 <_strtod_l+0xb92>
 8003792:	4652      	mov	r2, sl
 8003794:	465b      	mov	r3, fp
 8003796:	e7e5      	b.n	8003764 <_strtod_l+0x84>
 8003798:	2100      	movs	r1, #0
 800379a:	e7ef      	b.n	800377c <_strtod_l+0x9c>
 800379c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800379e:	b13a      	cbz	r2, 80037b0 <_strtod_l+0xd0>
 80037a0:	2135      	movs	r1, #53	@ 0x35
 80037a2:	a81c      	add	r0, sp, #112	@ 0x70
 80037a4:	f002 f90e 	bl	80059c4 <__copybits>
 80037a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80037aa:	9805      	ldr	r0, [sp, #20]
 80037ac:	f001 fcdc 	bl	8005168 <_Bfree>
 80037b0:	3e01      	subs	r6, #1
 80037b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80037b4:	2e04      	cmp	r6, #4
 80037b6:	d806      	bhi.n	80037c6 <_strtod_l+0xe6>
 80037b8:	e8df f006 	tbb	[pc, r6]
 80037bc:	201d0314 	.word	0x201d0314
 80037c0:	14          	.byte	0x14
 80037c1:	00          	.byte	0x00
 80037c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80037c6:	05e1      	lsls	r1, r4, #23
 80037c8:	bf48      	it	mi
 80037ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80037ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80037d2:	0d1b      	lsrs	r3, r3, #20
 80037d4:	051b      	lsls	r3, r3, #20
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1bb      	bne.n	8003752 <_strtod_l+0x72>
 80037da:	f000 fffd 	bl	80047d8 <__errno>
 80037de:	2322      	movs	r3, #34	@ 0x22
 80037e0:	6003      	str	r3, [r0, #0]
 80037e2:	e7b6      	b.n	8003752 <_strtod_l+0x72>
 80037e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80037e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80037ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80037f4:	e7e7      	b.n	80037c6 <_strtod_l+0xe6>
 80037f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8003974 <_strtod_l+0x294>
 80037fa:	e7e4      	b.n	80037c6 <_strtod_l+0xe6>
 80037fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8003800:	f04f 3aff 	mov.w	sl, #4294967295
 8003804:	e7df      	b.n	80037c6 <_strtod_l+0xe6>
 8003806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	9219      	str	r2, [sp, #100]	@ 0x64
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b30      	cmp	r3, #48	@ 0x30
 8003810:	d0f9      	beq.n	8003806 <_strtod_l+0x126>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d09d      	beq.n	8003752 <_strtod_l+0x72>
 8003816:	2301      	movs	r3, #1
 8003818:	9309      	str	r3, [sp, #36]	@ 0x24
 800381a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800381c:	930c      	str	r3, [sp, #48]	@ 0x30
 800381e:	2300      	movs	r3, #0
 8003820:	9308      	str	r3, [sp, #32]
 8003822:	930a      	str	r3, [sp, #40]	@ 0x28
 8003824:	461f      	mov	r7, r3
 8003826:	220a      	movs	r2, #10
 8003828:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800382a:	7805      	ldrb	r5, [r0, #0]
 800382c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8003830:	b2d9      	uxtb	r1, r3
 8003832:	2909      	cmp	r1, #9
 8003834:	d928      	bls.n	8003888 <_strtod_l+0x1a8>
 8003836:	494e      	ldr	r1, [pc, #312]	@ (8003970 <_strtod_l+0x290>)
 8003838:	2201      	movs	r2, #1
 800383a:	f000 ff75 	bl	8004728 <strncmp>
 800383e:	2800      	cmp	r0, #0
 8003840:	d032      	beq.n	80038a8 <_strtod_l+0x1c8>
 8003842:	2000      	movs	r0, #0
 8003844:	462a      	mov	r2, r5
 8003846:	4681      	mov	r9, r0
 8003848:	463d      	mov	r5, r7
 800384a:	4603      	mov	r3, r0
 800384c:	2a65      	cmp	r2, #101	@ 0x65
 800384e:	d001      	beq.n	8003854 <_strtod_l+0x174>
 8003850:	2a45      	cmp	r2, #69	@ 0x45
 8003852:	d114      	bne.n	800387e <_strtod_l+0x19e>
 8003854:	b91d      	cbnz	r5, 800385e <_strtod_l+0x17e>
 8003856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003858:	4302      	orrs	r2, r0
 800385a:	d095      	beq.n	8003788 <_strtod_l+0xa8>
 800385c:	2500      	movs	r5, #0
 800385e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003860:	1c62      	adds	r2, r4, #1
 8003862:	9219      	str	r2, [sp, #100]	@ 0x64
 8003864:	7862      	ldrb	r2, [r4, #1]
 8003866:	2a2b      	cmp	r2, #43	@ 0x2b
 8003868:	d077      	beq.n	800395a <_strtod_l+0x27a>
 800386a:	2a2d      	cmp	r2, #45	@ 0x2d
 800386c:	d07b      	beq.n	8003966 <_strtod_l+0x286>
 800386e:	f04f 0c00 	mov.w	ip, #0
 8003872:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8003876:	2909      	cmp	r1, #9
 8003878:	f240 8082 	bls.w	8003980 <_strtod_l+0x2a0>
 800387c:	9419      	str	r4, [sp, #100]	@ 0x64
 800387e:	f04f 0800 	mov.w	r8, #0
 8003882:	e0a2      	b.n	80039ca <_strtod_l+0x2ea>
 8003884:	2300      	movs	r3, #0
 8003886:	e7c7      	b.n	8003818 <_strtod_l+0x138>
 8003888:	2f08      	cmp	r7, #8
 800388a:	bfd5      	itete	le
 800388c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800388e:	9908      	ldrgt	r1, [sp, #32]
 8003890:	fb02 3301 	mlale	r3, r2, r1, r3
 8003894:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003898:	f100 0001 	add.w	r0, r0, #1
 800389c:	bfd4      	ite	le
 800389e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80038a0:	9308      	strgt	r3, [sp, #32]
 80038a2:	3701      	adds	r7, #1
 80038a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80038a6:	e7bf      	b.n	8003828 <_strtod_l+0x148>
 80038a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80038ae:	785a      	ldrb	r2, [r3, #1]
 80038b0:	b37f      	cbz	r7, 8003912 <_strtod_l+0x232>
 80038b2:	4681      	mov	r9, r0
 80038b4:	463d      	mov	r5, r7
 80038b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80038ba:	2b09      	cmp	r3, #9
 80038bc:	d912      	bls.n	80038e4 <_strtod_l+0x204>
 80038be:	2301      	movs	r3, #1
 80038c0:	e7c4      	b.n	800384c <_strtod_l+0x16c>
 80038c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80038c8:	785a      	ldrb	r2, [r3, #1]
 80038ca:	3001      	adds	r0, #1
 80038cc:	2a30      	cmp	r2, #48	@ 0x30
 80038ce:	d0f8      	beq.n	80038c2 <_strtod_l+0x1e2>
 80038d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	f200 84d3 	bhi.w	8004280 <_strtod_l+0xba0>
 80038da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80038dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80038de:	4681      	mov	r9, r0
 80038e0:	2000      	movs	r0, #0
 80038e2:	4605      	mov	r5, r0
 80038e4:	3a30      	subs	r2, #48	@ 0x30
 80038e6:	f100 0301 	add.w	r3, r0, #1
 80038ea:	d02a      	beq.n	8003942 <_strtod_l+0x262>
 80038ec:	4499      	add	r9, r3
 80038ee:	eb00 0c05 	add.w	ip, r0, r5
 80038f2:	462b      	mov	r3, r5
 80038f4:	210a      	movs	r1, #10
 80038f6:	4563      	cmp	r3, ip
 80038f8:	d10d      	bne.n	8003916 <_strtod_l+0x236>
 80038fa:	1c69      	adds	r1, r5, #1
 80038fc:	4401      	add	r1, r0
 80038fe:	4428      	add	r0, r5
 8003900:	2808      	cmp	r0, #8
 8003902:	dc16      	bgt.n	8003932 <_strtod_l+0x252>
 8003904:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003906:	230a      	movs	r3, #10
 8003908:	fb03 2300 	mla	r3, r3, r0, r2
 800390c:	930a      	str	r3, [sp, #40]	@ 0x28
 800390e:	2300      	movs	r3, #0
 8003910:	e018      	b.n	8003944 <_strtod_l+0x264>
 8003912:	4638      	mov	r0, r7
 8003914:	e7da      	b.n	80038cc <_strtod_l+0x1ec>
 8003916:	2b08      	cmp	r3, #8
 8003918:	f103 0301 	add.w	r3, r3, #1
 800391c:	dc03      	bgt.n	8003926 <_strtod_l+0x246>
 800391e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003920:	434e      	muls	r6, r1
 8003922:	960a      	str	r6, [sp, #40]	@ 0x28
 8003924:	e7e7      	b.n	80038f6 <_strtod_l+0x216>
 8003926:	2b10      	cmp	r3, #16
 8003928:	bfde      	ittt	le
 800392a:	9e08      	ldrle	r6, [sp, #32]
 800392c:	434e      	mulle	r6, r1
 800392e:	9608      	strle	r6, [sp, #32]
 8003930:	e7e1      	b.n	80038f6 <_strtod_l+0x216>
 8003932:	280f      	cmp	r0, #15
 8003934:	dceb      	bgt.n	800390e <_strtod_l+0x22e>
 8003936:	9808      	ldr	r0, [sp, #32]
 8003938:	230a      	movs	r3, #10
 800393a:	fb03 2300 	mla	r3, r3, r0, r2
 800393e:	9308      	str	r3, [sp, #32]
 8003940:	e7e5      	b.n	800390e <_strtod_l+0x22e>
 8003942:	4629      	mov	r1, r5
 8003944:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003946:	1c50      	adds	r0, r2, #1
 8003948:	9019      	str	r0, [sp, #100]	@ 0x64
 800394a:	7852      	ldrb	r2, [r2, #1]
 800394c:	4618      	mov	r0, r3
 800394e:	460d      	mov	r5, r1
 8003950:	e7b1      	b.n	80038b6 <_strtod_l+0x1d6>
 8003952:	f04f 0900 	mov.w	r9, #0
 8003956:	2301      	movs	r3, #1
 8003958:	e77d      	b.n	8003856 <_strtod_l+0x176>
 800395a:	f04f 0c00 	mov.w	ip, #0
 800395e:	1ca2      	adds	r2, r4, #2
 8003960:	9219      	str	r2, [sp, #100]	@ 0x64
 8003962:	78a2      	ldrb	r2, [r4, #2]
 8003964:	e785      	b.n	8003872 <_strtod_l+0x192>
 8003966:	f04f 0c01 	mov.w	ip, #1
 800396a:	e7f8      	b.n	800395e <_strtod_l+0x27e>
 800396c:	080067cc 	.word	0x080067cc
 8003970:	080067a8 	.word	0x080067a8
 8003974:	7ff00000 	.word	0x7ff00000
 8003978:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800397a:	1c51      	adds	r1, r2, #1
 800397c:	9119      	str	r1, [sp, #100]	@ 0x64
 800397e:	7852      	ldrb	r2, [r2, #1]
 8003980:	2a30      	cmp	r2, #48	@ 0x30
 8003982:	d0f9      	beq.n	8003978 <_strtod_l+0x298>
 8003984:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003988:	2908      	cmp	r1, #8
 800398a:	f63f af78 	bhi.w	800387e <_strtod_l+0x19e>
 800398e:	3a30      	subs	r2, #48	@ 0x30
 8003990:	920e      	str	r2, [sp, #56]	@ 0x38
 8003992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003994:	920f      	str	r2, [sp, #60]	@ 0x3c
 8003996:	f04f 080a 	mov.w	r8, #10
 800399a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800399c:	1c56      	adds	r6, r2, #1
 800399e:	9619      	str	r6, [sp, #100]	@ 0x64
 80039a0:	7852      	ldrb	r2, [r2, #1]
 80039a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80039a6:	f1be 0f09 	cmp.w	lr, #9
 80039aa:	d939      	bls.n	8003a20 <_strtod_l+0x340>
 80039ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80039ae:	1a76      	subs	r6, r6, r1
 80039b0:	2e08      	cmp	r6, #8
 80039b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80039b6:	dc03      	bgt.n	80039c0 <_strtod_l+0x2e0>
 80039b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80039ba:	4588      	cmp	r8, r1
 80039bc:	bfa8      	it	ge
 80039be:	4688      	movge	r8, r1
 80039c0:	f1bc 0f00 	cmp.w	ip, #0
 80039c4:	d001      	beq.n	80039ca <_strtod_l+0x2ea>
 80039c6:	f1c8 0800 	rsb	r8, r8, #0
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	d14e      	bne.n	8003a6c <_strtod_l+0x38c>
 80039ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80039d0:	4308      	orrs	r0, r1
 80039d2:	f47f aebe 	bne.w	8003752 <_strtod_l+0x72>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f47f aed6 	bne.w	8003788 <_strtod_l+0xa8>
 80039dc:	2a69      	cmp	r2, #105	@ 0x69
 80039de:	d028      	beq.n	8003a32 <_strtod_l+0x352>
 80039e0:	dc25      	bgt.n	8003a2e <_strtod_l+0x34e>
 80039e2:	2a49      	cmp	r2, #73	@ 0x49
 80039e4:	d025      	beq.n	8003a32 <_strtod_l+0x352>
 80039e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80039e8:	f47f aece 	bne.w	8003788 <_strtod_l+0xa8>
 80039ec:	499b      	ldr	r1, [pc, #620]	@ (8003c5c <_strtod_l+0x57c>)
 80039ee:	a819      	add	r0, sp, #100	@ 0x64
 80039f0:	f001 fa0a 	bl	8004e08 <__match>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	f43f aec7 	beq.w	8003788 <_strtod_l+0xa8>
 80039fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b28      	cmp	r3, #40	@ 0x28
 8003a00:	d12e      	bne.n	8003a60 <_strtod_l+0x380>
 8003a02:	4997      	ldr	r1, [pc, #604]	@ (8003c60 <_strtod_l+0x580>)
 8003a04:	aa1c      	add	r2, sp, #112	@ 0x70
 8003a06:	a819      	add	r0, sp, #100	@ 0x64
 8003a08:	f001 fa12 	bl	8004e30 <__hexnan>
 8003a0c:	2805      	cmp	r0, #5
 8003a0e:	d127      	bne.n	8003a60 <_strtod_l+0x380>
 8003a10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003a12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8003a16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8003a1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8003a1e:	e698      	b.n	8003752 <_strtod_l+0x72>
 8003a20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003a22:	fb08 2101 	mla	r1, r8, r1, r2
 8003a26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8003a2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8003a2c:	e7b5      	b.n	800399a <_strtod_l+0x2ba>
 8003a2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8003a30:	e7da      	b.n	80039e8 <_strtod_l+0x308>
 8003a32:	498c      	ldr	r1, [pc, #560]	@ (8003c64 <_strtod_l+0x584>)
 8003a34:	a819      	add	r0, sp, #100	@ 0x64
 8003a36:	f001 f9e7 	bl	8004e08 <__match>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	f43f aea4 	beq.w	8003788 <_strtod_l+0xa8>
 8003a40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003a42:	4989      	ldr	r1, [pc, #548]	@ (8003c68 <_strtod_l+0x588>)
 8003a44:	3b01      	subs	r3, #1
 8003a46:	a819      	add	r0, sp, #100	@ 0x64
 8003a48:	9319      	str	r3, [sp, #100]	@ 0x64
 8003a4a:	f001 f9dd 	bl	8004e08 <__match>
 8003a4e:	b910      	cbnz	r0, 8003a56 <_strtod_l+0x376>
 8003a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003a52:	3301      	adds	r3, #1
 8003a54:	9319      	str	r3, [sp, #100]	@ 0x64
 8003a56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8003c78 <_strtod_l+0x598>
 8003a5a:	f04f 0a00 	mov.w	sl, #0
 8003a5e:	e678      	b.n	8003752 <_strtod_l+0x72>
 8003a60:	4882      	ldr	r0, [pc, #520]	@ (8003c6c <_strtod_l+0x58c>)
 8003a62:	f000 fef5 	bl	8004850 <nan>
 8003a66:	ec5b ab10 	vmov	sl, fp, d0
 8003a6a:	e672      	b.n	8003752 <_strtod_l+0x72>
 8003a6c:	eba8 0309 	sub.w	r3, r8, r9
 8003a70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	bf08      	it	eq
 8003a78:	462f      	moveq	r7, r5
 8003a7a:	2d10      	cmp	r5, #16
 8003a7c:	462c      	mov	r4, r5
 8003a7e:	bfa8      	it	ge
 8003a80:	2410      	movge	r4, #16
 8003a82:	f7fc fd5f 	bl	8000544 <__aeabi_ui2d>
 8003a86:	2d09      	cmp	r5, #9
 8003a88:	4682      	mov	sl, r0
 8003a8a:	468b      	mov	fp, r1
 8003a8c:	dc13      	bgt.n	8003ab6 <_strtod_l+0x3d6>
 8003a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f43f ae5e 	beq.w	8003752 <_strtod_l+0x72>
 8003a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a98:	dd78      	ble.n	8003b8c <_strtod_l+0x4ac>
 8003a9a:	2b16      	cmp	r3, #22
 8003a9c:	dc5f      	bgt.n	8003b5e <_strtod_l+0x47e>
 8003a9e:	4974      	ldr	r1, [pc, #464]	@ (8003c70 <_strtod_l+0x590>)
 8003aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aa8:	4652      	mov	r2, sl
 8003aaa:	465b      	mov	r3, fp
 8003aac:	f7fc fdc4 	bl	8000638 <__aeabi_dmul>
 8003ab0:	4682      	mov	sl, r0
 8003ab2:	468b      	mov	fp, r1
 8003ab4:	e64d      	b.n	8003752 <_strtod_l+0x72>
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8003c70 <_strtod_l+0x590>)
 8003ab8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003abc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003ac0:	f7fc fdba 	bl	8000638 <__aeabi_dmul>
 8003ac4:	4682      	mov	sl, r0
 8003ac6:	9808      	ldr	r0, [sp, #32]
 8003ac8:	468b      	mov	fp, r1
 8003aca:	f7fc fd3b 	bl	8000544 <__aeabi_ui2d>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	f7fc fbf9 	bl	80002cc <__adddf3>
 8003ada:	2d0f      	cmp	r5, #15
 8003adc:	4682      	mov	sl, r0
 8003ade:	468b      	mov	fp, r1
 8003ae0:	ddd5      	ble.n	8003a8e <_strtod_l+0x3ae>
 8003ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae4:	1b2c      	subs	r4, r5, r4
 8003ae6:	441c      	add	r4, r3
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	f340 8096 	ble.w	8003c1a <_strtod_l+0x53a>
 8003aee:	f014 030f 	ands.w	r3, r4, #15
 8003af2:	d00a      	beq.n	8003b0a <_strtod_l+0x42a>
 8003af4:	495e      	ldr	r1, [pc, #376]	@ (8003c70 <_strtod_l+0x590>)
 8003af6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003afa:	4652      	mov	r2, sl
 8003afc:	465b      	mov	r3, fp
 8003afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b02:	f7fc fd99 	bl	8000638 <__aeabi_dmul>
 8003b06:	4682      	mov	sl, r0
 8003b08:	468b      	mov	fp, r1
 8003b0a:	f034 040f 	bics.w	r4, r4, #15
 8003b0e:	d073      	beq.n	8003bf8 <_strtod_l+0x518>
 8003b10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8003b14:	dd48      	ble.n	8003ba8 <_strtod_l+0x4c8>
 8003b16:	2400      	movs	r4, #0
 8003b18:	46a0      	mov	r8, r4
 8003b1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003b1c:	46a1      	mov	r9, r4
 8003b1e:	9a05      	ldr	r2, [sp, #20]
 8003b20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8003c78 <_strtod_l+0x598>
 8003b24:	2322      	movs	r3, #34	@ 0x22
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	f04f 0a00 	mov.w	sl, #0
 8003b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f43f ae0f 	beq.w	8003752 <_strtod_l+0x72>
 8003b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003b36:	9805      	ldr	r0, [sp, #20]
 8003b38:	f001 fb16 	bl	8005168 <_Bfree>
 8003b3c:	9805      	ldr	r0, [sp, #20]
 8003b3e:	4649      	mov	r1, r9
 8003b40:	f001 fb12 	bl	8005168 <_Bfree>
 8003b44:	9805      	ldr	r0, [sp, #20]
 8003b46:	4641      	mov	r1, r8
 8003b48:	f001 fb0e 	bl	8005168 <_Bfree>
 8003b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b4e:	9805      	ldr	r0, [sp, #20]
 8003b50:	f001 fb0a 	bl	8005168 <_Bfree>
 8003b54:	9805      	ldr	r0, [sp, #20]
 8003b56:	4621      	mov	r1, r4
 8003b58:	f001 fb06 	bl	8005168 <_Bfree>
 8003b5c:	e5f9      	b.n	8003752 <_strtod_l+0x72>
 8003b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8003b64:	4293      	cmp	r3, r2
 8003b66:	dbbc      	blt.n	8003ae2 <_strtod_l+0x402>
 8003b68:	4c41      	ldr	r4, [pc, #260]	@ (8003c70 <_strtod_l+0x590>)
 8003b6a:	f1c5 050f 	rsb	r5, r5, #15
 8003b6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003b72:	4652      	mov	r2, sl
 8003b74:	465b      	mov	r3, fp
 8003b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b7a:	f7fc fd5d 	bl	8000638 <__aeabi_dmul>
 8003b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b80:	1b5d      	subs	r5, r3, r5
 8003b82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003b8a:	e78f      	b.n	8003aac <_strtod_l+0x3cc>
 8003b8c:	3316      	adds	r3, #22
 8003b8e:	dba8      	blt.n	8003ae2 <_strtod_l+0x402>
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <_strtod_l+0x590>)
 8003b92:	eba9 0808 	sub.w	r8, r9, r8
 8003b96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003b9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	f7fc fe73 	bl	800088c <__aeabi_ddiv>
 8003ba6:	e783      	b.n	8003ab0 <_strtod_l+0x3d0>
 8003ba8:	4b32      	ldr	r3, [pc, #200]	@ (8003c74 <_strtod_l+0x594>)
 8003baa:	9308      	str	r3, [sp, #32]
 8003bac:	2300      	movs	r3, #0
 8003bae:	1124      	asrs	r4, r4, #4
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	4659      	mov	r1, fp
 8003bb4:	461e      	mov	r6, r3
 8003bb6:	2c01      	cmp	r4, #1
 8003bb8:	dc21      	bgt.n	8003bfe <_strtod_l+0x51e>
 8003bba:	b10b      	cbz	r3, 8003bc0 <_strtod_l+0x4e0>
 8003bbc:	4682      	mov	sl, r0
 8003bbe:	468b      	mov	fp, r1
 8003bc0:	492c      	ldr	r1, [pc, #176]	@ (8003c74 <_strtod_l+0x594>)
 8003bc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8003bc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003bca:	4652      	mov	r2, sl
 8003bcc:	465b      	mov	r3, fp
 8003bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bd2:	f7fc fd31 	bl	8000638 <__aeabi_dmul>
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <_strtod_l+0x598>)
 8003bd8:	460a      	mov	r2, r1
 8003bda:	400b      	ands	r3, r1
 8003bdc:	4927      	ldr	r1, [pc, #156]	@ (8003c7c <_strtod_l+0x59c>)
 8003bde:	428b      	cmp	r3, r1
 8003be0:	4682      	mov	sl, r0
 8003be2:	d898      	bhi.n	8003b16 <_strtod_l+0x436>
 8003be4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf86      	itte	hi
 8003bec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8003c80 <_strtod_l+0x5a0>
 8003bf0:	f04f 3aff 	movhi.w	sl, #4294967295
 8003bf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9308      	str	r3, [sp, #32]
 8003bfc:	e07a      	b.n	8003cf4 <_strtod_l+0x614>
 8003bfe:	07e2      	lsls	r2, r4, #31
 8003c00:	d505      	bpl.n	8003c0e <_strtod_l+0x52e>
 8003c02:	9b08      	ldr	r3, [sp, #32]
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f7fc fd16 	bl	8000638 <__aeabi_dmul>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9a08      	ldr	r2, [sp, #32]
 8003c10:	3208      	adds	r2, #8
 8003c12:	3601      	adds	r6, #1
 8003c14:	1064      	asrs	r4, r4, #1
 8003c16:	9208      	str	r2, [sp, #32]
 8003c18:	e7cd      	b.n	8003bb6 <_strtod_l+0x4d6>
 8003c1a:	d0ed      	beq.n	8003bf8 <_strtod_l+0x518>
 8003c1c:	4264      	negs	r4, r4
 8003c1e:	f014 020f 	ands.w	r2, r4, #15
 8003c22:	d00a      	beq.n	8003c3a <_strtod_l+0x55a>
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <_strtod_l+0x590>)
 8003c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f7fc fe2b 	bl	800088c <__aeabi_ddiv>
 8003c36:	4682      	mov	sl, r0
 8003c38:	468b      	mov	fp, r1
 8003c3a:	1124      	asrs	r4, r4, #4
 8003c3c:	d0dc      	beq.n	8003bf8 <_strtod_l+0x518>
 8003c3e:	2c1f      	cmp	r4, #31
 8003c40:	dd20      	ble.n	8003c84 <_strtod_l+0x5a4>
 8003c42:	2400      	movs	r4, #0
 8003c44:	46a0      	mov	r8, r4
 8003c46:	940a      	str	r4, [sp, #40]	@ 0x28
 8003c48:	46a1      	mov	r9, r4
 8003c4a:	9a05      	ldr	r2, [sp, #20]
 8003c4c:	2322      	movs	r3, #34	@ 0x22
 8003c4e:	f04f 0a00 	mov.w	sl, #0
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e768      	b.n	8003b2c <_strtod_l+0x44c>
 8003c5a:	bf00      	nop
 8003c5c:	080067b3 	.word	0x080067b3
 8003c60:	080067b8 	.word	0x080067b8
 8003c64:	080067aa 	.word	0x080067aa
 8003c68:	080067ad 	.word	0x080067ad
 8003c6c:	08006b5f 	.word	0x08006b5f
 8003c70:	08006928 	.word	0x08006928
 8003c74:	08006900 	.word	0x08006900
 8003c78:	7ff00000 	.word	0x7ff00000
 8003c7c:	7ca00000 	.word	0x7ca00000
 8003c80:	7fefffff 	.word	0x7fefffff
 8003c84:	f014 0310 	ands.w	r3, r4, #16
 8003c88:	bf18      	it	ne
 8003c8a:	236a      	movne	r3, #106	@ 0x6a
 8003c8c:	4ea9      	ldr	r6, [pc, #676]	@ (8003f34 <_strtod_l+0x854>)
 8003c8e:	9308      	str	r3, [sp, #32]
 8003c90:	4650      	mov	r0, sl
 8003c92:	4659      	mov	r1, fp
 8003c94:	2300      	movs	r3, #0
 8003c96:	07e2      	lsls	r2, r4, #31
 8003c98:	d504      	bpl.n	8003ca4 <_strtod_l+0x5c4>
 8003c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c9e:	f7fc fccb 	bl	8000638 <__aeabi_dmul>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	1064      	asrs	r4, r4, #1
 8003ca6:	f106 0608 	add.w	r6, r6, #8
 8003caa:	d1f4      	bne.n	8003c96 <_strtod_l+0x5b6>
 8003cac:	b10b      	cbz	r3, 8003cb2 <_strtod_l+0x5d2>
 8003cae:	4682      	mov	sl, r0
 8003cb0:	468b      	mov	fp, r1
 8003cb2:	9b08      	ldr	r3, [sp, #32]
 8003cb4:	b1b3      	cbz	r3, 8003ce4 <_strtod_l+0x604>
 8003cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	dd0f      	ble.n	8003ce4 <_strtod_l+0x604>
 8003cc4:	2b1f      	cmp	r3, #31
 8003cc6:	dd55      	ble.n	8003d74 <_strtod_l+0x694>
 8003cc8:	2b34      	cmp	r3, #52	@ 0x34
 8003cca:	bfde      	ittt	le
 8003ccc:	f04f 33ff 	movle.w	r3, #4294967295
 8003cd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003cd4:	4093      	lslle	r3, r2
 8003cd6:	f04f 0a00 	mov.w	sl, #0
 8003cda:	bfcc      	ite	gt
 8003cdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4650      	mov	r0, sl
 8003cea:	4659      	mov	r1, fp
 8003cec:	f7fc ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1a6      	bne.n	8003c42 <_strtod_l+0x562>
 8003cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003cfa:	9805      	ldr	r0, [sp, #20]
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	463a      	mov	r2, r7
 8003d00:	f001 fa9a 	bl	8005238 <__s2b>
 8003d04:	900a      	str	r0, [sp, #40]	@ 0x28
 8003d06:	2800      	cmp	r0, #0
 8003d08:	f43f af05 	beq.w	8003b16 <_strtod_l+0x436>
 8003d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	eba9 0308 	sub.w	r3, r9, r8
 8003d14:	bfa8      	it	ge
 8003d16:	2300      	movge	r3, #0
 8003d18:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003d20:	9316      	str	r3, [sp, #88]	@ 0x58
 8003d22:	46a0      	mov	r8, r4
 8003d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d26:	9805      	ldr	r0, [sp, #20]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	f001 f9dd 	bl	80050e8 <_Balloc>
 8003d2e:	4681      	mov	r9, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f43f aef4 	beq.w	8003b1e <_strtod_l+0x43e>
 8003d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	3202      	adds	r2, #2
 8003d3c:	f103 010c 	add.w	r1, r3, #12
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	300c      	adds	r0, #12
 8003d44:	f000 fd75 	bl	8004832 <memcpy>
 8003d48:	ec4b ab10 	vmov	d0, sl, fp
 8003d4c:	9805      	ldr	r0, [sp, #20]
 8003d4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8003d50:	a91b      	add	r1, sp, #108	@ 0x6c
 8003d52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8003d56:	f001 fdab 	bl	80058b0 <__d2b>
 8003d5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f43f aede 	beq.w	8003b1e <_strtod_l+0x43e>
 8003d62:	9805      	ldr	r0, [sp, #20]
 8003d64:	2101      	movs	r1, #1
 8003d66:	f001 fafd 	bl	8005364 <__i2b>
 8003d6a:	4680      	mov	r8, r0
 8003d6c:	b948      	cbnz	r0, 8003d82 <_strtod_l+0x6a2>
 8003d6e:	f04f 0800 	mov.w	r8, #0
 8003d72:	e6d4      	b.n	8003b1e <_strtod_l+0x43e>
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	ea03 0a0a 	and.w	sl, r3, sl
 8003d80:	e7b0      	b.n	8003ce4 <_strtod_l+0x604>
 8003d82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8003d84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	bfab      	itete	ge
 8003d8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003d8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003d8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003d90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8003d92:	bfac      	ite	ge
 8003d94:	18ef      	addge	r7, r5, r3
 8003d96:	1b5e      	sublt	r6, r3, r5
 8003d98:	9b08      	ldr	r3, [sp, #32]
 8003d9a:	1aed      	subs	r5, r5, r3
 8003d9c:	4415      	add	r5, r2
 8003d9e:	4b66      	ldr	r3, [pc, #408]	@ (8003f38 <_strtod_l+0x858>)
 8003da0:	3d01      	subs	r5, #1
 8003da2:	429d      	cmp	r5, r3
 8003da4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003da8:	da50      	bge.n	8003e4c <_strtod_l+0x76c>
 8003daa:	1b5b      	subs	r3, r3, r5
 8003dac:	2b1f      	cmp	r3, #31
 8003dae:	eba2 0203 	sub.w	r2, r2, r3
 8003db2:	f04f 0101 	mov.w	r1, #1
 8003db6:	dc3d      	bgt.n	8003e34 <_strtod_l+0x754>
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8003dc2:	18bd      	adds	r5, r7, r2
 8003dc4:	9b08      	ldr	r3, [sp, #32]
 8003dc6:	42af      	cmp	r7, r5
 8003dc8:	4416      	add	r6, r2
 8003dca:	441e      	add	r6, r3
 8003dcc:	463b      	mov	r3, r7
 8003dce:	bfa8      	it	ge
 8003dd0:	462b      	movge	r3, r5
 8003dd2:	42b3      	cmp	r3, r6
 8003dd4:	bfa8      	it	ge
 8003dd6:	4633      	movge	r3, r6
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfc2      	ittt	gt
 8003ddc:	1aed      	subgt	r5, r5, r3
 8003dde:	1af6      	subgt	r6, r6, r3
 8003de0:	1aff      	subgt	r7, r7, r3
 8003de2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd16      	ble.n	8003e16 <_strtod_l+0x736>
 8003de8:	4641      	mov	r1, r8
 8003dea:	9805      	ldr	r0, [sp, #20]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f001 fb79 	bl	80054e4 <__pow5mult>
 8003df2:	4680      	mov	r8, r0
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d0ba      	beq.n	8003d6e <_strtod_l+0x68e>
 8003df8:	4601      	mov	r1, r0
 8003dfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003dfc:	9805      	ldr	r0, [sp, #20]
 8003dfe:	f001 fac7 	bl	8005390 <__multiply>
 8003e02:	900e      	str	r0, [sp, #56]	@ 0x38
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f43f ae8a 	beq.w	8003b1e <_strtod_l+0x43e>
 8003e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003e0c:	9805      	ldr	r0, [sp, #20]
 8003e0e:	f001 f9ab 	bl	8005168 <_Bfree>
 8003e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	dc1d      	bgt.n	8003e56 <_strtod_l+0x776>
 8003e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	dd23      	ble.n	8003e68 <_strtod_l+0x788>
 8003e20:	4649      	mov	r1, r9
 8003e22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003e24:	9805      	ldr	r0, [sp, #20]
 8003e26:	f001 fb5d 	bl	80054e4 <__pow5mult>
 8003e2a:	4681      	mov	r9, r0
 8003e2c:	b9e0      	cbnz	r0, 8003e68 <_strtod_l+0x788>
 8003e2e:	f04f 0900 	mov.w	r9, #0
 8003e32:	e674      	b.n	8003b1e <_strtod_l+0x43e>
 8003e34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003e38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003e3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003e40:	35e2      	adds	r5, #226	@ 0xe2
 8003e42:	fa01 f305 	lsl.w	r3, r1, r5
 8003e46:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003e4a:	e7ba      	b.n	8003dc2 <_strtod_l+0x6e2>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e50:	2301      	movs	r3, #1
 8003e52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003e54:	e7b5      	b.n	8003dc2 <_strtod_l+0x6e2>
 8003e56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003e58:	9805      	ldr	r0, [sp, #20]
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	f001 fb9c 	bl	8005598 <__lshift>
 8003e60:	901a      	str	r0, [sp, #104]	@ 0x68
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1d9      	bne.n	8003e1a <_strtod_l+0x73a>
 8003e66:	e65a      	b.n	8003b1e <_strtod_l+0x43e>
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	dd07      	ble.n	8003e7c <_strtod_l+0x79c>
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	9805      	ldr	r0, [sp, #20]
 8003e70:	4632      	mov	r2, r6
 8003e72:	f001 fb91 	bl	8005598 <__lshift>
 8003e76:	4681      	mov	r9, r0
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0d8      	beq.n	8003e2e <_strtod_l+0x74e>
 8003e7c:	2f00      	cmp	r7, #0
 8003e7e:	dd08      	ble.n	8003e92 <_strtod_l+0x7b2>
 8003e80:	4641      	mov	r1, r8
 8003e82:	9805      	ldr	r0, [sp, #20]
 8003e84:	463a      	mov	r2, r7
 8003e86:	f001 fb87 	bl	8005598 <__lshift>
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f43f ae46 	beq.w	8003b1e <_strtod_l+0x43e>
 8003e92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003e94:	9805      	ldr	r0, [sp, #20]
 8003e96:	464a      	mov	r2, r9
 8003e98:	f001 fc06 	bl	80056a8 <__mdiff>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	f43f ae3d 	beq.w	8003b1e <_strtod_l+0x43e>
 8003ea4:	68c3      	ldr	r3, [r0, #12]
 8003ea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60c3      	str	r3, [r0, #12]
 8003eac:	4641      	mov	r1, r8
 8003eae:	f001 fbdf 	bl	8005670 <__mcmp>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	da46      	bge.n	8003f44 <_strtod_l+0x864>
 8003eb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003eb8:	ea53 030a 	orrs.w	r3, r3, sl
 8003ebc:	d16c      	bne.n	8003f98 <_strtod_l+0x8b8>
 8003ebe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d168      	bne.n	8003f98 <_strtod_l+0x8b8>
 8003ec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003eca:	0d1b      	lsrs	r3, r3, #20
 8003ecc:	051b      	lsls	r3, r3, #20
 8003ece:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003ed2:	d961      	bls.n	8003f98 <_strtod_l+0x8b8>
 8003ed4:	6963      	ldr	r3, [r4, #20]
 8003ed6:	b913      	cbnz	r3, 8003ede <_strtod_l+0x7fe>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	dd5c      	ble.n	8003f98 <_strtod_l+0x8b8>
 8003ede:	4621      	mov	r1, r4
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	9805      	ldr	r0, [sp, #20]
 8003ee4:	f001 fb58 	bl	8005598 <__lshift>
 8003ee8:	4641      	mov	r1, r8
 8003eea:	4604      	mov	r4, r0
 8003eec:	f001 fbc0 	bl	8005670 <__mcmp>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	dd51      	ble.n	8003f98 <_strtod_l+0x8b8>
 8003ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003ef8:	9a08      	ldr	r2, [sp, #32]
 8003efa:	0d1b      	lsrs	r3, r3, #20
 8003efc:	051b      	lsls	r3, r3, #20
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d06b      	beq.n	8003fda <_strtod_l+0x8fa>
 8003f02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003f06:	d868      	bhi.n	8003fda <_strtod_l+0x8fa>
 8003f08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8003f0c:	f67f ae9d 	bls.w	8003c4a <_strtod_l+0x56a>
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <_strtod_l+0x85c>)
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	2200      	movs	r2, #0
 8003f18:	f7fc fb8e 	bl	8000638 <__aeabi_dmul>
 8003f1c:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <_strtod_l+0x860>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	4682      	mov	sl, r0
 8003f22:	468b      	mov	fp, r1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f ae05 	bne.w	8003b34 <_strtod_l+0x454>
 8003f2a:	9a05      	ldr	r2, [sp, #20]
 8003f2c:	2322      	movs	r3, #34	@ 0x22
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e600      	b.n	8003b34 <_strtod_l+0x454>
 8003f32:	bf00      	nop
 8003f34:	080067e0 	.word	0x080067e0
 8003f38:	fffffc02 	.word	0xfffffc02
 8003f3c:	39500000 	.word	0x39500000
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003f48:	d165      	bne.n	8004016 <_strtod_l+0x936>
 8003f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f50:	b35a      	cbz	r2, 8003faa <_strtod_l+0x8ca>
 8003f52:	4a9f      	ldr	r2, [pc, #636]	@ (80041d0 <_strtod_l+0xaf0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d12b      	bne.n	8003fb0 <_strtod_l+0x8d0>
 8003f58:	9b08      	ldr	r3, [sp, #32]
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	b303      	cbz	r3, 8003fa0 <_strtod_l+0x8c0>
 8003f5e:	4b9d      	ldr	r3, [pc, #628]	@ (80041d4 <_strtod_l+0xaf4>)
 8003f60:	465a      	mov	r2, fp
 8003f62:	4013      	ands	r3, r2
 8003f64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	d81b      	bhi.n	8003fa6 <_strtod_l+0x8c6>
 8003f6e:	0d1b      	lsrs	r3, r3, #20
 8003f70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	4299      	cmp	r1, r3
 8003f7a:	d119      	bne.n	8003fb0 <_strtod_l+0x8d0>
 8003f7c:	4b96      	ldr	r3, [pc, #600]	@ (80041d8 <_strtod_l+0xaf8>)
 8003f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d102      	bne.n	8003f8a <_strtod_l+0x8aa>
 8003f84:	3101      	adds	r1, #1
 8003f86:	f43f adca 	beq.w	8003b1e <_strtod_l+0x43e>
 8003f8a:	4b92      	ldr	r3, [pc, #584]	@ (80041d4 <_strtod_l+0xaf4>)
 8003f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f8e:	401a      	ands	r2, r3
 8003f90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8003f94:	f04f 0a00 	mov.w	sl, #0
 8003f98:	9b08      	ldr	r3, [sp, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1b8      	bne.n	8003f10 <_strtod_l+0x830>
 8003f9e:	e5c9      	b.n	8003b34 <_strtod_l+0x454>
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e7e8      	b.n	8003f78 <_strtod_l+0x898>
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	e7e6      	b.n	8003f78 <_strtod_l+0x898>
 8003faa:	ea53 030a 	orrs.w	r3, r3, sl
 8003fae:	d0a1      	beq.n	8003ef4 <_strtod_l+0x814>
 8003fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003fb2:	b1db      	cbz	r3, 8003fec <_strtod_l+0x90c>
 8003fb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fb6:	4213      	tst	r3, r2
 8003fb8:	d0ee      	beq.n	8003f98 <_strtod_l+0x8b8>
 8003fba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fbc:	9a08      	ldr	r2, [sp, #32]
 8003fbe:	4650      	mov	r0, sl
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	b1bb      	cbz	r3, 8003ff4 <_strtod_l+0x914>
 8003fc4:	f7ff fb6b 	bl	800369e <sulp>
 8003fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fcc:	ec53 2b10 	vmov	r2, r3, d0
 8003fd0:	f7fc f97c 	bl	80002cc <__adddf3>
 8003fd4:	4682      	mov	sl, r0
 8003fd6:	468b      	mov	fp, r1
 8003fd8:	e7de      	b.n	8003f98 <_strtod_l+0x8b8>
 8003fda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003fde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003fe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003fe6:	f04f 3aff 	mov.w	sl, #4294967295
 8003fea:	e7d5      	b.n	8003f98 <_strtod_l+0x8b8>
 8003fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003fee:	ea13 0f0a 	tst.w	r3, sl
 8003ff2:	e7e1      	b.n	8003fb8 <_strtod_l+0x8d8>
 8003ff4:	f7ff fb53 	bl	800369e <sulp>
 8003ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ffc:	ec53 2b10 	vmov	r2, r3, d0
 8004000:	f7fc f962 	bl	80002c8 <__aeabi_dsub>
 8004004:	2200      	movs	r2, #0
 8004006:	2300      	movs	r3, #0
 8004008:	4682      	mov	sl, r0
 800400a:	468b      	mov	fp, r1
 800400c:	f7fc fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 8004010:	2800      	cmp	r0, #0
 8004012:	d0c1      	beq.n	8003f98 <_strtod_l+0x8b8>
 8004014:	e619      	b.n	8003c4a <_strtod_l+0x56a>
 8004016:	4641      	mov	r1, r8
 8004018:	4620      	mov	r0, r4
 800401a:	f001 fca1 	bl	8005960 <__ratio>
 800401e:	ec57 6b10 	vmov	r6, r7, d0
 8004022:	2200      	movs	r2, #0
 8004024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004028:	4630      	mov	r0, r6
 800402a:	4639      	mov	r1, r7
 800402c:	f7fc fd80 	bl	8000b30 <__aeabi_dcmple>
 8004030:	2800      	cmp	r0, #0
 8004032:	d06f      	beq.n	8004114 <_strtod_l+0xa34>
 8004034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d17a      	bne.n	8004130 <_strtod_l+0xa50>
 800403a:	f1ba 0f00 	cmp.w	sl, #0
 800403e:	d158      	bne.n	80040f2 <_strtod_l+0xa12>
 8004040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004046:	2b00      	cmp	r3, #0
 8004048:	d15a      	bne.n	8004100 <_strtod_l+0xa20>
 800404a:	4b64      	ldr	r3, [pc, #400]	@ (80041dc <_strtod_l+0xafc>)
 800404c:	2200      	movs	r2, #0
 800404e:	4630      	mov	r0, r6
 8004050:	4639      	mov	r1, r7
 8004052:	f7fc fd63 	bl	8000b1c <__aeabi_dcmplt>
 8004056:	2800      	cmp	r0, #0
 8004058:	d159      	bne.n	800410e <_strtod_l+0xa2e>
 800405a:	4630      	mov	r0, r6
 800405c:	4639      	mov	r1, r7
 800405e:	4b60      	ldr	r3, [pc, #384]	@ (80041e0 <_strtod_l+0xb00>)
 8004060:	2200      	movs	r2, #0
 8004062:	f7fc fae9 	bl	8000638 <__aeabi_dmul>
 8004066:	4606      	mov	r6, r0
 8004068:	460f      	mov	r7, r1
 800406a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800406e:	9606      	str	r6, [sp, #24]
 8004070:	9307      	str	r3, [sp, #28]
 8004072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004076:	4d57      	ldr	r5, [pc, #348]	@ (80041d4 <_strtod_l+0xaf4>)
 8004078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800407c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800407e:	401d      	ands	r5, r3
 8004080:	4b58      	ldr	r3, [pc, #352]	@ (80041e4 <_strtod_l+0xb04>)
 8004082:	429d      	cmp	r5, r3
 8004084:	f040 80b2 	bne.w	80041ec <_strtod_l+0xb0c>
 8004088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800408a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800408e:	ec4b ab10 	vmov	d0, sl, fp
 8004092:	f001 fb9d 	bl	80057d0 <__ulp>
 8004096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800409a:	ec51 0b10 	vmov	r0, r1, d0
 800409e:	f7fc facb 	bl	8000638 <__aeabi_dmul>
 80040a2:	4652      	mov	r2, sl
 80040a4:	465b      	mov	r3, fp
 80040a6:	f7fc f911 	bl	80002cc <__adddf3>
 80040aa:	460b      	mov	r3, r1
 80040ac:	4949      	ldr	r1, [pc, #292]	@ (80041d4 <_strtod_l+0xaf4>)
 80040ae:	4a4e      	ldr	r2, [pc, #312]	@ (80041e8 <_strtod_l+0xb08>)
 80040b0:	4019      	ands	r1, r3
 80040b2:	4291      	cmp	r1, r2
 80040b4:	4682      	mov	sl, r0
 80040b6:	d942      	bls.n	800413e <_strtod_l+0xa5e>
 80040b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <_strtod_l+0xaf8>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d103      	bne.n	80040c8 <_strtod_l+0x9e8>
 80040c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80040c2:	3301      	adds	r3, #1
 80040c4:	f43f ad2b 	beq.w	8003b1e <_strtod_l+0x43e>
 80040c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80041d8 <_strtod_l+0xaf8>
 80040cc:	f04f 3aff 	mov.w	sl, #4294967295
 80040d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80040d2:	9805      	ldr	r0, [sp, #20]
 80040d4:	f001 f848 	bl	8005168 <_Bfree>
 80040d8:	9805      	ldr	r0, [sp, #20]
 80040da:	4649      	mov	r1, r9
 80040dc:	f001 f844 	bl	8005168 <_Bfree>
 80040e0:	9805      	ldr	r0, [sp, #20]
 80040e2:	4641      	mov	r1, r8
 80040e4:	f001 f840 	bl	8005168 <_Bfree>
 80040e8:	9805      	ldr	r0, [sp, #20]
 80040ea:	4621      	mov	r1, r4
 80040ec:	f001 f83c 	bl	8005168 <_Bfree>
 80040f0:	e618      	b.n	8003d24 <_strtod_l+0x644>
 80040f2:	f1ba 0f01 	cmp.w	sl, #1
 80040f6:	d103      	bne.n	8004100 <_strtod_l+0xa20>
 80040f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f43f ada5 	beq.w	8003c4a <_strtod_l+0x56a>
 8004100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80041b0 <_strtod_l+0xad0>
 8004104:	4f35      	ldr	r7, [pc, #212]	@ (80041dc <_strtod_l+0xafc>)
 8004106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800410a:	2600      	movs	r6, #0
 800410c:	e7b1      	b.n	8004072 <_strtod_l+0x992>
 800410e:	4f34      	ldr	r7, [pc, #208]	@ (80041e0 <_strtod_l+0xb00>)
 8004110:	2600      	movs	r6, #0
 8004112:	e7aa      	b.n	800406a <_strtod_l+0x98a>
 8004114:	4b32      	ldr	r3, [pc, #200]	@ (80041e0 <_strtod_l+0xb00>)
 8004116:	4630      	mov	r0, r6
 8004118:	4639      	mov	r1, r7
 800411a:	2200      	movs	r2, #0
 800411c:	f7fc fa8c 	bl	8000638 <__aeabi_dmul>
 8004120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004122:	4606      	mov	r6, r0
 8004124:	460f      	mov	r7, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d09f      	beq.n	800406a <_strtod_l+0x98a>
 800412a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800412e:	e7a0      	b.n	8004072 <_strtod_l+0x992>
 8004130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80041b8 <_strtod_l+0xad8>
 8004134:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004138:	ec57 6b17 	vmov	r6, r7, d7
 800413c:	e799      	b.n	8004072 <_strtod_l+0x992>
 800413e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004142:	9b08      	ldr	r3, [sp, #32]
 8004144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1c1      	bne.n	80040d0 <_strtod_l+0x9f0>
 800414c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004150:	0d1b      	lsrs	r3, r3, #20
 8004152:	051b      	lsls	r3, r3, #20
 8004154:	429d      	cmp	r5, r3
 8004156:	d1bb      	bne.n	80040d0 <_strtod_l+0x9f0>
 8004158:	4630      	mov	r0, r6
 800415a:	4639      	mov	r1, r7
 800415c:	f7fc fd3e 	bl	8000bdc <__aeabi_d2lz>
 8004160:	f7fc fa3c 	bl	80005dc <__aeabi_l2d>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4630      	mov	r0, r6
 800416a:	4639      	mov	r1, r7
 800416c:	f7fc f8ac 	bl	80002c8 <__aeabi_dsub>
 8004170:	460b      	mov	r3, r1
 8004172:	4602      	mov	r2, r0
 8004174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800417c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800417e:	ea46 060a 	orr.w	r6, r6, sl
 8004182:	431e      	orrs	r6, r3
 8004184:	d06f      	beq.n	8004266 <_strtod_l+0xb86>
 8004186:	a30e      	add	r3, pc, #56	@ (adr r3, 80041c0 <_strtod_l+0xae0>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fc fcc6 	bl	8000b1c <__aeabi_dcmplt>
 8004190:	2800      	cmp	r0, #0
 8004192:	f47f accf 	bne.w	8003b34 <_strtod_l+0x454>
 8004196:	a30c      	add	r3, pc, #48	@ (adr r3, 80041c8 <_strtod_l+0xae8>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041a0:	f7fc fcda 	bl	8000b58 <__aeabi_dcmpgt>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d093      	beq.n	80040d0 <_strtod_l+0x9f0>
 80041a8:	e4c4      	b.n	8003b34 <_strtod_l+0x454>
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w
 80041b0:	00000000 	.word	0x00000000
 80041b4:	bff00000 	.word	0xbff00000
 80041b8:	00000000 	.word	0x00000000
 80041bc:	3ff00000 	.word	0x3ff00000
 80041c0:	94a03595 	.word	0x94a03595
 80041c4:	3fdfffff 	.word	0x3fdfffff
 80041c8:	35afe535 	.word	0x35afe535
 80041cc:	3fe00000 	.word	0x3fe00000
 80041d0:	000fffff 	.word	0x000fffff
 80041d4:	7ff00000 	.word	0x7ff00000
 80041d8:	7fefffff 	.word	0x7fefffff
 80041dc:	3ff00000 	.word	0x3ff00000
 80041e0:	3fe00000 	.word	0x3fe00000
 80041e4:	7fe00000 	.word	0x7fe00000
 80041e8:	7c9fffff 	.word	0x7c9fffff
 80041ec:	9b08      	ldr	r3, [sp, #32]
 80041ee:	b323      	cbz	r3, 800423a <_strtod_l+0xb5a>
 80041f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80041f4:	d821      	bhi.n	800423a <_strtod_l+0xb5a>
 80041f6:	a328      	add	r3, pc, #160	@ (adr r3, 8004298 <_strtod_l+0xbb8>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fc fc96 	bl	8000b30 <__aeabi_dcmple>
 8004204:	b1a0      	cbz	r0, 8004230 <_strtod_l+0xb50>
 8004206:	4639      	mov	r1, r7
 8004208:	4630      	mov	r0, r6
 800420a:	f7fc fcaf 	bl	8000b6c <__aeabi_d2uiz>
 800420e:	2801      	cmp	r0, #1
 8004210:	bf38      	it	cc
 8004212:	2001      	movcc	r0, #1
 8004214:	f7fc f996 	bl	8000544 <__aeabi_ui2d>
 8004218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800421a:	4606      	mov	r6, r0
 800421c:	460f      	mov	r7, r1
 800421e:	b9fb      	cbnz	r3, 8004260 <_strtod_l+0xb80>
 8004220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004224:	9014      	str	r0, [sp, #80]	@ 0x50
 8004226:	9315      	str	r3, [sp, #84]	@ 0x54
 8004228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800422c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8004236:	1b5b      	subs	r3, r3, r5
 8004238:	9311      	str	r3, [sp, #68]	@ 0x44
 800423a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800423e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8004242:	f001 fac5 	bl	80057d0 <__ulp>
 8004246:	4650      	mov	r0, sl
 8004248:	ec53 2b10 	vmov	r2, r3, d0
 800424c:	4659      	mov	r1, fp
 800424e:	f7fc f9f3 	bl	8000638 <__aeabi_dmul>
 8004252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004256:	f7fc f839 	bl	80002cc <__adddf3>
 800425a:	4682      	mov	sl, r0
 800425c:	468b      	mov	fp, r1
 800425e:	e770      	b.n	8004142 <_strtod_l+0xa62>
 8004260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8004264:	e7e0      	b.n	8004228 <_strtod_l+0xb48>
 8004266:	a30e      	add	r3, pc, #56	@ (adr r3, 80042a0 <_strtod_l+0xbc0>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f7fc fc56 	bl	8000b1c <__aeabi_dcmplt>
 8004270:	e798      	b.n	80041a4 <_strtod_l+0xac4>
 8004272:	2300      	movs	r3, #0
 8004274:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	f7ff ba6d 	b.w	800375a <_strtod_l+0x7a>
 8004280:	2a65      	cmp	r2, #101	@ 0x65
 8004282:	f43f ab66 	beq.w	8003952 <_strtod_l+0x272>
 8004286:	2a45      	cmp	r2, #69	@ 0x45
 8004288:	f43f ab63 	beq.w	8003952 <_strtod_l+0x272>
 800428c:	2301      	movs	r3, #1
 800428e:	f7ff bb9e 	b.w	80039ce <_strtod_l+0x2ee>
 8004292:	bf00      	nop
 8004294:	f3af 8000 	nop.w
 8004298:	ffc00000 	.word	0xffc00000
 800429c:	41dfffff 	.word	0x41dfffff
 80042a0:	94a03595 	.word	0x94a03595
 80042a4:	3fcfffff 	.word	0x3fcfffff

080042a8 <strtod>:
 80042a8:	460a      	mov	r2, r1
 80042aa:	4601      	mov	r1, r0
 80042ac:	4802      	ldr	r0, [pc, #8]	@ (80042b8 <strtod+0x10>)
 80042ae:	4b03      	ldr	r3, [pc, #12]	@ (80042bc <strtod+0x14>)
 80042b0:	6800      	ldr	r0, [r0, #0]
 80042b2:	f7ff ba15 	b.w	80036e0 <_strtod_l>
 80042b6:	bf00      	nop
 80042b8:	20000194 	.word	0x20000194
 80042bc:	20000028 	.word	0x20000028

080042c0 <std>:
 80042c0:	2300      	movs	r3, #0
 80042c2:	b510      	push	{r4, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ce:	6083      	str	r3, [r0, #8]
 80042d0:	8181      	strh	r1, [r0, #12]
 80042d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d4:	81c2      	strh	r2, [r0, #14]
 80042d6:	6183      	str	r3, [r0, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	2208      	movs	r2, #8
 80042dc:	305c      	adds	r0, #92	@ 0x5c
 80042de:	f000 fa1b 	bl	8004718 <memset>
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x58>)
 80042e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x5c>)
 80042e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x60>)
 80042ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x64>)
 80042f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x68>)
 80042f4:	6224      	str	r4, [r4, #32]
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d006      	beq.n	8004308 <std+0x48>
 80042fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042fe:	4294      	cmp	r4, r2
 8004300:	d002      	beq.n	8004308 <std+0x48>
 8004302:	33d0      	adds	r3, #208	@ 0xd0
 8004304:	429c      	cmp	r4, r3
 8004306:	d105      	bne.n	8004314 <std+0x54>
 8004308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f000 ba8c 	b.w	800482c <__retarget_lock_init_recursive>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	08004569 	.word	0x08004569
 800431c:	0800458b 	.word	0x0800458b
 8004320:	080045c3 	.word	0x080045c3
 8004324:	080045e7 	.word	0x080045e7
 8004328:	2000037c 	.word	0x2000037c

0800432c <stdio_exit_handler>:
 800432c:	4a02      	ldr	r2, [pc, #8]	@ (8004338 <stdio_exit_handler+0xc>)
 800432e:	4903      	ldr	r1, [pc, #12]	@ (800433c <stdio_exit_handler+0x10>)
 8004330:	4803      	ldr	r0, [pc, #12]	@ (8004340 <stdio_exit_handler+0x14>)
 8004332:	f000 b869 	b.w	8004408 <_fwalk_sglue>
 8004336:	bf00      	nop
 8004338:	2000001c 	.word	0x2000001c
 800433c:	08006139 	.word	0x08006139
 8004340:	20000198 	.word	0x20000198

08004344 <cleanup_stdio>:
 8004344:	6841      	ldr	r1, [r0, #4]
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <cleanup_stdio+0x34>)
 8004348:	4299      	cmp	r1, r3
 800434a:	b510      	push	{r4, lr}
 800434c:	4604      	mov	r4, r0
 800434e:	d001      	beq.n	8004354 <cleanup_stdio+0x10>
 8004350:	f001 fef2 	bl	8006138 <_fflush_r>
 8004354:	68a1      	ldr	r1, [r4, #8]
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <cleanup_stdio+0x38>)
 8004358:	4299      	cmp	r1, r3
 800435a:	d002      	beq.n	8004362 <cleanup_stdio+0x1e>
 800435c:	4620      	mov	r0, r4
 800435e:	f001 feeb 	bl	8006138 <_fflush_r>
 8004362:	68e1      	ldr	r1, [r4, #12]
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <cleanup_stdio+0x3c>)
 8004366:	4299      	cmp	r1, r3
 8004368:	d004      	beq.n	8004374 <cleanup_stdio+0x30>
 800436a:	4620      	mov	r0, r4
 800436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004370:	f001 bee2 	b.w	8006138 <_fflush_r>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	bf00      	nop
 8004378:	2000037c 	.word	0x2000037c
 800437c:	200003e4 	.word	0x200003e4
 8004380:	2000044c 	.word	0x2000044c

08004384 <global_stdio_init.part.0>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <global_stdio_init.part.0+0x30>)
 8004388:	4c0b      	ldr	r4, [pc, #44]	@ (80043b8 <global_stdio_init.part.0+0x34>)
 800438a:	4a0c      	ldr	r2, [pc, #48]	@ (80043bc <global_stdio_init.part.0+0x38>)
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	4620      	mov	r0, r4
 8004390:	2200      	movs	r2, #0
 8004392:	2104      	movs	r1, #4
 8004394:	f7ff ff94 	bl	80042c0 <std>
 8004398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800439c:	2201      	movs	r2, #1
 800439e:	2109      	movs	r1, #9
 80043a0:	f7ff ff8e 	bl	80042c0 <std>
 80043a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043a8:	2202      	movs	r2, #2
 80043aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ae:	2112      	movs	r1, #18
 80043b0:	f7ff bf86 	b.w	80042c0 <std>
 80043b4:	200004b4 	.word	0x200004b4
 80043b8:	2000037c 	.word	0x2000037c
 80043bc:	0800432d 	.word	0x0800432d

080043c0 <__sfp_lock_acquire>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__sfp_lock_acquire+0x8>)
 80043c2:	f000 ba34 	b.w	800482e <__retarget_lock_acquire_recursive>
 80043c6:	bf00      	nop
 80043c8:	200004bd 	.word	0x200004bd

080043cc <__sfp_lock_release>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__sfp_lock_release+0x8>)
 80043ce:	f000 ba2f 	b.w	8004830 <__retarget_lock_release_recursive>
 80043d2:	bf00      	nop
 80043d4:	200004bd 	.word	0x200004bd

080043d8 <__sinit>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	4604      	mov	r4, r0
 80043dc:	f7ff fff0 	bl	80043c0 <__sfp_lock_acquire>
 80043e0:	6a23      	ldr	r3, [r4, #32]
 80043e2:	b11b      	cbz	r3, 80043ec <__sinit+0x14>
 80043e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e8:	f7ff bff0 	b.w	80043cc <__sfp_lock_release>
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <__sinit+0x28>)
 80043ee:	6223      	str	r3, [r4, #32]
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <__sinit+0x2c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f5      	bne.n	80043e4 <__sinit+0xc>
 80043f8:	f7ff ffc4 	bl	8004384 <global_stdio_init.part.0>
 80043fc:	e7f2      	b.n	80043e4 <__sinit+0xc>
 80043fe:	bf00      	nop
 8004400:	08004345 	.word	0x08004345
 8004404:	200004b4 	.word	0x200004b4

08004408 <_fwalk_sglue>:
 8004408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800440c:	4607      	mov	r7, r0
 800440e:	4688      	mov	r8, r1
 8004410:	4614      	mov	r4, r2
 8004412:	2600      	movs	r6, #0
 8004414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004418:	f1b9 0901 	subs.w	r9, r9, #1
 800441c:	d505      	bpl.n	800442a <_fwalk_sglue+0x22>
 800441e:	6824      	ldr	r4, [r4, #0]
 8004420:	2c00      	cmp	r4, #0
 8004422:	d1f7      	bne.n	8004414 <_fwalk_sglue+0xc>
 8004424:	4630      	mov	r0, r6
 8004426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d907      	bls.n	8004440 <_fwalk_sglue+0x38>
 8004430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004434:	3301      	adds	r3, #1
 8004436:	d003      	beq.n	8004440 <_fwalk_sglue+0x38>
 8004438:	4629      	mov	r1, r5
 800443a:	4638      	mov	r0, r7
 800443c:	47c0      	blx	r8
 800443e:	4306      	orrs	r6, r0
 8004440:	3568      	adds	r5, #104	@ 0x68
 8004442:	e7e9      	b.n	8004418 <_fwalk_sglue+0x10>

08004444 <_puts_r>:
 8004444:	6a03      	ldr	r3, [r0, #32]
 8004446:	b570      	push	{r4, r5, r6, lr}
 8004448:	6884      	ldr	r4, [r0, #8]
 800444a:	4605      	mov	r5, r0
 800444c:	460e      	mov	r6, r1
 800444e:	b90b      	cbnz	r3, 8004454 <_puts_r+0x10>
 8004450:	f7ff ffc2 	bl	80043d8 <__sinit>
 8004454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004456:	07db      	lsls	r3, r3, #31
 8004458:	d405      	bmi.n	8004466 <_puts_r+0x22>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	0598      	lsls	r0, r3, #22
 800445e:	d402      	bmi.n	8004466 <_puts_r+0x22>
 8004460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004462:	f000 f9e4 	bl	800482e <__retarget_lock_acquire_recursive>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	0719      	lsls	r1, r3, #28
 800446a:	d502      	bpl.n	8004472 <_puts_r+0x2e>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d135      	bne.n	80044de <_puts_r+0x9a>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f8f9 	bl	800466c <__swsetup_r>
 800447a:	b380      	cbz	r0, 80044de <_puts_r+0x9a>
 800447c:	f04f 35ff 	mov.w	r5, #4294967295
 8004480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004482:	07da      	lsls	r2, r3, #31
 8004484:	d405      	bmi.n	8004492 <_puts_r+0x4e>
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	059b      	lsls	r3, r3, #22
 800448a:	d402      	bmi.n	8004492 <_puts_r+0x4e>
 800448c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448e:	f000 f9cf 	bl	8004830 <__retarget_lock_release_recursive>
 8004492:	4628      	mov	r0, r5
 8004494:	bd70      	pop	{r4, r5, r6, pc}
 8004496:	2b00      	cmp	r3, #0
 8004498:	da04      	bge.n	80044a4 <_puts_r+0x60>
 800449a:	69a2      	ldr	r2, [r4, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	dc17      	bgt.n	80044d0 <_puts_r+0x8c>
 80044a0:	290a      	cmp	r1, #10
 80044a2:	d015      	beq.n	80044d0 <_puts_r+0x8c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	7019      	strb	r1, [r3, #0]
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d1ed      	bne.n	8004496 <_puts_r+0x52>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da11      	bge.n	80044e2 <_puts_r+0x9e>
 80044be:	4622      	mov	r2, r4
 80044c0:	210a      	movs	r1, #10
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 f893 	bl	80045ee <__swbuf_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	d0d7      	beq.n	800447c <_puts_r+0x38>
 80044cc:	250a      	movs	r5, #10
 80044ce:	e7d7      	b.n	8004480 <_puts_r+0x3c>
 80044d0:	4622      	mov	r2, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f88b 	bl	80045ee <__swbuf_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d1e7      	bne.n	80044ac <_puts_r+0x68>
 80044dc:	e7ce      	b.n	800447c <_puts_r+0x38>
 80044de:	3e01      	subs	r6, #1
 80044e0:	e7e4      	b.n	80044ac <_puts_r+0x68>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	220a      	movs	r2, #10
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e7ee      	b.n	80044cc <_puts_r+0x88>
	...

080044f0 <puts>:
 80044f0:	4b02      	ldr	r3, [pc, #8]	@ (80044fc <puts+0xc>)
 80044f2:	4601      	mov	r1, r0
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f7ff bfa5 	b.w	8004444 <_puts_r>
 80044fa:	bf00      	nop
 80044fc:	20000194 	.word	0x20000194

08004500 <sniprintf>:
 8004500:	b40c      	push	{r2, r3}
 8004502:	b530      	push	{r4, r5, lr}
 8004504:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <sniprintf+0x64>)
 8004506:	1e0c      	subs	r4, r1, #0
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	b09d      	sub	sp, #116	@ 0x74
 800450c:	da08      	bge.n	8004520 <sniprintf+0x20>
 800450e:	238b      	movs	r3, #139	@ 0x8b
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	b01d      	add	sp, #116	@ 0x74
 8004518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800451c:	b002      	add	sp, #8
 800451e:	4770      	bx	lr
 8004520:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004528:	bf14      	ite	ne
 800452a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800452e:	4623      	moveq	r3, r4
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	9307      	str	r3, [sp, #28]
 8004534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004538:	9002      	str	r0, [sp, #8]
 800453a:	9006      	str	r0, [sp, #24]
 800453c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004540:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004542:	ab21      	add	r3, sp, #132	@ 0x84
 8004544:	a902      	add	r1, sp, #8
 8004546:	4628      	mov	r0, r5
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	f001 fae7 	bl	8005b1c <_svfiprintf_r>
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	bfbc      	itt	lt
 8004552:	238b      	movlt	r3, #139	@ 0x8b
 8004554:	602b      	strlt	r3, [r5, #0]
 8004556:	2c00      	cmp	r4, #0
 8004558:	d0dd      	beq.n	8004516 <sniprintf+0x16>
 800455a:	9b02      	ldr	r3, [sp, #8]
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e7d9      	b.n	8004516 <sniprintf+0x16>
 8004562:	bf00      	nop
 8004564:	20000194 	.word	0x20000194

08004568 <__sread>:
 8004568:	b510      	push	{r4, lr}
 800456a:	460c      	mov	r4, r1
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	f000 f90e 	bl	8004790 <_read_r>
 8004574:	2800      	cmp	r0, #0
 8004576:	bfab      	itete	ge
 8004578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800457a:	89a3      	ldrhlt	r3, [r4, #12]
 800457c:	181b      	addge	r3, r3, r0
 800457e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004582:	bfac      	ite	ge
 8004584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004586:	81a3      	strhlt	r3, [r4, #12]
 8004588:	bd10      	pop	{r4, pc}

0800458a <__swrite>:
 800458a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458e:	461f      	mov	r7, r3
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	05db      	lsls	r3, r3, #23
 8004594:	4605      	mov	r5, r0
 8004596:	460c      	mov	r4, r1
 8004598:	4616      	mov	r6, r2
 800459a:	d505      	bpl.n	80045a8 <__swrite+0x1e>
 800459c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a0:	2302      	movs	r3, #2
 80045a2:	2200      	movs	r2, #0
 80045a4:	f000 f8e2 	bl	800476c <_lseek_r>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	4632      	mov	r2, r6
 80045b6:	463b      	mov	r3, r7
 80045b8:	4628      	mov	r0, r5
 80045ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045be:	f000 b8f9 	b.w	80047b4 <_write_r>

080045c2 <__sseek>:
 80045c2:	b510      	push	{r4, lr}
 80045c4:	460c      	mov	r4, r1
 80045c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ca:	f000 f8cf 	bl	800476c <_lseek_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	bf15      	itete	ne
 80045d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045de:	81a3      	strheq	r3, [r4, #12]
 80045e0:	bf18      	it	ne
 80045e2:	81a3      	strhne	r3, [r4, #12]
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <__sclose>:
 80045e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ea:	f000 b8af 	b.w	800474c <_close_r>

080045ee <__swbuf_r>:
 80045ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f0:	460e      	mov	r6, r1
 80045f2:	4614      	mov	r4, r2
 80045f4:	4605      	mov	r5, r0
 80045f6:	b118      	cbz	r0, 8004600 <__swbuf_r+0x12>
 80045f8:	6a03      	ldr	r3, [r0, #32]
 80045fa:	b90b      	cbnz	r3, 8004600 <__swbuf_r+0x12>
 80045fc:	f7ff feec 	bl	80043d8 <__sinit>
 8004600:	69a3      	ldr	r3, [r4, #24]
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	071a      	lsls	r2, r3, #28
 8004608:	d501      	bpl.n	800460e <__swbuf_r+0x20>
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	b943      	cbnz	r3, 8004620 <__swbuf_r+0x32>
 800460e:	4621      	mov	r1, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f82b 	bl	800466c <__swsetup_r>
 8004616:	b118      	cbz	r0, 8004620 <__swbuf_r+0x32>
 8004618:	f04f 37ff 	mov.w	r7, #4294967295
 800461c:	4638      	mov	r0, r7
 800461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6922      	ldr	r2, [r4, #16]
 8004624:	1a98      	subs	r0, r3, r2
 8004626:	6963      	ldr	r3, [r4, #20]
 8004628:	b2f6      	uxtb	r6, r6
 800462a:	4283      	cmp	r3, r0
 800462c:	4637      	mov	r7, r6
 800462e:	dc05      	bgt.n	800463c <__swbuf_r+0x4e>
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f001 fd80 	bl	8006138 <_fflush_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	d1ed      	bne.n	8004618 <__swbuf_r+0x2a>
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	701e      	strb	r6, [r3, #0]
 800464a:	6962      	ldr	r2, [r4, #20]
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	429a      	cmp	r2, r3
 8004650:	d004      	beq.n	800465c <__swbuf_r+0x6e>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	07db      	lsls	r3, r3, #31
 8004656:	d5e1      	bpl.n	800461c <__swbuf_r+0x2e>
 8004658:	2e0a      	cmp	r6, #10
 800465a:	d1df      	bne.n	800461c <__swbuf_r+0x2e>
 800465c:	4621      	mov	r1, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f001 fd6a 	bl	8006138 <_fflush_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	d0d9      	beq.n	800461c <__swbuf_r+0x2e>
 8004668:	e7d6      	b.n	8004618 <__swbuf_r+0x2a>
	...

0800466c <__swsetup_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <__swsetup_r+0xa8>)
 8004670:	4605      	mov	r5, r0
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	460c      	mov	r4, r1
 8004676:	b118      	cbz	r0, 8004680 <__swsetup_r+0x14>
 8004678:	6a03      	ldr	r3, [r0, #32]
 800467a:	b90b      	cbnz	r3, 8004680 <__swsetup_r+0x14>
 800467c:	f7ff feac 	bl	80043d8 <__sinit>
 8004680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004684:	0719      	lsls	r1, r3, #28
 8004686:	d422      	bmi.n	80046ce <__swsetup_r+0x62>
 8004688:	06da      	lsls	r2, r3, #27
 800468a:	d407      	bmi.n	800469c <__swsetup_r+0x30>
 800468c:	2209      	movs	r2, #9
 800468e:	602a      	str	r2, [r5, #0]
 8004690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	f04f 30ff 	mov.w	r0, #4294967295
 800469a:	e033      	b.n	8004704 <__swsetup_r+0x98>
 800469c:	0758      	lsls	r0, r3, #29
 800469e:	d512      	bpl.n	80046c6 <__swsetup_r+0x5a>
 80046a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046a2:	b141      	cbz	r1, 80046b6 <__swsetup_r+0x4a>
 80046a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046a8:	4299      	cmp	r1, r3
 80046aa:	d002      	beq.n	80046b2 <__swsetup_r+0x46>
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f8d7 	bl	8004860 <_free_r>
 80046b2:	2300      	movs	r3, #0
 80046b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	2300      	movs	r3, #0
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f043 0308 	orr.w	r3, r3, #8
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	b94b      	cbnz	r3, 80046e6 <__swsetup_r+0x7a>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046dc:	d003      	beq.n	80046e6 <__swsetup_r+0x7a>
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f001 fd77 	bl	80061d4 <__smakebuf_r>
 80046e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ea:	f013 0201 	ands.w	r2, r3, #1
 80046ee:	d00a      	beq.n	8004706 <__swsetup_r+0x9a>
 80046f0:	2200      	movs	r2, #0
 80046f2:	60a2      	str	r2, [r4, #8]
 80046f4:	6962      	ldr	r2, [r4, #20]
 80046f6:	4252      	negs	r2, r2
 80046f8:	61a2      	str	r2, [r4, #24]
 80046fa:	6922      	ldr	r2, [r4, #16]
 80046fc:	b942      	cbnz	r2, 8004710 <__swsetup_r+0xa4>
 80046fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004702:	d1c5      	bne.n	8004690 <__swsetup_r+0x24>
 8004704:	bd38      	pop	{r3, r4, r5, pc}
 8004706:	0799      	lsls	r1, r3, #30
 8004708:	bf58      	it	pl
 800470a:	6962      	ldrpl	r2, [r4, #20]
 800470c:	60a2      	str	r2, [r4, #8]
 800470e:	e7f4      	b.n	80046fa <__swsetup_r+0x8e>
 8004710:	2000      	movs	r0, #0
 8004712:	e7f7      	b.n	8004704 <__swsetup_r+0x98>
 8004714:	20000194 	.word	0x20000194

08004718 <memset>:
 8004718:	4402      	add	r2, r0
 800471a:	4603      	mov	r3, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <strncmp>:
 8004728:	b510      	push	{r4, lr}
 800472a:	b16a      	cbz	r2, 8004748 <strncmp+0x20>
 800472c:	3901      	subs	r1, #1
 800472e:	1884      	adds	r4, r0, r2
 8004730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004734:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004738:	429a      	cmp	r2, r3
 800473a:	d103      	bne.n	8004744 <strncmp+0x1c>
 800473c:	42a0      	cmp	r0, r4
 800473e:	d001      	beq.n	8004744 <strncmp+0x1c>
 8004740:	2a00      	cmp	r2, #0
 8004742:	d1f5      	bne.n	8004730 <strncmp+0x8>
 8004744:	1ad0      	subs	r0, r2, r3
 8004746:	bd10      	pop	{r4, pc}
 8004748:	4610      	mov	r0, r2
 800474a:	e7fc      	b.n	8004746 <strncmp+0x1e>

0800474c <_close_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	@ (8004768 <_close_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fd f823 	bl	80017a2 <_close>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_close_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_close_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	200004b8 	.word	0x200004b8

0800476c <_lseek_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d07      	ldr	r5, [pc, #28]	@ (800478c <_lseek_r+0x20>)
 8004770:	4604      	mov	r4, r0
 8004772:	4608      	mov	r0, r1
 8004774:	4611      	mov	r1, r2
 8004776:	2200      	movs	r2, #0
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7fd f838 	bl	80017f0 <_lseek>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_lseek_r+0x1e>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_lseek_r+0x1e>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	200004b8 	.word	0x200004b8

08004790 <_read_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d07      	ldr	r5, [pc, #28]	@ (80047b0 <_read_r+0x20>)
 8004794:	4604      	mov	r4, r0
 8004796:	4608      	mov	r0, r1
 8004798:	4611      	mov	r1, r2
 800479a:	2200      	movs	r2, #0
 800479c:	602a      	str	r2, [r5, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f7fc ffc6 	bl	8001730 <_read>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_read_r+0x1e>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_read_r+0x1e>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200004b8 	.word	0x200004b8

080047b4 <_write_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d07      	ldr	r5, [pc, #28]	@ (80047d4 <_write_r+0x20>)
 80047b8:	4604      	mov	r4, r0
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	2200      	movs	r2, #0
 80047c0:	602a      	str	r2, [r5, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7fc ffd1 	bl	800176a <_write>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_write_r+0x1e>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_write_r+0x1e>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200004b8 	.word	0x200004b8

080047d8 <__errno>:
 80047d8:	4b01      	ldr	r3, [pc, #4]	@ (80047e0 <__errno+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000194 	.word	0x20000194

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	4d0d      	ldr	r5, [pc, #52]	@ (800481c <__libc_init_array+0x38>)
 80047e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	2600      	movs	r6, #0
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004824 <__libc_init_array+0x40>)
 80047f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004828 <__libc_init_array+0x44>)
 80047f8:	f001 ff82 	bl	8006700 <_init>
 80047fc:	1b64      	subs	r4, r4, r5
 80047fe:	10a4      	asrs	r4, r4, #2
 8004800:	2600      	movs	r6, #0
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	f855 3b04 	ldr.w	r3, [r5], #4
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	f855 3b04 	ldr.w	r3, [r5], #4
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	08006b68 	.word	0x08006b68
 8004820:	08006b68 	.word	0x08006b68
 8004824:	08006b68 	.word	0x08006b68
 8004828:	08006b6c 	.word	0x08006b6c

0800482c <__retarget_lock_init_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_acquire_recursive>:
 800482e:	4770      	bx	lr

08004830 <__retarget_lock_release_recursive>:
 8004830:	4770      	bx	lr

08004832 <memcpy>:
 8004832:	440a      	add	r2, r1
 8004834:	4291      	cmp	r1, r2
 8004836:	f100 33ff 	add.w	r3, r0, #4294967295
 800483a:	d100      	bne.n	800483e <memcpy+0xc>
 800483c:	4770      	bx	lr
 800483e:	b510      	push	{r4, lr}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	4291      	cmp	r1, r2
 800484a:	d1f9      	bne.n	8004840 <memcpy+0xe>
 800484c:	bd10      	pop	{r4, pc}
	...

08004850 <nan>:
 8004850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004858 <nan+0x8>
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	00000000 	.word	0x00000000
 800485c:	7ff80000 	.word	0x7ff80000

08004860 <_free_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4605      	mov	r5, r0
 8004864:	2900      	cmp	r1, #0
 8004866:	d041      	beq.n	80048ec <_free_r+0x8c>
 8004868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486c:	1f0c      	subs	r4, r1, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfb8      	it	lt
 8004872:	18e4      	addlt	r4, r4, r3
 8004874:	f000 fc2c 	bl	80050d0 <__malloc_lock>
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <_free_r+0x90>)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	b933      	cbnz	r3, 800488c <_free_r+0x2c>
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	4628      	mov	r0, r5
 8004884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004888:	f000 bc28 	b.w	80050dc <__malloc_unlock>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d908      	bls.n	80048a2 <_free_r+0x42>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428b      	cmp	r3, r1
 8004896:	bf01      	itttt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	1809      	addeq	r1, r1, r0
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	e7ed      	b.n	800487e <_free_r+0x1e>
 80048a2:	461a      	mov	r2, r3
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b10b      	cbz	r3, 80048ac <_free_r+0x4c>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x42>
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	1850      	adds	r0, r2, r1
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x6c>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4401      	add	r1, r0
 80048b8:	1850      	adds	r0, r2, r1
 80048ba:	4283      	cmp	r3, r0
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	d1e0      	bne.n	8004882 <_free_r+0x22>
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6053      	str	r3, [r2, #4]
 80048c6:	4408      	add	r0, r1
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	e7da      	b.n	8004882 <_free_r+0x22>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x74>
 80048ce:	230c      	movs	r3, #12
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	e7d6      	b.n	8004882 <_free_r+0x22>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	1821      	adds	r1, r4, r0
 80048d8:	428b      	cmp	r3, r1
 80048da:	bf04      	itt	eq
 80048dc:	6819      	ldreq	r1, [r3, #0]
 80048de:	685b      	ldreq	r3, [r3, #4]
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	bf04      	itt	eq
 80048e4:	1809      	addeq	r1, r1, r0
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	6054      	str	r4, [r2, #4]
 80048ea:	e7ca      	b.n	8004882 <_free_r+0x22>
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	200004c4 	.word	0x200004c4

080048f4 <rshift>:
 80048f4:	6903      	ldr	r3, [r0, #16]
 80048f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80048fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004902:	f100 0414 	add.w	r4, r0, #20
 8004906:	dd45      	ble.n	8004994 <rshift+0xa0>
 8004908:	f011 011f 	ands.w	r1, r1, #31
 800490c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004910:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004914:	d10c      	bne.n	8004930 <rshift+0x3c>
 8004916:	f100 0710 	add.w	r7, r0, #16
 800491a:	4629      	mov	r1, r5
 800491c:	42b1      	cmp	r1, r6
 800491e:	d334      	bcc.n	800498a <rshift+0x96>
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	1eea      	subs	r2, r5, #3
 8004926:	4296      	cmp	r6, r2
 8004928:	bf38      	it	cc
 800492a:	2300      	movcc	r3, #0
 800492c:	4423      	add	r3, r4
 800492e:	e015      	b.n	800495c <rshift+0x68>
 8004930:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004934:	f1c1 0820 	rsb	r8, r1, #32
 8004938:	40cf      	lsrs	r7, r1
 800493a:	f105 0e04 	add.w	lr, r5, #4
 800493e:	46a1      	mov	r9, r4
 8004940:	4576      	cmp	r6, lr
 8004942:	46f4      	mov	ip, lr
 8004944:	d815      	bhi.n	8004972 <rshift+0x7e>
 8004946:	1a9a      	subs	r2, r3, r2
 8004948:	0092      	lsls	r2, r2, #2
 800494a:	3a04      	subs	r2, #4
 800494c:	3501      	adds	r5, #1
 800494e:	42ae      	cmp	r6, r5
 8004950:	bf38      	it	cc
 8004952:	2200      	movcc	r2, #0
 8004954:	18a3      	adds	r3, r4, r2
 8004956:	50a7      	str	r7, [r4, r2]
 8004958:	b107      	cbz	r7, 800495c <rshift+0x68>
 800495a:	3304      	adds	r3, #4
 800495c:	1b1a      	subs	r2, r3, r4
 800495e:	42a3      	cmp	r3, r4
 8004960:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004964:	bf08      	it	eq
 8004966:	2300      	moveq	r3, #0
 8004968:	6102      	str	r2, [r0, #16]
 800496a:	bf08      	it	eq
 800496c:	6143      	streq	r3, [r0, #20]
 800496e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004972:	f8dc c000 	ldr.w	ip, [ip]
 8004976:	fa0c fc08 	lsl.w	ip, ip, r8
 800497a:	ea4c 0707 	orr.w	r7, ip, r7
 800497e:	f849 7b04 	str.w	r7, [r9], #4
 8004982:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004986:	40cf      	lsrs	r7, r1
 8004988:	e7da      	b.n	8004940 <rshift+0x4c>
 800498a:	f851 cb04 	ldr.w	ip, [r1], #4
 800498e:	f847 cf04 	str.w	ip, [r7, #4]!
 8004992:	e7c3      	b.n	800491c <rshift+0x28>
 8004994:	4623      	mov	r3, r4
 8004996:	e7e1      	b.n	800495c <rshift+0x68>

08004998 <__hexdig_fun>:
 8004998:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800499c:	2b09      	cmp	r3, #9
 800499e:	d802      	bhi.n	80049a6 <__hexdig_fun+0xe>
 80049a0:	3820      	subs	r0, #32
 80049a2:	b2c0      	uxtb	r0, r0
 80049a4:	4770      	bx	lr
 80049a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d801      	bhi.n	80049b2 <__hexdig_fun+0x1a>
 80049ae:	3847      	subs	r0, #71	@ 0x47
 80049b0:	e7f7      	b.n	80049a2 <__hexdig_fun+0xa>
 80049b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d801      	bhi.n	80049be <__hexdig_fun+0x26>
 80049ba:	3827      	subs	r0, #39	@ 0x27
 80049bc:	e7f1      	b.n	80049a2 <__hexdig_fun+0xa>
 80049be:	2000      	movs	r0, #0
 80049c0:	4770      	bx	lr
	...

080049c4 <__gethex>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	b085      	sub	sp, #20
 80049ca:	468a      	mov	sl, r1
 80049cc:	9302      	str	r3, [sp, #8]
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	9001      	str	r0, [sp, #4]
 80049d2:	4690      	mov	r8, r2
 80049d4:	1c9c      	adds	r4, r3, #2
 80049d6:	46a1      	mov	r9, r4
 80049d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80049dc:	2830      	cmp	r0, #48	@ 0x30
 80049de:	d0fa      	beq.n	80049d6 <__gethex+0x12>
 80049e0:	eba9 0303 	sub.w	r3, r9, r3
 80049e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80049e8:	f7ff ffd6 	bl	8004998 <__hexdig_fun>
 80049ec:	4605      	mov	r5, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d168      	bne.n	8004ac4 <__gethex+0x100>
 80049f2:	49a0      	ldr	r1, [pc, #640]	@ (8004c74 <__gethex+0x2b0>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	4648      	mov	r0, r9
 80049f8:	f7ff fe96 	bl	8004728 <strncmp>
 80049fc:	4607      	mov	r7, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d167      	bne.n	8004ad2 <__gethex+0x10e>
 8004a02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004a06:	4626      	mov	r6, r4
 8004a08:	f7ff ffc6 	bl	8004998 <__hexdig_fun>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d062      	beq.n	8004ad6 <__gethex+0x112>
 8004a10:	4623      	mov	r3, r4
 8004a12:	7818      	ldrb	r0, [r3, #0]
 8004a14:	2830      	cmp	r0, #48	@ 0x30
 8004a16:	4699      	mov	r9, r3
 8004a18:	f103 0301 	add.w	r3, r3, #1
 8004a1c:	d0f9      	beq.n	8004a12 <__gethex+0x4e>
 8004a1e:	f7ff ffbb 	bl	8004998 <__hexdig_fun>
 8004a22:	fab0 f580 	clz	r5, r0
 8004a26:	096d      	lsrs	r5, r5, #5
 8004a28:	f04f 0b01 	mov.w	fp, #1
 8004a2c:	464a      	mov	r2, r9
 8004a2e:	4616      	mov	r6, r2
 8004a30:	3201      	adds	r2, #1
 8004a32:	7830      	ldrb	r0, [r6, #0]
 8004a34:	f7ff ffb0 	bl	8004998 <__hexdig_fun>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1f8      	bne.n	8004a2e <__gethex+0x6a>
 8004a3c:	498d      	ldr	r1, [pc, #564]	@ (8004c74 <__gethex+0x2b0>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4630      	mov	r0, r6
 8004a42:	f7ff fe71 	bl	8004728 <strncmp>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d13f      	bne.n	8004aca <__gethex+0x106>
 8004a4a:	b944      	cbnz	r4, 8004a5e <__gethex+0x9a>
 8004a4c:	1c74      	adds	r4, r6, #1
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4616      	mov	r6, r2
 8004a52:	3201      	adds	r2, #1
 8004a54:	7830      	ldrb	r0, [r6, #0]
 8004a56:	f7ff ff9f 	bl	8004998 <__hexdig_fun>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d1f8      	bne.n	8004a50 <__gethex+0x8c>
 8004a5e:	1ba4      	subs	r4, r4, r6
 8004a60:	00a7      	lsls	r7, r4, #2
 8004a62:	7833      	ldrb	r3, [r6, #0]
 8004a64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8004a68:	2b50      	cmp	r3, #80	@ 0x50
 8004a6a:	d13e      	bne.n	8004aea <__gethex+0x126>
 8004a6c:	7873      	ldrb	r3, [r6, #1]
 8004a6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004a70:	d033      	beq.n	8004ada <__gethex+0x116>
 8004a72:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a74:	d034      	beq.n	8004ae0 <__gethex+0x11c>
 8004a76:	1c71      	adds	r1, r6, #1
 8004a78:	2400      	movs	r4, #0
 8004a7a:	7808      	ldrb	r0, [r1, #0]
 8004a7c:	f7ff ff8c 	bl	8004998 <__hexdig_fun>
 8004a80:	1e43      	subs	r3, r0, #1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b18      	cmp	r3, #24
 8004a86:	d830      	bhi.n	8004aea <__gethex+0x126>
 8004a88:	f1a0 0210 	sub.w	r2, r0, #16
 8004a8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004a90:	f7ff ff82 	bl	8004998 <__hexdig_fun>
 8004a94:	f100 3cff 	add.w	ip, r0, #4294967295
 8004a98:	fa5f fc8c 	uxtb.w	ip, ip
 8004a9c:	f1bc 0f18 	cmp.w	ip, #24
 8004aa0:	f04f 030a 	mov.w	r3, #10
 8004aa4:	d91e      	bls.n	8004ae4 <__gethex+0x120>
 8004aa6:	b104      	cbz	r4, 8004aaa <__gethex+0xe6>
 8004aa8:	4252      	negs	r2, r2
 8004aaa:	4417      	add	r7, r2
 8004aac:	f8ca 1000 	str.w	r1, [sl]
 8004ab0:	b1ed      	cbz	r5, 8004aee <__gethex+0x12a>
 8004ab2:	f1bb 0f00 	cmp.w	fp, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2506      	moveq	r5, #6
 8004aba:	2500      	movne	r5, #0
 8004abc:	4628      	mov	r0, r5
 8004abe:	b005      	add	sp, #20
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	2500      	movs	r5, #0
 8004ac6:	462c      	mov	r4, r5
 8004ac8:	e7b0      	b.n	8004a2c <__gethex+0x68>
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	d1c7      	bne.n	8004a5e <__gethex+0x9a>
 8004ace:	4627      	mov	r7, r4
 8004ad0:	e7c7      	b.n	8004a62 <__gethex+0x9e>
 8004ad2:	464e      	mov	r6, r9
 8004ad4:	462f      	mov	r7, r5
 8004ad6:	2501      	movs	r5, #1
 8004ad8:	e7c3      	b.n	8004a62 <__gethex+0x9e>
 8004ada:	2400      	movs	r4, #0
 8004adc:	1cb1      	adds	r1, r6, #2
 8004ade:	e7cc      	b.n	8004a7a <__gethex+0xb6>
 8004ae0:	2401      	movs	r4, #1
 8004ae2:	e7fb      	b.n	8004adc <__gethex+0x118>
 8004ae4:	fb03 0002 	mla	r0, r3, r2, r0
 8004ae8:	e7ce      	b.n	8004a88 <__gethex+0xc4>
 8004aea:	4631      	mov	r1, r6
 8004aec:	e7de      	b.n	8004aac <__gethex+0xe8>
 8004aee:	eba6 0309 	sub.w	r3, r6, r9
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4629      	mov	r1, r5
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	dc0a      	bgt.n	8004b10 <__gethex+0x14c>
 8004afa:	9801      	ldr	r0, [sp, #4]
 8004afc:	f000 faf4 	bl	80050e8 <_Balloc>
 8004b00:	4604      	mov	r4, r0
 8004b02:	b940      	cbnz	r0, 8004b16 <__gethex+0x152>
 8004b04:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <__gethex+0x2b4>)
 8004b06:	4602      	mov	r2, r0
 8004b08:	21e4      	movs	r1, #228	@ 0xe4
 8004b0a:	485c      	ldr	r0, [pc, #368]	@ (8004c7c <__gethex+0x2b8>)
 8004b0c:	f001 fbea 	bl	80062e4 <__assert_func>
 8004b10:	3101      	adds	r1, #1
 8004b12:	105b      	asrs	r3, r3, #1
 8004b14:	e7ef      	b.n	8004af6 <__gethex+0x132>
 8004b16:	f100 0a14 	add.w	sl, r0, #20
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4655      	mov	r5, sl
 8004b1e:	469b      	mov	fp, r3
 8004b20:	45b1      	cmp	r9, r6
 8004b22:	d337      	bcc.n	8004b94 <__gethex+0x1d0>
 8004b24:	f845 bb04 	str.w	fp, [r5], #4
 8004b28:	eba5 050a 	sub.w	r5, r5, sl
 8004b2c:	10ad      	asrs	r5, r5, #2
 8004b2e:	6125      	str	r5, [r4, #16]
 8004b30:	4658      	mov	r0, fp
 8004b32:	f000 fbcb 	bl	80052cc <__hi0bits>
 8004b36:	016d      	lsls	r5, r5, #5
 8004b38:	f8d8 6000 	ldr.w	r6, [r8]
 8004b3c:	1a2d      	subs	r5, r5, r0
 8004b3e:	42b5      	cmp	r5, r6
 8004b40:	dd54      	ble.n	8004bec <__gethex+0x228>
 8004b42:	1bad      	subs	r5, r5, r6
 8004b44:	4629      	mov	r1, r5
 8004b46:	4620      	mov	r0, r4
 8004b48:	f000 ff5f 	bl	8005a0a <__any_on>
 8004b4c:	4681      	mov	r9, r0
 8004b4e:	b178      	cbz	r0, 8004b70 <__gethex+0x1ac>
 8004b50:	1e6b      	subs	r3, r5, #1
 8004b52:	1159      	asrs	r1, r3, #5
 8004b54:	f003 021f 	and.w	r2, r3, #31
 8004b58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004b5c:	f04f 0901 	mov.w	r9, #1
 8004b60:	fa09 f202 	lsl.w	r2, r9, r2
 8004b64:	420a      	tst	r2, r1
 8004b66:	d003      	beq.n	8004b70 <__gethex+0x1ac>
 8004b68:	454b      	cmp	r3, r9
 8004b6a:	dc36      	bgt.n	8004bda <__gethex+0x216>
 8004b6c:	f04f 0902 	mov.w	r9, #2
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff febe 	bl	80048f4 <rshift>
 8004b78:	442f      	add	r7, r5
 8004b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004b7e:	42bb      	cmp	r3, r7
 8004b80:	da42      	bge.n	8004c08 <__gethex+0x244>
 8004b82:	9801      	ldr	r0, [sp, #4]
 8004b84:	4621      	mov	r1, r4
 8004b86:	f000 faef 	bl	8005168 <_Bfree>
 8004b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	25a3      	movs	r5, #163	@ 0xa3
 8004b92:	e793      	b.n	8004abc <__gethex+0xf8>
 8004b94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8004b98:	2a2e      	cmp	r2, #46	@ 0x2e
 8004b9a:	d012      	beq.n	8004bc2 <__gethex+0x1fe>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d104      	bne.n	8004baa <__gethex+0x1e6>
 8004ba0:	f845 bb04 	str.w	fp, [r5], #4
 8004ba4:	f04f 0b00 	mov.w	fp, #0
 8004ba8:	465b      	mov	r3, fp
 8004baa:	7830      	ldrb	r0, [r6, #0]
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	f7ff fef3 	bl	8004998 <__hexdig_fun>
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	f000 000f 	and.w	r0, r0, #15
 8004bb8:	4098      	lsls	r0, r3
 8004bba:	ea4b 0b00 	orr.w	fp, fp, r0
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	e7ae      	b.n	8004b20 <__gethex+0x15c>
 8004bc2:	45b1      	cmp	r9, r6
 8004bc4:	d8ea      	bhi.n	8004b9c <__gethex+0x1d8>
 8004bc6:	492b      	ldr	r1, [pc, #172]	@ (8004c74 <__gethex+0x2b0>)
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff fdab 	bl	8004728 <strncmp>
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d1e1      	bne.n	8004b9c <__gethex+0x1d8>
 8004bd8:	e7a2      	b.n	8004b20 <__gethex+0x15c>
 8004bda:	1ea9      	subs	r1, r5, #2
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 ff14 	bl	8005a0a <__any_on>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d0c2      	beq.n	8004b6c <__gethex+0x1a8>
 8004be6:	f04f 0903 	mov.w	r9, #3
 8004bea:	e7c1      	b.n	8004b70 <__gethex+0x1ac>
 8004bec:	da09      	bge.n	8004c02 <__gethex+0x23e>
 8004bee:	1b75      	subs	r5, r6, r5
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	9801      	ldr	r0, [sp, #4]
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	f000 fccf 	bl	8005598 <__lshift>
 8004bfa:	1b7f      	subs	r7, r7, r5
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	f100 0a14 	add.w	sl, r0, #20
 8004c02:	f04f 0900 	mov.w	r9, #0
 8004c06:	e7b8      	b.n	8004b7a <__gethex+0x1b6>
 8004c08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004c0c:	42bd      	cmp	r5, r7
 8004c0e:	dd6f      	ble.n	8004cf0 <__gethex+0x32c>
 8004c10:	1bed      	subs	r5, r5, r7
 8004c12:	42ae      	cmp	r6, r5
 8004c14:	dc34      	bgt.n	8004c80 <__gethex+0x2bc>
 8004c16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d022      	beq.n	8004c64 <__gethex+0x2a0>
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d024      	beq.n	8004c6c <__gethex+0x2a8>
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d115      	bne.n	8004c52 <__gethex+0x28e>
 8004c26:	42ae      	cmp	r6, r5
 8004c28:	d113      	bne.n	8004c52 <__gethex+0x28e>
 8004c2a:	2e01      	cmp	r6, #1
 8004c2c:	d10b      	bne.n	8004c46 <__gethex+0x282>
 8004c2e:	9a02      	ldr	r2, [sp, #8]
 8004c30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	2301      	movs	r3, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	f8ca 3000 	str.w	r3, [sl]
 8004c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c40:	2562      	movs	r5, #98	@ 0x62
 8004c42:	601c      	str	r4, [r3, #0]
 8004c44:	e73a      	b.n	8004abc <__gethex+0xf8>
 8004c46:	1e71      	subs	r1, r6, #1
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fede 	bl	8005a0a <__any_on>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d1ed      	bne.n	8004c2e <__gethex+0x26a>
 8004c52:	9801      	ldr	r0, [sp, #4]
 8004c54:	4621      	mov	r1, r4
 8004c56:	f000 fa87 	bl	8005168 <_Bfree>
 8004c5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	2550      	movs	r5, #80	@ 0x50
 8004c62:	e72b      	b.n	8004abc <__gethex+0xf8>
 8004c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f3      	bne.n	8004c52 <__gethex+0x28e>
 8004c6a:	e7e0      	b.n	8004c2e <__gethex+0x26a>
 8004c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1dd      	bne.n	8004c2e <__gethex+0x26a>
 8004c72:	e7ee      	b.n	8004c52 <__gethex+0x28e>
 8004c74:	080067a8 	.word	0x080067a8
 8004c78:	08006810 	.word	0x08006810
 8004c7c:	08006821 	.word	0x08006821
 8004c80:	1e6f      	subs	r7, r5, #1
 8004c82:	f1b9 0f00 	cmp.w	r9, #0
 8004c86:	d130      	bne.n	8004cea <__gethex+0x326>
 8004c88:	b127      	cbz	r7, 8004c94 <__gethex+0x2d0>
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 febc 	bl	8005a0a <__any_on>
 8004c92:	4681      	mov	r9, r0
 8004c94:	117a      	asrs	r2, r7, #5
 8004c96:	2301      	movs	r3, #1
 8004c98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004c9c:	f007 071f 	and.w	r7, r7, #31
 8004ca0:	40bb      	lsls	r3, r7
 8004ca2:	4213      	tst	r3, r2
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bf18      	it	ne
 8004caa:	f049 0902 	orrne.w	r9, r9, #2
 8004cae:	f7ff fe21 	bl	80048f4 <rshift>
 8004cb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8004cb6:	1b76      	subs	r6, r6, r5
 8004cb8:	2502      	movs	r5, #2
 8004cba:	f1b9 0f00 	cmp.w	r9, #0
 8004cbe:	d047      	beq.n	8004d50 <__gethex+0x38c>
 8004cc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d015      	beq.n	8004cf4 <__gethex+0x330>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d017      	beq.n	8004cfc <__gethex+0x338>
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d109      	bne.n	8004ce4 <__gethex+0x320>
 8004cd0:	f019 0f02 	tst.w	r9, #2
 8004cd4:	d006      	beq.n	8004ce4 <__gethex+0x320>
 8004cd6:	f8da 3000 	ldr.w	r3, [sl]
 8004cda:	ea49 0903 	orr.w	r9, r9, r3
 8004cde:	f019 0f01 	tst.w	r9, #1
 8004ce2:	d10e      	bne.n	8004d02 <__gethex+0x33e>
 8004ce4:	f045 0510 	orr.w	r5, r5, #16
 8004ce8:	e032      	b.n	8004d50 <__gethex+0x38c>
 8004cea:	f04f 0901 	mov.w	r9, #1
 8004cee:	e7d1      	b.n	8004c94 <__gethex+0x2d0>
 8004cf0:	2501      	movs	r5, #1
 8004cf2:	e7e2      	b.n	8004cba <__gethex+0x2f6>
 8004cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cf6:	f1c3 0301 	rsb	r3, r3, #1
 8004cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <__gethex+0x320>
 8004d02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004d06:	f104 0314 	add.w	r3, r4, #20
 8004d0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004d0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004d12:	f04f 0c00 	mov.w	ip, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004d20:	d01b      	beq.n	8004d5a <__gethex+0x396>
 8004d22:	3201      	adds	r2, #1
 8004d24:	6002      	str	r2, [r0, #0]
 8004d26:	2d02      	cmp	r5, #2
 8004d28:	f104 0314 	add.w	r3, r4, #20
 8004d2c:	d13c      	bne.n	8004da8 <__gethex+0x3e4>
 8004d2e:	f8d8 2000 	ldr.w	r2, [r8]
 8004d32:	3a01      	subs	r2, #1
 8004d34:	42b2      	cmp	r2, r6
 8004d36:	d109      	bne.n	8004d4c <__gethex+0x388>
 8004d38:	1171      	asrs	r1, r6, #5
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d40:	f006 061f 	and.w	r6, r6, #31
 8004d44:	fa02 f606 	lsl.w	r6, r2, r6
 8004d48:	421e      	tst	r6, r3
 8004d4a:	d13a      	bne.n	8004dc2 <__gethex+0x3fe>
 8004d4c:	f045 0520 	orr.w	r5, r5, #32
 8004d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d52:	601c      	str	r4, [r3, #0]
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	601f      	str	r7, [r3, #0]
 8004d58:	e6b0      	b.n	8004abc <__gethex+0xf8>
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8004d60:	d8d9      	bhi.n	8004d16 <__gethex+0x352>
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	459b      	cmp	fp, r3
 8004d66:	db17      	blt.n	8004d98 <__gethex+0x3d4>
 8004d68:	6861      	ldr	r1, [r4, #4]
 8004d6a:	9801      	ldr	r0, [sp, #4]
 8004d6c:	3101      	adds	r1, #1
 8004d6e:	f000 f9bb 	bl	80050e8 <_Balloc>
 8004d72:	4681      	mov	r9, r0
 8004d74:	b918      	cbnz	r0, 8004d7e <__gethex+0x3ba>
 8004d76:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <__gethex+0x41c>)
 8004d78:	4602      	mov	r2, r0
 8004d7a:	2184      	movs	r1, #132	@ 0x84
 8004d7c:	e6c5      	b.n	8004b0a <__gethex+0x146>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	3202      	adds	r2, #2
 8004d82:	f104 010c 	add.w	r1, r4, #12
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	300c      	adds	r0, #12
 8004d8a:	f7ff fd52 	bl	8004832 <memcpy>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	9801      	ldr	r0, [sp, #4]
 8004d92:	f000 f9e9 	bl	8005168 <_Bfree>
 8004d96:	464c      	mov	r4, r9
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004da0:	6122      	str	r2, [r4, #16]
 8004da2:	2201      	movs	r2, #1
 8004da4:	615a      	str	r2, [r3, #20]
 8004da6:	e7be      	b.n	8004d26 <__gethex+0x362>
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	455a      	cmp	r2, fp
 8004dac:	dd0b      	ble.n	8004dc6 <__gethex+0x402>
 8004dae:	2101      	movs	r1, #1
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7ff fd9f 	bl	80048f4 <rshift>
 8004db6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004dba:	3701      	adds	r7, #1
 8004dbc:	42bb      	cmp	r3, r7
 8004dbe:	f6ff aee0 	blt.w	8004b82 <__gethex+0x1be>
 8004dc2:	2501      	movs	r5, #1
 8004dc4:	e7c2      	b.n	8004d4c <__gethex+0x388>
 8004dc6:	f016 061f 	ands.w	r6, r6, #31
 8004dca:	d0fa      	beq.n	8004dc2 <__gethex+0x3fe>
 8004dcc:	4453      	add	r3, sl
 8004dce:	f1c6 0620 	rsb	r6, r6, #32
 8004dd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004dd6:	f000 fa79 	bl	80052cc <__hi0bits>
 8004dda:	42b0      	cmp	r0, r6
 8004ddc:	dbe7      	blt.n	8004dae <__gethex+0x3ea>
 8004dde:	e7f0      	b.n	8004dc2 <__gethex+0x3fe>
 8004de0:	08006810 	.word	0x08006810

08004de4 <L_shift>:
 8004de4:	f1c2 0208 	rsb	r2, r2, #8
 8004de8:	0092      	lsls	r2, r2, #2
 8004dea:	b570      	push	{r4, r5, r6, lr}
 8004dec:	f1c2 0620 	rsb	r6, r2, #32
 8004df0:	6843      	ldr	r3, [r0, #4]
 8004df2:	6804      	ldr	r4, [r0, #0]
 8004df4:	fa03 f506 	lsl.w	r5, r3, r6
 8004df8:	432c      	orrs	r4, r5
 8004dfa:	40d3      	lsrs	r3, r2
 8004dfc:	6004      	str	r4, [r0, #0]
 8004dfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e02:	4288      	cmp	r0, r1
 8004e04:	d3f4      	bcc.n	8004df0 <L_shift+0xc>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}

08004e08 <__match>:
 8004e08:	b530      	push	{r4, r5, lr}
 8004e0a:	6803      	ldr	r3, [r0, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e12:	b914      	cbnz	r4, 8004e1a <__match+0x12>
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	2001      	movs	r0, #1
 8004e18:	bd30      	pop	{r4, r5, pc}
 8004e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8004e22:	2d19      	cmp	r5, #25
 8004e24:	bf98      	it	ls
 8004e26:	3220      	addls	r2, #32
 8004e28:	42a2      	cmp	r2, r4
 8004e2a:	d0f0      	beq.n	8004e0e <__match+0x6>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e7f3      	b.n	8004e18 <__match+0x10>

08004e30 <__hexnan>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	680b      	ldr	r3, [r1, #0]
 8004e36:	6801      	ldr	r1, [r0, #0]
 8004e38:	115e      	asrs	r6, r3, #5
 8004e3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004e3e:	f013 031f 	ands.w	r3, r3, #31
 8004e42:	b087      	sub	sp, #28
 8004e44:	bf18      	it	ne
 8004e46:	3604      	addne	r6, #4
 8004e48:	2500      	movs	r5, #0
 8004e4a:	1f37      	subs	r7, r6, #4
 8004e4c:	4682      	mov	sl, r0
 8004e4e:	4690      	mov	r8, r2
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	f846 5c04 	str.w	r5, [r6, #-4]
 8004e56:	46b9      	mov	r9, r7
 8004e58:	463c      	mov	r4, r7
 8004e5a:	9502      	str	r5, [sp, #8]
 8004e5c:	46ab      	mov	fp, r5
 8004e5e:	784a      	ldrb	r2, [r1, #1]
 8004e60:	1c4b      	adds	r3, r1, #1
 8004e62:	9303      	str	r3, [sp, #12]
 8004e64:	b342      	cbz	r2, 8004eb8 <__hexnan+0x88>
 8004e66:	4610      	mov	r0, r2
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	9204      	str	r2, [sp, #16]
 8004e6c:	f7ff fd94 	bl	8004998 <__hexdig_fun>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d151      	bne.n	8004f18 <__hexnan+0xe8>
 8004e74:	9a04      	ldr	r2, [sp, #16]
 8004e76:	9905      	ldr	r1, [sp, #20]
 8004e78:	2a20      	cmp	r2, #32
 8004e7a:	d818      	bhi.n	8004eae <__hexnan+0x7e>
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	459b      	cmp	fp, r3
 8004e80:	dd13      	ble.n	8004eaa <__hexnan+0x7a>
 8004e82:	454c      	cmp	r4, r9
 8004e84:	d206      	bcs.n	8004e94 <__hexnan+0x64>
 8004e86:	2d07      	cmp	r5, #7
 8004e88:	dc04      	bgt.n	8004e94 <__hexnan+0x64>
 8004e8a:	462a      	mov	r2, r5
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff ffa8 	bl	8004de4 <L_shift>
 8004e94:	4544      	cmp	r4, r8
 8004e96:	d952      	bls.n	8004f3e <__hexnan+0x10e>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f1a4 0904 	sub.w	r9, r4, #4
 8004e9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004ea2:	f8cd b008 	str.w	fp, [sp, #8]
 8004ea6:	464c      	mov	r4, r9
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	9903      	ldr	r1, [sp, #12]
 8004eac:	e7d7      	b.n	8004e5e <__hexnan+0x2e>
 8004eae:	2a29      	cmp	r2, #41	@ 0x29
 8004eb0:	d157      	bne.n	8004f62 <__hexnan+0x132>
 8004eb2:	3102      	adds	r1, #2
 8004eb4:	f8ca 1000 	str.w	r1, [sl]
 8004eb8:	f1bb 0f00 	cmp.w	fp, #0
 8004ebc:	d051      	beq.n	8004f62 <__hexnan+0x132>
 8004ebe:	454c      	cmp	r4, r9
 8004ec0:	d206      	bcs.n	8004ed0 <__hexnan+0xa0>
 8004ec2:	2d07      	cmp	r5, #7
 8004ec4:	dc04      	bgt.n	8004ed0 <__hexnan+0xa0>
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff ff8a 	bl	8004de4 <L_shift>
 8004ed0:	4544      	cmp	r4, r8
 8004ed2:	d936      	bls.n	8004f42 <__hexnan+0x112>
 8004ed4:	f1a8 0204 	sub.w	r2, r8, #4
 8004ed8:	4623      	mov	r3, r4
 8004eda:	f853 1b04 	ldr.w	r1, [r3], #4
 8004ede:	f842 1f04 	str.w	r1, [r2, #4]!
 8004ee2:	429f      	cmp	r7, r3
 8004ee4:	d2f9      	bcs.n	8004eda <__hexnan+0xaa>
 8004ee6:	1b3b      	subs	r3, r7, r4
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	3304      	adds	r3, #4
 8004eee:	3401      	adds	r4, #1
 8004ef0:	3e03      	subs	r6, #3
 8004ef2:	42b4      	cmp	r4, r6
 8004ef4:	bf88      	it	hi
 8004ef6:	2304      	movhi	r3, #4
 8004ef8:	4443      	add	r3, r8
 8004efa:	2200      	movs	r2, #0
 8004efc:	f843 2b04 	str.w	r2, [r3], #4
 8004f00:	429f      	cmp	r7, r3
 8004f02:	d2fb      	bcs.n	8004efc <__hexnan+0xcc>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	b91b      	cbnz	r3, 8004f10 <__hexnan+0xe0>
 8004f08:	4547      	cmp	r7, r8
 8004f0a:	d128      	bne.n	8004f5e <__hexnan+0x12e>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	2005      	movs	r0, #5
 8004f12:	b007      	add	sp, #28
 8004f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f18:	3501      	adds	r5, #1
 8004f1a:	2d08      	cmp	r5, #8
 8004f1c:	f10b 0b01 	add.w	fp, fp, #1
 8004f20:	dd06      	ble.n	8004f30 <__hexnan+0x100>
 8004f22:	4544      	cmp	r4, r8
 8004f24:	d9c1      	bls.n	8004eaa <__hexnan+0x7a>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8004f2c:	2501      	movs	r5, #1
 8004f2e:	3c04      	subs	r4, #4
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	f000 000f 	and.w	r0, r0, #15
 8004f36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	e7b5      	b.n	8004eaa <__hexnan+0x7a>
 8004f3e:	2508      	movs	r5, #8
 8004f40:	e7b3      	b.n	8004eaa <__hexnan+0x7a>
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0dd      	beq.n	8004f04 <__hexnan+0xd4>
 8004f48:	f1c3 0320 	rsb	r3, r3, #32
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	40da      	lsrs	r2, r3
 8004f52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004f56:	4013      	ands	r3, r2
 8004f58:	f846 3c04 	str.w	r3, [r6, #-4]
 8004f5c:	e7d2      	b.n	8004f04 <__hexnan+0xd4>
 8004f5e:	3f04      	subs	r7, #4
 8004f60:	e7d0      	b.n	8004f04 <__hexnan+0xd4>
 8004f62:	2004      	movs	r0, #4
 8004f64:	e7d5      	b.n	8004f12 <__hexnan+0xe2>
	...

08004f68 <sbrk_aligned>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004fa8 <sbrk_aligned+0x40>)
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	6831      	ldr	r1, [r6, #0]
 8004f70:	4605      	mov	r5, r0
 8004f72:	b911      	cbnz	r1, 8004f7a <sbrk_aligned+0x12>
 8004f74:	f001 f9a6 	bl	80062c4 <_sbrk_r>
 8004f78:	6030      	str	r0, [r6, #0]
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f001 f9a1 	bl	80062c4 <_sbrk_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d103      	bne.n	8004f8e <sbrk_aligned+0x26>
 8004f86:	f04f 34ff 	mov.w	r4, #4294967295
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	1cc4      	adds	r4, r0, #3
 8004f90:	f024 0403 	bic.w	r4, r4, #3
 8004f94:	42a0      	cmp	r0, r4
 8004f96:	d0f8      	beq.n	8004f8a <sbrk_aligned+0x22>
 8004f98:	1a21      	subs	r1, r4, r0
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f001 f992 	bl	80062c4 <_sbrk_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d1f2      	bne.n	8004f8a <sbrk_aligned+0x22>
 8004fa4:	e7ef      	b.n	8004f86 <sbrk_aligned+0x1e>
 8004fa6:	bf00      	nop
 8004fa8:	200004c0 	.word	0x200004c0

08004fac <_malloc_r>:
 8004fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb0:	1ccd      	adds	r5, r1, #3
 8004fb2:	f025 0503 	bic.w	r5, r5, #3
 8004fb6:	3508      	adds	r5, #8
 8004fb8:	2d0c      	cmp	r5, #12
 8004fba:	bf38      	it	cc
 8004fbc:	250c      	movcc	r5, #12
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	db01      	blt.n	8004fc8 <_malloc_r+0x1c>
 8004fc4:	42a9      	cmp	r1, r5
 8004fc6:	d904      	bls.n	8004fd2 <_malloc_r+0x26>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	6033      	str	r3, [r6, #0]
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050a8 <_malloc_r+0xfc>
 8004fd6:	f000 f87b 	bl	80050d0 <__malloc_lock>
 8004fda:	f8d8 3000 	ldr.w	r3, [r8]
 8004fde:	461c      	mov	r4, r3
 8004fe0:	bb44      	cbnz	r4, 8005034 <_malloc_r+0x88>
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff ffbf 	bl	8004f68 <sbrk_aligned>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	4604      	mov	r4, r0
 8004fee:	d158      	bne.n	80050a2 <_malloc_r+0xf6>
 8004ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ff4:	4627      	mov	r7, r4
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d143      	bne.n	8005082 <_malloc_r+0xd6>
 8004ffa:	2c00      	cmp	r4, #0
 8004ffc:	d04b      	beq.n	8005096 <_malloc_r+0xea>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	4639      	mov	r1, r7
 8005002:	4630      	mov	r0, r6
 8005004:	eb04 0903 	add.w	r9, r4, r3
 8005008:	f001 f95c 	bl	80062c4 <_sbrk_r>
 800500c:	4581      	cmp	r9, r0
 800500e:	d142      	bne.n	8005096 <_malloc_r+0xea>
 8005010:	6821      	ldr	r1, [r4, #0]
 8005012:	1a6d      	subs	r5, r5, r1
 8005014:	4629      	mov	r1, r5
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ffa6 	bl	8004f68 <sbrk_aligned>
 800501c:	3001      	adds	r0, #1
 800501e:	d03a      	beq.n	8005096 <_malloc_r+0xea>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	442b      	add	r3, r5
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	f8d8 3000 	ldr.w	r3, [r8]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	bb62      	cbnz	r2, 8005088 <_malloc_r+0xdc>
 800502e:	f8c8 7000 	str.w	r7, [r8]
 8005032:	e00f      	b.n	8005054 <_malloc_r+0xa8>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	1b52      	subs	r2, r2, r5
 8005038:	d420      	bmi.n	800507c <_malloc_r+0xd0>
 800503a:	2a0b      	cmp	r2, #11
 800503c:	d917      	bls.n	800506e <_malloc_r+0xc2>
 800503e:	1961      	adds	r1, r4, r5
 8005040:	42a3      	cmp	r3, r4
 8005042:	6025      	str	r5, [r4, #0]
 8005044:	bf18      	it	ne
 8005046:	6059      	strne	r1, [r3, #4]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	bf08      	it	eq
 800504c:	f8c8 1000 	streq.w	r1, [r8]
 8005050:	5162      	str	r2, [r4, r5]
 8005052:	604b      	str	r3, [r1, #4]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 f841 	bl	80050dc <__malloc_unlock>
 800505a:	f104 000b 	add.w	r0, r4, #11
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	f020 0007 	bic.w	r0, r0, #7
 8005064:	1ac2      	subs	r2, r0, r3
 8005066:	bf1c      	itt	ne
 8005068:	1a1b      	subne	r3, r3, r0
 800506a:	50a3      	strne	r3, [r4, r2]
 800506c:	e7af      	b.n	8004fce <_malloc_r+0x22>
 800506e:	6862      	ldr	r2, [r4, #4]
 8005070:	42a3      	cmp	r3, r4
 8005072:	bf0c      	ite	eq
 8005074:	f8c8 2000 	streq.w	r2, [r8]
 8005078:	605a      	strne	r2, [r3, #4]
 800507a:	e7eb      	b.n	8005054 <_malloc_r+0xa8>
 800507c:	4623      	mov	r3, r4
 800507e:	6864      	ldr	r4, [r4, #4]
 8005080:	e7ae      	b.n	8004fe0 <_malloc_r+0x34>
 8005082:	463c      	mov	r4, r7
 8005084:	687f      	ldr	r7, [r7, #4]
 8005086:	e7b6      	b.n	8004ff6 <_malloc_r+0x4a>
 8005088:	461a      	mov	r2, r3
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	42a3      	cmp	r3, r4
 800508e:	d1fb      	bne.n	8005088 <_malloc_r+0xdc>
 8005090:	2300      	movs	r3, #0
 8005092:	6053      	str	r3, [r2, #4]
 8005094:	e7de      	b.n	8005054 <_malloc_r+0xa8>
 8005096:	230c      	movs	r3, #12
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	4630      	mov	r0, r6
 800509c:	f000 f81e 	bl	80050dc <__malloc_unlock>
 80050a0:	e794      	b.n	8004fcc <_malloc_r+0x20>
 80050a2:	6005      	str	r5, [r0, #0]
 80050a4:	e7d6      	b.n	8005054 <_malloc_r+0xa8>
 80050a6:	bf00      	nop
 80050a8:	200004c4 	.word	0x200004c4

080050ac <__ascii_mbtowc>:
 80050ac:	b082      	sub	sp, #8
 80050ae:	b901      	cbnz	r1, 80050b2 <__ascii_mbtowc+0x6>
 80050b0:	a901      	add	r1, sp, #4
 80050b2:	b142      	cbz	r2, 80050c6 <__ascii_mbtowc+0x1a>
 80050b4:	b14b      	cbz	r3, 80050ca <__ascii_mbtowc+0x1e>
 80050b6:	7813      	ldrb	r3, [r2, #0]
 80050b8:	600b      	str	r3, [r1, #0]
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	1e10      	subs	r0, r2, #0
 80050be:	bf18      	it	ne
 80050c0:	2001      	movne	r0, #1
 80050c2:	b002      	add	sp, #8
 80050c4:	4770      	bx	lr
 80050c6:	4610      	mov	r0, r2
 80050c8:	e7fb      	b.n	80050c2 <__ascii_mbtowc+0x16>
 80050ca:	f06f 0001 	mvn.w	r0, #1
 80050ce:	e7f8      	b.n	80050c2 <__ascii_mbtowc+0x16>

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bbac 	b.w	800482e <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	200004bc 	.word	0x200004bc

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bba7 	b.w	8004830 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	200004bc 	.word	0x200004bc

080050e8 <_Balloc>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	69c6      	ldr	r6, [r0, #28]
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	b976      	cbnz	r6, 8005110 <_Balloc+0x28>
 80050f2:	2010      	movs	r0, #16
 80050f4:	f001 f928 	bl	8006348 <malloc>
 80050f8:	4602      	mov	r2, r0
 80050fa:	61e0      	str	r0, [r4, #28]
 80050fc:	b920      	cbnz	r0, 8005108 <_Balloc+0x20>
 80050fe:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <_Balloc+0x78>)
 8005100:	4818      	ldr	r0, [pc, #96]	@ (8005164 <_Balloc+0x7c>)
 8005102:	216b      	movs	r1, #107	@ 0x6b
 8005104:	f001 f8ee 	bl	80062e4 <__assert_func>
 8005108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800510c:	6006      	str	r6, [r0, #0]
 800510e:	60c6      	str	r6, [r0, #12]
 8005110:	69e6      	ldr	r6, [r4, #28]
 8005112:	68f3      	ldr	r3, [r6, #12]
 8005114:	b183      	cbz	r3, 8005138 <_Balloc+0x50>
 8005116:	69e3      	ldr	r3, [r4, #28]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800511e:	b9b8      	cbnz	r0, 8005150 <_Balloc+0x68>
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f605 	lsl.w	r6, r1, r5
 8005126:	1d72      	adds	r2, r6, #5
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4620      	mov	r0, r4
 800512c:	f001 f8f8 	bl	8006320 <_calloc_r>
 8005130:	b160      	cbz	r0, 800514c <_Balloc+0x64>
 8005132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005136:	e00e      	b.n	8005156 <_Balloc+0x6e>
 8005138:	2221      	movs	r2, #33	@ 0x21
 800513a:	2104      	movs	r1, #4
 800513c:	4620      	mov	r0, r4
 800513e:	f001 f8ef 	bl	8006320 <_calloc_r>
 8005142:	69e3      	ldr	r3, [r4, #28]
 8005144:	60f0      	str	r0, [r6, #12]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e4      	bne.n	8005116 <_Balloc+0x2e>
 800514c:	2000      	movs	r0, #0
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	6802      	ldr	r2, [r0, #0]
 8005152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005156:	2300      	movs	r3, #0
 8005158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800515c:	e7f7      	b.n	800514e <_Balloc+0x66>
 800515e:	bf00      	nop
 8005160:	08006881 	.word	0x08006881
 8005164:	08006898 	.word	0x08006898

08005168 <_Bfree>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	69c6      	ldr	r6, [r0, #28]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b976      	cbnz	r6, 8005190 <_Bfree+0x28>
 8005172:	2010      	movs	r0, #16
 8005174:	f001 f8e8 	bl	8006348 <malloc>
 8005178:	4602      	mov	r2, r0
 800517a:	61e8      	str	r0, [r5, #28]
 800517c:	b920      	cbnz	r0, 8005188 <_Bfree+0x20>
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <_Bfree+0x3c>)
 8005180:	4809      	ldr	r0, [pc, #36]	@ (80051a8 <_Bfree+0x40>)
 8005182:	218f      	movs	r1, #143	@ 0x8f
 8005184:	f001 f8ae 	bl	80062e4 <__assert_func>
 8005188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800518c:	6006      	str	r6, [r0, #0]
 800518e:	60c6      	str	r6, [r0, #12]
 8005190:	b13c      	cbz	r4, 80051a2 <_Bfree+0x3a>
 8005192:	69eb      	ldr	r3, [r5, #28]
 8005194:	6862      	ldr	r2, [r4, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800519c:	6021      	str	r1, [r4, #0]
 800519e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	08006881 	.word	0x08006881
 80051a8:	08006898 	.word	0x08006898

080051ac <__multadd>:
 80051ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b0:	690d      	ldr	r5, [r1, #16]
 80051b2:	4607      	mov	r7, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	461e      	mov	r6, r3
 80051b8:	f101 0c14 	add.w	ip, r1, #20
 80051bc:	2000      	movs	r0, #0
 80051be:	f8dc 3000 	ldr.w	r3, [ip]
 80051c2:	b299      	uxth	r1, r3
 80051c4:	fb02 6101 	mla	r1, r2, r1, r6
 80051c8:	0c1e      	lsrs	r6, r3, #16
 80051ca:	0c0b      	lsrs	r3, r1, #16
 80051cc:	fb02 3306 	mla	r3, r2, r6, r3
 80051d0:	b289      	uxth	r1, r1
 80051d2:	3001      	adds	r0, #1
 80051d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051d8:	4285      	cmp	r5, r0
 80051da:	f84c 1b04 	str.w	r1, [ip], #4
 80051de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051e2:	dcec      	bgt.n	80051be <__multadd+0x12>
 80051e4:	b30e      	cbz	r6, 800522a <__multadd+0x7e>
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dc19      	bgt.n	8005220 <__multadd+0x74>
 80051ec:	6861      	ldr	r1, [r4, #4]
 80051ee:	4638      	mov	r0, r7
 80051f0:	3101      	adds	r1, #1
 80051f2:	f7ff ff79 	bl	80050e8 <_Balloc>
 80051f6:	4680      	mov	r8, r0
 80051f8:	b928      	cbnz	r0, 8005206 <__multadd+0x5a>
 80051fa:	4602      	mov	r2, r0
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <__multadd+0x84>)
 80051fe:	480d      	ldr	r0, [pc, #52]	@ (8005234 <__multadd+0x88>)
 8005200:	21ba      	movs	r1, #186	@ 0xba
 8005202:	f001 f86f 	bl	80062e4 <__assert_func>
 8005206:	6922      	ldr	r2, [r4, #16]
 8005208:	3202      	adds	r2, #2
 800520a:	f104 010c 	add.w	r1, r4, #12
 800520e:	0092      	lsls	r2, r2, #2
 8005210:	300c      	adds	r0, #12
 8005212:	f7ff fb0e 	bl	8004832 <memcpy>
 8005216:	4621      	mov	r1, r4
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ffa5 	bl	8005168 <_Bfree>
 800521e:	4644      	mov	r4, r8
 8005220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005224:	3501      	adds	r5, #1
 8005226:	615e      	str	r6, [r3, #20]
 8005228:	6125      	str	r5, [r4, #16]
 800522a:	4620      	mov	r0, r4
 800522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005230:	08006810 	.word	0x08006810
 8005234:	08006898 	.word	0x08006898

08005238 <__s2b>:
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	460c      	mov	r4, r1
 800523e:	4615      	mov	r5, r2
 8005240:	461f      	mov	r7, r3
 8005242:	2209      	movs	r2, #9
 8005244:	3308      	adds	r3, #8
 8005246:	4606      	mov	r6, r0
 8005248:	fb93 f3f2 	sdiv	r3, r3, r2
 800524c:	2100      	movs	r1, #0
 800524e:	2201      	movs	r2, #1
 8005250:	429a      	cmp	r2, r3
 8005252:	db09      	blt.n	8005268 <__s2b+0x30>
 8005254:	4630      	mov	r0, r6
 8005256:	f7ff ff47 	bl	80050e8 <_Balloc>
 800525a:	b940      	cbnz	r0, 800526e <__s2b+0x36>
 800525c:	4602      	mov	r2, r0
 800525e:	4b19      	ldr	r3, [pc, #100]	@ (80052c4 <__s2b+0x8c>)
 8005260:	4819      	ldr	r0, [pc, #100]	@ (80052c8 <__s2b+0x90>)
 8005262:	21d3      	movs	r1, #211	@ 0xd3
 8005264:	f001 f83e 	bl	80062e4 <__assert_func>
 8005268:	0052      	lsls	r2, r2, #1
 800526a:	3101      	adds	r1, #1
 800526c:	e7f0      	b.n	8005250 <__s2b+0x18>
 800526e:	9b08      	ldr	r3, [sp, #32]
 8005270:	6143      	str	r3, [r0, #20]
 8005272:	2d09      	cmp	r5, #9
 8005274:	f04f 0301 	mov.w	r3, #1
 8005278:	6103      	str	r3, [r0, #16]
 800527a:	dd16      	ble.n	80052aa <__s2b+0x72>
 800527c:	f104 0909 	add.w	r9, r4, #9
 8005280:	46c8      	mov	r8, r9
 8005282:	442c      	add	r4, r5
 8005284:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005288:	4601      	mov	r1, r0
 800528a:	3b30      	subs	r3, #48	@ 0x30
 800528c:	220a      	movs	r2, #10
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff ff8c 	bl	80051ac <__multadd>
 8005294:	45a0      	cmp	r8, r4
 8005296:	d1f5      	bne.n	8005284 <__s2b+0x4c>
 8005298:	f1a5 0408 	sub.w	r4, r5, #8
 800529c:	444c      	add	r4, r9
 800529e:	1b2d      	subs	r5, r5, r4
 80052a0:	1963      	adds	r3, r4, r5
 80052a2:	42bb      	cmp	r3, r7
 80052a4:	db04      	blt.n	80052b0 <__s2b+0x78>
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	340a      	adds	r4, #10
 80052ac:	2509      	movs	r5, #9
 80052ae:	e7f6      	b.n	800529e <__s2b+0x66>
 80052b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052b4:	4601      	mov	r1, r0
 80052b6:	3b30      	subs	r3, #48	@ 0x30
 80052b8:	220a      	movs	r2, #10
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff ff76 	bl	80051ac <__multadd>
 80052c0:	e7ee      	b.n	80052a0 <__s2b+0x68>
 80052c2:	bf00      	nop
 80052c4:	08006810 	.word	0x08006810
 80052c8:	08006898 	.word	0x08006898

080052cc <__hi0bits>:
 80052cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80052d0:	4603      	mov	r3, r0
 80052d2:	bf36      	itet	cc
 80052d4:	0403      	lslcc	r3, r0, #16
 80052d6:	2000      	movcs	r0, #0
 80052d8:	2010      	movcc	r0, #16
 80052da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052de:	bf3c      	itt	cc
 80052e0:	021b      	lslcc	r3, r3, #8
 80052e2:	3008      	addcc	r0, #8
 80052e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052e8:	bf3c      	itt	cc
 80052ea:	011b      	lslcc	r3, r3, #4
 80052ec:	3004      	addcc	r0, #4
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f2:	bf3c      	itt	cc
 80052f4:	009b      	lslcc	r3, r3, #2
 80052f6:	3002      	addcc	r0, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	db05      	blt.n	8005308 <__hi0bits+0x3c>
 80052fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005300:	f100 0001 	add.w	r0, r0, #1
 8005304:	bf08      	it	eq
 8005306:	2020      	moveq	r0, #32
 8005308:	4770      	bx	lr

0800530a <__lo0bits>:
 800530a:	6803      	ldr	r3, [r0, #0]
 800530c:	4602      	mov	r2, r0
 800530e:	f013 0007 	ands.w	r0, r3, #7
 8005312:	d00b      	beq.n	800532c <__lo0bits+0x22>
 8005314:	07d9      	lsls	r1, r3, #31
 8005316:	d421      	bmi.n	800535c <__lo0bits+0x52>
 8005318:	0798      	lsls	r0, r3, #30
 800531a:	bf49      	itett	mi
 800531c:	085b      	lsrmi	r3, r3, #1
 800531e:	089b      	lsrpl	r3, r3, #2
 8005320:	2001      	movmi	r0, #1
 8005322:	6013      	strmi	r3, [r2, #0]
 8005324:	bf5c      	itt	pl
 8005326:	6013      	strpl	r3, [r2, #0]
 8005328:	2002      	movpl	r0, #2
 800532a:	4770      	bx	lr
 800532c:	b299      	uxth	r1, r3
 800532e:	b909      	cbnz	r1, 8005334 <__lo0bits+0x2a>
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	2010      	movs	r0, #16
 8005334:	b2d9      	uxtb	r1, r3
 8005336:	b909      	cbnz	r1, 800533c <__lo0bits+0x32>
 8005338:	3008      	adds	r0, #8
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	0719      	lsls	r1, r3, #28
 800533e:	bf04      	itt	eq
 8005340:	091b      	lsreq	r3, r3, #4
 8005342:	3004      	addeq	r0, #4
 8005344:	0799      	lsls	r1, r3, #30
 8005346:	bf04      	itt	eq
 8005348:	089b      	lsreq	r3, r3, #2
 800534a:	3002      	addeq	r0, #2
 800534c:	07d9      	lsls	r1, r3, #31
 800534e:	d403      	bmi.n	8005358 <__lo0bits+0x4e>
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	f100 0001 	add.w	r0, r0, #1
 8005356:	d003      	beq.n	8005360 <__lo0bits+0x56>
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4770      	bx	lr
 800535c:	2000      	movs	r0, #0
 800535e:	4770      	bx	lr
 8005360:	2020      	movs	r0, #32
 8005362:	4770      	bx	lr

08005364 <__i2b>:
 8005364:	b510      	push	{r4, lr}
 8005366:	460c      	mov	r4, r1
 8005368:	2101      	movs	r1, #1
 800536a:	f7ff febd 	bl	80050e8 <_Balloc>
 800536e:	4602      	mov	r2, r0
 8005370:	b928      	cbnz	r0, 800537e <__i2b+0x1a>
 8005372:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <__i2b+0x24>)
 8005374:	4805      	ldr	r0, [pc, #20]	@ (800538c <__i2b+0x28>)
 8005376:	f240 1145 	movw	r1, #325	@ 0x145
 800537a:	f000 ffb3 	bl	80062e4 <__assert_func>
 800537e:	2301      	movs	r3, #1
 8005380:	6144      	str	r4, [r0, #20]
 8005382:	6103      	str	r3, [r0, #16]
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	08006810 	.word	0x08006810
 800538c:	08006898 	.word	0x08006898

08005390 <__multiply>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4614      	mov	r4, r2
 8005396:	690a      	ldr	r2, [r1, #16]
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	bfa8      	it	ge
 800539e:	4623      	movge	r3, r4
 80053a0:	460f      	mov	r7, r1
 80053a2:	bfa4      	itt	ge
 80053a4:	460c      	movge	r4, r1
 80053a6:	461f      	movge	r7, r3
 80053a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053b0:	68a3      	ldr	r3, [r4, #8]
 80053b2:	6861      	ldr	r1, [r4, #4]
 80053b4:	eb0a 0609 	add.w	r6, sl, r9
 80053b8:	42b3      	cmp	r3, r6
 80053ba:	b085      	sub	sp, #20
 80053bc:	bfb8      	it	lt
 80053be:	3101      	addlt	r1, #1
 80053c0:	f7ff fe92 	bl	80050e8 <_Balloc>
 80053c4:	b930      	cbnz	r0, 80053d4 <__multiply+0x44>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b44      	ldr	r3, [pc, #272]	@ (80054dc <__multiply+0x14c>)
 80053ca:	4845      	ldr	r0, [pc, #276]	@ (80054e0 <__multiply+0x150>)
 80053cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80053d0:	f000 ff88 	bl	80062e4 <__assert_func>
 80053d4:	f100 0514 	add.w	r5, r0, #20
 80053d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053dc:	462b      	mov	r3, r5
 80053de:	2200      	movs	r2, #0
 80053e0:	4543      	cmp	r3, r8
 80053e2:	d321      	bcc.n	8005428 <__multiply+0x98>
 80053e4:	f107 0114 	add.w	r1, r7, #20
 80053e8:	f104 0214 	add.w	r2, r4, #20
 80053ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80053f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	1b13      	subs	r3, r2, r4
 80053f8:	3b15      	subs	r3, #21
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	3304      	adds	r3, #4
 8005400:	f104 0715 	add.w	r7, r4, #21
 8005404:	42ba      	cmp	r2, r7
 8005406:	bf38      	it	cc
 8005408:	2304      	movcc	r3, #4
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	9103      	str	r1, [sp, #12]
 8005410:	428b      	cmp	r3, r1
 8005412:	d80c      	bhi.n	800542e <__multiply+0x9e>
 8005414:	2e00      	cmp	r6, #0
 8005416:	dd03      	ble.n	8005420 <__multiply+0x90>
 8005418:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800541c:	2b00      	cmp	r3, #0
 800541e:	d05b      	beq.n	80054d8 <__multiply+0x148>
 8005420:	6106      	str	r6, [r0, #16]
 8005422:	b005      	add	sp, #20
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	f843 2b04 	str.w	r2, [r3], #4
 800542c:	e7d8      	b.n	80053e0 <__multiply+0x50>
 800542e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005432:	f1ba 0f00 	cmp.w	sl, #0
 8005436:	d024      	beq.n	8005482 <__multiply+0xf2>
 8005438:	f104 0e14 	add.w	lr, r4, #20
 800543c:	46a9      	mov	r9, r5
 800543e:	f04f 0c00 	mov.w	ip, #0
 8005442:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005446:	f8d9 3000 	ldr.w	r3, [r9]
 800544a:	fa1f fb87 	uxth.w	fp, r7
 800544e:	b29b      	uxth	r3, r3
 8005450:	fb0a 330b 	mla	r3, sl, fp, r3
 8005454:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005458:	f8d9 7000 	ldr.w	r7, [r9]
 800545c:	4463      	add	r3, ip
 800545e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005462:	fb0a c70b 	mla	r7, sl, fp, ip
 8005466:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800546a:	b29b      	uxth	r3, r3
 800546c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005470:	4572      	cmp	r2, lr
 8005472:	f849 3b04 	str.w	r3, [r9], #4
 8005476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800547a:	d8e2      	bhi.n	8005442 <__multiply+0xb2>
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	f845 c003 	str.w	ip, [r5, r3]
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005488:	3104      	adds	r1, #4
 800548a:	f1b9 0f00 	cmp.w	r9, #0
 800548e:	d021      	beq.n	80054d4 <__multiply+0x144>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	f104 0c14 	add.w	ip, r4, #20
 8005496:	46ae      	mov	lr, r5
 8005498:	f04f 0a00 	mov.w	sl, #0
 800549c:	f8bc b000 	ldrh.w	fp, [ip]
 80054a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80054a4:	fb09 770b 	mla	r7, r9, fp, r7
 80054a8:	4457      	add	r7, sl
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054b0:	f84e 3b04 	str.w	r3, [lr], #4
 80054b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054bc:	f8be 3000 	ldrh.w	r3, [lr]
 80054c0:	fb09 330a 	mla	r3, r9, sl, r3
 80054c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80054c8:	4562      	cmp	r2, ip
 80054ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054ce:	d8e5      	bhi.n	800549c <__multiply+0x10c>
 80054d0:	9f01      	ldr	r7, [sp, #4]
 80054d2:	51eb      	str	r3, [r5, r7]
 80054d4:	3504      	adds	r5, #4
 80054d6:	e799      	b.n	800540c <__multiply+0x7c>
 80054d8:	3e01      	subs	r6, #1
 80054da:	e79b      	b.n	8005414 <__multiply+0x84>
 80054dc:	08006810 	.word	0x08006810
 80054e0:	08006898 	.word	0x08006898

080054e4 <__pow5mult>:
 80054e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e8:	4615      	mov	r5, r2
 80054ea:	f012 0203 	ands.w	r2, r2, #3
 80054ee:	4607      	mov	r7, r0
 80054f0:	460e      	mov	r6, r1
 80054f2:	d007      	beq.n	8005504 <__pow5mult+0x20>
 80054f4:	4c25      	ldr	r4, [pc, #148]	@ (800558c <__pow5mult+0xa8>)
 80054f6:	3a01      	subs	r2, #1
 80054f8:	2300      	movs	r3, #0
 80054fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054fe:	f7ff fe55 	bl	80051ac <__multadd>
 8005502:	4606      	mov	r6, r0
 8005504:	10ad      	asrs	r5, r5, #2
 8005506:	d03d      	beq.n	8005584 <__pow5mult+0xa0>
 8005508:	69fc      	ldr	r4, [r7, #28]
 800550a:	b97c      	cbnz	r4, 800552c <__pow5mult+0x48>
 800550c:	2010      	movs	r0, #16
 800550e:	f000 ff1b 	bl	8006348 <malloc>
 8005512:	4602      	mov	r2, r0
 8005514:	61f8      	str	r0, [r7, #28]
 8005516:	b928      	cbnz	r0, 8005524 <__pow5mult+0x40>
 8005518:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <__pow5mult+0xac>)
 800551a:	481e      	ldr	r0, [pc, #120]	@ (8005594 <__pow5mult+0xb0>)
 800551c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005520:	f000 fee0 	bl	80062e4 <__assert_func>
 8005524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005528:	6004      	str	r4, [r0, #0]
 800552a:	60c4      	str	r4, [r0, #12]
 800552c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005534:	b94c      	cbnz	r4, 800554a <__pow5mult+0x66>
 8005536:	f240 2171 	movw	r1, #625	@ 0x271
 800553a:	4638      	mov	r0, r7
 800553c:	f7ff ff12 	bl	8005364 <__i2b>
 8005540:	2300      	movs	r3, #0
 8005542:	f8c8 0008 	str.w	r0, [r8, #8]
 8005546:	4604      	mov	r4, r0
 8005548:	6003      	str	r3, [r0, #0]
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	07eb      	lsls	r3, r5, #31
 8005550:	d50a      	bpl.n	8005568 <__pow5mult+0x84>
 8005552:	4631      	mov	r1, r6
 8005554:	4622      	mov	r2, r4
 8005556:	4638      	mov	r0, r7
 8005558:	f7ff ff1a 	bl	8005390 <__multiply>
 800555c:	4631      	mov	r1, r6
 800555e:	4680      	mov	r8, r0
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff fe01 	bl	8005168 <_Bfree>
 8005566:	4646      	mov	r6, r8
 8005568:	106d      	asrs	r5, r5, #1
 800556a:	d00b      	beq.n	8005584 <__pow5mult+0xa0>
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	b938      	cbnz	r0, 8005580 <__pow5mult+0x9c>
 8005570:	4622      	mov	r2, r4
 8005572:	4621      	mov	r1, r4
 8005574:	4638      	mov	r0, r7
 8005576:	f7ff ff0b 	bl	8005390 <__multiply>
 800557a:	6020      	str	r0, [r4, #0]
 800557c:	f8c0 9000 	str.w	r9, [r0]
 8005580:	4604      	mov	r4, r0
 8005582:	e7e4      	b.n	800554e <__pow5mult+0x6a>
 8005584:	4630      	mov	r0, r6
 8005586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800558a:	bf00      	nop
 800558c:	080068f4 	.word	0x080068f4
 8005590:	08006881 	.word	0x08006881
 8005594:	08006898 	.word	0x08006898

08005598 <__lshift>:
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	6849      	ldr	r1, [r1, #4]
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	4607      	mov	r7, r0
 80055aa:	4691      	mov	r9, r2
 80055ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055b0:	f108 0601 	add.w	r6, r8, #1
 80055b4:	42b3      	cmp	r3, r6
 80055b6:	db0b      	blt.n	80055d0 <__lshift+0x38>
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff fd95 	bl	80050e8 <_Balloc>
 80055be:	4605      	mov	r5, r0
 80055c0:	b948      	cbnz	r0, 80055d6 <__lshift+0x3e>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b28      	ldr	r3, [pc, #160]	@ (8005668 <__lshift+0xd0>)
 80055c6:	4829      	ldr	r0, [pc, #164]	@ (800566c <__lshift+0xd4>)
 80055c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80055cc:	f000 fe8a 	bl	80062e4 <__assert_func>
 80055d0:	3101      	adds	r1, #1
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	e7ee      	b.n	80055b4 <__lshift+0x1c>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f100 0114 	add.w	r1, r0, #20
 80055dc:	f100 0210 	add.w	r2, r0, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	4553      	cmp	r3, sl
 80055e4:	db33      	blt.n	800564e <__lshift+0xb6>
 80055e6:	6920      	ldr	r0, [r4, #16]
 80055e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055ec:	f104 0314 	add.w	r3, r4, #20
 80055f0:	f019 091f 	ands.w	r9, r9, #31
 80055f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055fc:	d02b      	beq.n	8005656 <__lshift+0xbe>
 80055fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005602:	468a      	mov	sl, r1
 8005604:	2200      	movs	r2, #0
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	fa00 f009 	lsl.w	r0, r0, r9
 800560c:	4310      	orrs	r0, r2
 800560e:	f84a 0b04 	str.w	r0, [sl], #4
 8005612:	f853 2b04 	ldr.w	r2, [r3], #4
 8005616:	459c      	cmp	ip, r3
 8005618:	fa22 f20e 	lsr.w	r2, r2, lr
 800561c:	d8f3      	bhi.n	8005606 <__lshift+0x6e>
 800561e:	ebac 0304 	sub.w	r3, ip, r4
 8005622:	3b15      	subs	r3, #21
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	3304      	adds	r3, #4
 800562a:	f104 0015 	add.w	r0, r4, #21
 800562e:	4584      	cmp	ip, r0
 8005630:	bf38      	it	cc
 8005632:	2304      	movcc	r3, #4
 8005634:	50ca      	str	r2, [r1, r3]
 8005636:	b10a      	cbz	r2, 800563c <__lshift+0xa4>
 8005638:	f108 0602 	add.w	r6, r8, #2
 800563c:	3e01      	subs	r6, #1
 800563e:	4638      	mov	r0, r7
 8005640:	612e      	str	r6, [r5, #16]
 8005642:	4621      	mov	r1, r4
 8005644:	f7ff fd90 	bl	8005168 <_Bfree>
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005652:	3301      	adds	r3, #1
 8005654:	e7c5      	b.n	80055e2 <__lshift+0x4a>
 8005656:	3904      	subs	r1, #4
 8005658:	f853 2b04 	ldr.w	r2, [r3], #4
 800565c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005660:	459c      	cmp	ip, r3
 8005662:	d8f9      	bhi.n	8005658 <__lshift+0xc0>
 8005664:	e7ea      	b.n	800563c <__lshift+0xa4>
 8005666:	bf00      	nop
 8005668:	08006810 	.word	0x08006810
 800566c:	08006898 	.word	0x08006898

08005670 <__mcmp>:
 8005670:	690a      	ldr	r2, [r1, #16]
 8005672:	4603      	mov	r3, r0
 8005674:	6900      	ldr	r0, [r0, #16]
 8005676:	1a80      	subs	r0, r0, r2
 8005678:	b530      	push	{r4, r5, lr}
 800567a:	d10e      	bne.n	800569a <__mcmp+0x2a>
 800567c:	3314      	adds	r3, #20
 800567e:	3114      	adds	r1, #20
 8005680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800568c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005690:	4295      	cmp	r5, r2
 8005692:	d003      	beq.n	800569c <__mcmp+0x2c>
 8005694:	d205      	bcs.n	80056a2 <__mcmp+0x32>
 8005696:	f04f 30ff 	mov.w	r0, #4294967295
 800569a:	bd30      	pop	{r4, r5, pc}
 800569c:	42a3      	cmp	r3, r4
 800569e:	d3f3      	bcc.n	8005688 <__mcmp+0x18>
 80056a0:	e7fb      	b.n	800569a <__mcmp+0x2a>
 80056a2:	2001      	movs	r0, #1
 80056a4:	e7f9      	b.n	800569a <__mcmp+0x2a>
	...

080056a8 <__mdiff>:
 80056a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4689      	mov	r9, r1
 80056ae:	4606      	mov	r6, r0
 80056b0:	4611      	mov	r1, r2
 80056b2:	4648      	mov	r0, r9
 80056b4:	4614      	mov	r4, r2
 80056b6:	f7ff ffdb 	bl	8005670 <__mcmp>
 80056ba:	1e05      	subs	r5, r0, #0
 80056bc:	d112      	bne.n	80056e4 <__mdiff+0x3c>
 80056be:	4629      	mov	r1, r5
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7ff fd11 	bl	80050e8 <_Balloc>
 80056c6:	4602      	mov	r2, r0
 80056c8:	b928      	cbnz	r0, 80056d6 <__mdiff+0x2e>
 80056ca:	4b3f      	ldr	r3, [pc, #252]	@ (80057c8 <__mdiff+0x120>)
 80056cc:	f240 2137 	movw	r1, #567	@ 0x237
 80056d0:	483e      	ldr	r0, [pc, #248]	@ (80057cc <__mdiff+0x124>)
 80056d2:	f000 fe07 	bl	80062e4 <__assert_func>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056dc:	4610      	mov	r0, r2
 80056de:	b003      	add	sp, #12
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	bfbc      	itt	lt
 80056e6:	464b      	movlt	r3, r9
 80056e8:	46a1      	movlt	r9, r4
 80056ea:	4630      	mov	r0, r6
 80056ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80056f0:	bfba      	itte	lt
 80056f2:	461c      	movlt	r4, r3
 80056f4:	2501      	movlt	r5, #1
 80056f6:	2500      	movge	r5, #0
 80056f8:	f7ff fcf6 	bl	80050e8 <_Balloc>
 80056fc:	4602      	mov	r2, r0
 80056fe:	b918      	cbnz	r0, 8005708 <__mdiff+0x60>
 8005700:	4b31      	ldr	r3, [pc, #196]	@ (80057c8 <__mdiff+0x120>)
 8005702:	f240 2145 	movw	r1, #581	@ 0x245
 8005706:	e7e3      	b.n	80056d0 <__mdiff+0x28>
 8005708:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800570c:	6926      	ldr	r6, [r4, #16]
 800570e:	60c5      	str	r5, [r0, #12]
 8005710:	f109 0310 	add.w	r3, r9, #16
 8005714:	f109 0514 	add.w	r5, r9, #20
 8005718:	f104 0e14 	add.w	lr, r4, #20
 800571c:	f100 0b14 	add.w	fp, r0, #20
 8005720:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005724:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	46d9      	mov	r9, fp
 800572c:	f04f 0c00 	mov.w	ip, #0
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005736:	f853 af04 	ldr.w	sl, [r3, #4]!
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	fa1f f38a 	uxth.w	r3, sl
 8005740:	4619      	mov	r1, r3
 8005742:	b283      	uxth	r3, r0
 8005744:	1acb      	subs	r3, r1, r3
 8005746:	0c00      	lsrs	r0, r0, #16
 8005748:	4463      	add	r3, ip
 800574a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800574e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005752:	b29b      	uxth	r3, r3
 8005754:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005758:	4576      	cmp	r6, lr
 800575a:	f849 3b04 	str.w	r3, [r9], #4
 800575e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005762:	d8e5      	bhi.n	8005730 <__mdiff+0x88>
 8005764:	1b33      	subs	r3, r6, r4
 8005766:	3b15      	subs	r3, #21
 8005768:	f023 0303 	bic.w	r3, r3, #3
 800576c:	3415      	adds	r4, #21
 800576e:	3304      	adds	r3, #4
 8005770:	42a6      	cmp	r6, r4
 8005772:	bf38      	it	cc
 8005774:	2304      	movcc	r3, #4
 8005776:	441d      	add	r5, r3
 8005778:	445b      	add	r3, fp
 800577a:	461e      	mov	r6, r3
 800577c:	462c      	mov	r4, r5
 800577e:	4544      	cmp	r4, r8
 8005780:	d30e      	bcc.n	80057a0 <__mdiff+0xf8>
 8005782:	f108 0103 	add.w	r1, r8, #3
 8005786:	1b49      	subs	r1, r1, r5
 8005788:	f021 0103 	bic.w	r1, r1, #3
 800578c:	3d03      	subs	r5, #3
 800578e:	45a8      	cmp	r8, r5
 8005790:	bf38      	it	cc
 8005792:	2100      	movcc	r1, #0
 8005794:	440b      	add	r3, r1
 8005796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800579a:	b191      	cbz	r1, 80057c2 <__mdiff+0x11a>
 800579c:	6117      	str	r7, [r2, #16]
 800579e:	e79d      	b.n	80056dc <__mdiff+0x34>
 80057a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80057a4:	46e6      	mov	lr, ip
 80057a6:	0c08      	lsrs	r0, r1, #16
 80057a8:	fa1c fc81 	uxtah	ip, ip, r1
 80057ac:	4471      	add	r1, lr
 80057ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057b2:	b289      	uxth	r1, r1
 80057b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057b8:	f846 1b04 	str.w	r1, [r6], #4
 80057bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057c0:	e7dd      	b.n	800577e <__mdiff+0xd6>
 80057c2:	3f01      	subs	r7, #1
 80057c4:	e7e7      	b.n	8005796 <__mdiff+0xee>
 80057c6:	bf00      	nop
 80057c8:	08006810 	.word	0x08006810
 80057cc:	08006898 	.word	0x08006898

080057d0 <__ulp>:
 80057d0:	b082      	sub	sp, #8
 80057d2:	ed8d 0b00 	vstr	d0, [sp]
 80057d6:	9a01      	ldr	r2, [sp, #4]
 80057d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <__ulp+0x48>)
 80057da:	4013      	ands	r3, r2
 80057dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc08      	bgt.n	80057f6 <__ulp+0x26>
 80057e4:	425b      	negs	r3, r3
 80057e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80057ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057ee:	da04      	bge.n	80057fa <__ulp+0x2a>
 80057f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80057f4:	4113      	asrs	r3, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	e008      	b.n	800580c <__ulp+0x3c>
 80057fa:	f1a2 0314 	sub.w	r3, r2, #20
 80057fe:	2b1e      	cmp	r3, #30
 8005800:	bfda      	itte	le
 8005802:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005806:	40da      	lsrle	r2, r3
 8005808:	2201      	movgt	r2, #1
 800580a:	2300      	movs	r3, #0
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	ec41 0b10 	vmov	d0, r0, r1
 8005814:	b002      	add	sp, #8
 8005816:	4770      	bx	lr
 8005818:	7ff00000 	.word	0x7ff00000

0800581c <__b2d>:
 800581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	6906      	ldr	r6, [r0, #16]
 8005822:	f100 0814 	add.w	r8, r0, #20
 8005826:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800582a:	1f37      	subs	r7, r6, #4
 800582c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005830:	4610      	mov	r0, r2
 8005832:	f7ff fd4b 	bl	80052cc <__hi0bits>
 8005836:	f1c0 0320 	rsb	r3, r0, #32
 800583a:	280a      	cmp	r0, #10
 800583c:	600b      	str	r3, [r1, #0]
 800583e:	491b      	ldr	r1, [pc, #108]	@ (80058ac <__b2d+0x90>)
 8005840:	dc15      	bgt.n	800586e <__b2d+0x52>
 8005842:	f1c0 0c0b 	rsb	ip, r0, #11
 8005846:	fa22 f30c 	lsr.w	r3, r2, ip
 800584a:	45b8      	cmp	r8, r7
 800584c:	ea43 0501 	orr.w	r5, r3, r1
 8005850:	bf34      	ite	cc
 8005852:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005856:	2300      	movcs	r3, #0
 8005858:	3015      	adds	r0, #21
 800585a:	fa02 f000 	lsl.w	r0, r2, r0
 800585e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005862:	4303      	orrs	r3, r0
 8005864:	461c      	mov	r4, r3
 8005866:	ec45 4b10 	vmov	d0, r4, r5
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586e:	45b8      	cmp	r8, r7
 8005870:	bf3a      	itte	cc
 8005872:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005876:	f1a6 0708 	subcc.w	r7, r6, #8
 800587a:	2300      	movcs	r3, #0
 800587c:	380b      	subs	r0, #11
 800587e:	d012      	beq.n	80058a6 <__b2d+0x8a>
 8005880:	f1c0 0120 	rsb	r1, r0, #32
 8005884:	fa23 f401 	lsr.w	r4, r3, r1
 8005888:	4082      	lsls	r2, r0
 800588a:	4322      	orrs	r2, r4
 800588c:	4547      	cmp	r7, r8
 800588e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005892:	bf8c      	ite	hi
 8005894:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005898:	2200      	movls	r2, #0
 800589a:	4083      	lsls	r3, r0
 800589c:	40ca      	lsrs	r2, r1
 800589e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80058a2:	4313      	orrs	r3, r2
 80058a4:	e7de      	b.n	8005864 <__b2d+0x48>
 80058a6:	ea42 0501 	orr.w	r5, r2, r1
 80058aa:	e7db      	b.n	8005864 <__b2d+0x48>
 80058ac:	3ff00000 	.word	0x3ff00000

080058b0 <__d2b>:
 80058b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	460f      	mov	r7, r1
 80058b6:	2101      	movs	r1, #1
 80058b8:	ec59 8b10 	vmov	r8, r9, d0
 80058bc:	4616      	mov	r6, r2
 80058be:	f7ff fc13 	bl	80050e8 <_Balloc>
 80058c2:	4604      	mov	r4, r0
 80058c4:	b930      	cbnz	r0, 80058d4 <__d2b+0x24>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <__d2b+0xa8>)
 80058ca:	4824      	ldr	r0, [pc, #144]	@ (800595c <__d2b+0xac>)
 80058cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80058d0:	f000 fd08 	bl	80062e4 <__assert_func>
 80058d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058dc:	b10d      	cbz	r5, 80058e2 <__d2b+0x32>
 80058de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	f1b8 0300 	subs.w	r3, r8, #0
 80058e8:	d023      	beq.n	8005932 <__d2b+0x82>
 80058ea:	4668      	mov	r0, sp
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	f7ff fd0c 	bl	800530a <__lo0bits>
 80058f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058f6:	b1d0      	cbz	r0, 800592e <__d2b+0x7e>
 80058f8:	f1c0 0320 	rsb	r3, r0, #32
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	430b      	orrs	r3, r1
 8005902:	40c2      	lsrs	r2, r0
 8005904:	6163      	str	r3, [r4, #20]
 8005906:	9201      	str	r2, [sp, #4]
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	61a3      	str	r3, [r4, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2201      	moveq	r2, #1
 8005912:	2202      	movne	r2, #2
 8005914:	6122      	str	r2, [r4, #16]
 8005916:	b1a5      	cbz	r5, 8005942 <__d2b+0x92>
 8005918:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800591c:	4405      	add	r5, r0
 800591e:	603d      	str	r5, [r7, #0]
 8005920:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005924:	6030      	str	r0, [r6, #0]
 8005926:	4620      	mov	r0, r4
 8005928:	b003      	add	sp, #12
 800592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800592e:	6161      	str	r1, [r4, #20]
 8005930:	e7ea      	b.n	8005908 <__d2b+0x58>
 8005932:	a801      	add	r0, sp, #4
 8005934:	f7ff fce9 	bl	800530a <__lo0bits>
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	6163      	str	r3, [r4, #20]
 800593c:	3020      	adds	r0, #32
 800593e:	2201      	movs	r2, #1
 8005940:	e7e8      	b.n	8005914 <__d2b+0x64>
 8005942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005946:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800594a:	6038      	str	r0, [r7, #0]
 800594c:	6918      	ldr	r0, [r3, #16]
 800594e:	f7ff fcbd 	bl	80052cc <__hi0bits>
 8005952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005956:	e7e5      	b.n	8005924 <__d2b+0x74>
 8005958:	08006810 	.word	0x08006810
 800595c:	08006898 	.word	0x08006898

08005960 <__ratio>:
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	b085      	sub	sp, #20
 8005966:	e9cd 1000 	strd	r1, r0, [sp]
 800596a:	a902      	add	r1, sp, #8
 800596c:	f7ff ff56 	bl	800581c <__b2d>
 8005970:	9800      	ldr	r0, [sp, #0]
 8005972:	a903      	add	r1, sp, #12
 8005974:	ec55 4b10 	vmov	r4, r5, d0
 8005978:	f7ff ff50 	bl	800581c <__b2d>
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	6919      	ldr	r1, [r3, #16]
 8005980:	9b00      	ldr	r3, [sp, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	1ac9      	subs	r1, r1, r3
 8005986:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	ec5b ab10 	vmov	sl, fp, d0
 8005990:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005994:	2b00      	cmp	r3, #0
 8005996:	bfce      	itee	gt
 8005998:	462a      	movgt	r2, r5
 800599a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800599e:	465a      	movle	r2, fp
 80059a0:	462f      	mov	r7, r5
 80059a2:	46d9      	mov	r9, fp
 80059a4:	bfcc      	ite	gt
 80059a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80059aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80059ae:	464b      	mov	r3, r9
 80059b0:	4652      	mov	r2, sl
 80059b2:	4620      	mov	r0, r4
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fa ff69 	bl	800088c <__aeabi_ddiv>
 80059ba:	ec41 0b10 	vmov	d0, r0, r1
 80059be:	b005      	add	sp, #20
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059c4 <__copybits>:
 80059c4:	3901      	subs	r1, #1
 80059c6:	b570      	push	{r4, r5, r6, lr}
 80059c8:	1149      	asrs	r1, r1, #5
 80059ca:	6914      	ldr	r4, [r2, #16]
 80059cc:	3101      	adds	r1, #1
 80059ce:	f102 0314 	add.w	r3, r2, #20
 80059d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059da:	1f05      	subs	r5, r0, #4
 80059dc:	42a3      	cmp	r3, r4
 80059de:	d30c      	bcc.n	80059fa <__copybits+0x36>
 80059e0:	1aa3      	subs	r3, r4, r2
 80059e2:	3b11      	subs	r3, #17
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	3211      	adds	r2, #17
 80059ea:	42a2      	cmp	r2, r4
 80059ec:	bf88      	it	hi
 80059ee:	2300      	movhi	r3, #0
 80059f0:	4418      	add	r0, r3
 80059f2:	2300      	movs	r3, #0
 80059f4:	4288      	cmp	r0, r1
 80059f6:	d305      	bcc.n	8005a04 <__copybits+0x40>
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80059fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a02:	e7eb      	b.n	80059dc <__copybits+0x18>
 8005a04:	f840 3b04 	str.w	r3, [r0], #4
 8005a08:	e7f4      	b.n	80059f4 <__copybits+0x30>

08005a0a <__any_on>:
 8005a0a:	f100 0214 	add.w	r2, r0, #20
 8005a0e:	6900      	ldr	r0, [r0, #16]
 8005a10:	114b      	asrs	r3, r1, #5
 8005a12:	4298      	cmp	r0, r3
 8005a14:	b510      	push	{r4, lr}
 8005a16:	db11      	blt.n	8005a3c <__any_on+0x32>
 8005a18:	dd0a      	ble.n	8005a30 <__any_on+0x26>
 8005a1a:	f011 011f 	ands.w	r1, r1, #31
 8005a1e:	d007      	beq.n	8005a30 <__any_on+0x26>
 8005a20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a24:	fa24 f001 	lsr.w	r0, r4, r1
 8005a28:	fa00 f101 	lsl.w	r1, r0, r1
 8005a2c:	428c      	cmp	r4, r1
 8005a2e:	d10b      	bne.n	8005a48 <__any_on+0x3e>
 8005a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d803      	bhi.n	8005a40 <__any_on+0x36>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd10      	pop	{r4, pc}
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	e7f7      	b.n	8005a30 <__any_on+0x26>
 8005a40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d0f5      	beq.n	8005a34 <__any_on+0x2a>
 8005a48:	2001      	movs	r0, #1
 8005a4a:	e7f6      	b.n	8005a3a <__any_on+0x30>

08005a4c <__ascii_wctomb>:
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	b141      	cbz	r1, 8005a64 <__ascii_wctomb+0x18>
 8005a52:	2aff      	cmp	r2, #255	@ 0xff
 8005a54:	d904      	bls.n	8005a60 <__ascii_wctomb+0x14>
 8005a56:	228a      	movs	r2, #138	@ 0x8a
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	4770      	bx	lr
 8005a60:	700a      	strb	r2, [r1, #0]
 8005a62:	2001      	movs	r0, #1
 8005a64:	4770      	bx	lr

08005a66 <__ssputs_r>:
 8005a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6a:	688e      	ldr	r6, [r1, #8]
 8005a6c:	461f      	mov	r7, r3
 8005a6e:	42be      	cmp	r6, r7
 8005a70:	680b      	ldr	r3, [r1, #0]
 8005a72:	4682      	mov	sl, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	4690      	mov	r8, r2
 8005a78:	d82d      	bhi.n	8005ad6 <__ssputs_r+0x70>
 8005a7a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a7e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a82:	d026      	beq.n	8005ad2 <__ssputs_r+0x6c>
 8005a84:	6965      	ldr	r5, [r4, #20]
 8005a86:	6909      	ldr	r1, [r1, #16]
 8005a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a8c:	eba3 0901 	sub.w	r9, r3, r1
 8005a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a94:	1c7b      	adds	r3, r7, #1
 8005a96:	444b      	add	r3, r9
 8005a98:	106d      	asrs	r5, r5, #1
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	bf38      	it	cc
 8005a9e:	461d      	movcc	r5, r3
 8005aa0:	0553      	lsls	r3, r2, #21
 8005aa2:	d527      	bpl.n	8005af4 <__ssputs_r+0x8e>
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7ff fa81 	bl	8004fac <_malloc_r>
 8005aaa:	4606      	mov	r6, r0
 8005aac:	b360      	cbz	r0, 8005b08 <__ssputs_r+0xa2>
 8005aae:	6921      	ldr	r1, [r4, #16]
 8005ab0:	464a      	mov	r2, r9
 8005ab2:	f7fe febe 	bl	8004832 <memcpy>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	6126      	str	r6, [r4, #16]
 8005ac4:	6165      	str	r5, [r4, #20]
 8005ac6:	444e      	add	r6, r9
 8005ac8:	eba5 0509 	sub.w	r5, r5, r9
 8005acc:	6026      	str	r6, [r4, #0]
 8005ace:	60a5      	str	r5, [r4, #8]
 8005ad0:	463e      	mov	r6, r7
 8005ad2:	42be      	cmp	r6, r7
 8005ad4:	d900      	bls.n	8005ad8 <__ssputs_r+0x72>
 8005ad6:	463e      	mov	r6, r7
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	4632      	mov	r2, r6
 8005adc:	4641      	mov	r1, r8
 8005ade:	f000 fbb5 	bl	800624c <memmove>
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	1b9b      	subs	r3, r3, r6
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	4433      	add	r3, r6
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	2000      	movs	r0, #0
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	462a      	mov	r2, r5
 8005af6:	f000 fc2f 	bl	8006358 <_realloc_r>
 8005afa:	4606      	mov	r6, r0
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d1e0      	bne.n	8005ac2 <__ssputs_r+0x5c>
 8005b00:	6921      	ldr	r1, [r4, #16]
 8005b02:	4650      	mov	r0, sl
 8005b04:	f7fe feac 	bl	8004860 <_free_r>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	f8ca 3000 	str.w	r3, [sl]
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	e7e9      	b.n	8005af0 <__ssputs_r+0x8a>

08005b1c <_svfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	4698      	mov	r8, r3
 8005b22:	898b      	ldrh	r3, [r1, #12]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	b09d      	sub	sp, #116	@ 0x74
 8005b28:	4607      	mov	r7, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	d510      	bpl.n	8005b52 <_svfiprintf_r+0x36>
 8005b30:	690b      	ldr	r3, [r1, #16]
 8005b32:	b973      	cbnz	r3, 8005b52 <_svfiprintf_r+0x36>
 8005b34:	2140      	movs	r1, #64	@ 0x40
 8005b36:	f7ff fa39 	bl	8004fac <_malloc_r>
 8005b3a:	6028      	str	r0, [r5, #0]
 8005b3c:	6128      	str	r0, [r5, #16]
 8005b3e:	b930      	cbnz	r0, 8005b4e <_svfiprintf_r+0x32>
 8005b40:	230c      	movs	r3, #12
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	b01d      	add	sp, #116	@ 0x74
 8005b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	2340      	movs	r3, #64	@ 0x40
 8005b50:	616b      	str	r3, [r5, #20]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b56:	2320      	movs	r3, #32
 8005b58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b60:	2330      	movs	r3, #48	@ 0x30
 8005b62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d00 <_svfiprintf_r+0x1e4>
 8005b66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b6a:	f04f 0901 	mov.w	r9, #1
 8005b6e:	4623      	mov	r3, r4
 8005b70:	469a      	mov	sl, r3
 8005b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b76:	b10a      	cbz	r2, 8005b7c <_svfiprintf_r+0x60>
 8005b78:	2a25      	cmp	r2, #37	@ 0x25
 8005b7a:	d1f9      	bne.n	8005b70 <_svfiprintf_r+0x54>
 8005b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b80:	d00b      	beq.n	8005b9a <_svfiprintf_r+0x7e>
 8005b82:	465b      	mov	r3, fp
 8005b84:	4622      	mov	r2, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f7ff ff6c 	bl	8005a66 <__ssputs_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f000 80a7 	beq.w	8005ce2 <_svfiprintf_r+0x1c6>
 8005b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b96:	445a      	add	r2, fp
 8005b98:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 809f 	beq.w	8005ce2 <_svfiprintf_r+0x1c6>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bae:	f10a 0a01 	add.w	sl, sl, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	9307      	str	r3, [sp, #28]
 8005bb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bba:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bbc:	4654      	mov	r4, sl
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	484e      	ldr	r0, [pc, #312]	@ (8005d00 <_svfiprintf_r+0x1e4>)
 8005bc6:	f7fa fb2b 	bl	8000220 <memchr>
 8005bca:	9a04      	ldr	r2, [sp, #16]
 8005bcc:	b9d8      	cbnz	r0, 8005c06 <_svfiprintf_r+0xea>
 8005bce:	06d0      	lsls	r0, r2, #27
 8005bd0:	bf44      	itt	mi
 8005bd2:	2320      	movmi	r3, #32
 8005bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd8:	0711      	lsls	r1, r2, #28
 8005bda:	bf44      	itt	mi
 8005bdc:	232b      	movmi	r3, #43	@ 0x2b
 8005bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be2:	f89a 3000 	ldrb.w	r3, [sl]
 8005be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be8:	d015      	beq.n	8005c16 <_svfiprintf_r+0xfa>
 8005bea:	9a07      	ldr	r2, [sp, #28]
 8005bec:	4654      	mov	r4, sl
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f04f 0c0a 	mov.w	ip, #10
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bfa:	3b30      	subs	r3, #48	@ 0x30
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d94b      	bls.n	8005c98 <_svfiprintf_r+0x17c>
 8005c00:	b1b0      	cbz	r0, 8005c30 <_svfiprintf_r+0x114>
 8005c02:	9207      	str	r2, [sp, #28]
 8005c04:	e014      	b.n	8005c30 <_svfiprintf_r+0x114>
 8005c06:	eba0 0308 	sub.w	r3, r0, r8
 8005c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	46a2      	mov	sl, r4
 8005c14:	e7d2      	b.n	8005bbc <_svfiprintf_r+0xa0>
 8005c16:	9b03      	ldr	r3, [sp, #12]
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	9103      	str	r1, [sp, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bfbb      	ittet	lt
 8005c22:	425b      	neglt	r3, r3
 8005c24:	f042 0202 	orrlt.w	r2, r2, #2
 8005c28:	9307      	strge	r3, [sp, #28]
 8005c2a:	9307      	strlt	r3, [sp, #28]
 8005c2c:	bfb8      	it	lt
 8005c2e:	9204      	strlt	r2, [sp, #16]
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c34:	d10a      	bne.n	8005c4c <_svfiprintf_r+0x130>
 8005c36:	7863      	ldrb	r3, [r4, #1]
 8005c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3a:	d132      	bne.n	8005ca2 <_svfiprintf_r+0x186>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9203      	str	r2, [sp, #12]
 8005c44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c48:	3402      	adds	r4, #2
 8005c4a:	9305      	str	r3, [sp, #20]
 8005c4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d10 <_svfiprintf_r+0x1f4>
 8005c50:	7821      	ldrb	r1, [r4, #0]
 8005c52:	2203      	movs	r2, #3
 8005c54:	4650      	mov	r0, sl
 8005c56:	f7fa fae3 	bl	8000220 <memchr>
 8005c5a:	b138      	cbz	r0, 8005c6c <_svfiprintf_r+0x150>
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	eba0 000a 	sub.w	r0, r0, sl
 8005c62:	2240      	movs	r2, #64	@ 0x40
 8005c64:	4082      	lsls	r2, r0
 8005c66:	4313      	orrs	r3, r2
 8005c68:	3401      	adds	r4, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c70:	4824      	ldr	r0, [pc, #144]	@ (8005d04 <_svfiprintf_r+0x1e8>)
 8005c72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c76:	2206      	movs	r2, #6
 8005c78:	f7fa fad2 	bl	8000220 <memchr>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d036      	beq.n	8005cee <_svfiprintf_r+0x1d2>
 8005c80:	4b21      	ldr	r3, [pc, #132]	@ (8005d08 <_svfiprintf_r+0x1ec>)
 8005c82:	bb1b      	cbnz	r3, 8005ccc <_svfiprintf_r+0x1b0>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	3307      	adds	r3, #7
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	9303      	str	r3, [sp, #12]
 8005c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c92:	4433      	add	r3, r6
 8005c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c96:	e76a      	b.n	8005b6e <_svfiprintf_r+0x52>
 8005c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	e7a8      	b.n	8005bf4 <_svfiprintf_r+0xd8>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	3401      	adds	r4, #1
 8005ca6:	9305      	str	r3, [sp, #20]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f04f 0c0a 	mov.w	ip, #10
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cb4:	3a30      	subs	r2, #48	@ 0x30
 8005cb6:	2a09      	cmp	r2, #9
 8005cb8:	d903      	bls.n	8005cc2 <_svfiprintf_r+0x1a6>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0c6      	beq.n	8005c4c <_svfiprintf_r+0x130>
 8005cbe:	9105      	str	r1, [sp, #20]
 8005cc0:	e7c4      	b.n	8005c4c <_svfiprintf_r+0x130>
 8005cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e7f0      	b.n	8005cae <_svfiprintf_r+0x192>
 8005ccc:	ab03      	add	r3, sp, #12
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <_svfiprintf_r+0x1f0>)
 8005cd4:	a904      	add	r1, sp, #16
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	1c42      	adds	r2, r0, #1
 8005cde:	4606      	mov	r6, r0
 8005ce0:	d1d6      	bne.n	8005c90 <_svfiprintf_r+0x174>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	065b      	lsls	r3, r3, #25
 8005ce6:	f53f af2d 	bmi.w	8005b44 <_svfiprintf_r+0x28>
 8005cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cec:	e72c      	b.n	8005b48 <_svfiprintf_r+0x2c>
 8005cee:	ab03      	add	r3, sp, #12
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	462a      	mov	r2, r5
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <_svfiprintf_r+0x1f0>)
 8005cf6:	a904      	add	r1, sp, #16
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	f000 f879 	bl	8005df0 <_printf_i>
 8005cfe:	e7ed      	b.n	8005cdc <_svfiprintf_r+0x1c0>
 8005d00:	08006af1 	.word	0x08006af1
 8005d04:	08006afb 	.word	0x08006afb
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	08005a67 	.word	0x08005a67
 8005d10:	08006af7 	.word	0x08006af7

08005d14 <_printf_common>:
 8005d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	4616      	mov	r6, r2
 8005d1a:	4698      	mov	r8, r3
 8005d1c:	688a      	ldr	r2, [r1, #8]
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bfb8      	it	lt
 8005d28:	4613      	movlt	r3, r2
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d30:	4607      	mov	r7, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b10a      	cbz	r2, 8005d3a <_printf_common+0x26>
 8005d36:	3301      	adds	r3, #1
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	0699      	lsls	r1, r3, #26
 8005d3e:	bf42      	ittt	mi
 8005d40:	6833      	ldrmi	r3, [r6, #0]
 8005d42:	3302      	addmi	r3, #2
 8005d44:	6033      	strmi	r3, [r6, #0]
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	f015 0506 	ands.w	r5, r5, #6
 8005d4c:	d106      	bne.n	8005d5c <_printf_common+0x48>
 8005d4e:	f104 0a19 	add.w	sl, r4, #25
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	6832      	ldr	r2, [r6, #0]
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	dc26      	bgt.n	8005daa <_printf_common+0x96>
 8005d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	3b00      	subs	r3, #0
 8005d64:	bf18      	it	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	0692      	lsls	r2, r2, #26
 8005d6a:	d42b      	bmi.n	8005dc4 <_printf_common+0xb0>
 8005d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d70:	4641      	mov	r1, r8
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c8      	blx	r9
 8005d76:	3001      	adds	r0, #1
 8005d78:	d01e      	beq.n	8005db8 <_printf_common+0xa4>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	6922      	ldr	r2, [r4, #16]
 8005d7e:	f003 0306 	and.w	r3, r3, #6
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	bf02      	ittt	eq
 8005d86:	68e5      	ldreq	r5, [r4, #12]
 8005d88:	6833      	ldreq	r3, [r6, #0]
 8005d8a:	1aed      	subeq	r5, r5, r3
 8005d8c:	68a3      	ldr	r3, [r4, #8]
 8005d8e:	bf0c      	ite	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	2500      	movne	r5, #0
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bfc4      	itt	gt
 8005d9a:	1a9b      	subgt	r3, r3, r2
 8005d9c:	18ed      	addgt	r5, r5, r3
 8005d9e:	2600      	movs	r6, #0
 8005da0:	341a      	adds	r4, #26
 8005da2:	42b5      	cmp	r5, r6
 8005da4:	d11a      	bne.n	8005ddc <_printf_common+0xc8>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e008      	b.n	8005dbc <_printf_common+0xa8>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4641      	mov	r1, r8
 8005db0:	4638      	mov	r0, r7
 8005db2:	47c8      	blx	r9
 8005db4:	3001      	adds	r0, #1
 8005db6:	d103      	bne.n	8005dc0 <_printf_common+0xac>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7c6      	b.n	8005d52 <_printf_common+0x3e>
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	2030      	movs	r0, #48	@ 0x30
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dce:	4422      	add	r2, r4
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7c7      	b.n	8005d6c <_printf_common+0x58>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4622      	mov	r2, r4
 8005de0:	4641      	mov	r1, r8
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c8      	blx	r9
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0e6      	beq.n	8005db8 <_printf_common+0xa4>
 8005dea:	3601      	adds	r6, #1
 8005dec:	e7d9      	b.n	8005da2 <_printf_common+0x8e>
	...

08005df0 <_printf_i>:
 8005df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	7e0f      	ldrb	r7, [r1, #24]
 8005df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005df8:	2f78      	cmp	r7, #120	@ 0x78
 8005dfa:	4691      	mov	r9, r2
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	469a      	mov	sl, r3
 8005e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e06:	d807      	bhi.n	8005e18 <_printf_i+0x28>
 8005e08:	2f62      	cmp	r7, #98	@ 0x62
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x32>
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	f000 80d2 	beq.w	8005fb6 <_printf_i+0x1c6>
 8005e12:	2f58      	cmp	r7, #88	@ 0x58
 8005e14:	f000 80b9 	beq.w	8005f8a <_printf_i+0x19a>
 8005e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e20:	e03a      	b.n	8005e98 <_printf_i+0xa8>
 8005e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e26:	2b15      	cmp	r3, #21
 8005e28:	d8f6      	bhi.n	8005e18 <_printf_i+0x28>
 8005e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e30 <_printf_i+0x40>)
 8005e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e19 	.word	0x08005e19
 8005e3c:	08005e19 	.word	0x08005e19
 8005e40:	08005e19 	.word	0x08005e19
 8005e44:	08005e19 	.word	0x08005e19
 8005e48:	08005e9d 	.word	0x08005e9d
 8005e4c:	08005e19 	.word	0x08005e19
 8005e50:	08005e19 	.word	0x08005e19
 8005e54:	08005e19 	.word	0x08005e19
 8005e58:	08005e19 	.word	0x08005e19
 8005e5c:	08005f9d 	.word	0x08005f9d
 8005e60:	08005ec7 	.word	0x08005ec7
 8005e64:	08005f57 	.word	0x08005f57
 8005e68:	08005e19 	.word	0x08005e19
 8005e6c:	08005e19 	.word	0x08005e19
 8005e70:	08005fbf 	.word	0x08005fbf
 8005e74:	08005e19 	.word	0x08005e19
 8005e78:	08005ec7 	.word	0x08005ec7
 8005e7c:	08005e19 	.word	0x08005e19
 8005e80:	08005e19 	.word	0x08005e19
 8005e84:	08005f5f 	.word	0x08005f5f
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6032      	str	r2, [r6, #0]
 8005e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e09d      	b.n	8005fd8 <_printf_i+0x1e8>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	6031      	str	r1, [r6, #0]
 8005ea4:	0606      	lsls	r6, r0, #24
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0xbc>
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <_printf_i+0xc4>
 8005eac:	0645      	lsls	r5, r0, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0xb8>
 8005eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xd0>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	426d      	negs	r5, r5
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec0:	4859      	ldr	r0, [pc, #356]	@ (8006028 <_printf_i+0x238>)
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e011      	b.n	8005eea <_printf_i+0xfa>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	0608      	lsls	r0, r1, #24
 8005ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed0:	d402      	bmi.n	8005ed8 <_printf_i+0xe8>
 8005ed2:	0649      	lsls	r1, r1, #25
 8005ed4:	bf48      	it	mi
 8005ed6:	b2ad      	uxthmi	r5, r5
 8005ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eda:	4853      	ldr	r0, [pc, #332]	@ (8006028 <_printf_i+0x238>)
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	bf14      	ite	ne
 8005ee0:	230a      	movne	r3, #10
 8005ee2:	2308      	moveq	r3, #8
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eea:	6866      	ldr	r6, [r4, #4]
 8005eec:	60a6      	str	r6, [r4, #8]
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	bfa2      	ittt	ge
 8005ef2:	6821      	ldrge	r1, [r4, #0]
 8005ef4:	f021 0104 	bicge.w	r1, r1, #4
 8005ef8:	6021      	strge	r1, [r4, #0]
 8005efa:	b90d      	cbnz	r5, 8005f00 <_printf_i+0x110>
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	d04b      	beq.n	8005f98 <_printf_i+0x1a8>
 8005f00:	4616      	mov	r6, r2
 8005f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f06:	fb03 5711 	mls	r7, r3, r1, r5
 8005f0a:	5dc7      	ldrb	r7, [r0, r7]
 8005f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f10:	462f      	mov	r7, r5
 8005f12:	42bb      	cmp	r3, r7
 8005f14:	460d      	mov	r5, r1
 8005f16:	d9f4      	bls.n	8005f02 <_printf_i+0x112>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d10b      	bne.n	8005f34 <_printf_i+0x144>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07df      	lsls	r7, r3, #31
 8005f20:	d508      	bpl.n	8005f34 <_printf_i+0x144>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	6861      	ldr	r1, [r4, #4]
 8005f26:	4299      	cmp	r1, r3
 8005f28:	bfde      	ittt	le
 8005f2a:	2330      	movle	r3, #48	@ 0x30
 8005f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f34:	1b92      	subs	r2, r2, r6
 8005f36:	6122      	str	r2, [r4, #16]
 8005f38:	f8cd a000 	str.w	sl, [sp]
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	aa03      	add	r2, sp, #12
 8005f40:	4621      	mov	r1, r4
 8005f42:	4640      	mov	r0, r8
 8005f44:	f7ff fee6 	bl	8005d14 <_printf_common>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d14a      	bne.n	8005fe2 <_printf_i+0x1f2>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	b004      	add	sp, #16
 8005f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	4833      	ldr	r0, [pc, #204]	@ (800602c <_printf_i+0x23c>)
 8005f60:	2778      	movs	r7, #120	@ 0x78
 8005f62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6831      	ldr	r1, [r6, #0]
 8005f6a:	061f      	lsls	r7, r3, #24
 8005f6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f70:	d402      	bmi.n	8005f78 <_printf_i+0x188>
 8005f72:	065f      	lsls	r7, r3, #25
 8005f74:	bf48      	it	mi
 8005f76:	b2ad      	uxthmi	r5, r5
 8005f78:	6031      	str	r1, [r6, #0]
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	bf44      	itt	mi
 8005f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f82:	6023      	strmi	r3, [r4, #0]
 8005f84:	b11d      	cbz	r5, 8005f8e <_printf_i+0x19e>
 8005f86:	2310      	movs	r3, #16
 8005f88:	e7ac      	b.n	8005ee4 <_printf_i+0xf4>
 8005f8a:	4827      	ldr	r0, [pc, #156]	@ (8006028 <_printf_i+0x238>)
 8005f8c:	e7e9      	b.n	8005f62 <_printf_i+0x172>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	f023 0320 	bic.w	r3, r3, #32
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	e7f6      	b.n	8005f86 <_printf_i+0x196>
 8005f98:	4616      	mov	r6, r2
 8005f9a:	e7bd      	b.n	8005f18 <_printf_i+0x128>
 8005f9c:	6833      	ldr	r3, [r6, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	6961      	ldr	r1, [r4, #20]
 8005fa2:	1d18      	adds	r0, r3, #4
 8005fa4:	6030      	str	r0, [r6, #0]
 8005fa6:	062e      	lsls	r6, r5, #24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0x1c0>
 8005fac:	6019      	str	r1, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <_printf_i+0x1c6>
 8005fb0:	0668      	lsls	r0, r5, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0x1bc>
 8005fb4:	8019      	strh	r1, [r3, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	4616      	mov	r6, r2
 8005fbc:	e7bc      	b.n	8005f38 <_printf_i+0x148>
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	6032      	str	r2, [r6, #0]
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa f928 	bl	8000220 <memchr>
 8005fd0:	b108      	cbz	r0, 8005fd6 <_printf_i+0x1e6>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	6060      	str	r0, [r4, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe0:	e7aa      	b.n	8005f38 <_printf_i+0x148>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	47d0      	blx	sl
 8005fec:	3001      	adds	r0, #1
 8005fee:	d0ad      	beq.n	8005f4c <_printf_i+0x15c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	079b      	lsls	r3, r3, #30
 8005ff4:	d413      	bmi.n	800601e <_printf_i+0x22e>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	4618      	movlt	r0, r3
 8006000:	e7a6      	b.n	8005f50 <_printf_i+0x160>
 8006002:	2301      	movs	r3, #1
 8006004:	4632      	mov	r2, r6
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d09d      	beq.n	8005f4c <_printf_i+0x15c>
 8006010:	3501      	adds	r5, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	9903      	ldr	r1, [sp, #12]
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	42ab      	cmp	r3, r5
 800601a:	dcf2      	bgt.n	8006002 <_printf_i+0x212>
 800601c:	e7eb      	b.n	8005ff6 <_printf_i+0x206>
 800601e:	2500      	movs	r5, #0
 8006020:	f104 0619 	add.w	r6, r4, #25
 8006024:	e7f5      	b.n	8006012 <_printf_i+0x222>
 8006026:	bf00      	nop
 8006028:	08006b02 	.word	0x08006b02
 800602c:	08006b13 	.word	0x08006b13

08006030 <__sflush_r>:
 8006030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	0716      	lsls	r6, r2, #28
 800603a:	4605      	mov	r5, r0
 800603c:	460c      	mov	r4, r1
 800603e:	d454      	bmi.n	80060ea <__sflush_r+0xba>
 8006040:	684b      	ldr	r3, [r1, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc02      	bgt.n	800604c <__sflush_r+0x1c>
 8006046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd48      	ble.n	80060de <__sflush_r+0xae>
 800604c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800604e:	2e00      	cmp	r6, #0
 8006050:	d045      	beq.n	80060de <__sflush_r+0xae>
 8006052:	2300      	movs	r3, #0
 8006054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006058:	682f      	ldr	r7, [r5, #0]
 800605a:	6a21      	ldr	r1, [r4, #32]
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	d030      	beq.n	80060c2 <__sflush_r+0x92>
 8006060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	0759      	lsls	r1, r3, #29
 8006066:	d505      	bpl.n	8006074 <__sflush_r+0x44>
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800606e:	b10b      	cbz	r3, 8006074 <__sflush_r+0x44>
 8006070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006078:	6a21      	ldr	r1, [r4, #32]
 800607a:	4628      	mov	r0, r5
 800607c:	47b0      	blx	r6
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	d106      	bne.n	8006092 <__sflush_r+0x62>
 8006084:	6829      	ldr	r1, [r5, #0]
 8006086:	291d      	cmp	r1, #29
 8006088:	d82b      	bhi.n	80060e2 <__sflush_r+0xb2>
 800608a:	4a2a      	ldr	r2, [pc, #168]	@ (8006134 <__sflush_r+0x104>)
 800608c:	410a      	asrs	r2, r1
 800608e:	07d6      	lsls	r6, r2, #31
 8006090:	d427      	bmi.n	80060e2 <__sflush_r+0xb2>
 8006092:	2200      	movs	r2, #0
 8006094:	6062      	str	r2, [r4, #4]
 8006096:	04d9      	lsls	r1, r3, #19
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	d504      	bpl.n	80060a8 <__sflush_r+0x78>
 800609e:	1c42      	adds	r2, r0, #1
 80060a0:	d101      	bne.n	80060a6 <__sflush_r+0x76>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	b903      	cbnz	r3, 80060a8 <__sflush_r+0x78>
 80060a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80060a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060aa:	602f      	str	r7, [r5, #0]
 80060ac:	b1b9      	cbz	r1, 80060de <__sflush_r+0xae>
 80060ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d002      	beq.n	80060bc <__sflush_r+0x8c>
 80060b6:	4628      	mov	r0, r5
 80060b8:	f7fe fbd2 	bl	8004860 <_free_r>
 80060bc:	2300      	movs	r3, #0
 80060be:	6363      	str	r3, [r4, #52]	@ 0x34
 80060c0:	e00d      	b.n	80060de <__sflush_r+0xae>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b0      	blx	r6
 80060c8:	4602      	mov	r2, r0
 80060ca:	1c50      	adds	r0, r2, #1
 80060cc:	d1c9      	bne.n	8006062 <__sflush_r+0x32>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0c6      	beq.n	8006062 <__sflush_r+0x32>
 80060d4:	2b1d      	cmp	r3, #29
 80060d6:	d001      	beq.n	80060dc <__sflush_r+0xac>
 80060d8:	2b16      	cmp	r3, #22
 80060da:	d11e      	bne.n	800611a <__sflush_r+0xea>
 80060dc:	602f      	str	r7, [r5, #0]
 80060de:	2000      	movs	r0, #0
 80060e0:	e022      	b.n	8006128 <__sflush_r+0xf8>
 80060e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	e01b      	b.n	8006122 <__sflush_r+0xf2>
 80060ea:	690f      	ldr	r7, [r1, #16]
 80060ec:	2f00      	cmp	r7, #0
 80060ee:	d0f6      	beq.n	80060de <__sflush_r+0xae>
 80060f0:	0793      	lsls	r3, r2, #30
 80060f2:	680e      	ldr	r6, [r1, #0]
 80060f4:	bf08      	it	eq
 80060f6:	694b      	ldreq	r3, [r1, #20]
 80060f8:	600f      	str	r7, [r1, #0]
 80060fa:	bf18      	it	ne
 80060fc:	2300      	movne	r3, #0
 80060fe:	eba6 0807 	sub.w	r8, r6, r7
 8006102:	608b      	str	r3, [r1, #8]
 8006104:	f1b8 0f00 	cmp.w	r8, #0
 8006108:	dde9      	ble.n	80060de <__sflush_r+0xae>
 800610a:	6a21      	ldr	r1, [r4, #32]
 800610c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800610e:	4643      	mov	r3, r8
 8006110:	463a      	mov	r2, r7
 8006112:	4628      	mov	r0, r5
 8006114:	47b0      	blx	r6
 8006116:	2800      	cmp	r0, #0
 8006118:	dc08      	bgt.n	800612c <__sflush_r+0xfc>
 800611a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800612c:	4407      	add	r7, r0
 800612e:	eba8 0800 	sub.w	r8, r8, r0
 8006132:	e7e7      	b.n	8006104 <__sflush_r+0xd4>
 8006134:	dfbffffe 	.word	0xdfbffffe

08006138 <_fflush_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	690b      	ldr	r3, [r1, #16]
 800613c:	4605      	mov	r5, r0
 800613e:	460c      	mov	r4, r1
 8006140:	b913      	cbnz	r3, 8006148 <_fflush_r+0x10>
 8006142:	2500      	movs	r5, #0
 8006144:	4628      	mov	r0, r5
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	b118      	cbz	r0, 8006152 <_fflush_r+0x1a>
 800614a:	6a03      	ldr	r3, [r0, #32]
 800614c:	b90b      	cbnz	r3, 8006152 <_fflush_r+0x1a>
 800614e:	f7fe f943 	bl	80043d8 <__sinit>
 8006152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f3      	beq.n	8006142 <_fflush_r+0xa>
 800615a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800615c:	07d0      	lsls	r0, r2, #31
 800615e:	d404      	bmi.n	800616a <_fflush_r+0x32>
 8006160:	0599      	lsls	r1, r3, #22
 8006162:	d402      	bmi.n	800616a <_fflush_r+0x32>
 8006164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006166:	f7fe fb62 	bl	800482e <__retarget_lock_acquire_recursive>
 800616a:	4628      	mov	r0, r5
 800616c:	4621      	mov	r1, r4
 800616e:	f7ff ff5f 	bl	8006030 <__sflush_r>
 8006172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006174:	07da      	lsls	r2, r3, #31
 8006176:	4605      	mov	r5, r0
 8006178:	d4e4      	bmi.n	8006144 <_fflush_r+0xc>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	059b      	lsls	r3, r3, #22
 800617e:	d4e1      	bmi.n	8006144 <_fflush_r+0xc>
 8006180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006182:	f7fe fb55 	bl	8004830 <__retarget_lock_release_recursive>
 8006186:	e7dd      	b.n	8006144 <_fflush_r+0xc>

08006188 <__swhatbuf_r>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	460c      	mov	r4, r1
 800618c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006190:	2900      	cmp	r1, #0
 8006192:	b096      	sub	sp, #88	@ 0x58
 8006194:	4615      	mov	r5, r2
 8006196:	461e      	mov	r6, r3
 8006198:	da0d      	bge.n	80061b6 <__swhatbuf_r+0x2e>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061a0:	f04f 0100 	mov.w	r1, #0
 80061a4:	bf14      	ite	ne
 80061a6:	2340      	movne	r3, #64	@ 0x40
 80061a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061ac:	2000      	movs	r0, #0
 80061ae:	6031      	str	r1, [r6, #0]
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	b016      	add	sp, #88	@ 0x58
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	466a      	mov	r2, sp
 80061b8:	f000 f862 	bl	8006280 <_fstat_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	dbec      	blt.n	800619a <__swhatbuf_r+0x12>
 80061c0:	9901      	ldr	r1, [sp, #4]
 80061c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061ca:	4259      	negs	r1, r3
 80061cc:	4159      	adcs	r1, r3
 80061ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061d2:	e7eb      	b.n	80061ac <__swhatbuf_r+0x24>

080061d4 <__smakebuf_r>:
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d8:	079d      	lsls	r5, r3, #30
 80061da:	4606      	mov	r6, r0
 80061dc:	460c      	mov	r4, r1
 80061de:	d507      	bpl.n	80061f0 <__smakebuf_r+0x1c>
 80061e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	2301      	movs	r3, #1
 80061ea:	6163      	str	r3, [r4, #20]
 80061ec:	b003      	add	sp, #12
 80061ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f0:	ab01      	add	r3, sp, #4
 80061f2:	466a      	mov	r2, sp
 80061f4:	f7ff ffc8 	bl	8006188 <__swhatbuf_r>
 80061f8:	9f00      	ldr	r7, [sp, #0]
 80061fa:	4605      	mov	r5, r0
 80061fc:	4639      	mov	r1, r7
 80061fe:	4630      	mov	r0, r6
 8006200:	f7fe fed4 	bl	8004fac <_malloc_r>
 8006204:	b948      	cbnz	r0, 800621a <__smakebuf_r+0x46>
 8006206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620a:	059a      	lsls	r2, r3, #22
 800620c:	d4ee      	bmi.n	80061ec <__smakebuf_r+0x18>
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	f043 0302 	orr.w	r3, r3, #2
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	e7e2      	b.n	80061e0 <__smakebuf_r+0xc>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	6020      	str	r0, [r4, #0]
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800622a:	b15b      	cbz	r3, 8006244 <__smakebuf_r+0x70>
 800622c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006230:	4630      	mov	r0, r6
 8006232:	f000 f837 	bl	80062a4 <_isatty_r>
 8006236:	b128      	cbz	r0, 8006244 <__smakebuf_r+0x70>
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	431d      	orrs	r5, r3
 8006248:	81a5      	strh	r5, [r4, #12]
 800624a:	e7cf      	b.n	80061ec <__smakebuf_r+0x18>

0800624c <memmove>:
 800624c:	4288      	cmp	r0, r1
 800624e:	b510      	push	{r4, lr}
 8006250:	eb01 0402 	add.w	r4, r1, r2
 8006254:	d902      	bls.n	800625c <memmove+0x10>
 8006256:	4284      	cmp	r4, r0
 8006258:	4623      	mov	r3, r4
 800625a:	d807      	bhi.n	800626c <memmove+0x20>
 800625c:	1e43      	subs	r3, r0, #1
 800625e:	42a1      	cmp	r1, r4
 8006260:	d008      	beq.n	8006274 <memmove+0x28>
 8006262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800626a:	e7f8      	b.n	800625e <memmove+0x12>
 800626c:	4402      	add	r2, r0
 800626e:	4601      	mov	r1, r0
 8006270:	428a      	cmp	r2, r1
 8006272:	d100      	bne.n	8006276 <memmove+0x2a>
 8006274:	bd10      	pop	{r4, pc}
 8006276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800627a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800627e:	e7f7      	b.n	8006270 <memmove+0x24>

08006280 <_fstat_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	@ (80062a0 <_fstat_r+0x20>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f7fb fa94 	bl	80017ba <_fstat>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d102      	bne.n	800629c <_fstat_r+0x1c>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	b103      	cbz	r3, 800629c <_fstat_r+0x1c>
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	200004b8 	.word	0x200004b8

080062a4 <_isatty_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d06      	ldr	r5, [pc, #24]	@ (80062c0 <_isatty_r+0x1c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fb fa93 	bl	80017da <_isatty>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_isatty_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_isatty_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	200004b8 	.word	0x200004b8

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	@ (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fb fa9c 	bl	800180c <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	200004b8 	.word	0x200004b8

080062e4 <__assert_func>:
 80062e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062e6:	4614      	mov	r4, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	4b09      	ldr	r3, [pc, #36]	@ (8006310 <__assert_func+0x2c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4605      	mov	r5, r0
 80062f0:	68d8      	ldr	r0, [r3, #12]
 80062f2:	b954      	cbnz	r4, 800630a <__assert_func+0x26>
 80062f4:	4b07      	ldr	r3, [pc, #28]	@ (8006314 <__assert_func+0x30>)
 80062f6:	461c      	mov	r4, r3
 80062f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062fc:	9100      	str	r1, [sp, #0]
 80062fe:	462b      	mov	r3, r5
 8006300:	4905      	ldr	r1, [pc, #20]	@ (8006318 <__assert_func+0x34>)
 8006302:	f000 f857 	bl	80063b4 <fiprintf>
 8006306:	f000 f867 	bl	80063d8 <abort>
 800630a:	4b04      	ldr	r3, [pc, #16]	@ (800631c <__assert_func+0x38>)
 800630c:	e7f4      	b.n	80062f8 <__assert_func+0x14>
 800630e:	bf00      	nop
 8006310:	20000194 	.word	0x20000194
 8006314:	08006b5f 	.word	0x08006b5f
 8006318:	08006b31 	.word	0x08006b31
 800631c:	08006b24 	.word	0x08006b24

08006320 <_calloc_r>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	fba1 5402 	umull	r5, r4, r1, r2
 8006326:	b93c      	cbnz	r4, 8006338 <_calloc_r+0x18>
 8006328:	4629      	mov	r1, r5
 800632a:	f7fe fe3f 	bl	8004fac <_malloc_r>
 800632e:	4606      	mov	r6, r0
 8006330:	b928      	cbnz	r0, 800633e <_calloc_r+0x1e>
 8006332:	2600      	movs	r6, #0
 8006334:	4630      	mov	r0, r6
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	220c      	movs	r2, #12
 800633a:	6002      	str	r2, [r0, #0]
 800633c:	e7f9      	b.n	8006332 <_calloc_r+0x12>
 800633e:	462a      	mov	r2, r5
 8006340:	4621      	mov	r1, r4
 8006342:	f7fe f9e9 	bl	8004718 <memset>
 8006346:	e7f5      	b.n	8006334 <_calloc_r+0x14>

08006348 <malloc>:
 8006348:	4b02      	ldr	r3, [pc, #8]	@ (8006354 <malloc+0xc>)
 800634a:	4601      	mov	r1, r0
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	f7fe be2d 	b.w	8004fac <_malloc_r>
 8006352:	bf00      	nop
 8006354:	20000194 	.word	0x20000194

08006358 <_realloc_r>:
 8006358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635c:	4680      	mov	r8, r0
 800635e:	4615      	mov	r5, r2
 8006360:	460c      	mov	r4, r1
 8006362:	b921      	cbnz	r1, 800636e <_realloc_r+0x16>
 8006364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4611      	mov	r1, r2
 800636a:	f7fe be1f 	b.w	8004fac <_malloc_r>
 800636e:	b92a      	cbnz	r2, 800637c <_realloc_r+0x24>
 8006370:	f7fe fa76 	bl	8004860 <_free_r>
 8006374:	2400      	movs	r4, #0
 8006376:	4620      	mov	r0, r4
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	f000 f833 	bl	80063e6 <_malloc_usable_size_r>
 8006380:	4285      	cmp	r5, r0
 8006382:	4606      	mov	r6, r0
 8006384:	d802      	bhi.n	800638c <_realloc_r+0x34>
 8006386:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800638a:	d8f4      	bhi.n	8006376 <_realloc_r+0x1e>
 800638c:	4629      	mov	r1, r5
 800638e:	4640      	mov	r0, r8
 8006390:	f7fe fe0c 	bl	8004fac <_malloc_r>
 8006394:	4607      	mov	r7, r0
 8006396:	2800      	cmp	r0, #0
 8006398:	d0ec      	beq.n	8006374 <_realloc_r+0x1c>
 800639a:	42b5      	cmp	r5, r6
 800639c:	462a      	mov	r2, r5
 800639e:	4621      	mov	r1, r4
 80063a0:	bf28      	it	cs
 80063a2:	4632      	movcs	r2, r6
 80063a4:	f7fe fa45 	bl	8004832 <memcpy>
 80063a8:	4621      	mov	r1, r4
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7fe fa58 	bl	8004860 <_free_r>
 80063b0:	463c      	mov	r4, r7
 80063b2:	e7e0      	b.n	8006376 <_realloc_r+0x1e>

080063b4 <fiprintf>:
 80063b4:	b40e      	push	{r1, r2, r3}
 80063b6:	b503      	push	{r0, r1, lr}
 80063b8:	4601      	mov	r1, r0
 80063ba:	ab03      	add	r3, sp, #12
 80063bc:	4805      	ldr	r0, [pc, #20]	@ (80063d4 <fiprintf+0x20>)
 80063be:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c2:	6800      	ldr	r0, [r0, #0]
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	f000 f83f 	bl	8006448 <_vfiprintf_r>
 80063ca:	b002      	add	sp, #8
 80063cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d0:	b003      	add	sp, #12
 80063d2:	4770      	bx	lr
 80063d4:	20000194 	.word	0x20000194

080063d8 <abort>:
 80063d8:	b508      	push	{r3, lr}
 80063da:	2006      	movs	r0, #6
 80063dc:	f000 f974 	bl	80066c8 <raise>
 80063e0:	2001      	movs	r0, #1
 80063e2:	f7fb f99a 	bl	800171a <_exit>

080063e6 <_malloc_usable_size_r>:
 80063e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ea:	1f18      	subs	r0, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfbc      	itt	lt
 80063f0:	580b      	ldrlt	r3, [r1, r0]
 80063f2:	18c0      	addlt	r0, r0, r3
 80063f4:	4770      	bx	lr

080063f6 <__sfputc_r>:
 80063f6:	6893      	ldr	r3, [r2, #8]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	b410      	push	{r4}
 80063fe:	6093      	str	r3, [r2, #8]
 8006400:	da08      	bge.n	8006414 <__sfputc_r+0x1e>
 8006402:	6994      	ldr	r4, [r2, #24]
 8006404:	42a3      	cmp	r3, r4
 8006406:	db01      	blt.n	800640c <__sfputc_r+0x16>
 8006408:	290a      	cmp	r1, #10
 800640a:	d103      	bne.n	8006414 <__sfputc_r+0x1e>
 800640c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006410:	f7fe b8ed 	b.w	80045ee <__swbuf_r>
 8006414:	6813      	ldr	r3, [r2, #0]
 8006416:	1c58      	adds	r0, r3, #1
 8006418:	6010      	str	r0, [r2, #0]
 800641a:	7019      	strb	r1, [r3, #0]
 800641c:	4608      	mov	r0, r1
 800641e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006422:	4770      	bx	lr

08006424 <__sfputs_r>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	4614      	mov	r4, r2
 800642c:	18d5      	adds	r5, r2, r3
 800642e:	42ac      	cmp	r4, r5
 8006430:	d101      	bne.n	8006436 <__sfputs_r+0x12>
 8006432:	2000      	movs	r0, #0
 8006434:	e007      	b.n	8006446 <__sfputs_r+0x22>
 8006436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643a:	463a      	mov	r2, r7
 800643c:	4630      	mov	r0, r6
 800643e:	f7ff ffda 	bl	80063f6 <__sfputc_r>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d1f3      	bne.n	800642e <__sfputs_r+0xa>
 8006446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006448 <_vfiprintf_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	460d      	mov	r5, r1
 800644e:	b09d      	sub	sp, #116	@ 0x74
 8006450:	4614      	mov	r4, r2
 8006452:	4698      	mov	r8, r3
 8006454:	4606      	mov	r6, r0
 8006456:	b118      	cbz	r0, 8006460 <_vfiprintf_r+0x18>
 8006458:	6a03      	ldr	r3, [r0, #32]
 800645a:	b90b      	cbnz	r3, 8006460 <_vfiprintf_r+0x18>
 800645c:	f7fd ffbc 	bl	80043d8 <__sinit>
 8006460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006462:	07d9      	lsls	r1, r3, #31
 8006464:	d405      	bmi.n	8006472 <_vfiprintf_r+0x2a>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	059a      	lsls	r2, r3, #22
 800646a:	d402      	bmi.n	8006472 <_vfiprintf_r+0x2a>
 800646c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800646e:	f7fe f9de 	bl	800482e <__retarget_lock_acquire_recursive>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	071b      	lsls	r3, r3, #28
 8006476:	d501      	bpl.n	800647c <_vfiprintf_r+0x34>
 8006478:	692b      	ldr	r3, [r5, #16]
 800647a:	b99b      	cbnz	r3, 80064a4 <_vfiprintf_r+0x5c>
 800647c:	4629      	mov	r1, r5
 800647e:	4630      	mov	r0, r6
 8006480:	f7fe f8f4 	bl	800466c <__swsetup_r>
 8006484:	b170      	cbz	r0, 80064a4 <_vfiprintf_r+0x5c>
 8006486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006488:	07dc      	lsls	r4, r3, #31
 800648a:	d504      	bpl.n	8006496 <_vfiprintf_r+0x4e>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	b01d      	add	sp, #116	@ 0x74
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	0598      	lsls	r0, r3, #22
 800649a:	d4f7      	bmi.n	800648c <_vfiprintf_r+0x44>
 800649c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800649e:	f7fe f9c7 	bl	8004830 <__retarget_lock_release_recursive>
 80064a2:	e7f3      	b.n	800648c <_vfiprintf_r+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b2:	2330      	movs	r3, #48	@ 0x30
 80064b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006664 <_vfiprintf_r+0x21c>
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064bc:	f04f 0901 	mov.w	r9, #1
 80064c0:	4623      	mov	r3, r4
 80064c2:	469a      	mov	sl, r3
 80064c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c8:	b10a      	cbz	r2, 80064ce <_vfiprintf_r+0x86>
 80064ca:	2a25      	cmp	r2, #37	@ 0x25
 80064cc:	d1f9      	bne.n	80064c2 <_vfiprintf_r+0x7a>
 80064ce:	ebba 0b04 	subs.w	fp, sl, r4
 80064d2:	d00b      	beq.n	80064ec <_vfiprintf_r+0xa4>
 80064d4:	465b      	mov	r3, fp
 80064d6:	4622      	mov	r2, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ffa2 	bl	8006424 <__sfputs_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	f000 80a7 	beq.w	8006634 <_vfiprintf_r+0x1ec>
 80064e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e8:	445a      	add	r2, fp
 80064ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 809f 	beq.w	8006634 <_vfiprintf_r+0x1ec>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800650c:	931a      	str	r3, [sp, #104]	@ 0x68
 800650e:	4654      	mov	r4, sl
 8006510:	2205      	movs	r2, #5
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4853      	ldr	r0, [pc, #332]	@ (8006664 <_vfiprintf_r+0x21c>)
 8006518:	f7f9 fe82 	bl	8000220 <memchr>
 800651c:	9a04      	ldr	r2, [sp, #16]
 800651e:	b9d8      	cbnz	r0, 8006558 <_vfiprintf_r+0x110>
 8006520:	06d1      	lsls	r1, r2, #27
 8006522:	bf44      	itt	mi
 8006524:	2320      	movmi	r3, #32
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800652a:	0713      	lsls	r3, r2, #28
 800652c:	bf44      	itt	mi
 800652e:	232b      	movmi	r3, #43	@ 0x2b
 8006530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006534:	f89a 3000 	ldrb.w	r3, [sl]
 8006538:	2b2a      	cmp	r3, #42	@ 0x2a
 800653a:	d015      	beq.n	8006568 <_vfiprintf_r+0x120>
 800653c:	9a07      	ldr	r2, [sp, #28]
 800653e:	4654      	mov	r4, sl
 8006540:	2000      	movs	r0, #0
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4621      	mov	r1, r4
 8006548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654c:	3b30      	subs	r3, #48	@ 0x30
 800654e:	2b09      	cmp	r3, #9
 8006550:	d94b      	bls.n	80065ea <_vfiprintf_r+0x1a2>
 8006552:	b1b0      	cbz	r0, 8006582 <_vfiprintf_r+0x13a>
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	e014      	b.n	8006582 <_vfiprintf_r+0x13a>
 8006558:	eba0 0308 	sub.w	r3, r0, r8
 800655c:	fa09 f303 	lsl.w	r3, r9, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	46a2      	mov	sl, r4
 8006566:	e7d2      	b.n	800650e <_vfiprintf_r+0xc6>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbb      	ittet	lt
 8006574:	425b      	neglt	r3, r3
 8006576:	f042 0202 	orrlt.w	r2, r2, #2
 800657a:	9307      	strge	r3, [sp, #28]
 800657c:	9307      	strlt	r3, [sp, #28]
 800657e:	bfb8      	it	lt
 8006580:	9204      	strlt	r2, [sp, #16]
 8006582:	7823      	ldrb	r3, [r4, #0]
 8006584:	2b2e      	cmp	r3, #46	@ 0x2e
 8006586:	d10a      	bne.n	800659e <_vfiprintf_r+0x156>
 8006588:	7863      	ldrb	r3, [r4, #1]
 800658a:	2b2a      	cmp	r3, #42	@ 0x2a
 800658c:	d132      	bne.n	80065f4 <_vfiprintf_r+0x1ac>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800659a:	3402      	adds	r4, #2
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006674 <_vfiprintf_r+0x22c>
 80065a2:	7821      	ldrb	r1, [r4, #0]
 80065a4:	2203      	movs	r2, #3
 80065a6:	4650      	mov	r0, sl
 80065a8:	f7f9 fe3a 	bl	8000220 <memchr>
 80065ac:	b138      	cbz	r0, 80065be <_vfiprintf_r+0x176>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	eba0 000a 	sub.w	r0, r0, sl
 80065b4:	2240      	movs	r2, #64	@ 0x40
 80065b6:	4082      	lsls	r2, r0
 80065b8:	4313      	orrs	r3, r2
 80065ba:	3401      	adds	r4, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c2:	4829      	ldr	r0, [pc, #164]	@ (8006668 <_vfiprintf_r+0x220>)
 80065c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065c8:	2206      	movs	r2, #6
 80065ca:	f7f9 fe29 	bl	8000220 <memchr>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d03f      	beq.n	8006652 <_vfiprintf_r+0x20a>
 80065d2:	4b26      	ldr	r3, [pc, #152]	@ (800666c <_vfiprintf_r+0x224>)
 80065d4:	bb1b      	cbnz	r3, 800661e <_vfiprintf_r+0x1d6>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	3307      	adds	r3, #7
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	3308      	adds	r3, #8
 80065e0:	9303      	str	r3, [sp, #12]
 80065e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e4:	443b      	add	r3, r7
 80065e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e8:	e76a      	b.n	80064c0 <_vfiprintf_r+0x78>
 80065ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ee:	460c      	mov	r4, r1
 80065f0:	2001      	movs	r0, #1
 80065f2:	e7a8      	b.n	8006546 <_vfiprintf_r+0xfe>
 80065f4:	2300      	movs	r3, #0
 80065f6:	3401      	adds	r4, #1
 80065f8:	9305      	str	r3, [sp, #20]
 80065fa:	4619      	mov	r1, r3
 80065fc:	f04f 0c0a 	mov.w	ip, #10
 8006600:	4620      	mov	r0, r4
 8006602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006606:	3a30      	subs	r2, #48	@ 0x30
 8006608:	2a09      	cmp	r2, #9
 800660a:	d903      	bls.n	8006614 <_vfiprintf_r+0x1cc>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0c6      	beq.n	800659e <_vfiprintf_r+0x156>
 8006610:	9105      	str	r1, [sp, #20]
 8006612:	e7c4      	b.n	800659e <_vfiprintf_r+0x156>
 8006614:	fb0c 2101 	mla	r1, ip, r1, r2
 8006618:	4604      	mov	r4, r0
 800661a:	2301      	movs	r3, #1
 800661c:	e7f0      	b.n	8006600 <_vfiprintf_r+0x1b8>
 800661e:	ab03      	add	r3, sp, #12
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	462a      	mov	r2, r5
 8006624:	4b12      	ldr	r3, [pc, #72]	@ (8006670 <_vfiprintf_r+0x228>)
 8006626:	a904      	add	r1, sp, #16
 8006628:	4630      	mov	r0, r6
 800662a:	f3af 8000 	nop.w
 800662e:	4607      	mov	r7, r0
 8006630:	1c78      	adds	r0, r7, #1
 8006632:	d1d6      	bne.n	80065e2 <_vfiprintf_r+0x19a>
 8006634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006636:	07d9      	lsls	r1, r3, #31
 8006638:	d405      	bmi.n	8006646 <_vfiprintf_r+0x1fe>
 800663a:	89ab      	ldrh	r3, [r5, #12]
 800663c:	059a      	lsls	r2, r3, #22
 800663e:	d402      	bmi.n	8006646 <_vfiprintf_r+0x1fe>
 8006640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006642:	f7fe f8f5 	bl	8004830 <__retarget_lock_release_recursive>
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	065b      	lsls	r3, r3, #25
 800664a:	f53f af1f 	bmi.w	800648c <_vfiprintf_r+0x44>
 800664e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006650:	e71e      	b.n	8006490 <_vfiprintf_r+0x48>
 8006652:	ab03      	add	r3, sp, #12
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	462a      	mov	r2, r5
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <_vfiprintf_r+0x228>)
 800665a:	a904      	add	r1, sp, #16
 800665c:	4630      	mov	r0, r6
 800665e:	f7ff fbc7 	bl	8005df0 <_printf_i>
 8006662:	e7e4      	b.n	800662e <_vfiprintf_r+0x1e6>
 8006664:	08006af1 	.word	0x08006af1
 8006668:	08006afb 	.word	0x08006afb
 800666c:	00000000 	.word	0x00000000
 8006670:	08006425 	.word	0x08006425
 8006674:	08006af7 	.word	0x08006af7

08006678 <_raise_r>:
 8006678:	291f      	cmp	r1, #31
 800667a:	b538      	push	{r3, r4, r5, lr}
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	d904      	bls.n	800668c <_raise_r+0x14>
 8006682:	2316      	movs	r3, #22
 8006684:	6003      	str	r3, [r0, #0]
 8006686:	f04f 30ff 	mov.w	r0, #4294967295
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800668e:	b112      	cbz	r2, 8006696 <_raise_r+0x1e>
 8006690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006694:	b94b      	cbnz	r3, 80066aa <_raise_r+0x32>
 8006696:	4628      	mov	r0, r5
 8006698:	f000 f830 	bl	80066fc <_getpid_r>
 800669c:	4622      	mov	r2, r4
 800669e:	4601      	mov	r1, r0
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066a6:	f000 b817 	b.w	80066d8 <_kill_r>
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d00a      	beq.n	80066c4 <_raise_r+0x4c>
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	d103      	bne.n	80066ba <_raise_r+0x42>
 80066b2:	2316      	movs	r3, #22
 80066b4:	6003      	str	r3, [r0, #0]
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7e7      	b.n	800668a <_raise_r+0x12>
 80066ba:	2100      	movs	r1, #0
 80066bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066c0:	4620      	mov	r0, r4
 80066c2:	4798      	blx	r3
 80066c4:	2000      	movs	r0, #0
 80066c6:	e7e0      	b.n	800668a <_raise_r+0x12>

080066c8 <raise>:
 80066c8:	4b02      	ldr	r3, [pc, #8]	@ (80066d4 <raise+0xc>)
 80066ca:	4601      	mov	r1, r0
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	f7ff bfd3 	b.w	8006678 <_raise_r>
 80066d2:	bf00      	nop
 80066d4:	20000194 	.word	0x20000194

080066d8 <_kill_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d07      	ldr	r5, [pc, #28]	@ (80066f8 <_kill_r+0x20>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fb f808 	bl	80016fa <_kill>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_kill_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_kill_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	200004b8 	.word	0x200004b8

080066fc <_getpid_r>:
 80066fc:	f7fa bff5 	b.w	80016ea <_getpid>

08006700 <_init>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr

0800670c <_fini>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr
