
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005314  08005314  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800531c  0800531c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005324  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  0800538c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800538c  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d869  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b1  00000000  00000000  00014901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000169b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096f  00000000  00000000  000175d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c8a  00000000  00000000  00017f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe6a  00000000  00000000  0001abd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf791  00000000  00000000  0002aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa1cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000fa210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fdc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005278 	.word	0x08005278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005278 	.word	0x08005278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fc35 	bl	8000e14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f831 	bl	8000610 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f955 	bl	800085c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f929 	bl	8000808 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80005b6:	f000 f8fd 	bl	80007b4 <MX_UART4_Init>
	MX_CAN1_Init();
 80005ba:	f000 f897 	bl	80006ec <MX_CAN1_Init>
	MX_I2C1_Init();
 80005be:	f000 f8cb 	bl	8000758 <MX_I2C1_Init>
		BMP280_init();
		HAL_CAN_Start(&hcan1);

		// Activation de la réception UART
		HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);*/
	printf("=======demarage Systeme=======\r\n");
 80005c2:	4810      	ldr	r0, [pc, #64]	@ (8000604 <main+0x64>)
 80005c4:	f004 f8a2 	bl	800470c <puts>

	uint8_t reg = BMP280_ID_REG;
 80005c8:	23d0      	movs	r3, #208	@ 0xd0
 80005ca:	71fb      	strb	r3, [r7, #7]

	uint8_t bmp280_id = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 80005d0:	1dfa      	adds	r2, r7, #7
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	21ee      	movs	r1, #238	@ 0xee
 80005dc:	480a      	ldr	r0, [pc, #40]	@ (8000608 <main+0x68>)
 80005de:	f001 fa1d 	bl	8001a1c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDRESS, &bmp280_id, 1, HAL_MAX_DELAY);
 80005e2:	1dba      	adds	r2, r7, #6
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	21ee      	movs	r1, #238	@ 0xee
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <main+0x68>)
 80005f0:	f001 fb12 	bl	8001c18 <HAL_I2C_Master_Receive>

	printf("registre ID: 0x%02X\r\n", bmp280_id);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <main+0x6c>)
 80005fa:	f004 f81f 	bl	800463c <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x5e>
 8000602:	bf00      	nop
 8000604:	08005290 	.word	0x08005290
 8000608:	200000ac 	.word	0x200000ac
 800060c:	080052b0 	.word	0x080052b0

08000610 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f954 	bl	80048cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a29      	ldr	r2, [pc, #164]	@ (80006e4 <SystemClock_Config+0xd4>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065c:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800068c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fbbc 	bl	8002e1c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80006aa:	f000 f945 	bl	8000938 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f85c 	bl	8002788 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xca>
	{
		Error_Handler();
 80006d6:	f000 f92f 	bl	8000938 <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_CAN1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_CAN1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_CAN1_Init+0x64>)
 80006f8:	2206      	movs	r2, #6
 80006fa:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_CAN1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_CAN1_Init+0x64>)
 800070a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800070e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000712:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000716:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_CAN1_Init+0x64>)
 800073e:	f000 fbdb 	bl	8000ef8 <HAL_CAN_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000748:	f000 f8f6 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000084 	.word	0x20000084
 8000754:	40006400 	.word	0x40006400

08000758 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800077a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f000 fffd 	bl	8001794 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007a0:	f000 f8ca 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000ac 	.word	0x200000ac
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_UART4_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_UART4_Init+0x4c>)
 80007ec:	f002 fdb4 	bl	8003358 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80007f6:	f000 f89f 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000100 	.word	0x20000100
 8000804:	40004c00 	.word	0x40004c00

08000808 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f002 fd8a 	bl	8003358 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800084a:	f000 f875 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000148 	.word	0x20000148
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a2c      	ldr	r2, [pc, #176]	@ (800092c <MX_GPIO_Init+0xd0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a25      	ldr	r2, [pc, #148]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_GPIO_Init+0xd4>)
 80008e8:	f000 ff3a 	bl	8001760 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_GPIO_Init+0xd8>)
 8000904:	f000 fd98 	bl	8001438 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0xd4>)
 8000920:	f000 fd8a 	bl	8001438 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fc84 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <HAL_CAN_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_CAN_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a00:	2309      	movs	r3, #9
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_CAN_MspInit+0x8c>)
 8000a0c:	f000 fd14 	bl	8001438 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40006400 	.word	0x40006400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <HAL_I2C_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12b      	bne.n	8000a9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a17      	ldr	r2, [pc, #92]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a62:	23c0      	movs	r3, #192	@ 0xc0
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a66:	2312      	movs	r3, #18
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a72:	2304      	movs	r3, #4
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <HAL_I2C_MspInit+0x8c>)
 8000a7e:	f000 fcdb 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_I2C_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a36      	ldr	r2, [pc, #216]	@ (8000bac <HAL_UART_MspInit+0xf8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d134      	bne.n	8000b40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b35      	ldr	r3, [pc, #212]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a34      	ldr	r2, [pc, #208]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000ae0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4822      	ldr	r0, [pc, #136]	@ (8000bb4 <HAL_UART_MspInit+0x100>)
 8000b2a:	f000 fc85 	bl	8001438 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2034      	movs	r0, #52	@ 0x34
 8000b34:	f000 fbb7 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b38:	2034      	movs	r0, #52	@ 0x34
 8000b3a:	f000 fbd0 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3e:	e030      	b.n	8000ba2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <HAL_UART_MspInit+0x104>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_UART_MspInit+0xfc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b82:	230c      	movs	r3, #12
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0x100>)
 8000b9e:	f000 fc4b 	bl	8001438 <HAL_GPIO_Init>
}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	@ 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004c00 	.word	0x40004c00
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40004400 	.word	0x40004400

08000bbc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000bc4:	1d39      	adds	r1, r7, #4
 8000bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <__io_putchar+0x20>)
 8000bce:	f002 fc13 	bl	80033f8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000148 	.word	0x20000148

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 f93f 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <UART4_IRQHandler+0x10>)
 8000c46:	f002 fc63 	bl	8003510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000100 	.word	0x20000100

08000c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff87 	bl	8000bbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
  }
  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f003 fe12 	bl	8004988 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	20000190 	.word	0x20000190
 8000d98:	200002e8 	.word	0x200002e8

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fdd1 	bl	8004994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fbd5 	bl	80005a0 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e04:	08005324 	.word	0x08005324
  ldr r2, =_sbss
 8000e08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e0c:	200002e4 	.word	0x200002e4

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 fa27 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fd7c 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fa3f 	bl	80012fa <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 fa07 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000194 	.word	0x20000194

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000194 	.word	0x20000194

08000ef8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0ed      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fd3c 	bl	8000994 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2c:	f7ff ffd8 	bl	8000ee0 <HAL_GetTick>
 8000f30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f32:	e012      	b.n	8000f5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f34:	f7ff ffd4 	bl	8000ee0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d90b      	bls.n	8000f5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2205      	movs	r2, #5
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0c5      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0e5      	beq.n	8000f34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0202 	bic.w	r2, r2, #2
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff ffb2 	bl	8000ee0 <HAL_GetTick>
 8000f7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f7e:	e012      	b.n	8000fa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f80:	f7ff ffae 	bl	8000ee0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d90b      	bls.n	8000fa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e09f      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e5      	bne.n	8000f80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7e1b      	ldrb	r3, [r3, #24]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7e5b      	ldrb	r3, [r3, #25]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001006:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7e9b      	ldrb	r3, [r3, #26]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0220 	orr.w	r2, r2, #32
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e007      	b.n	8001032 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0220 	bic.w	r2, r2, #32
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7edb      	ldrb	r3, [r3, #27]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e007      	b.n	800105c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0210 	orr.w	r2, r2, #16
 800105a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7f1b      	ldrb	r3, [r3, #28]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e007      	b.n	8001086 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0208 	bic.w	r2, r2, #8
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7f5b      	ldrb	r3, [r3, #29]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d108      	bne.n	80010a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0204 	orr.w	r2, r2, #4
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e007      	b.n	80010b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	ea42 0103 	orr.w	r1, r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff29 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff3e 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff8e 	bl	80011e4 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff31 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fdde 	bl	8000ee0 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d008      	beq.n	8001344 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e052      	b.n	80013ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0216 	bic.w	r2, r2, #22
 8001352:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001362:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <HAL_DMA_Abort+0x62>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0208 	bic.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001394:	e013      	b.n	80013be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001396:	f7ff fda3 	bl	8000ee0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d90c      	bls.n	80013be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e015      	b.n	80013ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e4      	bne.n	8001396 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d0:	223f      	movs	r2, #63	@ 0x3f
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d004      	beq.n	8001410 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e00c      	b.n	800142a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e165      	b.n	8001720 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8154 	bne.w	800171a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d005      	beq.n	800148a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	2b02      	cmp	r3, #2
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d017      	beq.n	8001528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80ae 	beq.w	800171a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a58      	ldr	r2, [pc, #352]	@ (800173c <HAL_GPIO_Init+0x304>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	@ (8001740 <HAL_GPIO_Init+0x308>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d025      	beq.n	8001652 <HAL_GPIO_Init+0x21a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <HAL_GPIO_Init+0x30c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01f      	beq.n	800164e <HAL_GPIO_Init+0x216>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4d      	ldr	r2, [pc, #308]	@ (8001748 <HAL_GPIO_Init+0x310>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x212>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4c      	ldr	r2, [pc, #304]	@ (800174c <HAL_GPIO_Init+0x314>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x20e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4b      	ldr	r2, [pc, #300]	@ (8001750 <HAL_GPIO_Init+0x318>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x20a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4a      	ldr	r2, [pc, #296]	@ (8001754 <HAL_GPIO_Init+0x31c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x206>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a49      	ldr	r2, [pc, #292]	@ (8001758 <HAL_GPIO_Init+0x320>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x202>
 8001636:	2306      	movs	r3, #6
 8001638:	e00c      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 800163a:	2307      	movs	r3, #7
 800163c:	e00a      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 800163e:	2305      	movs	r3, #5
 8001640:	e008      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 8001642:	2304      	movs	r3, #4
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 8001646:	2303      	movs	r3, #3
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x21c>
 8001652:	2300      	movs	r3, #0
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001664:	4935      	ldr	r1, [pc, #212]	@ (800173c <HAL_GPIO_Init+0x304>)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <HAL_GPIO_Init+0x324>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001696:	4a31      	ldr	r2, [pc, #196]	@ (800175c <HAL_GPIO_Init+0x324>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169c:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <HAL_GPIO_Init+0x324>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c0:	4a26      	ldr	r2, [pc, #152]	@ (800175c <HAL_GPIO_Init+0x324>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_GPIO_Init+0x324>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <HAL_GPIO_Init+0x324>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_GPIO_Init+0x324>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001714:	4a11      	ldr	r2, [pc, #68]	@ (800175c <HAL_GPIO_Init+0x324>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b0f      	cmp	r3, #15
 8001724:	f67f ae96 	bls.w	8001454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40013800 	.word	0x40013800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020800 	.word	0x40020800
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40021000 	.word	0x40021000
 8001754:	40021400 	.word	0x40021400
 8001758:	40021800 	.word	0x40021800
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e12b      	b.n	80019fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f932 	bl	8000a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	@ 0x24
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017f8:	f001 f8b8 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a81      	ldr	r2, [pc, #516]	@ (8001a08 <HAL_I2C_Init+0x274>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d807      	bhi.n	8001818 <HAL_I2C_Init+0x84>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a80      	ldr	r2, [pc, #512]	@ (8001a0c <HAL_I2C_Init+0x278>)
 800180c:	4293      	cmp	r3, r2
 800180e:	bf94      	ite	ls
 8001810:	2301      	movls	r3, #1
 8001812:	2300      	movhi	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	e006      	b.n	8001826 <HAL_I2C_Init+0x92>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a10 <HAL_I2C_Init+0x27c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	bf94      	ite	ls
 8001820:	2301      	movls	r3, #1
 8001822:	2300      	movhi	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0e7      	b.n	80019fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4a78      	ldr	r2, [pc, #480]	@ (8001a14 <HAL_I2C_Init+0x280>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9b      	lsrs	r3, r3, #18
 8001838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a08 <HAL_I2C_Init+0x274>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d802      	bhi.n	8001868 <HAL_I2C_Init+0xd4>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3301      	adds	r3, #1
 8001866:	e009      	b.n	800187c <HAL_I2C_Init+0xe8>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a69      	ldr	r2, [pc, #420]	@ (8001a18 <HAL_I2C_Init+0x284>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	3301      	adds	r3, #1
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800188e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	495c      	ldr	r1, [pc, #368]	@ (8001a08 <HAL_I2C_Init+0x274>)
 8001898:	428b      	cmp	r3, r1
 800189a:	d819      	bhi.n	80018d0 <HAL_I2C_Init+0x13c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e59      	subs	r1, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018b0:	400b      	ands	r3, r1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00a      	beq.n	80018cc <HAL_I2C_Init+0x138>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e59      	subs	r1, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ca:	e051      	b.n	8001970 <HAL_I2C_Init+0x1dc>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e04f      	b.n	8001970 <HAL_I2C_Init+0x1dc>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <HAL_I2C_Init+0x168>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e012      	b.n	8001922 <HAL_I2C_Init+0x18e>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x196>
 8001926:	2301      	movs	r3, #1
 8001928:	e022      	b.n	8001970 <HAL_I2C_Init+0x1dc>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10e      	bne.n	8001950 <HAL_I2C_Init+0x1bc>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e58      	subs	r0, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	fbb0 f3f3 	udiv	r3, r0, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800194e:	e00f      	b.n	8001970 <HAL_I2C_Init+0x1dc>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	0099      	lsls	r1, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6809      	ldr	r1, [r1, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800199e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6911      	ldr	r1, [r2, #16]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	001e847f 	.word	0x001e847f
 8001a10:	003d08ff 	.word	0x003d08ff
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	461a      	mov	r2, r3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fa56 	bl	8000ee0 <HAL_GetTick>
 8001a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	f040 80e0 	bne.w	8001c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2319      	movs	r3, #25
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4970      	ldr	r1, [pc, #448]	@ (8001c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fc64 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0d3      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_I2C_Master_Transmit+0x50>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e0cc      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d007      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2221      	movs	r2, #33	@ 0x21
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2210      	movs	r2, #16
 8001aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	893a      	ldrh	r2, [r7, #8]
 8001ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 face 	bl	800207c <I2C_MasterRequestWrite>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e08d      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b00:	e066      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	6a39      	ldr	r1, [r7, #32]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fd22 	bl	8002550 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_I2C_Master_Transmit+0x188>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	6a39      	ldr	r1, [r7, #32]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fd19 	bl	80025e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d107      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e01a      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d194      	bne.n	8001b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	00100002 	.word	0x00100002
 8001c14:	ffff0000 	.word	0xffff0000

08001c18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	461a      	mov	r2, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	817b      	strh	r3, [r7, #10]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff f958 	bl	8000ee0 <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	f040 8217 	bne.w	800206e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2319      	movs	r3, #25
 8001c46:	2201      	movs	r2, #1
 8001c48:	497c      	ldr	r1, [pc, #496]	@ (8001e3c <HAL_I2C_Master_Receive+0x224>)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fb66 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	e20a      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_I2C_Master_Receive+0x50>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e203      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d007      	beq.n	8001c8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2222      	movs	r2, #34	@ 0x22
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	893a      	ldrh	r2, [r7, #8]
 8001cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8001e40 <HAL_I2C_Master_Receive+0x228>)
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fa52 	bl	8002180 <I2C_MasterRequestRead>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e1c4      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d113      	bne.n	8001d16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	623b      	str	r3, [r7, #32]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	623b      	str	r3, [r7, #32]
 8001d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e198      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d11b      	bne.n	8001d56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e178      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d11b      	bne.n	8001d96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	e158      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001dbc:	e144      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	f200 80f1 	bhi.w	8001faa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d123      	bne.n	8001e18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fc4b 	bl	8002670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e145      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e16:	e117      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d14e      	bne.n	8001ebe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e26:	2200      	movs	r2, #0
 8001e28:	4906      	ldr	r1, [pc, #24]	@ (8001e44 <HAL_I2C_Master_Receive+0x22c>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa76 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e11a      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
 8001e3a:	bf00      	nop
 8001e3c:	00100002 	.word	0x00100002
 8001e40:	ffff0000 	.word	0xffff0000
 8001e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ebc:	e0c4      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	496c      	ldr	r1, [pc, #432]	@ (8002078 <HAL_I2C_Master_Receive+0x460>)
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fa27 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cb      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	2200      	movs	r2, #0
 8001f22:	4955      	ldr	r1, [pc, #340]	@ (8002078 <HAL_I2C_Master_Receive+0x460>)
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f9f9 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e09d      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fa8:	e04e      	b.n	8002048 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fb5e 	bl	8002670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e058      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d124      	bne.n	8002048 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002002:	2b03      	cmp	r3, #3
 8002004:	d107      	bne.n	8002016 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002014:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f aeb6 	bne.w	8001dbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	00010004 	.word	0x00010004

0800207c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	460b      	mov	r3, r1
 800208a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d006      	beq.n	80020a6 <I2C_MasterRequestWrite+0x2a>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d003      	beq.n	80020a6 <I2C_MasterRequestWrite+0x2a>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020a4:	d108      	bne.n	80020b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e00b      	b.n	80020d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d107      	bne.n	80020d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f91d 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f6:	d103      	bne.n	8002100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e035      	b.n	8002170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800210c:	d108      	bne.n	8002120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	e01b      	b.n	8002158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002120:	897b      	ldrh	r3, [r7, #10]
 8002122:	11db      	asrs	r3, r3, #7
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0306 	and.w	r3, r3, #6
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f063 030f 	orn	r3, r3, #15
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	490e      	ldr	r1, [pc, #56]	@ (8002178 <I2C_MasterRequestWrite+0xfc>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f966 	bl	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e010      	b.n	8002170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4907      	ldr	r1, [pc, #28]	@ (800217c <I2C_MasterRequestWrite+0x100>)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f956 	bl	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	00010008 	.word	0x00010008
 800217c:	00010002 	.word	0x00010002

08002180 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d006      	beq.n	80021ba <I2C_MasterRequestRead+0x3a>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d003      	beq.n	80021ba <I2C_MasterRequestRead+0x3a>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021b8:	d108      	bne.n	80021cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00b      	b.n	80021e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d107      	bne.n	80021e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f893 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e079      	b.n	800230c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	e05f      	b.n	80022f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	11db      	asrs	r3, r3, #7
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0306 	and.w	r3, r3, #6
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f063 030f 	orn	r3, r3, #15
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4930      	ldr	r1, [pc, #192]	@ (8002314 <I2C_MasterRequestRead+0x194>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f8dc 	bl	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e054      	b.n	800230c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4929      	ldr	r1, [pc, #164]	@ (8002318 <I2C_MasterRequestRead+0x198>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f8cc 	bl	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e044      	b.n	800230c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f831 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ce:	d103      	bne.n	80022d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e017      	b.n	800230c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022dc:	897b      	ldrh	r3, [r7, #10]
 80022de:	11db      	asrs	r3, r3, #7
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0306 	and.w	r3, r3, #6
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f063 030e 	orn	r3, r3, #14
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <I2C_MasterRequestRead+0x198>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f888 	bl	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	00010008 	.word	0x00010008
 8002318:	00010002 	.word	0x00010002

0800231c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232c:	e048      	b.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d044      	beq.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7fe fdd3 	bl	8000ee0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d139      	bne.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10d      	bne.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	43da      	mvns	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4013      	ands	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	e00c      	b.n	800238c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	429a      	cmp	r2, r3
 8002390:	d116      	bne.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e023      	b.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10d      	bne.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4013      	ands	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	e00c      	b.n	8002400 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	429a      	cmp	r2, r3
 8002404:	d093      	beq.n	800232e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800241e:	e071      	b.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242e:	d123      	bne.n	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e067      	b.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d041      	beq.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002480:	f7fe fd2e 	bl	8000ee0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d302      	bcc.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d136      	bne.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10c      	bne.n	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e00b      	b.n	80024d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e021      	b.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10c      	bne.n	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	43da      	mvns	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4013      	ands	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e00b      	b.n	8002540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f af6d 	bne.w	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255c:	e034      	b.n	80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8e3 	bl	800272a <I2C_IsAcknowledgeFailed>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e034      	b.n	80025d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d028      	beq.n	80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002576:	f7fe fcb3 	bl	8000ee0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	d302      	bcc.n	800258c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d11d      	bne.n	80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002596:	2b80      	cmp	r3, #128	@ 0x80
 8002598:	d016      	beq.n	80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e007      	b.n	80025d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d2:	2b80      	cmp	r3, #128	@ 0x80
 80025d4:	d1c3      	bne.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ec:	e034      	b.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f89b 	bl	800272a <I2C_IsAcknowledgeFailed>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e034      	b.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d028      	beq.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe fc6b 	bl	8000ee0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d11d      	bne.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b04      	cmp	r3, #4
 8002628:	d016      	beq.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e007      	b.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d1c3      	bne.n	80025ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800267c:	e049      	b.n	8002712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b10      	cmp	r3, #16
 800268a:	d119      	bne.n	80026c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0210 	mvn.w	r2, #16
 8002694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e030      	b.n	8002722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7fe fc0e 	bl	8000ee0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11d      	bne.n	8002712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d016      	beq.n	8002712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e007      	b.n	8002722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271c:	2b40      	cmp	r3, #64	@ 0x40
 800271e:	d1ae      	bne.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002740:	d11b      	bne.n	800277a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800274a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f043 0204 	orr.w	r2, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb32 	bl	8000ee0 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fb2e 	bl	8000ee0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f855 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa92 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	080052c8 	.word	0x080052c8
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	@ (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	080052d8 	.word	0x080052d8

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	080052d8 	.word	0x080052d8

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0ae      	sub	sp, #184	@ 0xb8
 80029c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	f200 8206 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x440>
 80029f0:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002dfd 	.word	0x08002dfd
 8002a00:	08002dfd 	.word	0x08002dfd
 8002a04:	08002dfd 	.word	0x08002dfd
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002dfd 	.word	0x08002dfd
 8002a10:	08002dfd 	.word	0x08002dfd
 8002a14:	08002dfd 	.word	0x08002dfd
 8002a18:	08002a3d 	.word	0x08002a3d
 8002a1c:	08002dfd 	.word	0x08002dfd
 8002a20:	08002dfd 	.word	0x08002dfd
 8002a24:	08002dfd 	.word	0x08002dfd
 8002a28:	08002c2d 	.word	0x08002c2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a32:	e1e7      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4bb8      	ldr	r3, [pc, #736]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a3a:	e1e3      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4bb4      	ldr	r3, [pc, #720]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a48:	4bb1      	ldr	r3, [pc, #708]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d071      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	4bae      	ldr	r3, [pc, #696]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a60:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	462b      	mov	r3, r5
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	0159      	lsls	r1, r3, #5
 8002a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8c:	0150      	lsls	r0, r2, #5
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4621      	mov	r1, r4
 8002a94:	1a51      	subs	r1, r2, r1
 8002a96:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a98:	4629      	mov	r1, r5
 8002a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002aac:	4649      	mov	r1, r9
 8002aae:	018b      	lsls	r3, r1, #6
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	018a      	lsls	r2, r1, #6
 8002aba:	4641      	mov	r1, r8
 8002abc:	1a51      	subs	r1, r2, r1
 8002abe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	00cb      	lsls	r3, r1, #3
 8002ad8:	4641      	mov	r1, r8
 8002ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ade:	4641      	mov	r1, r8
 8002ae0:	00ca      	lsls	r2, r1, #3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4622      	mov	r2, r4
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aee:	462b      	mov	r3, r5
 8002af0:	460a      	mov	r2, r1
 8002af2:	eb42 0303 	adc.w	r3, r2, r3
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b04:	4629      	mov	r1, r5
 8002b06:	024b      	lsls	r3, r1, #9
 8002b08:	4621      	mov	r1, r4
 8002b0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0e:	4621      	mov	r1, r4
 8002b10:	024a      	lsls	r2, r1, #9
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b28:	f7fd fbc2 	bl	80002b0 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b36:	e067      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	4b75      	ldr	r3, [pc, #468]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b52:	2300      	movs	r3, #0
 8002b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	462b      	mov	r3, r5
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	0159      	lsls	r1, r3, #5
 8002b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6c:	0150      	lsls	r0, r2, #5
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4621      	mov	r1, r4
 8002b74:	1a51      	subs	r1, r2, r1
 8002b76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b78:	4629      	mov	r1, r5
 8002b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	018b      	lsls	r3, r1, #6
 8002b90:	4641      	mov	r1, r8
 8002b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b96:	4641      	mov	r1, r8
 8002b98:	018a      	lsls	r2, r1, #6
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bba:	4692      	mov	sl, r2
 8002bbc:	469b      	mov	fp, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc4:	623b      	str	r3, [r7, #32]
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bf4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bfa:	f7fd fb59 	bl	80002b0 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4613      	mov	r3, r2
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c08:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c2a:	e0eb      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c38:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d06b      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c58:	2300      	movs	r3, #0
 8002c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c60:	4622      	mov	r2, r4
 8002c62:	462b      	mov	r3, r5
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	0159      	lsls	r1, r3, #5
 8002c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c72:	0150      	lsls	r0, r2, #5
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4621      	mov	r1, r4
 8002c7a:	1a51      	subs	r1, r2, r1
 8002c7c:	61b9      	str	r1, [r7, #24]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	eb63 0301 	sbc.w	r3, r3, r1
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c92:	4659      	mov	r1, fp
 8002c94:	018b      	lsls	r3, r1, #6
 8002c96:	4651      	mov	r1, sl
 8002c98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	018a      	lsls	r2, r1, #6
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca6:	4659      	mov	r1, fp
 8002ca8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	eb18 0303 	adds.w	r3, r8, r3
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	462b      	mov	r3, r5
 8002cce:	eb49 0303 	adc.w	r3, r9, r3
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	024b      	lsls	r3, r1, #9
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cea:	4621      	mov	r1, r4
 8002cec:	024a      	lsls	r2, r1, #9
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cfa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d00:	f7fd fad6 	bl	80002b0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d0e:	e065      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x420>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	4611      	mov	r1, r2
 8002d28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d2e:	2300      	movs	r3, #0
 8002d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d36:	4642      	mov	r2, r8
 8002d38:	464b      	mov	r3, r9
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4641      	mov	r1, r8
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	4649      	mov	r1, r9
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4651      	mov	r1, sl
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4651      	mov	r1, sl
 8002d78:	1a54      	subs	r4, r2, r1
 8002d7a:	4659      	mov	r1, fp
 8002d7c:	eb63 0501 	sbc.w	r5, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dc8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dce:	f7fd fa6f 	bl	80002b0 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0f1b      	lsrs	r3, r3, #28
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dfa:	e003      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	37b8      	adds	r7, #184	@ 0xb8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400

08002e1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e28d      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8083 	beq.w	8002f42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e3c:	4b94      	ldr	r3, [pc, #592]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d019      	beq.n	8002e7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e48:	4b91      	ldr	r3, [pc, #580]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e54:	4b8e      	ldr	r3, [pc, #568]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e60:	d00c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4b8b      	ldr	r3, [pc, #556]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d112      	bne.n	8002e94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b88      	ldr	r3, [pc, #544]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	4b84      	ldr	r3, [pc, #528]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x124>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e25a      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x90>
 8002e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCC_OscConfig+0xcc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xb4>
 8002eb6:	4b76      	ldr	r3, [pc, #472]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a75      	ldr	r2, [pc, #468]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b73      	ldr	r3, [pc, #460]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a72      	ldr	r2, [pc, #456]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xcc>
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b6c      	ldr	r3, [pc, #432]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd fff6 	bl	8000ee0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fd fff2 	bl	8000ee0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e21f      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b61      	ldr	r3, [pc, #388]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xdc>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fd ffe2 	bl	8000ee0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fd ffde 	bl	8000ee0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	@ 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e20b      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	4b57      	ldr	r3, [pc, #348]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x104>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06f      	beq.n	800302e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f4e:	4b50      	ldr	r3, [pc, #320]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d017      	beq.n	8002f8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f66:	4b4a      	ldr	r3, [pc, #296]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b47      	ldr	r3, [pc, #284]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b41      	ldr	r3, [pc, #260]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x186>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1d3      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4937      	ldr	r1, [pc, #220]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b34      	ldr	r3, [pc, #208]	@ (8003094 <HAL_RCC_OscConfig+0x278>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd ff8b 	bl	8000ee0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fd ff87 	bl	8000ee0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1b4      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4925      	ldr	r1, [pc, #148]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_RCC_OscConfig+0x278>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff6a 	bl	8000ee0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fd ff66 	bl	8000ee0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e193      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d036      	beq.n	80030a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fd ff4a 	bl	8000ee0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003050:	f7fd ff46 	bl	8000ee0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e173      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x234>
 800306e:	e01b      	b.n	80030a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd ff33 	bl	8000ee0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e00e      	b.n	800309c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd ff2f 	bl	8000ee0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d907      	bls.n	800309c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e15c      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
 8003090:	40023800 	.word	0x40023800
 8003094:	42470000 	.word	0x42470000
 8003098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	4b8a      	ldr	r3, [pc, #552]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800309e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ea      	bne.n	800307e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8097 	beq.w	80031e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b83      	ldr	r3, [pc, #524]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b7f      	ldr	r3, [pc, #508]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	4a7e      	ldr	r2, [pc, #504]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030d6:	4b7c      	ldr	r3, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b79      	ldr	r3, [pc, #484]	@ (80032cc <HAL_RCC_OscConfig+0x4b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b76      	ldr	r3, [pc, #472]	@ (80032cc <HAL_RCC_OscConfig+0x4b0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a75      	ldr	r2, [pc, #468]	@ (80032cc <HAL_RCC_OscConfig+0x4b0>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fd feef 	bl	8000ee0 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fd feeb 	bl	8000ee0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e118      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b6c      	ldr	r3, [pc, #432]	@ (80032cc <HAL_RCC_OscConfig+0x4b0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x31e>
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	@ 0x70
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x358>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x340>
 8003142:	4b61      	ldr	r3, [pc, #388]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003146:	4a60      	ldr	r2, [pc, #384]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6713      	str	r3, [r2, #112]	@ 0x70
 800314e:	4b5e      	ldr	r3, [pc, #376]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4a5d      	ldr	r2, [pc, #372]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	@ 0x70
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0x358>
 800315c:	4b5a      	ldr	r3, [pc, #360]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a59      	ldr	r2, [pc, #356]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	4b57      	ldr	r3, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	4a56      	ldr	r2, [pc, #344]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fd feb0 	bl	8000ee0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fd feac 	bl	8000ee0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0d7      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ee      	beq.n	8003184 <HAL_RCC_OscConfig+0x368>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd fe9a 	bl	8000ee0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd fe96 	bl	8000ee0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0c1      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c6:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ee      	bne.n	80031b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d8:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	4a3a      	ldr	r2, [pc, #232]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80ad 	beq.w	8003348 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ee:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d060      	beq.n	80032bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d145      	bne.n	800328e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b33      	ldr	r3, [pc, #204]	@ (80032d0 <HAL_RCC_OscConfig+0x4b4>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fe6a 	bl	8000ee0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd fe66 	bl	8000ee0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e093      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	4b29      	ldr	r3, [pc, #164]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	3b01      	subs	r3, #1
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	491b      	ldr	r1, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCC_OscConfig+0x4b4>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fd fe3b 	bl	8000ee0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fd fe37 	bl	8000ee0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e064      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x452>
 800328c:	e05c      	b.n	8003348 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_RCC_OscConfig+0x4b4>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fe24 	bl	8000ee0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fd fe20 	bl	8000ee0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e04d      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x480>
 80032ba:	e045      	b.n	8003348 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e040      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <HAL_RCC_OscConfig+0x538>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d030      	beq.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d129      	bne.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d122      	bne.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800330a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	4293      	cmp	r3, r2
 800330e:	d119      	bne.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d10f      	bne.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e042      	b.n	80033f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fb98 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	@ 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800339a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fd69 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	d175      	bne.n	8003504 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Transmit+0x2c>
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e06e      	b.n	8003506 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	@ 0x21
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003436:	f7fd fd53 	bl	8000ee0 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003450:	d108      	bne.n	8003464 <HAL_UART_Transmit+0x6c>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800346c:	e02e      	b.n	80034cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fb05 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03a      	b.n	8003506 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3302      	adds	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	e007      	b.n	80034be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1cb      	bne.n	800346e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2140      	movs	r1, #64	@ 0x40
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fad1 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e006      	b.n	8003506 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0ba      	sub	sp, #232	@ 0xe8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800354e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fbc2 	bl	8003cf8 <UART_Receive_IT>
      return;
 8003574:	e25b      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80de 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003590:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80d1 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
 80035ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0204 	orr.w	r2, r3, #4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800361e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 81f2 	beq.w	8003a24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fb4d 	bl	8003cf8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_UART_IRQHandler+0x17a>
 8003682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04f      	beq.n	800372a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa55 	bl	8003b3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d141      	bne.n	8003722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d9      	bne.n	800369e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	4a7e      	ldr	r2, [pc, #504]	@ (80038f0 <HAL_UART_IRQHandler+0x3e0>)
 80036f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fe77 	bl	80013f2 <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00e      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f99e 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00a      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f99a 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e006      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f996 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003736:	e175      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	bf00      	nop
    return;
 800373a:	e173      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 814f 	bne.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8148 	beq.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8141 	beq.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	f040 80b6 	bne.w	80038f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8145 	beq.w	8003a28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f080 813e 	bcs.w	8003a28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037be:	f000 8088 	beq.w	80038d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1d9      	bne.n	80037c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800381e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800383a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e1      	bne.n	800380e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800385a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800385c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800386e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800387c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e3      	bne.n	8003890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fd20 	bl	8001312 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f8c1 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038ee:	e09b      	b.n	8003a28 <HAL_UART_IRQHandler+0x518>
 80038f0:	08003c01 	.word	0x08003c01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 808e 	beq.w	8003a2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8089 	beq.w	8003a2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800393e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003940:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800394c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	623b      	str	r3, [r7, #32]
   return(result);
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003976:	633a      	str	r2, [r7, #48]	@ 0x30
 8003978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800397c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0310 	bic.w	r3, r3, #16
 80039ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039bc:	61fa      	str	r2, [r7, #28]
 80039be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e3      	bne.n	8003998 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f847 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039e2:	e023      	b.n	8003a2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_IRQHandler+0x4f4>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f913 	bl	8003c28 <UART_Transmit_IT>
    return;
 8003a02:	e014      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_UART_IRQHandler+0x51e>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f953 	bl	8003cc8 <UART_EndTransmit_IT>
    return;
 8003a22:	e004      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a2c:	bf00      	nop
  }
}
 8003a2e:	37e8      	adds	r7, #232	@ 0xe8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e03b      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d037      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd fa1d 	bl	8000ee0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03a      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d020      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d01d      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d116      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f81d 	bl	8003b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2208      	movs	r2, #8
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d0b4      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b095      	sub	sp, #84	@ 0x54
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b62:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d119      	bne.n	8003be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 0310 	bic.w	r3, r3, #16
 8003bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd2:	61ba      	str	r2, [r7, #24]
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	613b      	str	r3, [r7, #16]
   return(result);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bf4:	bf00      	nop
 8003bf6:	3754      	adds	r7, #84	@ 0x54
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff ff1e 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b21      	cmp	r3, #33	@ 0x21
 8003c3a:	d13e      	bne.n	8003cba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c44:	d114      	bne.n	8003c70 <UART_Transmit_IT+0x48>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d110      	bne.n	8003c70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]
 8003c6e:	e008      	b.n	8003c82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6211      	str	r1, [r2, #32]
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fea3 	bl	8003a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	@ 0x30
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b22      	cmp	r3, #34	@ 0x22
 8003d0a:	f040 80ae 	bne.w	8003e6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d16:	d117      	bne.n	8003d48 <UART_Receive_IT+0x50>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d113      	bne.n	8003d48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d46:	e026      	b.n	8003d96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5a:	d007      	beq.n	8003d6c <UART_Receive_IT+0x74>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <UART_Receive_IT+0x82>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e008      	b.n	8003d8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4619      	mov	r1, r3
 8003da4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d15d      	bne.n	8003e66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0220 	bic.w	r2, r2, #32
 8003db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d135      	bne.n	8003e5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f023 0310 	bic.w	r3, r3, #16
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e16:	623a      	str	r2, [r7, #32]
 8003e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	69f9      	ldr	r1, [r7, #28]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d10a      	bne.n	8003e4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe0b 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
 8003e5a:	e002      	b.n	8003e62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fdf3 	bl	8003a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e002      	b.n	8003e6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0c0      	sub	sp, #256	@ 0x100
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	ea40 0301 	orr.w	r3, r0, r1
 8003e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ecc:	f021 010c 	bic.w	r1, r1, #12
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eda:	430b      	orrs	r3, r1
 8003edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	ea40 0301 	orr.w	r3, r0, r1
 8003efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8f      	ldr	r3, [pc, #572]	@ (8004140 <UART_SetConfig+0x2cc>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0xa0>
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004144 <UART_SetConfig+0x2d0>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d104      	bne.n	8003f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fd3e 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8003f18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f1c:	e003      	b.n	8003f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7fe fd25 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8003f22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f30:	f040 810c 	bne.w	800414c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f56:	4621      	mov	r1, r4
 8003f58:	eb12 0801 	adds.w	r8, r2, r1
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb43 0901 	adc.w	r9, r3, r1
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	eb18 0303 	adds.w	r3, r8, r3
 8003f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	18db      	adds	r3, r3, r3
 8003fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fa8:	4613      	mov	r3, r2
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fb8:	f7fc f97a 	bl	80002b0 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4b61      	ldr	r3, [pc, #388]	@ (8004148 <UART_SetConfig+0x2d4>)
 8003fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	011c      	lsls	r4, r3, #4
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fec:	4641      	mov	r1, r8
 8003fee:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400c:	4692      	mov	sl, r2
 800400e:	469b      	mov	fp, r3
 8004010:	4643      	mov	r3, r8
 8004012:	eb1a 0303 	adds.w	r3, sl, r3
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800401a:	464b      	mov	r3, r9
 800401c:	eb4b 0303 	adc.w	r3, fp, r3
 8004020:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004030:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	643b      	str	r3, [r7, #64]	@ 0x40
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	647b      	str	r3, [r7, #68]	@ 0x44
 8004046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800404a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800404e:	f7fc f92f 	bl	80002b0 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <UART_SetConfig+0x2d4>)
 800405a:	fba3 2301 	umull	r2, r3, r3, r1
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2264      	movs	r2, #100	@ 0x64
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	1acb      	subs	r3, r1, r3
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800406e:	4b36      	ldr	r3, [pc, #216]	@ (8004148 <UART_SetConfig+0x2d4>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800407c:	441c      	add	r4, r3
 800407e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004088:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800408c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004098:	415b      	adcs	r3, r3
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800409c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040a0:	4641      	mov	r1, r8
 80040a2:	1851      	adds	r1, r2, r1
 80040a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80040a6:	4649      	mov	r1, r9
 80040a8:	414b      	adcs	r3, r1
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040b8:	4659      	mov	r1, fp
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4651      	mov	r1, sl
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4642      	mov	r2, r8
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d4:	464b      	mov	r3, r9
 80040d6:	460a      	mov	r2, r1
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800410a:	f7fc f8d1 	bl	80002b0 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <UART_SetConfig+0x2d4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	@ 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	@ 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	@ (8004148 <UART_SetConfig+0x2d4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413c:	e106      	b.n	800434c <UART_SetConfig+0x4d8>
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40011400 	.word	0x40011400
 8004148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004156:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800415a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	1891      	adds	r1, r2, r2
 8004164:	6239      	str	r1, [r7, #32]
 8004166:	415b      	adcs	r3, r3
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
 800416a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416e:	4641      	mov	r1, r8
 8004170:	1854      	adds	r4, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb43 0501 	adc.w	r5, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	00eb      	lsls	r3, r5, #3
 8004182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004186:	00e2      	lsls	r2, r4, #3
 8004188:	4614      	mov	r4, r2
 800418a:	461d      	mov	r5, r3
 800418c:	4643      	mov	r3, r8
 800418e:	18e3      	adds	r3, r4, r3
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004194:	464b      	mov	r3, r9
 8004196:	eb45 0303 	adc.w	r3, r5, r3
 800419a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ba:	4629      	mov	r1, r5
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c4:	4621      	mov	r1, r4
 80041c6:	008a      	lsls	r2, r1, #2
 80041c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041cc:	f7fc f870 	bl	80002b0 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4b60      	ldr	r3, [pc, #384]	@ (8004358 <UART_SetConfig+0x4e4>)
 80041d6:	fba3 2302 	umull	r2, r3, r3, r2
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	011c      	lsls	r4, r3, #4
 80041de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	1891      	adds	r1, r2, r2
 80041f6:	61b9      	str	r1, [r7, #24]
 80041f8:	415b      	adcs	r3, r3
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	4641      	mov	r1, r8
 8004202:	1851      	adds	r1, r2, r1
 8004204:	6139      	str	r1, [r7, #16]
 8004206:	4649      	mov	r1, r9
 8004208:	414b      	adcs	r3, r1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004218:	4659      	mov	r1, fp
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004222:	4651      	mov	r1, sl
 8004224:	00ca      	lsls	r2, r1, #3
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	4603      	mov	r3, r0
 800422c:	4642      	mov	r2, r8
 800422e:	189b      	adds	r3, r3, r2
 8004230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004234:	464b      	mov	r3, r9
 8004236:	460a      	mov	r2, r1
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	67bb      	str	r3, [r7, #120]	@ 0x78
 800424a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004258:	4649      	mov	r1, r9
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	4641      	mov	r1, r8
 800425e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004262:	4641      	mov	r1, r8
 8004264:	008a      	lsls	r2, r1, #2
 8004266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800426a:	f7fc f821 	bl	80002b0 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4611      	mov	r1, r2
 8004274:	4b38      	ldr	r3, [pc, #224]	@ (8004358 <UART_SetConfig+0x4e4>)
 8004276:	fba3 2301 	umull	r2, r3, r3, r1
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2264      	movs	r2, #100	@ 0x64
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	1acb      	subs	r3, r1, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	@ 0x32
 8004288:	4a33      	ldr	r2, [pc, #204]	@ (8004358 <UART_SetConfig+0x4e4>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004294:	441c      	add	r4, r3
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	673b      	str	r3, [r7, #112]	@ 0x70
 800429e:	677a      	str	r2, [r7, #116]	@ 0x74
 80042a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	1891      	adds	r1, r2, r2
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	415b      	adcs	r3, r3
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b4:	4641      	mov	r1, r8
 80042b6:	1851      	adds	r1, r2, r1
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	4649      	mov	r1, r9
 80042bc:	414b      	adcs	r3, r1
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042cc:	4659      	mov	r1, fp
 80042ce:	00cb      	lsls	r3, r1, #3
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d6:	4651      	mov	r1, sl
 80042d8:	00ca      	lsls	r2, r1, #3
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	4642      	mov	r2, r8
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e6:	464b      	mov	r3, r9
 80042e8:	460a      	mov	r2, r1
 80042ea:	eb42 0303 	adc.w	r3, r2, r3
 80042ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004308:	4649      	mov	r1, r9
 800430a:	008b      	lsls	r3, r1, #2
 800430c:	4641      	mov	r1, r8
 800430e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004312:	4641      	mov	r1, r8
 8004314:	008a      	lsls	r2, r1, #2
 8004316:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800431a:	f7fb ffc9 	bl	80002b0 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <UART_SetConfig+0x4e4>)
 8004324:	fba3 1302 	umull	r1, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2164      	movs	r1, #100	@ 0x64
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	3332      	adds	r3, #50	@ 0x32
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <UART_SetConfig+0x4e4>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4422      	add	r2, r4
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004352:	46bd      	mov	sp, r7
 8004354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <sbrk_aligned>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4e0f      	ldr	r6, [pc, #60]	@ (800439c <sbrk_aligned+0x40>)
 8004360:	460c      	mov	r4, r1
 8004362:	6831      	ldr	r1, [r6, #0]
 8004364:	4605      	mov	r5, r0
 8004366:	b911      	cbnz	r1, 800436e <sbrk_aligned+0x12>
 8004368:	f000 faec 	bl	8004944 <_sbrk_r>
 800436c:	6030      	str	r0, [r6, #0]
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f000 fae7 	bl	8004944 <_sbrk_r>
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	d103      	bne.n	8004382 <sbrk_aligned+0x26>
 800437a:	f04f 34ff 	mov.w	r4, #4294967295
 800437e:	4620      	mov	r0, r4
 8004380:	bd70      	pop	{r4, r5, r6, pc}
 8004382:	1cc4      	adds	r4, r0, #3
 8004384:	f024 0403 	bic.w	r4, r4, #3
 8004388:	42a0      	cmp	r0, r4
 800438a:	d0f8      	beq.n	800437e <sbrk_aligned+0x22>
 800438c:	1a21      	subs	r1, r4, r0
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fad8 	bl	8004944 <_sbrk_r>
 8004394:	3001      	adds	r0, #1
 8004396:	d1f2      	bne.n	800437e <sbrk_aligned+0x22>
 8004398:	e7ef      	b.n	800437a <sbrk_aligned+0x1e>
 800439a:	bf00      	nop
 800439c:	20000198 	.word	0x20000198

080043a0 <_malloc_r>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	1ccd      	adds	r5, r1, #3
 80043a6:	f025 0503 	bic.w	r5, r5, #3
 80043aa:	3508      	adds	r5, #8
 80043ac:	2d0c      	cmp	r5, #12
 80043ae:	bf38      	it	cc
 80043b0:	250c      	movcc	r5, #12
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	4606      	mov	r6, r0
 80043b6:	db01      	blt.n	80043bc <_malloc_r+0x1c>
 80043b8:	42a9      	cmp	r1, r5
 80043ba:	d904      	bls.n	80043c6 <_malloc_r+0x26>
 80043bc:	230c      	movs	r3, #12
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	2000      	movs	r0, #0
 80043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800449c <_malloc_r+0xfc>
 80043ca:	f000 f869 	bl	80044a0 <__malloc_lock>
 80043ce:	f8d8 3000 	ldr.w	r3, [r8]
 80043d2:	461c      	mov	r4, r3
 80043d4:	bb44      	cbnz	r4, 8004428 <_malloc_r+0x88>
 80043d6:	4629      	mov	r1, r5
 80043d8:	4630      	mov	r0, r6
 80043da:	f7ff ffbf 	bl	800435c <sbrk_aligned>
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	4604      	mov	r4, r0
 80043e2:	d158      	bne.n	8004496 <_malloc_r+0xf6>
 80043e4:	f8d8 4000 	ldr.w	r4, [r8]
 80043e8:	4627      	mov	r7, r4
 80043ea:	2f00      	cmp	r7, #0
 80043ec:	d143      	bne.n	8004476 <_malloc_r+0xd6>
 80043ee:	2c00      	cmp	r4, #0
 80043f0:	d04b      	beq.n	800448a <_malloc_r+0xea>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	4639      	mov	r1, r7
 80043f6:	4630      	mov	r0, r6
 80043f8:	eb04 0903 	add.w	r9, r4, r3
 80043fc:	f000 faa2 	bl	8004944 <_sbrk_r>
 8004400:	4581      	cmp	r9, r0
 8004402:	d142      	bne.n	800448a <_malloc_r+0xea>
 8004404:	6821      	ldr	r1, [r4, #0]
 8004406:	1a6d      	subs	r5, r5, r1
 8004408:	4629      	mov	r1, r5
 800440a:	4630      	mov	r0, r6
 800440c:	f7ff ffa6 	bl	800435c <sbrk_aligned>
 8004410:	3001      	adds	r0, #1
 8004412:	d03a      	beq.n	800448a <_malloc_r+0xea>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	442b      	add	r3, r5
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	f8d8 3000 	ldr.w	r3, [r8]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	bb62      	cbnz	r2, 800447c <_malloc_r+0xdc>
 8004422:	f8c8 7000 	str.w	r7, [r8]
 8004426:	e00f      	b.n	8004448 <_malloc_r+0xa8>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	d420      	bmi.n	8004470 <_malloc_r+0xd0>
 800442e:	2a0b      	cmp	r2, #11
 8004430:	d917      	bls.n	8004462 <_malloc_r+0xc2>
 8004432:	1961      	adds	r1, r4, r5
 8004434:	42a3      	cmp	r3, r4
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	6059      	strne	r1, [r3, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	bf08      	it	eq
 8004440:	f8c8 1000 	streq.w	r1, [r8]
 8004444:	5162      	str	r2, [r4, r5]
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f82f 	bl	80044ac <__malloc_unlock>
 800444e:	f104 000b 	add.w	r0, r4, #11
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	f020 0007 	bic.w	r0, r0, #7
 8004458:	1ac2      	subs	r2, r0, r3
 800445a:	bf1c      	itt	ne
 800445c:	1a1b      	subne	r3, r3, r0
 800445e:	50a3      	strne	r3, [r4, r2]
 8004460:	e7af      	b.n	80043c2 <_malloc_r+0x22>
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	42a3      	cmp	r3, r4
 8004466:	bf0c      	ite	eq
 8004468:	f8c8 2000 	streq.w	r2, [r8]
 800446c:	605a      	strne	r2, [r3, #4]
 800446e:	e7eb      	b.n	8004448 <_malloc_r+0xa8>
 8004470:	4623      	mov	r3, r4
 8004472:	6864      	ldr	r4, [r4, #4]
 8004474:	e7ae      	b.n	80043d4 <_malloc_r+0x34>
 8004476:	463c      	mov	r4, r7
 8004478:	687f      	ldr	r7, [r7, #4]
 800447a:	e7b6      	b.n	80043ea <_malloc_r+0x4a>
 800447c:	461a      	mov	r2, r3
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	42a3      	cmp	r3, r4
 8004482:	d1fb      	bne.n	800447c <_malloc_r+0xdc>
 8004484:	2300      	movs	r3, #0
 8004486:	6053      	str	r3, [r2, #4]
 8004488:	e7de      	b.n	8004448 <_malloc_r+0xa8>
 800448a:	230c      	movs	r3, #12
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f80c 	bl	80044ac <__malloc_unlock>
 8004494:	e794      	b.n	80043c0 <_malloc_r+0x20>
 8004496:	6005      	str	r5, [r0, #0]
 8004498:	e7d6      	b.n	8004448 <_malloc_r+0xa8>
 800449a:	bf00      	nop
 800449c:	2000019c 	.word	0x2000019c

080044a0 <__malloc_lock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__malloc_lock+0x8>)
 80044a2:	f000 ba9c 	b.w	80049de <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	200002e0 	.word	0x200002e0

080044ac <__malloc_unlock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__malloc_unlock+0x8>)
 80044ae:	f000 ba97 	b.w	80049e0 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	200002e0 	.word	0x200002e0

080044b8 <std>:
 80044b8:	2300      	movs	r3, #0
 80044ba:	b510      	push	{r4, lr}
 80044bc:	4604      	mov	r4, r0
 80044be:	e9c0 3300 	strd	r3, r3, [r0]
 80044c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044c6:	6083      	str	r3, [r0, #8]
 80044c8:	8181      	strh	r1, [r0, #12]
 80044ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80044cc:	81c2      	strh	r2, [r0, #14]
 80044ce:	6183      	str	r3, [r0, #24]
 80044d0:	4619      	mov	r1, r3
 80044d2:	2208      	movs	r2, #8
 80044d4:	305c      	adds	r0, #92	@ 0x5c
 80044d6:	f000 f9f9 	bl	80048cc <memset>
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <std+0x58>)
 80044dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <std+0x5c>)
 80044e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <std+0x60>)
 80044e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <std+0x64>)
 80044e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x68>)
 80044ec:	6224      	str	r4, [r4, #32]
 80044ee:	429c      	cmp	r4, r3
 80044f0:	d006      	beq.n	8004500 <std+0x48>
 80044f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044f6:	4294      	cmp	r4, r2
 80044f8:	d002      	beq.n	8004500 <std+0x48>
 80044fa:	33d0      	adds	r3, #208	@ 0xd0
 80044fc:	429c      	cmp	r4, r3
 80044fe:	d105      	bne.n	800450c <std+0x54>
 8004500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f000 ba68 	b.w	80049dc <__retarget_lock_init_recursive>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	0800471d 	.word	0x0800471d
 8004514:	0800473f 	.word	0x0800473f
 8004518:	08004777 	.word	0x08004777
 800451c:	0800479b 	.word	0x0800479b
 8004520:	200001a0 	.word	0x200001a0

08004524 <stdio_exit_handler>:
 8004524:	4a02      	ldr	r2, [pc, #8]	@ (8004530 <stdio_exit_handler+0xc>)
 8004526:	4903      	ldr	r1, [pc, #12]	@ (8004534 <stdio_exit_handler+0x10>)
 8004528:	4803      	ldr	r0, [pc, #12]	@ (8004538 <stdio_exit_handler+0x14>)
 800452a:	f000 b869 	b.w	8004600 <_fwalk_sglue>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c
 8004534:	08005121 	.word	0x08005121
 8004538:	2000001c 	.word	0x2000001c

0800453c <cleanup_stdio>:
 800453c:	6841      	ldr	r1, [r0, #4]
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <cleanup_stdio+0x34>)
 8004540:	4299      	cmp	r1, r3
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	d001      	beq.n	800454c <cleanup_stdio+0x10>
 8004548:	f000 fdea 	bl	8005120 <_fflush_r>
 800454c:	68a1      	ldr	r1, [r4, #8]
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <cleanup_stdio+0x38>)
 8004550:	4299      	cmp	r1, r3
 8004552:	d002      	beq.n	800455a <cleanup_stdio+0x1e>
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fde3 	bl	8005120 <_fflush_r>
 800455a:	68e1      	ldr	r1, [r4, #12]
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <cleanup_stdio+0x3c>)
 800455e:	4299      	cmp	r1, r3
 8004560:	d004      	beq.n	800456c <cleanup_stdio+0x30>
 8004562:	4620      	mov	r0, r4
 8004564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004568:	f000 bdda 	b.w	8005120 <_fflush_r>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	bf00      	nop
 8004570:	200001a0 	.word	0x200001a0
 8004574:	20000208 	.word	0x20000208
 8004578:	20000270 	.word	0x20000270

0800457c <global_stdio_init.part.0>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <global_stdio_init.part.0+0x30>)
 8004580:	4c0b      	ldr	r4, [pc, #44]	@ (80045b0 <global_stdio_init.part.0+0x34>)
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <global_stdio_init.part.0+0x38>)
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4620      	mov	r0, r4
 8004588:	2200      	movs	r2, #0
 800458a:	2104      	movs	r1, #4
 800458c:	f7ff ff94 	bl	80044b8 <std>
 8004590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004594:	2201      	movs	r2, #1
 8004596:	2109      	movs	r1, #9
 8004598:	f7ff ff8e 	bl	80044b8 <std>
 800459c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045a0:	2202      	movs	r2, #2
 80045a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a6:	2112      	movs	r1, #18
 80045a8:	f7ff bf86 	b.w	80044b8 <std>
 80045ac:	200002d8 	.word	0x200002d8
 80045b0:	200001a0 	.word	0x200001a0
 80045b4:	08004525 	.word	0x08004525

080045b8 <__sfp_lock_acquire>:
 80045b8:	4801      	ldr	r0, [pc, #4]	@ (80045c0 <__sfp_lock_acquire+0x8>)
 80045ba:	f000 ba10 	b.w	80049de <__retarget_lock_acquire_recursive>
 80045be:	bf00      	nop
 80045c0:	200002e1 	.word	0x200002e1

080045c4 <__sfp_lock_release>:
 80045c4:	4801      	ldr	r0, [pc, #4]	@ (80045cc <__sfp_lock_release+0x8>)
 80045c6:	f000 ba0b 	b.w	80049e0 <__retarget_lock_release_recursive>
 80045ca:	bf00      	nop
 80045cc:	200002e1 	.word	0x200002e1

080045d0 <__sinit>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	f7ff fff0 	bl	80045b8 <__sfp_lock_acquire>
 80045d8:	6a23      	ldr	r3, [r4, #32]
 80045da:	b11b      	cbz	r3, 80045e4 <__sinit+0x14>
 80045dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e0:	f7ff bff0 	b.w	80045c4 <__sfp_lock_release>
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <__sinit+0x28>)
 80045e6:	6223      	str	r3, [r4, #32]
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <__sinit+0x2c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f5      	bne.n	80045dc <__sinit+0xc>
 80045f0:	f7ff ffc4 	bl	800457c <global_stdio_init.part.0>
 80045f4:	e7f2      	b.n	80045dc <__sinit+0xc>
 80045f6:	bf00      	nop
 80045f8:	0800453d 	.word	0x0800453d
 80045fc:	200002d8 	.word	0x200002d8

08004600 <_fwalk_sglue>:
 8004600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004604:	4607      	mov	r7, r0
 8004606:	4688      	mov	r8, r1
 8004608:	4614      	mov	r4, r2
 800460a:	2600      	movs	r6, #0
 800460c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004610:	f1b9 0901 	subs.w	r9, r9, #1
 8004614:	d505      	bpl.n	8004622 <_fwalk_sglue+0x22>
 8004616:	6824      	ldr	r4, [r4, #0]
 8004618:	2c00      	cmp	r4, #0
 800461a:	d1f7      	bne.n	800460c <_fwalk_sglue+0xc>
 800461c:	4630      	mov	r0, r6
 800461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d907      	bls.n	8004638 <_fwalk_sglue+0x38>
 8004628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800462c:	3301      	adds	r3, #1
 800462e:	d003      	beq.n	8004638 <_fwalk_sglue+0x38>
 8004630:	4629      	mov	r1, r5
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	4306      	orrs	r6, r0
 8004638:	3568      	adds	r5, #104	@ 0x68
 800463a:	e7e9      	b.n	8004610 <_fwalk_sglue+0x10>

0800463c <iprintf>:
 800463c:	b40f      	push	{r0, r1, r2, r3}
 800463e:	b507      	push	{r0, r1, r2, lr}
 8004640:	4906      	ldr	r1, [pc, #24]	@ (800465c <iprintf+0x20>)
 8004642:	ab04      	add	r3, sp, #16
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	f853 2b04 	ldr.w	r2, [r3], #4
 800464a:	6881      	ldr	r1, [r0, #8]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f000 fa3d 	bl	8004acc <_vfiprintf_r>
 8004652:	b003      	add	sp, #12
 8004654:	f85d eb04 	ldr.w	lr, [sp], #4
 8004658:	b004      	add	sp, #16
 800465a:	4770      	bx	lr
 800465c:	20000018 	.word	0x20000018

08004660 <_puts_r>:
 8004660:	6a03      	ldr	r3, [r0, #32]
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	6884      	ldr	r4, [r0, #8]
 8004666:	4605      	mov	r5, r0
 8004668:	460e      	mov	r6, r1
 800466a:	b90b      	cbnz	r3, 8004670 <_puts_r+0x10>
 800466c:	f7ff ffb0 	bl	80045d0 <__sinit>
 8004670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004672:	07db      	lsls	r3, r3, #31
 8004674:	d405      	bmi.n	8004682 <_puts_r+0x22>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	0598      	lsls	r0, r3, #22
 800467a:	d402      	bmi.n	8004682 <_puts_r+0x22>
 800467c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467e:	f000 f9ae 	bl	80049de <__retarget_lock_acquire_recursive>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	0719      	lsls	r1, r3, #28
 8004686:	d502      	bpl.n	800468e <_puts_r+0x2e>
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d135      	bne.n	80046fa <_puts_r+0x9a>
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f8c5 	bl	8004820 <__swsetup_r>
 8004696:	b380      	cbz	r0, 80046fa <_puts_r+0x9a>
 8004698:	f04f 35ff 	mov.w	r5, #4294967295
 800469c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800469e:	07da      	lsls	r2, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_puts_r+0x4e>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	059b      	lsls	r3, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_puts_r+0x4e>
 80046a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046aa:	f000 f999 	bl	80049e0 <__retarget_lock_release_recursive>
 80046ae:	4628      	mov	r0, r5
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da04      	bge.n	80046c0 <_puts_r+0x60>
 80046b6:	69a2      	ldr	r2, [r4, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dc17      	bgt.n	80046ec <_puts_r+0x8c>
 80046bc:	290a      	cmp	r1, #10
 80046be:	d015      	beq.n	80046ec <_puts_r+0x8c>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	7019      	strb	r1, [r3, #0]
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046ce:	3b01      	subs	r3, #1
 80046d0:	60a3      	str	r3, [r4, #8]
 80046d2:	2900      	cmp	r1, #0
 80046d4:	d1ed      	bne.n	80046b2 <_puts_r+0x52>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da11      	bge.n	80046fe <_puts_r+0x9e>
 80046da:	4622      	mov	r2, r4
 80046dc:	210a      	movs	r1, #10
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f85f 	bl	80047a2 <__swbuf_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d0d7      	beq.n	8004698 <_puts_r+0x38>
 80046e8:	250a      	movs	r5, #10
 80046ea:	e7d7      	b.n	800469c <_puts_r+0x3c>
 80046ec:	4622      	mov	r2, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f857 	bl	80047a2 <__swbuf_r>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d1e7      	bne.n	80046c8 <_puts_r+0x68>
 80046f8:	e7ce      	b.n	8004698 <_puts_r+0x38>
 80046fa:	3e01      	subs	r6, #1
 80046fc:	e7e4      	b.n	80046c8 <_puts_r+0x68>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	220a      	movs	r2, #10
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e7ee      	b.n	80046e8 <_puts_r+0x88>
	...

0800470c <puts>:
 800470c:	4b02      	ldr	r3, [pc, #8]	@ (8004718 <puts+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7ff bfa5 	b.w	8004660 <_puts_r>
 8004716:	bf00      	nop
 8004718:	20000018 	.word	0x20000018

0800471c <__sread>:
 800471c:	b510      	push	{r4, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f8fc 	bl	8004920 <_read_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	bfab      	itete	ge
 800472c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800472e:	89a3      	ldrhlt	r3, [r4, #12]
 8004730:	181b      	addge	r3, r3, r0
 8004732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004736:	bfac      	ite	ge
 8004738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800473a:	81a3      	strhlt	r3, [r4, #12]
 800473c:	bd10      	pop	{r4, pc}

0800473e <__swrite>:
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	461f      	mov	r7, r3
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4616      	mov	r6, r2
 800474e:	d505      	bpl.n	800475c <__swrite+0x1e>
 8004750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004754:	2302      	movs	r3, #2
 8004756:	2200      	movs	r2, #0
 8004758:	f000 f8d0 	bl	80048fc <_lseek_r>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	f000 b8f7 	b.w	8004964 <_write_r>

08004776 <__sseek>:
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 f8bd 	bl	80048fc <_lseek_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	bf15      	itete	ne
 8004788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800478a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800478e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004792:	81a3      	strheq	r3, [r4, #12]
 8004794:	bf18      	it	ne
 8004796:	81a3      	strhne	r3, [r4, #12]
 8004798:	bd10      	pop	{r4, pc}

0800479a <__sclose>:
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 b89d 	b.w	80048dc <_close_r>

080047a2 <__swbuf_r>:
 80047a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a4:	460e      	mov	r6, r1
 80047a6:	4614      	mov	r4, r2
 80047a8:	4605      	mov	r5, r0
 80047aa:	b118      	cbz	r0, 80047b4 <__swbuf_r+0x12>
 80047ac:	6a03      	ldr	r3, [r0, #32]
 80047ae:	b90b      	cbnz	r3, 80047b4 <__swbuf_r+0x12>
 80047b0:	f7ff ff0e 	bl	80045d0 <__sinit>
 80047b4:	69a3      	ldr	r3, [r4, #24]
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	071a      	lsls	r2, r3, #28
 80047bc:	d501      	bpl.n	80047c2 <__swbuf_r+0x20>
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	b943      	cbnz	r3, 80047d4 <__swbuf_r+0x32>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f82b 	bl	8004820 <__swsetup_r>
 80047ca:	b118      	cbz	r0, 80047d4 <__swbuf_r+0x32>
 80047cc:	f04f 37ff 	mov.w	r7, #4294967295
 80047d0:	4638      	mov	r0, r7
 80047d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	6922      	ldr	r2, [r4, #16]
 80047d8:	1a98      	subs	r0, r3, r2
 80047da:	6963      	ldr	r3, [r4, #20]
 80047dc:	b2f6      	uxtb	r6, r6
 80047de:	4283      	cmp	r3, r0
 80047e0:	4637      	mov	r7, r6
 80047e2:	dc05      	bgt.n	80047f0 <__swbuf_r+0x4e>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fc9a 	bl	8005120 <_fflush_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d1ed      	bne.n	80047cc <__swbuf_r+0x2a>
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	60a3      	str	r3, [r4, #8]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	701e      	strb	r6, [r3, #0]
 80047fe:	6962      	ldr	r2, [r4, #20]
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	429a      	cmp	r2, r3
 8004804:	d004      	beq.n	8004810 <__swbuf_r+0x6e>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	07db      	lsls	r3, r3, #31
 800480a:	d5e1      	bpl.n	80047d0 <__swbuf_r+0x2e>
 800480c:	2e0a      	cmp	r6, #10
 800480e:	d1df      	bne.n	80047d0 <__swbuf_r+0x2e>
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	f000 fc84 	bl	8005120 <_fflush_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	d0d9      	beq.n	80047d0 <__swbuf_r+0x2e>
 800481c:	e7d6      	b.n	80047cc <__swbuf_r+0x2a>
	...

08004820 <__swsetup_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <__swsetup_r+0xa8>)
 8004824:	4605      	mov	r5, r0
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	460c      	mov	r4, r1
 800482a:	b118      	cbz	r0, 8004834 <__swsetup_r+0x14>
 800482c:	6a03      	ldr	r3, [r0, #32]
 800482e:	b90b      	cbnz	r3, 8004834 <__swsetup_r+0x14>
 8004830:	f7ff fece 	bl	80045d0 <__sinit>
 8004834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004838:	0719      	lsls	r1, r3, #28
 800483a:	d422      	bmi.n	8004882 <__swsetup_r+0x62>
 800483c:	06da      	lsls	r2, r3, #27
 800483e:	d407      	bmi.n	8004850 <__swsetup_r+0x30>
 8004840:	2209      	movs	r2, #9
 8004842:	602a      	str	r2, [r5, #0]
 8004844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	e033      	b.n	80048b8 <__swsetup_r+0x98>
 8004850:	0758      	lsls	r0, r3, #29
 8004852:	d512      	bpl.n	800487a <__swsetup_r+0x5a>
 8004854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004856:	b141      	cbz	r1, 800486a <__swsetup_r+0x4a>
 8004858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800485c:	4299      	cmp	r1, r3
 800485e:	d002      	beq.n	8004866 <__swsetup_r+0x46>
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f8bf 	bl	80049e4 <_free_r>
 8004866:	2300      	movs	r3, #0
 8004868:	6363      	str	r3, [r4, #52]	@ 0x34
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	b94b      	cbnz	r3, 800489a <__swsetup_r+0x7a>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800488c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004890:	d003      	beq.n	800489a <__swsetup_r+0x7a>
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 fc91 	bl	80051bc <__smakebuf_r>
 800489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489e:	f013 0201 	ands.w	r2, r3, #1
 80048a2:	d00a      	beq.n	80048ba <__swsetup_r+0x9a>
 80048a4:	2200      	movs	r2, #0
 80048a6:	60a2      	str	r2, [r4, #8]
 80048a8:	6962      	ldr	r2, [r4, #20]
 80048aa:	4252      	negs	r2, r2
 80048ac:	61a2      	str	r2, [r4, #24]
 80048ae:	6922      	ldr	r2, [r4, #16]
 80048b0:	b942      	cbnz	r2, 80048c4 <__swsetup_r+0xa4>
 80048b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048b6:	d1c5      	bne.n	8004844 <__swsetup_r+0x24>
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	0799      	lsls	r1, r3, #30
 80048bc:	bf58      	it	pl
 80048be:	6962      	ldrpl	r2, [r4, #20]
 80048c0:	60a2      	str	r2, [r4, #8]
 80048c2:	e7f4      	b.n	80048ae <__swsetup_r+0x8e>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e7f7      	b.n	80048b8 <__swsetup_r+0x98>
 80048c8:	20000018 	.word	0x20000018

080048cc <memset>:
 80048cc:	4402      	add	r2, r0
 80048ce:	4603      	mov	r3, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <_close_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	@ (80048f8 <_close_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc f9ed 	bl	8000cc6 <_close>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_close_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_close_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200002dc 	.word	0x200002dc

080048fc <_lseek_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d07      	ldr	r5, [pc, #28]	@ (800491c <_lseek_r+0x20>)
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	2200      	movs	r2, #0
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc fa02 	bl	8000d14 <_lseek>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_lseek_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_lseek_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200002dc 	.word	0x200002dc

08004920 <_read_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	@ (8004940 <_read_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fc f990 	bl	8000c54 <_read>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_read_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_read_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	200002dc 	.word	0x200002dc

08004944 <_sbrk_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4d06      	ldr	r5, [pc, #24]	@ (8004960 <_sbrk_r+0x1c>)
 8004948:	2300      	movs	r3, #0
 800494a:	4604      	mov	r4, r0
 800494c:	4608      	mov	r0, r1
 800494e:	602b      	str	r3, [r5, #0]
 8004950:	f7fc f9ee 	bl	8000d30 <_sbrk>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_sbrk_r+0x1a>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_sbrk_r+0x1a>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	200002dc 	.word	0x200002dc

08004964 <_write_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4d07      	ldr	r5, [pc, #28]	@ (8004984 <_write_r+0x20>)
 8004968:	4604      	mov	r4, r0
 800496a:	4608      	mov	r0, r1
 800496c:	4611      	mov	r1, r2
 800496e:	2200      	movs	r2, #0
 8004970:	602a      	str	r2, [r5, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f7fc f98b 	bl	8000c8e <_write>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_write_r+0x1e>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_write_r+0x1e>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200002dc 	.word	0x200002dc

08004988 <__errno>:
 8004988:	4b01      	ldr	r3, [pc, #4]	@ (8004990 <__errno+0x8>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000018 	.word	0x20000018

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4d0d      	ldr	r5, [pc, #52]	@ (80049cc <__libc_init_array+0x38>)
 8004998:	4c0d      	ldr	r4, [pc, #52]	@ (80049d0 <__libc_init_array+0x3c>)
 800499a:	1b64      	subs	r4, r4, r5
 800499c:	10a4      	asrs	r4, r4, #2
 800499e:	2600      	movs	r6, #0
 80049a0:	42a6      	cmp	r6, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	4d0b      	ldr	r5, [pc, #44]	@ (80049d4 <__libc_init_array+0x40>)
 80049a6:	4c0c      	ldr	r4, [pc, #48]	@ (80049d8 <__libc_init_array+0x44>)
 80049a8:	f000 fc66 	bl	8005278 <_init>
 80049ac:	1b64      	subs	r4, r4, r5
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	2600      	movs	r6, #0
 80049b2:	42a6      	cmp	r6, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049bc:	4798      	blx	r3
 80049be:	3601      	adds	r6, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c6:	4798      	blx	r3
 80049c8:	3601      	adds	r6, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	0800531c 	.word	0x0800531c
 80049d0:	0800531c 	.word	0x0800531c
 80049d4:	0800531c 	.word	0x0800531c
 80049d8:	08005320 	.word	0x08005320

080049dc <__retarget_lock_init_recursive>:
 80049dc:	4770      	bx	lr

080049de <__retarget_lock_acquire_recursive>:
 80049de:	4770      	bx	lr

080049e0 <__retarget_lock_release_recursive>:
 80049e0:	4770      	bx	lr
	...

080049e4 <_free_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d041      	beq.n	8004a70 <_free_r+0x8c>
 80049ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f0:	1f0c      	subs	r4, r1, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfb8      	it	lt
 80049f6:	18e4      	addlt	r4, r4, r3
 80049f8:	f7ff fd52 	bl	80044a0 <__malloc_lock>
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <_free_r+0x90>)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	b933      	cbnz	r3, 8004a10 <_free_r+0x2c>
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	6014      	str	r4, [r2, #0]
 8004a06:	4628      	mov	r0, r5
 8004a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a0c:	f7ff bd4e 	b.w	80044ac <__malloc_unlock>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x42>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	1821      	adds	r1, r4, r0
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	bf01      	itttt	eq
 8004a1c:	6819      	ldreq	r1, [r3, #0]
 8004a1e:	685b      	ldreq	r3, [r3, #4]
 8004a20:	1809      	addeq	r1, r1, r0
 8004a22:	6021      	streq	r1, [r4, #0]
 8004a24:	e7ed      	b.n	8004a02 <_free_r+0x1e>
 8004a26:	461a      	mov	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b10b      	cbz	r3, 8004a30 <_free_r+0x4c>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x42>
 8004a30:	6811      	ldr	r1, [r2, #0]
 8004a32:	1850      	adds	r0, r2, r1
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x6c>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	1850      	adds	r0, r2, r1
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	d1e0      	bne.n	8004a06 <_free_r+0x22>
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	4408      	add	r0, r1
 8004a4c:	6010      	str	r0, [r2, #0]
 8004a4e:	e7da      	b.n	8004a06 <_free_r+0x22>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x74>
 8004a52:	230c      	movs	r3, #12
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	e7d6      	b.n	8004a06 <_free_r+0x22>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6054      	str	r4, [r2, #4]
 8004a6e:	e7ca      	b.n	8004a06 <_free_r+0x22>
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	2000019c 	.word	0x2000019c

08004a78 <__sfputc_r>:
 8004a78:	6893      	ldr	r3, [r2, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	b410      	push	{r4}
 8004a80:	6093      	str	r3, [r2, #8]
 8004a82:	da08      	bge.n	8004a96 <__sfputc_r+0x1e>
 8004a84:	6994      	ldr	r4, [r2, #24]
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	db01      	blt.n	8004a8e <__sfputc_r+0x16>
 8004a8a:	290a      	cmp	r1, #10
 8004a8c:	d103      	bne.n	8004a96 <__sfputc_r+0x1e>
 8004a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a92:	f7ff be86 	b.w	80047a2 <__swbuf_r>
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	1c58      	adds	r0, r3, #1
 8004a9a:	6010      	str	r0, [r2, #0]
 8004a9c:	7019      	strb	r1, [r3, #0]
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <__sfputs_r>:
 8004aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	460f      	mov	r7, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	18d5      	adds	r5, r2, r3
 8004ab0:	42ac      	cmp	r4, r5
 8004ab2:	d101      	bne.n	8004ab8 <__sfputs_r+0x12>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e007      	b.n	8004ac8 <__sfputs_r+0x22>
 8004ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004abc:	463a      	mov	r2, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f7ff ffda 	bl	8004a78 <__sfputc_r>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d1f3      	bne.n	8004ab0 <__sfputs_r+0xa>
 8004ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004acc <_vfiprintf_r>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	b09d      	sub	sp, #116	@ 0x74
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	4698      	mov	r8, r3
 8004ad8:	4606      	mov	r6, r0
 8004ada:	b118      	cbz	r0, 8004ae4 <_vfiprintf_r+0x18>
 8004adc:	6a03      	ldr	r3, [r0, #32]
 8004ade:	b90b      	cbnz	r3, 8004ae4 <_vfiprintf_r+0x18>
 8004ae0:	f7ff fd76 	bl	80045d0 <__sinit>
 8004ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ae6:	07d9      	lsls	r1, r3, #31
 8004ae8:	d405      	bmi.n	8004af6 <_vfiprintf_r+0x2a>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d402      	bmi.n	8004af6 <_vfiprintf_r+0x2a>
 8004af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004af2:	f7ff ff74 	bl	80049de <__retarget_lock_acquire_recursive>
 8004af6:	89ab      	ldrh	r3, [r5, #12]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	d501      	bpl.n	8004b00 <_vfiprintf_r+0x34>
 8004afc:	692b      	ldr	r3, [r5, #16]
 8004afe:	b99b      	cbnz	r3, 8004b28 <_vfiprintf_r+0x5c>
 8004b00:	4629      	mov	r1, r5
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7ff fe8c 	bl	8004820 <__swsetup_r>
 8004b08:	b170      	cbz	r0, 8004b28 <_vfiprintf_r+0x5c>
 8004b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b0c:	07dc      	lsls	r4, r3, #31
 8004b0e:	d504      	bpl.n	8004b1a <_vfiprintf_r+0x4e>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	b01d      	add	sp, #116	@ 0x74
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	89ab      	ldrh	r3, [r5, #12]
 8004b1c:	0598      	lsls	r0, r3, #22
 8004b1e:	d4f7      	bmi.n	8004b10 <_vfiprintf_r+0x44>
 8004b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b22:	f7ff ff5d 	bl	80049e0 <__retarget_lock_release_recursive>
 8004b26:	e7f3      	b.n	8004b10 <_vfiprintf_r+0x44>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b36:	2330      	movs	r3, #48	@ 0x30
 8004b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ce8 <_vfiprintf_r+0x21c>
 8004b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b40:	f04f 0901 	mov.w	r9, #1
 8004b44:	4623      	mov	r3, r4
 8004b46:	469a      	mov	sl, r3
 8004b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_vfiprintf_r+0x86>
 8004b4e:	2a25      	cmp	r2, #37	@ 0x25
 8004b50:	d1f9      	bne.n	8004b46 <_vfiprintf_r+0x7a>
 8004b52:	ebba 0b04 	subs.w	fp, sl, r4
 8004b56:	d00b      	beq.n	8004b70 <_vfiprintf_r+0xa4>
 8004b58:	465b      	mov	r3, fp
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f7ff ffa1 	bl	8004aa6 <__sfputs_r>
 8004b64:	3001      	adds	r0, #1
 8004b66:	f000 80a7 	beq.w	8004cb8 <_vfiprintf_r+0x1ec>
 8004b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b6c:	445a      	add	r2, fp
 8004b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b70:	f89a 3000 	ldrb.w	r3, [sl]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 809f 	beq.w	8004cb8 <_vfiprintf_r+0x1ec>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b84:	f10a 0a01 	add.w	sl, sl, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b92:	4654      	mov	r4, sl
 8004b94:	2205      	movs	r2, #5
 8004b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9a:	4853      	ldr	r0, [pc, #332]	@ (8004ce8 <_vfiprintf_r+0x21c>)
 8004b9c:	f7fb fb38 	bl	8000210 <memchr>
 8004ba0:	9a04      	ldr	r2, [sp, #16]
 8004ba2:	b9d8      	cbnz	r0, 8004bdc <_vfiprintf_r+0x110>
 8004ba4:	06d1      	lsls	r1, r2, #27
 8004ba6:	bf44      	itt	mi
 8004ba8:	2320      	movmi	r3, #32
 8004baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bae:	0713      	lsls	r3, r2, #28
 8004bb0:	bf44      	itt	mi
 8004bb2:	232b      	movmi	r3, #43	@ 0x2b
 8004bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bbe:	d015      	beq.n	8004bec <_vfiprintf_r+0x120>
 8004bc0:	9a07      	ldr	r2, [sp, #28]
 8004bc2:	4654      	mov	r4, sl
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f04f 0c0a 	mov.w	ip, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd0:	3b30      	subs	r3, #48	@ 0x30
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	d94b      	bls.n	8004c6e <_vfiprintf_r+0x1a2>
 8004bd6:	b1b0      	cbz	r0, 8004c06 <_vfiprintf_r+0x13a>
 8004bd8:	9207      	str	r2, [sp, #28]
 8004bda:	e014      	b.n	8004c06 <_vfiprintf_r+0x13a>
 8004bdc:	eba0 0308 	sub.w	r3, r0, r8
 8004be0:	fa09 f303 	lsl.w	r3, r9, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	46a2      	mov	sl, r4
 8004bea:	e7d2      	b.n	8004b92 <_vfiprintf_r+0xc6>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	1d19      	adds	r1, r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	9103      	str	r1, [sp, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bfbb      	ittet	lt
 8004bf8:	425b      	neglt	r3, r3
 8004bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfe:	9307      	strge	r3, [sp, #28]
 8004c00:	9307      	strlt	r3, [sp, #28]
 8004c02:	bfb8      	it	lt
 8004c04:	9204      	strlt	r2, [sp, #16]
 8004c06:	7823      	ldrb	r3, [r4, #0]
 8004c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c0a:	d10a      	bne.n	8004c22 <_vfiprintf_r+0x156>
 8004c0c:	7863      	ldrb	r3, [r4, #1]
 8004c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c10:	d132      	bne.n	8004c78 <_vfiprintf_r+0x1ac>
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	9203      	str	r2, [sp, #12]
 8004c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c1e:	3402      	adds	r4, #2
 8004c20:	9305      	str	r3, [sp, #20]
 8004c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cf8 <_vfiprintf_r+0x22c>
 8004c26:	7821      	ldrb	r1, [r4, #0]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f7fb faf0 	bl	8000210 <memchr>
 8004c30:	b138      	cbz	r0, 8004c42 <_vfiprintf_r+0x176>
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	eba0 000a 	sub.w	r0, r0, sl
 8004c38:	2240      	movs	r2, #64	@ 0x40
 8004c3a:	4082      	lsls	r2, r0
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	3401      	adds	r4, #1
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c46:	4829      	ldr	r0, [pc, #164]	@ (8004cec <_vfiprintf_r+0x220>)
 8004c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	f7fb fadf 	bl	8000210 <memchr>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d03f      	beq.n	8004cd6 <_vfiprintf_r+0x20a>
 8004c56:	4b26      	ldr	r3, [pc, #152]	@ (8004cf0 <_vfiprintf_r+0x224>)
 8004c58:	bb1b      	cbnz	r3, 8004ca2 <_vfiprintf_r+0x1d6>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	f023 0307 	bic.w	r3, r3, #7
 8004c62:	3308      	adds	r3, #8
 8004c64:	9303      	str	r3, [sp, #12]
 8004c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c68:	443b      	add	r3, r7
 8004c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6c:	e76a      	b.n	8004b44 <_vfiprintf_r+0x78>
 8004c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c72:	460c      	mov	r4, r1
 8004c74:	2001      	movs	r0, #1
 8004c76:	e7a8      	b.n	8004bca <_vfiprintf_r+0xfe>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	3401      	adds	r4, #1
 8004c7c:	9305      	str	r3, [sp, #20]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f04f 0c0a 	mov.w	ip, #10
 8004c84:	4620      	mov	r0, r4
 8004c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8a:	3a30      	subs	r2, #48	@ 0x30
 8004c8c:	2a09      	cmp	r2, #9
 8004c8e:	d903      	bls.n	8004c98 <_vfiprintf_r+0x1cc>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0c6      	beq.n	8004c22 <_vfiprintf_r+0x156>
 8004c94:	9105      	str	r1, [sp, #20]
 8004c96:	e7c4      	b.n	8004c22 <_vfiprintf_r+0x156>
 8004c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e7f0      	b.n	8004c84 <_vfiprintf_r+0x1b8>
 8004ca2:	ab03      	add	r3, sp, #12
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	462a      	mov	r2, r5
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <_vfiprintf_r+0x228>)
 8004caa:	a904      	add	r1, sp, #16
 8004cac:	4630      	mov	r0, r6
 8004cae:	f3af 8000 	nop.w
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	1c78      	adds	r0, r7, #1
 8004cb6:	d1d6      	bne.n	8004c66 <_vfiprintf_r+0x19a>
 8004cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cba:	07d9      	lsls	r1, r3, #31
 8004cbc:	d405      	bmi.n	8004cca <_vfiprintf_r+0x1fe>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	059a      	lsls	r2, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_vfiprintf_r+0x1fe>
 8004cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cc6:	f7ff fe8b 	bl	80049e0 <__retarget_lock_release_recursive>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	065b      	lsls	r3, r3, #25
 8004cce:	f53f af1f 	bmi.w	8004b10 <_vfiprintf_r+0x44>
 8004cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cd4:	e71e      	b.n	8004b14 <_vfiprintf_r+0x48>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <_vfiprintf_r+0x228>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f879 	bl	8004dd8 <_printf_i>
 8004ce6:	e7e4      	b.n	8004cb2 <_vfiprintf_r+0x1e6>
 8004ce8:	080052e0 	.word	0x080052e0
 8004cec:	080052ea 	.word	0x080052ea
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	08004aa7 	.word	0x08004aa7
 8004cf8:	080052e6 	.word	0x080052e6

08004cfc <_printf_common>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	4616      	mov	r6, r2
 8004d02:	4698      	mov	r8, r3
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bfb8      	it	lt
 8004d10:	4613      	movlt	r3, r2
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	b10a      	cbz	r2, 8004d22 <_printf_common+0x26>
 8004d1e:	3301      	adds	r3, #1
 8004d20:	6033      	str	r3, [r6, #0]
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	0699      	lsls	r1, r3, #26
 8004d26:	bf42      	ittt	mi
 8004d28:	6833      	ldrmi	r3, [r6, #0]
 8004d2a:	3302      	addmi	r3, #2
 8004d2c:	6033      	strmi	r3, [r6, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	f015 0506 	ands.w	r5, r5, #6
 8004d34:	d106      	bne.n	8004d44 <_printf_common+0x48>
 8004d36:	f104 0a19 	add.w	sl, r4, #25
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dc26      	bgt.n	8004d92 <_printf_common+0x96>
 8004d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	3b00      	subs	r3, #0
 8004d4c:	bf18      	it	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	0692      	lsls	r2, r2, #26
 8004d52:	d42b      	bmi.n	8004dac <_printf_common+0xb0>
 8004d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d58:	4641      	mov	r1, r8
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c8      	blx	r9
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d01e      	beq.n	8004da0 <_printf_common+0xa4>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	6922      	ldr	r2, [r4, #16]
 8004d66:	f003 0306 	and.w	r3, r3, #6
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	bf02      	ittt	eq
 8004d6e:	68e5      	ldreq	r5, [r4, #12]
 8004d70:	6833      	ldreq	r3, [r6, #0]
 8004d72:	1aed      	subeq	r5, r5, r3
 8004d74:	68a3      	ldr	r3, [r4, #8]
 8004d76:	bf0c      	ite	eq
 8004d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d7c:	2500      	movne	r5, #0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfc4      	itt	gt
 8004d82:	1a9b      	subgt	r3, r3, r2
 8004d84:	18ed      	addgt	r5, r5, r3
 8004d86:	2600      	movs	r6, #0
 8004d88:	341a      	adds	r4, #26
 8004d8a:	42b5      	cmp	r5, r6
 8004d8c:	d11a      	bne.n	8004dc4 <_printf_common+0xc8>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e008      	b.n	8004da4 <_printf_common+0xa8>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4641      	mov	r1, r8
 8004d98:	4638      	mov	r0, r7
 8004d9a:	47c8      	blx	r9
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d103      	bne.n	8004da8 <_printf_common+0xac>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	3501      	adds	r5, #1
 8004daa:	e7c6      	b.n	8004d3a <_printf_common+0x3e>
 8004dac:	18e1      	adds	r1, r4, r3
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	2030      	movs	r0, #48	@ 0x30
 8004db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004db6:	4422      	add	r2, r4
 8004db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	e7c7      	b.n	8004d54 <_printf_common+0x58>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4641      	mov	r1, r8
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c8      	blx	r9
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d0e6      	beq.n	8004da0 <_printf_common+0xa4>
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7d9      	b.n	8004d8a <_printf_common+0x8e>
	...

08004dd8 <_printf_i>:
 8004dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	7e0f      	ldrb	r7, [r1, #24]
 8004dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004de0:	2f78      	cmp	r7, #120	@ 0x78
 8004de2:	4691      	mov	r9, r2
 8004de4:	4680      	mov	r8, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	469a      	mov	sl, r3
 8004dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dee:	d807      	bhi.n	8004e00 <_printf_i+0x28>
 8004df0:	2f62      	cmp	r7, #98	@ 0x62
 8004df2:	d80a      	bhi.n	8004e0a <_printf_i+0x32>
 8004df4:	2f00      	cmp	r7, #0
 8004df6:	f000 80d2 	beq.w	8004f9e <_printf_i+0x1c6>
 8004dfa:	2f58      	cmp	r7, #88	@ 0x58
 8004dfc:	f000 80b9 	beq.w	8004f72 <_printf_i+0x19a>
 8004e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e08:	e03a      	b.n	8004e80 <_printf_i+0xa8>
 8004e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e0e:	2b15      	cmp	r3, #21
 8004e10:	d8f6      	bhi.n	8004e00 <_printf_i+0x28>
 8004e12:	a101      	add	r1, pc, #4	@ (adr r1, 8004e18 <_printf_i+0x40>)
 8004e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e85 	.word	0x08004e85
 8004e20:	08004e01 	.word	0x08004e01
 8004e24:	08004e01 	.word	0x08004e01
 8004e28:	08004e01 	.word	0x08004e01
 8004e2c:	08004e01 	.word	0x08004e01
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004e01 	.word	0x08004e01
 8004e38:	08004e01 	.word	0x08004e01
 8004e3c:	08004e01 	.word	0x08004e01
 8004e40:	08004e01 	.word	0x08004e01
 8004e44:	08004f85 	.word	0x08004f85
 8004e48:	08004eaf 	.word	0x08004eaf
 8004e4c:	08004f3f 	.word	0x08004f3f
 8004e50:	08004e01 	.word	0x08004e01
 8004e54:	08004e01 	.word	0x08004e01
 8004e58:	08004fa7 	.word	0x08004fa7
 8004e5c:	08004e01 	.word	0x08004e01
 8004e60:	08004eaf 	.word	0x08004eaf
 8004e64:	08004e01 	.word	0x08004e01
 8004e68:	08004e01 	.word	0x08004e01
 8004e6c:	08004f47 	.word	0x08004f47
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6032      	str	r2, [r6, #0]
 8004e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e80:	2301      	movs	r3, #1
 8004e82:	e09d      	b.n	8004fc0 <_printf_i+0x1e8>
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	6031      	str	r1, [r6, #0]
 8004e8c:	0606      	lsls	r6, r0, #24
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0xbc>
 8004e90:	681d      	ldr	r5, [r3, #0]
 8004e92:	e003      	b.n	8004e9c <_printf_i+0xc4>
 8004e94:	0645      	lsls	r5, r0, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0xb8>
 8004e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	da03      	bge.n	8004ea8 <_printf_i+0xd0>
 8004ea0:	232d      	movs	r3, #45	@ 0x2d
 8004ea2:	426d      	negs	r5, r5
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea8:	4859      	ldr	r0, [pc, #356]	@ (8005010 <_printf_i+0x238>)
 8004eaa:	230a      	movs	r3, #10
 8004eac:	e011      	b.n	8004ed2 <_printf_i+0xfa>
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	0608      	lsls	r0, r1, #24
 8004eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004eb8:	d402      	bmi.n	8004ec0 <_printf_i+0xe8>
 8004eba:	0649      	lsls	r1, r1, #25
 8004ebc:	bf48      	it	mi
 8004ebe:	b2ad      	uxthmi	r5, r5
 8004ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ec2:	4853      	ldr	r0, [pc, #332]	@ (8005010 <_printf_i+0x238>)
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	bf14      	ite	ne
 8004ec8:	230a      	movne	r3, #10
 8004eca:	2308      	moveq	r3, #8
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ed2:	6866      	ldr	r6, [r4, #4]
 8004ed4:	60a6      	str	r6, [r4, #8]
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	bfa2      	ittt	ge
 8004eda:	6821      	ldrge	r1, [r4, #0]
 8004edc:	f021 0104 	bicge.w	r1, r1, #4
 8004ee0:	6021      	strge	r1, [r4, #0]
 8004ee2:	b90d      	cbnz	r5, 8004ee8 <_printf_i+0x110>
 8004ee4:	2e00      	cmp	r6, #0
 8004ee6:	d04b      	beq.n	8004f80 <_printf_i+0x1a8>
 8004ee8:	4616      	mov	r6, r2
 8004eea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eee:	fb03 5711 	mls	r7, r3, r1, r5
 8004ef2:	5dc7      	ldrb	r7, [r0, r7]
 8004ef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ef8:	462f      	mov	r7, r5
 8004efa:	42bb      	cmp	r3, r7
 8004efc:	460d      	mov	r5, r1
 8004efe:	d9f4      	bls.n	8004eea <_printf_i+0x112>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d10b      	bne.n	8004f1c <_printf_i+0x144>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	07df      	lsls	r7, r3, #31
 8004f08:	d508      	bpl.n	8004f1c <_printf_i+0x144>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	6861      	ldr	r1, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	bfde      	ittt	le
 8004f12:	2330      	movle	r3, #48	@ 0x30
 8004f14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f1c:	1b92      	subs	r2, r2, r6
 8004f1e:	6122      	str	r2, [r4, #16]
 8004f20:	f8cd a000 	str.w	sl, [sp]
 8004f24:	464b      	mov	r3, r9
 8004f26:	aa03      	add	r2, sp, #12
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff fee6 	bl	8004cfc <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d14a      	bne.n	8004fca <_printf_i+0x1f2>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b004      	add	sp, #16
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f043 0320 	orr.w	r3, r3, #32
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	4833      	ldr	r0, [pc, #204]	@ (8005014 <_printf_i+0x23c>)
 8004f48:	2778      	movs	r7, #120	@ 0x78
 8004f4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6831      	ldr	r1, [r6, #0]
 8004f52:	061f      	lsls	r7, r3, #24
 8004f54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f58:	d402      	bmi.n	8004f60 <_printf_i+0x188>
 8004f5a:	065f      	lsls	r7, r3, #25
 8004f5c:	bf48      	it	mi
 8004f5e:	b2ad      	uxthmi	r5, r5
 8004f60:	6031      	str	r1, [r6, #0]
 8004f62:	07d9      	lsls	r1, r3, #31
 8004f64:	bf44      	itt	mi
 8004f66:	f043 0320 	orrmi.w	r3, r3, #32
 8004f6a:	6023      	strmi	r3, [r4, #0]
 8004f6c:	b11d      	cbz	r5, 8004f76 <_printf_i+0x19e>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	e7ac      	b.n	8004ecc <_printf_i+0xf4>
 8004f72:	4827      	ldr	r0, [pc, #156]	@ (8005010 <_printf_i+0x238>)
 8004f74:	e7e9      	b.n	8004f4a <_printf_i+0x172>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f023 0320 	bic.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	e7f6      	b.n	8004f6e <_printf_i+0x196>
 8004f80:	4616      	mov	r6, r2
 8004f82:	e7bd      	b.n	8004f00 <_printf_i+0x128>
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	6825      	ldr	r5, [r4, #0]
 8004f88:	6961      	ldr	r1, [r4, #20]
 8004f8a:	1d18      	adds	r0, r3, #4
 8004f8c:	6030      	str	r0, [r6, #0]
 8004f8e:	062e      	lsls	r6, r5, #24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0x1c0>
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0x1c6>
 8004f98:	0668      	lsls	r0, r5, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0x1bc>
 8004f9c:	8019      	strh	r1, [r3, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	4616      	mov	r6, r2
 8004fa4:	e7bc      	b.n	8004f20 <_printf_i+0x148>
 8004fa6:	6833      	ldr	r3, [r6, #0]
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	6032      	str	r2, [r6, #0]
 8004fac:	681e      	ldr	r6, [r3, #0]
 8004fae:	6862      	ldr	r2, [r4, #4]
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7fb f92c 	bl	8000210 <memchr>
 8004fb8:	b108      	cbz	r0, 8004fbe <_printf_i+0x1e6>
 8004fba:	1b80      	subs	r0, r0, r6
 8004fbc:	6060      	str	r0, [r4, #4]
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc8:	e7aa      	b.n	8004f20 <_printf_i+0x148>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d0ad      	beq.n	8004f34 <_printf_i+0x15c>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	d413      	bmi.n	8005006 <_printf_i+0x22e>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	bfb8      	it	lt
 8004fe6:	4618      	movlt	r0, r3
 8004fe8:	e7a6      	b.n	8004f38 <_printf_i+0x160>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d09d      	beq.n	8004f34 <_printf_i+0x15c>
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	9903      	ldr	r1, [sp, #12]
 8004ffe:	1a5b      	subs	r3, r3, r1
 8005000:	42ab      	cmp	r3, r5
 8005002:	dcf2      	bgt.n	8004fea <_printf_i+0x212>
 8005004:	e7eb      	b.n	8004fde <_printf_i+0x206>
 8005006:	2500      	movs	r5, #0
 8005008:	f104 0619 	add.w	r6, r4, #25
 800500c:	e7f5      	b.n	8004ffa <_printf_i+0x222>
 800500e:	bf00      	nop
 8005010:	080052f1 	.word	0x080052f1
 8005014:	08005302 	.word	0x08005302

08005018 <__sflush_r>:
 8005018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800501c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005020:	0716      	lsls	r6, r2, #28
 8005022:	4605      	mov	r5, r0
 8005024:	460c      	mov	r4, r1
 8005026:	d454      	bmi.n	80050d2 <__sflush_r+0xba>
 8005028:	684b      	ldr	r3, [r1, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	dc02      	bgt.n	8005034 <__sflush_r+0x1c>
 800502e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	dd48      	ble.n	80050c6 <__sflush_r+0xae>
 8005034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005036:	2e00      	cmp	r6, #0
 8005038:	d045      	beq.n	80050c6 <__sflush_r+0xae>
 800503a:	2300      	movs	r3, #0
 800503c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005040:	682f      	ldr	r7, [r5, #0]
 8005042:	6a21      	ldr	r1, [r4, #32]
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	d030      	beq.n	80050aa <__sflush_r+0x92>
 8005048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	0759      	lsls	r1, r3, #29
 800504e:	d505      	bpl.n	800505c <__sflush_r+0x44>
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005056:	b10b      	cbz	r3, 800505c <__sflush_r+0x44>
 8005058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	4628      	mov	r0, r5
 8005064:	47b0      	blx	r6
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	d106      	bne.n	800507a <__sflush_r+0x62>
 800506c:	6829      	ldr	r1, [r5, #0]
 800506e:	291d      	cmp	r1, #29
 8005070:	d82b      	bhi.n	80050ca <__sflush_r+0xb2>
 8005072:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <__sflush_r+0x104>)
 8005074:	410a      	asrs	r2, r1
 8005076:	07d6      	lsls	r6, r2, #31
 8005078:	d427      	bmi.n	80050ca <__sflush_r+0xb2>
 800507a:	2200      	movs	r2, #0
 800507c:	6062      	str	r2, [r4, #4]
 800507e:	04d9      	lsls	r1, r3, #19
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	6022      	str	r2, [r4, #0]
 8005084:	d504      	bpl.n	8005090 <__sflush_r+0x78>
 8005086:	1c42      	adds	r2, r0, #1
 8005088:	d101      	bne.n	800508e <__sflush_r+0x76>
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	b903      	cbnz	r3, 8005090 <__sflush_r+0x78>
 800508e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005092:	602f      	str	r7, [r5, #0]
 8005094:	b1b9      	cbz	r1, 80050c6 <__sflush_r+0xae>
 8005096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800509a:	4299      	cmp	r1, r3
 800509c:	d002      	beq.n	80050a4 <__sflush_r+0x8c>
 800509e:	4628      	mov	r0, r5
 80050a0:	f7ff fca0 	bl	80049e4 <_free_r>
 80050a4:	2300      	movs	r3, #0
 80050a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80050a8:	e00d      	b.n	80050c6 <__sflush_r+0xae>
 80050aa:	2301      	movs	r3, #1
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	4602      	mov	r2, r0
 80050b2:	1c50      	adds	r0, r2, #1
 80050b4:	d1c9      	bne.n	800504a <__sflush_r+0x32>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0c6      	beq.n	800504a <__sflush_r+0x32>
 80050bc:	2b1d      	cmp	r3, #29
 80050be:	d001      	beq.n	80050c4 <__sflush_r+0xac>
 80050c0:	2b16      	cmp	r3, #22
 80050c2:	d11e      	bne.n	8005102 <__sflush_r+0xea>
 80050c4:	602f      	str	r7, [r5, #0]
 80050c6:	2000      	movs	r0, #0
 80050c8:	e022      	b.n	8005110 <__sflush_r+0xf8>
 80050ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	e01b      	b.n	800510a <__sflush_r+0xf2>
 80050d2:	690f      	ldr	r7, [r1, #16]
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	d0f6      	beq.n	80050c6 <__sflush_r+0xae>
 80050d8:	0793      	lsls	r3, r2, #30
 80050da:	680e      	ldr	r6, [r1, #0]
 80050dc:	bf08      	it	eq
 80050de:	694b      	ldreq	r3, [r1, #20]
 80050e0:	600f      	str	r7, [r1, #0]
 80050e2:	bf18      	it	ne
 80050e4:	2300      	movne	r3, #0
 80050e6:	eba6 0807 	sub.w	r8, r6, r7
 80050ea:	608b      	str	r3, [r1, #8]
 80050ec:	f1b8 0f00 	cmp.w	r8, #0
 80050f0:	dde9      	ble.n	80050c6 <__sflush_r+0xae>
 80050f2:	6a21      	ldr	r1, [r4, #32]
 80050f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050f6:	4643      	mov	r3, r8
 80050f8:	463a      	mov	r2, r7
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b0      	blx	r6
 80050fe:	2800      	cmp	r0, #0
 8005100:	dc08      	bgt.n	8005114 <__sflush_r+0xfc>
 8005102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005114:	4407      	add	r7, r0
 8005116:	eba8 0800 	sub.w	r8, r8, r0
 800511a:	e7e7      	b.n	80050ec <__sflush_r+0xd4>
 800511c:	dfbffffe 	.word	0xdfbffffe

08005120 <_fflush_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	690b      	ldr	r3, [r1, #16]
 8005124:	4605      	mov	r5, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b913      	cbnz	r3, 8005130 <_fflush_r+0x10>
 800512a:	2500      	movs	r5, #0
 800512c:	4628      	mov	r0, r5
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	b118      	cbz	r0, 800513a <_fflush_r+0x1a>
 8005132:	6a03      	ldr	r3, [r0, #32]
 8005134:	b90b      	cbnz	r3, 800513a <_fflush_r+0x1a>
 8005136:	f7ff fa4b 	bl	80045d0 <__sinit>
 800513a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f3      	beq.n	800512a <_fflush_r+0xa>
 8005142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005144:	07d0      	lsls	r0, r2, #31
 8005146:	d404      	bmi.n	8005152 <_fflush_r+0x32>
 8005148:	0599      	lsls	r1, r3, #22
 800514a:	d402      	bmi.n	8005152 <_fflush_r+0x32>
 800514c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514e:	f7ff fc46 	bl	80049de <__retarget_lock_acquire_recursive>
 8005152:	4628      	mov	r0, r5
 8005154:	4621      	mov	r1, r4
 8005156:	f7ff ff5f 	bl	8005018 <__sflush_r>
 800515a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800515c:	07da      	lsls	r2, r3, #31
 800515e:	4605      	mov	r5, r0
 8005160:	d4e4      	bmi.n	800512c <_fflush_r+0xc>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	059b      	lsls	r3, r3, #22
 8005166:	d4e1      	bmi.n	800512c <_fflush_r+0xc>
 8005168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800516a:	f7ff fc39 	bl	80049e0 <__retarget_lock_release_recursive>
 800516e:	e7dd      	b.n	800512c <_fflush_r+0xc>

08005170 <__swhatbuf_r>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	2900      	cmp	r1, #0
 800517a:	b096      	sub	sp, #88	@ 0x58
 800517c:	4615      	mov	r5, r2
 800517e:	461e      	mov	r6, r3
 8005180:	da0d      	bge.n	800519e <__swhatbuf_r+0x2e>
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005188:	f04f 0100 	mov.w	r1, #0
 800518c:	bf14      	ite	ne
 800518e:	2340      	movne	r3, #64	@ 0x40
 8005190:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005194:	2000      	movs	r0, #0
 8005196:	6031      	str	r1, [r6, #0]
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	b016      	add	sp, #88	@ 0x58
 800519c:	bd70      	pop	{r4, r5, r6, pc}
 800519e:	466a      	mov	r2, sp
 80051a0:	f000 f848 	bl	8005234 <_fstat_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	dbec      	blt.n	8005182 <__swhatbuf_r+0x12>
 80051a8:	9901      	ldr	r1, [sp, #4]
 80051aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051b2:	4259      	negs	r1, r3
 80051b4:	4159      	adcs	r1, r3
 80051b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ba:	e7eb      	b.n	8005194 <__swhatbuf_r+0x24>

080051bc <__smakebuf_r>:
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c0:	079d      	lsls	r5, r3, #30
 80051c2:	4606      	mov	r6, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	d507      	bpl.n	80051d8 <__smakebuf_r+0x1c>
 80051c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	2301      	movs	r3, #1
 80051d2:	6163      	str	r3, [r4, #20]
 80051d4:	b003      	add	sp, #12
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	ab01      	add	r3, sp, #4
 80051da:	466a      	mov	r2, sp
 80051dc:	f7ff ffc8 	bl	8005170 <__swhatbuf_r>
 80051e0:	9f00      	ldr	r7, [sp, #0]
 80051e2:	4605      	mov	r5, r0
 80051e4:	4639      	mov	r1, r7
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff f8da 	bl	80043a0 <_malloc_r>
 80051ec:	b948      	cbnz	r0, 8005202 <__smakebuf_r+0x46>
 80051ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f2:	059a      	lsls	r2, r3, #22
 80051f4:	d4ee      	bmi.n	80051d4 <__smakebuf_r+0x18>
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	f043 0302 	orr.w	r3, r3, #2
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	e7e2      	b.n	80051c8 <__smakebuf_r+0xc>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	6020      	str	r0, [r4, #0]
 8005206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	9b01      	ldr	r3, [sp, #4]
 800520e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005212:	b15b      	cbz	r3, 800522c <__smakebuf_r+0x70>
 8005214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005218:	4630      	mov	r0, r6
 800521a:	f000 f81d 	bl	8005258 <_isatty_r>
 800521e:	b128      	cbz	r0, 800522c <__smakebuf_r+0x70>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	431d      	orrs	r5, r3
 8005230:	81a5      	strh	r5, [r4, #12]
 8005232:	e7cf      	b.n	80051d4 <__smakebuf_r+0x18>

08005234 <_fstat_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	@ (8005254 <_fstat_r+0x20>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	f7fb fd4c 	bl	8000cde <_fstat>
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	d102      	bne.n	8005250 <_fstat_r+0x1c>
 800524a:	682b      	ldr	r3, [r5, #0]
 800524c:	b103      	cbz	r3, 8005250 <_fstat_r+0x1c>
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop
 8005254:	200002dc 	.word	0x200002dc

08005258 <_isatty_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_isatty_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb fd4b 	bl	8000cfe <_isatty>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_isatty_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_isatty_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200002dc 	.word	0x200002dc

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
