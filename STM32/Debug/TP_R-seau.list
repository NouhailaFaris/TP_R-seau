
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007010  08007010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ec  080071ec  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080071ec  080071ec  000081ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f4  080071f4  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071f8  080071f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080071fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08007264  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007264  00009308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e737  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230f  00000000  00000000  000177cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00019ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d0  00000000  00000000  0001a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023001  00000000  00000000  0001b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b70  00000000  00000000  0003e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf9ef  00000000  00000000  0004ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e6b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e18  00000000  00000000  0011e6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012250c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ff8 	.word	0x08006ff8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006ff8 	.word	0x08006ff8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_ldivmod>:
 8000b2c:	b97b      	cbnz	r3, 8000b4e <__aeabi_ldivmod+0x22>
 8000b2e:	b972      	cbnz	r2, 8000b4e <__aeabi_ldivmod+0x22>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bfbe      	ittt	lt
 8000b34:	2000      	movlt	r0, #0
 8000b36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b3a:	e006      	blt.n	8000b4a <__aeabi_ldivmod+0x1e>
 8000b3c:	bf08      	it	eq
 8000b3e:	2800      	cmpeq	r0, #0
 8000b40:	bf1c      	itt	ne
 8000b42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b46:	f04f 30ff 	movne.w	r0, #4294967295
 8000b4a:	f000 b9b5 	b.w	8000eb8 <__aeabi_idiv0>
 8000b4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b56:	2900      	cmp	r1, #0
 8000b58:	db09      	blt.n	8000b6e <__aeabi_ldivmod+0x42>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db1a      	blt.n	8000b94 <__aeabi_ldivmod+0x68>
 8000b5e:	f000 f84d 	bl	8000bfc <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1b      	blt.n	8000bb0 <__aeabi_ldivmod+0x84>
 8000b78:	f000 f840 	bl	8000bfc <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	4770      	bx	lr
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	f000 f82f 	bl	8000bfc <__udivmoddi4>
 8000b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4240      	negs	r0, r0
 8000baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f821 	bl	8000bfc <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <BMP280_get_trimming>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

void BMP280_get_trimming() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af04      	add	r7, sp, #16
	uint8_t calib_data[24];
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, 1, calib_data, 24, HAL_MAX_DELAY);
 8000ec2:	23ee      	movs	r3, #238	@ 0xee
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2318      	movs	r3, #24
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2288      	movs	r2, #136	@ 0x88
 8000ed8:	483b      	ldr	r0, [pc, #236]	@ (8000fc8 <BMP280_get_trimming+0x10c>)
 8000eda:	f002 fc07 	bl	80036ec <HAL_I2C_Mem_Read>

	dig_T1 = (calib_data[1] << 8) | calib_data[0];
 8000ede:	787b      	ldrb	r3, [r7, #1]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	783b      	ldrb	r3, [r7, #0]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <BMP280_get_trimming+0x110>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	dig_T2 = (calib_data[3] << 8) | calib_data[2];
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <BMP280_get_trimming+0x114>)
 8000f02:	801a      	strh	r2, [r3, #0]
	dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	793b      	ldrb	r3, [r7, #4]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <BMP280_get_trimming+0x118>)
 8000f14:	801a      	strh	r2, [r3, #0]

	dig_P1 = (calib_data[7] << 8) | calib_data[6];
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <BMP280_get_trimming+0x11c>)
 8000f28:	801a      	strh	r2, [r3, #0]
	dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8000f2a:	7a7b      	ldrb	r3, [r7, #9]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7a3b      	ldrb	r3, [r7, #8]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <BMP280_get_trimming+0x120>)
 8000f3a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <BMP280_get_trimming+0x124>)
 8000f4c:	801a      	strh	r2, [r3, #0]
	dig_P4 = (calib_data[13] << 8) | calib_data[12];
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <BMP280_get_trimming+0x128>)
 8000f5e:	801a      	strh	r2, [r3, #0]
	dig_P5 = (calib_data[15] << 8) | calib_data[14];
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <BMP280_get_trimming+0x12c>)
 8000f70:	801a      	strh	r2, [r3, #0]
	dig_P6 = (calib_data[17] << 8) | calib_data[16];
 8000f72:	7c7b      	ldrb	r3, [r7, #17]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7c3b      	ldrb	r3, [r7, #16]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <BMP280_get_trimming+0x130>)
 8000f82:	801a      	strh	r2, [r3, #0]
	dig_P7 = (calib_data[19] << 8) | calib_data[18];
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7cbb      	ldrb	r3, [r7, #18]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <BMP280_get_trimming+0x134>)
 8000f94:	801a      	strh	r2, [r3, #0]
	dig_P8 = (calib_data[21] << 8) | calib_data[20];
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <BMP280_get_trimming+0x138>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	dig_P9 = (calib_data[23] << 8) | calib_data[22];
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <BMP280_get_trimming+0x13c>)
 8000fb8:	801a      	strh	r2, [r3, #0]

	printf("Calibration parameters read successfully.\n");
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <BMP280_get_trimming+0x140>)
 8000fbc:	f005 fa66 	bl	800648c <puts>
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000c8 	.word	0x200000c8
 8000fcc:	20000084 	.word	0x20000084
 8000fd0:	20000086 	.word	0x20000086
 8000fd4:	20000088 	.word	0x20000088
 8000fd8:	2000008a 	.word	0x2000008a
 8000fdc:	2000008c 	.word	0x2000008c
 8000fe0:	2000008e 	.word	0x2000008e
 8000fe4:	20000090 	.word	0x20000090
 8000fe8:	20000092 	.word	0x20000092
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	20000096 	.word	0x20000096
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	2000009a 	.word	0x2000009a
 8000ffc:	08007010 	.word	0x08007010

08001000 <BMP280_check>:


int BMP280_check() {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8001006:	23d0      	movs	r3, #208	@ 0xd0
 8001008:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800100a:	23ee      	movs	r3, #238	@ 0xee
 800100c:	4619      	mov	r1, r3
 800100e:	1d3a      	adds	r2, r7, #4
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	481a      	ldr	r0, [pc, #104]	@ (8001084 <BMP280_check+0x84>)
 800101a:	f002 f837 	bl	800308c <HAL_I2C_Master_Transmit>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8001028:	4817      	ldr	r0, [pc, #92]	@ (8001088 <BMP280_check+0x88>)
 800102a:	f005 fa2f 	bl	800648c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 800102e:	23ee      	movs	r3, #238	@ 0xee
 8001030:	4619      	mov	r1, r3
 8001032:	2301      	movs	r3, #1
 8001034:	4618      	mov	r0, r3
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4603      	mov	r3, r0
 8001040:	4810      	ldr	r0, [pc, #64]	@ (8001084 <BMP280_check+0x84>)
 8001042:	f002 f921 	bl	8003288 <HAL_I2C_Master_Receive>
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 8001050:	480e      	ldr	r0, [pc, #56]	@ (800108c <BMP280_check+0x8c>)
 8001052:	f005 fa1b 	bl	800648c <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	4619      	mov	r1, r3
 800105a:	480d      	ldr	r0, [pc, #52]	@ (8001090 <BMP280_check+0x90>)
 800105c:	f005 f9ae 	bl	80063bc <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8001060:	793b      	ldrb	r3, [r7, #4]
 8001062:	2258      	movs	r2, #88	@ 0x58
 8001064:	4293      	cmp	r3, r2
 8001066:	d104      	bne.n	8001072 <BMP280_check+0x72>
		printf("Ok\r\n");
 8001068:	480a      	ldr	r0, [pc, #40]	@ (8001094 <BMP280_check+0x94>)
 800106a:	f005 fa0f 	bl	800648c <puts>
		return 0;
 800106e:	2300      	movs	r3, #0
 8001070:	e003      	b.n	800107a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <BMP280_check+0x98>)
 8001074:	f005 fa0a 	bl	800648c <puts>
		return 1;
 8001078:	2301      	movs	r3, #1
	}
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000c8 	.word	0x200000c8
 8001088:	0800703c 	.word	0x0800703c
 800108c:	08007060 	.word	0x08007060
 8001090:	08007084 	.word	0x08007084
 8001094:	08007090 	.word	0x08007090
 8001098:	08007094 	.word	0x08007094

0800109c <BMP280_init>:

int BMP280_init() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80010a2:	2357      	movs	r3, #87	@ 0x57
 80010a4:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <BMP280_init+0x44>)
 80010a8:	f005 f9f0 	bl	800648c <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 80010ac:	22f4      	movs	r2, #244	@ 0xf4
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f000 f81a 	bl	80010ec <BMP280_Write_Reg>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <BMP280_init+0x34>
		printf("Config Ok\r\n");
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <BMP280_init+0x48>)
 80010c4:	f005 f9e2 	bl	800648c <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 80010c8:	f7ff fef8 	bl	8000ebc <BMP280_get_trimming>
	return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e003      	b.n	80010d8 <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <BMP280_init+0x4c>)
 80010d2:	f005 f9db 	bl	800648c <puts>
		return 1;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	080070a0 	.word	0x080070a0
 80010e4:	080070b0 	.word	0x080070b0
 80010e8:	080070bc 	.word	0x080070bc

080010ec <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8001104:	23ee      	movs	r3, #238	@ 0xee
 8001106:	4619      	mov	r1, r3
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	4814      	ldr	r0, [pc, #80]	@ (8001168 <BMP280_Write_Reg+0x7c>)
 8001116:	f001 ffb9 	bl	800308c <HAL_I2C_Master_Transmit>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 8001124:	4811      	ldr	r0, [pc, #68]	@ (800116c <BMP280_Write_Reg+0x80>)
 8001126:	f005 f9b1 	bl	800648c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800112a:	23ee      	movs	r3, #238	@ 0xee
 800112c:	4619      	mov	r1, r3
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	480b      	ldr	r0, [pc, #44]	@ (8001168 <BMP280_Write_Reg+0x7c>)
 800113c:	f002 f8a4 	bl	8003288 <HAL_I2C_Master_Receive>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 800114a:	4809      	ldr	r0, [pc, #36]	@ (8001170 <BMP280_Write_Reg+0x84>)
 800114c:	f005 f99e 	bl	800648c <puts>
	}

	if (buf[0] == value) {
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	79ba      	ldrb	r2, [r7, #6]
 8001154:	429a      	cmp	r2, r3
 8001156:	d101      	bne.n	800115c <BMP280_Write_Reg+0x70>
		return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 800115c:	2301      	movs	r3, #1
	}
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c8 	.word	0x200000c8
 800116c:	080070cc 	.word	0x080070cc
 8001170:	080070e8 	.word	0x080070e8

08001174 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001184:	23ee      	movs	r3, #238	@ 0xee
 8001186:	4619      	mov	r1, r3
 8001188:	1dfa      	adds	r2, r7, #7
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <BMP280_Read_Reg+0x70>)
 8001194:	f001 ff7a 	bl	800308c <HAL_I2C_Master_Transmit>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80011a2:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <BMP280_Read_Reg+0x74>)
 80011a4:	f005 f972 	bl	800648c <puts>
	}

	buf = (uint8_t*) malloc(length);
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 ff86 	bl	80060bc <malloc>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80011b4:	23ee      	movs	r3, #238	@ 0xee
 80011b6:	4619      	mov	r1, r3
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <BMP280_Read_Reg+0x70>)
 80011c6:	f002 f85f 	bl	8003288 <HAL_I2C_Master_Receive>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <BMP280_Read_Reg+0x78>)
 80011d6:	f005 f959 	bl	800648c <puts>
	}

	return buf;
 80011da:	68bb      	ldr	r3, [r7, #8]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000c8 	.word	0x200000c8
 80011e8:	080070cc 	.word	0x080070cc
 80011ec:	080070e8 	.word	0x080070e8

080011f0 <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	10da      	asrs	r2, r3, #3
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <bmp280_compensate_T_int32+0x74>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <bmp280_compensate_T_int32+0x78>)
 8001206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	12db      	asrs	r3, r3, #11
 8001210:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	111b      	asrs	r3, r3, #4
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <bmp280_compensate_T_int32+0x74>)
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	1112      	asrs	r2, r2, #4
 8001220:	4910      	ldr	r1, [pc, #64]	@ (8001264 <bmp280_compensate_T_int32+0x74>)
 8001222:	8809      	ldrh	r1, [r1, #0]
 8001224:	1a52      	subs	r2, r2, r1
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <bmp280_compensate_T_int32+0x7c>)
 800122e:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	139b      	asrs	r3, r3, #14
 8001238:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4413      	add	r3, r2
 8001240:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <bmp280_compensate_T_int32+0x80>)
 8001242:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001244:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <bmp280_compensate_T_int32+0x80>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3380      	adds	r3, #128	@ 0x80
 8001250:	121b      	asrs	r3, r3, #8
 8001252:	60fb      	str	r3, [r7, #12]
	return T;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	4618      	mov	r0, r3
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000084 	.word	0x20000084
 8001268:	20000086 	.word	0x20000086
 800126c:	20000088 	.word	0x20000088
 8001270:	2000009c 	.word	0x2000009c

08001274 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8001274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001278:	b0ca      	sub	sp, #296	@ 0x128
 800127a:	af00      	add	r7, sp, #0
 800127c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001280:	4baf      	ldr	r3, [pc, #700]	@ (8001540 <bmp280_compensate_P_int64+0x2cc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	17da      	asrs	r2, r3, #31
 8001286:	461c      	mov	r4, r3
 8001288:	4615      	mov	r5, r2
 800128a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800128e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001292:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8001296:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800129a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800129e:	fb03 f102 	mul.w	r1, r3, r2
 80012a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	18ca      	adds	r2, r1, r3
 80012b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012b4:	fba3 8903 	umull	r8, r9, r3, r3
 80012b8:	eb02 0309 	add.w	r3, r2, r9
 80012bc:	4699      	mov	r9, r3
 80012be:	4ba1      	ldr	r3, [pc, #644]	@ (8001544 <bmp280_compensate_P_int64+0x2d0>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	17da      	asrs	r2, r3, #31
 80012c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012d4:	4603      	mov	r3, r0
 80012d6:	fb03 f209 	mul.w	r2, r3, r9
 80012da:	460b      	mov	r3, r1
 80012dc:	fb08 f303 	mul.w	r3, r8, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	4602      	mov	r2, r0
 80012e4:	fba8 1202 	umull	r1, r2, r8, r2
 80012e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012ec:	460a      	mov	r2, r1
 80012ee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012f6:	4413      	add	r3, r2
 80012f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001300:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001304:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 8001308:	4b8f      	ldr	r3, [pc, #572]	@ (8001548 <bmp280_compensate_P_int64+0x2d4>)
 800130a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130e:	b21b      	sxth	r3, r3
 8001310:	17da      	asrs	r2, r3, #31
 8001312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001316:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800131a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800131e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001322:	462a      	mov	r2, r5
 8001324:	fb02 f203 	mul.w	r2, r2, r3
 8001328:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800132c:	4621      	mov	r1, r4
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	441a      	add	r2, r3
 8001334:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001338:	4621      	mov	r1, r4
 800133a:	fba3 1301 	umull	r1, r3, r3, r1
 800133e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001342:	460b      	mov	r3, r1
 8001344:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800135e:	462b      	mov	r3, r5
 8001360:	0459      	lsls	r1, r3, #17
 8001362:	4623      	mov	r3, r4
 8001364:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001368:	4623      	mov	r3, r4
 800136a:	0458      	lsls	r0, r3, #17
 800136c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001370:	1814      	adds	r4, r2, r0
 8001372:	643c      	str	r4, [r7, #64]	@ 0x40
 8001374:	414b      	adcs	r3, r1
 8001376:	647b      	str	r3, [r7, #68]	@ 0x44
 8001378:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800137c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8001380:	4b72      	ldr	r3, [pc, #456]	@ (800154c <bmp280_compensate_P_int64+0x2d8>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	b21b      	sxth	r3, r3
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800138e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001392:	f04f 0000 	mov.w	r0, #0
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800139e:	00d9      	lsls	r1, r3, #3
 80013a0:	2000      	movs	r0, #0
 80013a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013a6:	1814      	adds	r4, r2, r0
 80013a8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80013aa:	414b      	adcs	r3, r1
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80013b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 80013b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013be:	fb03 f102 	mul.w	r1, r3, r2
 80013c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	18ca      	adds	r2, r1, r3
 80013d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013d4:	fba3 1303 	umull	r1, r3, r3, r3
 80013d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013dc:	460b      	mov	r3, r1
 80013de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013ec:	4b58      	ldr	r3, [pc, #352]	@ (8001550 <bmp280_compensate_P_int64+0x2dc>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	17da      	asrs	r2, r3, #31
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013fe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001402:	462b      	mov	r3, r5
 8001404:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001408:	4642      	mov	r2, r8
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	464b      	mov	r3, r9
 8001410:	4621      	mov	r1, r4
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	4622      	mov	r2, r4
 800141a:	4641      	mov	r1, r8
 800141c:	fba2 1201 	umull	r1, r2, r2, r1
 8001420:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001424:	460a      	mov	r2, r1
 8001426:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800142a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800142e:	4413      	add	r3, r2
 8001430:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001434:	f04f 0000 	mov.w	r0, #0
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001440:	4623      	mov	r3, r4
 8001442:	0a18      	lsrs	r0, r3, #8
 8001444:	462b      	mov	r3, r5
 8001446:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800144a:	462b      	mov	r3, r5
 800144c:	1219      	asrs	r1, r3, #8
 800144e:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <bmp280_compensate_P_int64+0x2e0>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	b21b      	sxth	r3, r3
 8001456:	17da      	asrs	r2, r3, #31
 8001458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800145c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001460:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001464:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001468:	464a      	mov	r2, r9
 800146a:	fb02 f203 	mul.w	r2, r2, r3
 800146e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001472:	4644      	mov	r4, r8
 8001474:	fb04 f303 	mul.w	r3, r4, r3
 8001478:	441a      	add	r2, r3
 800147a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800147e:	4644      	mov	r4, r8
 8001480:	fba3 4304 	umull	r4, r3, r3, r4
 8001484:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001488:	4623      	mov	r3, r4
 800148a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800148e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80014a4:	464c      	mov	r4, r9
 80014a6:	0323      	lsls	r3, r4, #12
 80014a8:	4644      	mov	r4, r8
 80014aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014ae:	4644      	mov	r4, r8
 80014b0:	0322      	lsls	r2, r4, #12
 80014b2:	1884      	adds	r4, r0, r2
 80014b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80014b6:	eb41 0303 	adc.w	r3, r1, r3
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80014bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 80014c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014d4:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <bmp280_compensate_P_int64+0x2e4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014e8:	462b      	mov	r3, r5
 80014ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ee:	4642      	mov	r2, r8
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	464b      	mov	r3, r9
 80014f6:	4621      	mov	r1, r4
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4622      	mov	r2, r4
 8001500:	4641      	mov	r1, r8
 8001502:	fba2 1201 	umull	r1, r2, r2, r1
 8001506:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800150a:	460a      	mov	r2, r1
 800150c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001510:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001514:	4413      	add	r3, r2
 8001516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001526:	4629      	mov	r1, r5
 8001528:	104a      	asrs	r2, r1, #1
 800152a:	4629      	mov	r1, r5
 800152c:	17cb      	asrs	r3, r1, #31
 800152e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 8001532:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001536:	4313      	orrs	r3, r2
 8001538:	d110      	bne.n	800155c <bmp280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800153a:	2300      	movs	r3, #0
 800153c:	e154      	b.n	80017e8 <bmp280_compensate_P_int64+0x574>
 800153e:	bf00      	nop
 8001540:	2000009c 	.word	0x2000009c
 8001544:	20000094 	.word	0x20000094
 8001548:	20000092 	.word	0x20000092
 800154c:	20000090 	.word	0x20000090
 8001550:	2000008e 	.word	0x2000008e
 8001554:	2000008c 	.word	0x2000008c
 8001558:	2000008a 	.word	0x2000008a
	}

	p = 1048576 - adc_P;
 800155c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001560:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001564:	17da      	asrs	r2, r3, #31
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800156a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800156e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8001572:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001576:	105b      	asrs	r3, r3, #1
 8001578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800157c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001580:	07db      	lsls	r3, r3, #31
 8001582:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001586:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800158a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800158e:	4621      	mov	r1, r4
 8001590:	1a89      	subs	r1, r1, r2
 8001592:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001594:	4629      	mov	r1, r5
 8001596:	eb61 0303 	sbc.w	r3, r1, r3
 800159a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800159c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015a0:	4622      	mov	r2, r4
 80015a2:	462b      	mov	r3, r5
 80015a4:	1891      	adds	r1, r2, r2
 80015a6:	6239      	str	r1, [r7, #32]
 80015a8:	415b      	adcs	r3, r3
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b0:	4621      	mov	r1, r4
 80015b2:	1851      	adds	r1, r2, r1
 80015b4:	61b9      	str	r1, [r7, #24]
 80015b6:	4629      	mov	r1, r5
 80015b8:	414b      	adcs	r3, r1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c8:	4649      	mov	r1, r9
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015d2:	4641      	mov	r1, r8
 80015d4:	018a      	lsls	r2, r1, #6
 80015d6:	4641      	mov	r1, r8
 80015d8:	1889      	adds	r1, r1, r2
 80015da:	6139      	str	r1, [r7, #16]
 80015dc:	4649      	mov	r1, r9
 80015de:	eb43 0101 	adc.w	r1, r3, r1
 80015e2:	6179      	str	r1, [r7, #20]
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015f0:	4649      	mov	r1, r9
 80015f2:	008b      	lsls	r3, r1, #2
 80015f4:	4641      	mov	r1, r8
 80015f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015fa:	4641      	mov	r1, r8
 80015fc:	008a      	lsls	r2, r1, #2
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	4603      	mov	r3, r0
 8001604:	4622      	mov	r2, r4
 8001606:	189b      	adds	r3, r3, r2
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	460b      	mov	r3, r1
 800160c:	462a      	mov	r2, r5
 800160e:	eb42 0303 	adc.w	r3, r2, r3
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001620:	4649      	mov	r1, r9
 8001622:	008b      	lsls	r3, r1, #2
 8001624:	4641      	mov	r1, r8
 8001626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800162a:	4641      	mov	r1, r8
 800162c:	008a      	lsls	r2, r1, #2
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	4603      	mov	r3, r0
 8001634:	4622      	mov	r2, r4
 8001636:	189b      	adds	r3, r3, r2
 8001638:	673b      	str	r3, [r7, #112]	@ 0x70
 800163a:	462b      	mov	r3, r5
 800163c:	460a      	mov	r2, r1
 800163e:	eb42 0303 	adc.w	r3, r2, r3
 8001642:	677b      	str	r3, [r7, #116]	@ 0x74
 8001644:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001648:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800164c:	f7ff fa6e 	bl	8000b2c <__aeabi_ldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <bmp280_compensate_P_int64+0x580>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b21b      	sxth	r3, r3
 8001660:	17da      	asrs	r2, r3, #31
 8001662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001664:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001666:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0b50      	lsrs	r0, r2, #13
 8001674:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001678:	1359      	asrs	r1, r3, #13
 800167a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800167e:	462b      	mov	r3, r5
 8001680:	fb00 f203 	mul.w	r2, r0, r3
 8001684:	4623      	mov	r3, r4
 8001686:	fb03 f301 	mul.w	r3, r3, r1
 800168a:	4413      	add	r3, r2
 800168c:	4622      	mov	r2, r4
 800168e:	fba2 1200 	umull	r1, r2, r2, r0
 8001692:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800169c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0b50      	lsrs	r0, r2, #13
 80016b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016b8:	1359      	asrs	r1, r3, #13
 80016ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016be:	462b      	mov	r3, r5
 80016c0:	fb00 f203 	mul.w	r2, r0, r3
 80016c4:	4623      	mov	r3, r4
 80016c6:	fb03 f301 	mul.w	r3, r3, r1
 80016ca:	4413      	add	r3, r2
 80016cc:	4622      	mov	r2, r4
 80016ce:	fba2 1200 	umull	r1, r2, r2, r0
 80016d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016d6:	460a      	mov	r2, r1
 80016d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016e0:	4413      	add	r3, r2
 80016e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016f2:	4621      	mov	r1, r4
 80016f4:	0e4a      	lsrs	r2, r1, #25
 80016f6:	4629      	mov	r1, r5
 80016f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016fc:	4629      	mov	r1, r5
 80016fe:	164b      	asrs	r3, r1, #25
 8001700:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8001704:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <bmp280_compensate_P_int64+0x584>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	b21b      	sxth	r3, r3
 800170c:	17da      	asrs	r2, r3, #31
 800170e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001710:	667a      	str	r2, [r7, #100]	@ 0x64
 8001712:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001716:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800171a:	462a      	mov	r2, r5
 800171c:	fb02 f203 	mul.w	r2, r2, r3
 8001720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001724:	4621      	mov	r1, r4
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001730:	4621      	mov	r1, r4
 8001732:	fba2 1201 	umull	r1, r2, r2, r1
 8001736:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800173a:	460a      	mov	r2, r1
 800173c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001740:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001744:	4413      	add	r3, r2
 8001746:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001756:	4621      	mov	r1, r4
 8001758:	0cca      	lsrs	r2, r1, #19
 800175a:	4629      	mov	r1, r5
 800175c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001760:	4629      	mov	r1, r5
 8001762:	14cb      	asrs	r3, r1, #19
 8001764:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = (((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7) << 4));
 8001768:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800176c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001770:	1884      	adds	r4, r0, r2
 8001772:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001774:	eb41 0303 	adc.w	r3, r1, r3
 8001778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800177a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800177e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001782:	4621      	mov	r1, r4
 8001784:	1889      	adds	r1, r1, r2
 8001786:	6539      	str	r1, [r7, #80]	@ 0x50
 8001788:	4629      	mov	r1, r5
 800178a:	eb43 0101 	adc.w	r1, r3, r1
 800178e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800179c:	4623      	mov	r3, r4
 800179e:	0a18      	lsrs	r0, r3, #8
 80017a0:	462b      	mov	r3, r5
 80017a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017a6:	462b      	mov	r3, r5
 80017a8:	1219      	asrs	r1, r3, #8
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <bmp280_compensate_P_int64+0x588>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	17da      	asrs	r2, r3, #31
 80017b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017c4:	464c      	mov	r4, r9
 80017c6:	0123      	lsls	r3, r4, #4
 80017c8:	4644      	mov	r4, r8
 80017ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017ce:	4644      	mov	r4, r8
 80017d0:	0122      	lsls	r2, r4, #4
 80017d2:	1884      	adds	r4, r0, r2
 80017d4:	603c      	str	r4, [r7, #0]
 80017d6:	eb41 0303 	adc.w	r3, r1, r3
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 80017e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ee:	46bd      	mov	sp, r7
 80017f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f4:	2000009a 	.word	0x2000009a
 80017f8:	20000098 	.word	0x20000098
 80017fc:	20000096 	.word	0x20000096

08001800 <BMP280_get_temperature>:
BMP280_S32_t BMP280_get_temperature() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8001806:	23fa      	movs	r3, #250	@ 0xfa
 8001808:	2203      	movs	r2, #3
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fcb1 	bl	8001174 <BMP280_Read_Reg>
 8001812:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	031a      	lsls	r2, r3, #12
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3301      	adds	r3, #1
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	3202      	adds	r2, #2
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	0912      	lsrs	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 800182e:	4313      	orrs	r3, r2
 8001830:	603b      	str	r3, [r7, #0]

	free(buf);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f004 fc4a 	bl	80060cc <free>

	return adc_T;
 8001838:	683b      	ldr	r3, [r7, #0]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8001848:	23f7      	movs	r3, #247	@ 0xf7
 800184a:	2203      	movs	r2, #3
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc90 	bl	8001174 <BMP280_Read_Reg>
 8001854:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	031a      	lsls	r2, r3, #12
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3301      	adds	r3, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4313      	orrs	r3, r2
            		| ((BMP280_S32_t)(buf[2]) >> 4);
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	3202      	adds	r2, #2
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	0912      	lsrs	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001870:	4313      	orrs	r3, r2
 8001872:	603b      	str	r3, [r7, #0]

	free(buf);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f004 fc29 	bl	80060cc <free>

	return adc_P;
 800187a:	683b      	ldr	r3, [r7, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <rotate_motor_dynamic>:
    // Relance la réception UART après traitement de la commande
    HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
}
*/
// Fonction pour ajuster l'angle du moteur
void rotate_motor_dynamic(uint8_t angle, uint8_t direction) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef pHeader;
	uint8_t data[2];
	uint32_t pTxMailbox;

	// Configurer l'en-tête CAN
	pHeader.StdId = 0x61;
 8001894:	2361      	movs	r3, #97	@ 0x61
 8001896:	613b      	str	r3, [r7, #16]
	pHeader.IDE = CAN_ID_STD;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
	pHeader.RTR = CAN_RTR_DATA;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
	pHeader.DLC = 2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	623b      	str	r3, [r7, #32]

	// Configurer les données
	data[0] = angle;     // Angle dynamique
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	733b      	strb	r3, [r7, #12]
	data[1] = direction; // Direction
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	737b      	strb	r3, [r7, #13]

	// Envoi du message CAN
	if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	f107 020c 	add.w	r2, r7, #12
 80018b4:	f107 0110 	add.w	r1, r7, #16
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <rotate_motor_dynamic+0x5c>)
 80018ba:	f000 fe80 	bl	80025be <HAL_CAN_AddTxMessage>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <rotate_motor_dynamic+0x46>
		Error_Handler();
 80018c4:	f000 fa38 	bl	8001d38 <Error_Handler>
	} else {
		printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
	}
}
 80018c8:	e005      	b.n	80018d6 <rotate_motor_dynamic+0x52>
		printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	79ba      	ldrb	r2, [r7, #6]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <rotate_motor_dynamic+0x60>)
 80018d2:	f004 fd73 	bl	80063bc <iprintf>
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000a0 	.word	0x200000a0
 80018e4:	08007148 	.word	0x08007148

080018e8 <calculate_angle>:

// Fonction pour calculer l'angle basé sur la température
uint8_t calculate_angle(float temp) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t angle = 5 + (temp - TEMP_CIBLE) * 5; // Augmente l'angle en fonction de la température
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe40 	bl	8000578 <__aeabi_f2d>
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <calculate_angle+0x6c>)
 80018fe:	f7fe fcdb 	bl	80002b8 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <calculate_angle+0x70>)
 8001910:	f7fe fe8a 	bl	8000628 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <calculate_angle+0x70>)
 8001922:	f7fe fccb 	bl	80002bc <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f88d 	bl	8000a4c <__aeabi_d2uiz>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
	if (angle > 90) angle = 90; // Limite à 90°
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b5a      	cmp	r3, #90	@ 0x5a
 800193a:	d901      	bls.n	8001940 <calculate_angle+0x58>
 800193c:	235a      	movs	r3, #90	@ 0x5a
 800193e:	73fb      	strb	r3, [r7, #15]
	if (angle < 5) angle = 5;   // Limite à 5°
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d801      	bhi.n	800194a <calculate_angle+0x62>
 8001946:	2305      	movs	r3, #5
 8001948:	73fb      	strb	r3, [r7, #15]
	return angle;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40390000 	.word	0x40390000
 8001958:	40140000 	.word	0x40140000

0800195c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001962:	f000 fc57 	bl	8002214 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001966:	f000 f853 	bl	8001a10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800196a:	f000 f977 	bl	8001c5c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800196e:	f000 f94b 	bl	8001c08 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001972:	f000 f91f 	bl	8001bb4 <MX_UART4_Init>
	MX_CAN1_Init();
 8001976:	f000 f8b9 	bl	8001aec <MX_CAN1_Init>
	MX_I2C1_Init();
 800197a:	f000 f8ed 	bl	8001b58 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	BMP280_S32_t raw_temp, raw_press;
	BMP280_S32_t comp_temp;
	BMP280_U32_t comp_press;
	printf("======= Démarrage du système =======\r\n");
 800197e:	481f      	ldr	r0, [pc, #124]	@ (80019fc <main+0xa0>)
 8001980:	f004 fd84 	bl	800648c <puts>
	BMP280_check();
 8001984:	f7ff fb3c 	bl	8001000 <BMP280_check>
	BMP280_init();
 8001988:	f7ff fb88 	bl	800109c <BMP280_init>
	HAL_CAN_Start(&hcan1);
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <main+0xa4>)
 800198e:	f000 fdd2 	bl	8002536 <HAL_CAN_Start>

	// Activation de la réception UART
	HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001992:	2207      	movs	r2, #7
 8001994:	491b      	ldr	r1, [pc, #108]	@ (8001a04 <main+0xa8>)
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <main+0xac>)
 8001998:	f003 fc0b 	bl	80051b2 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		raw_temp = BMP280_get_temperature();
 800199c:	f7ff ff30 	bl	8001800 <BMP280_get_temperature>
 80019a0:	6178      	str	r0, [r7, #20]
		raw_press = BMP280_get_pressure();
 80019a2:	f7ff ff4e 	bl	8001842 <BMP280_get_pressure>
 80019a6:	6138      	str	r0, [r7, #16]

		// Compensation des valeurs
		comp_temp = bmp280_compensate_T_int32(raw_temp);
 80019a8:	6978      	ldr	r0, [r7, #20]
 80019aa:	f7ff fc21 	bl	80011f0 <bmp280_compensate_T_int32>
 80019ae:	60f8      	str	r0, [r7, #12]
		comp_press = bmp280_compensate_P_int64(raw_press);
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f7ff fc5f 	bl	8001274 <bmp280_compensate_P_int64>
 80019b6:	4603      	mov	r3, r0
 80019b8:	60bb      	str	r3, [r7, #8]
		printf("------------------------------------------------\r\n");
		printf("Température compensée : %ld.%02ld°C\r\n", comp_temp / 100, abs(comp_temp % 100));
		printf("Pression compensée : %ld.%02ld hPa\r\n", comp_press / 25600, (comp_press / 256) % 100);*/

		// Calcul de l'angle en fonction de la température
		uint8_t angle = calculate_angle(comp_temp / 100.0);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7fe fdca 	bl	8000554 <__aeabi_i2d>
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <main+0xb0>)
 80019c6:	f7fe ff59 	bl	800087c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f85b 	bl	8000a8c <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	ee00 3a10 	vmov	s0, r3
 80019dc:	f7ff ff84 	bl	80018e8 <calculate_angle>
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]

		// Faire tourner le moteur avec l'angle calculé
		rotate_motor_dynamic(angle, 0); // 0 pour sens horaire
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff4b 	bl	8001884 <rotate_motor_dynamic>

		// Attendre un peu avant de refaire le calcul
		HAL_Delay(1000);
 80019ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f2:	f000 fc81 	bl	80022f8 <HAL_Delay>
	{
 80019f6:	bf00      	nop
 80019f8:	e7d0      	b.n	800199c <main+0x40>
 80019fa:	bf00      	nop
 80019fc:	08007178 	.word	0x08007178
 8001a00:	200000a0 	.word	0x200000a0
 8001a04:	200001ac 	.word	0x200001ac
 8001a08:	2000011c 	.word	0x2000011c
 8001a0c:	40590000 	.word	0x40590000

08001a10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	@ 0x50
 8001a14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	2234      	movs	r2, #52	@ 0x34
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fe14 	bl	800664c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <SystemClock_Config+0xd4>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ae4 <SystemClock_Config+0xd4>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a44:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <SystemClock_Config+0xd4>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <SystemClock_Config+0xd8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <SystemClock_Config+0xd8>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <SystemClock_Config+0xd8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a74:	2301      	movs	r3, #1
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a78:	2310      	movs	r3, #16
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001a84:	2310      	movs	r3, #16
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001a88:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a8c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 f80e 	bl	8004ac0 <HAL_RCC_OscConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001aaa:	f000 f945 	bl	8001d38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	230f      	movs	r3, #15
 8001ab0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001abe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fcae 	bl	800442c <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001ad6:	f000 f92f 	bl	8001d38 <Error_Handler>
	}
}
 8001ada:	bf00      	nop
 8001adc:	3750      	adds	r7, #80	@ 0x50
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001af2:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <MX_CAN1_Init+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001af8:	2206      	movs	r2, #6
 8001afa:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b02:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b0a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001b0e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b16:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <MX_CAN1_Init+0x64>)
 8001b3e:	f000 fbff 	bl	8002340 <HAL_CAN_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001b48:	f000 f8f6 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200000a0 	.word	0x200000a0
 8001b54:	40006400 	.word	0x40006400

08001b58 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b5e:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <MX_I2C1_Init+0x54>)
 8001b60:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b64:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <MX_I2C1_Init+0x58>)
 8001b66:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b7a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b96:	f001 f935 	bl	8002e04 <HAL_I2C_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001ba0:	f000 f8ca 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200000c8 	.word	0x200000c8
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <MX_UART4_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_UART4_Init+0x4c>)
 8001bec:	f003 fa06 	bl	8004ffc <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001bf6:	f000 f89f 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000011c 	.word	0x2000011c
 8001c04:	40004c00 	.word	0x40004c00

08001c08 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <MX_USART2_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c40:	f003 f9dc 	bl	8004ffc <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001c4a:	f000 f875 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000164 	.word	0x20000164
 8001c58:	40004400 	.word	0x40004400

08001c5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	4812      	ldr	r0, [pc, #72]	@ (8001d30 <MX_GPIO_Init+0xd4>)
 8001ce8:	f001 f872 	bl	8002dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001cec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cf2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cf6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <MX_GPIO_Init+0xd8>)
 8001d04:	f000 fed0 	bl	8002aa8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <MX_GPIO_Init+0xd4>)
 8001d20:	f000 fec2 	bl	8002aa8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	@ 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020800 	.word	0x40020800

08001d38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <Error_Handler+0x8>

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d82:	2007      	movs	r0, #7
 8001d84:	f000 fdbc 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_CAN_MspInit+0x84>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e00:	2309      	movs	r3, #9
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_CAN_MspInit+0x8c>)
 8001e0c:	f000 fe4c 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40006400 	.word	0x40006400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400

08001e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_I2C_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e62:	23c0      	movs	r3, #192	@ 0xc0
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e72:	2304      	movs	r3, #4
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <HAL_I2C_MspInit+0x8c>)
 8001e7e:	f000 fe13 	bl	8002aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	@ 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a36      	ldr	r2, [pc, #216]	@ (8001fac <HAL_UART_MspInit+0xf8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d134      	bne.n	8001f40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4822      	ldr	r0, [pc, #136]	@ (8001fb4 <HAL_UART_MspInit+0x100>)
 8001f2a:	f000 fdbd 	bl	8002aa8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2034      	movs	r0, #52	@ 0x34
 8001f34:	f000 fcef 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f38:	2034      	movs	r0, #52	@ 0x34
 8001f3a:	f000 fd08 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f3e:	e030      	b.n	8001fa2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb8 <HAL_UART_MspInit+0x104>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12b      	bne.n	8001fa2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f82:	230c      	movs	r3, #12
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f92:	2307      	movs	r3, #7
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <HAL_UART_MspInit+0x100>)
 8001f9e:	f000 fd83 	bl	8002aa8 <HAL_GPIO_Init>
}
 8001fa2:	bf00      	nop
 8001fa4:	3730      	adds	r7, #48	@ 0x30
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40004c00 	.word	0x40004c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40004400 	.word	0x40004400

08001fbc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <__io_putchar+0x20>)
 8001fce:	f003 f865 	bl	800509c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000164 	.word	0x20000164

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 f93f 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <UART4_IRQHandler+0x10>)
 8002046:	f003 f8d9 	bl	80051fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000011c 	.word	0x2000011c

08002054 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00a      	b.n	800207c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002066:	f3af 8000 	nop.w
 800206a:	4601      	mov	r1, r0
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf0      	blt.n	8002066 <_read+0x12>
  }

  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff87 	bl	8001fbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbf1      	blt.n	80020a0 <_write+0x12>
  }
  return len;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_close>:

int _close(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ee:	605a      	str	r2, [r3, #4]
  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_isatty>:

int _isatty(int file)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f004 fad2 	bl	8006708 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20020000 	.word	0x20020000
 8002190:	00000400 	.word	0x00000400
 8002194:	200001b4 	.word	0x200001b4
 8002198:	20000308 	.word	0x20000308

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ffea 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	@ (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f004 fa91 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff fbb3 	bl	800195c <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002204:	080071fc 	.word	0x080071fc
  ldr r2, =_sbss
 8002208:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800220c:	20000308 	.word	0x20000308

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 fb5f 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f808 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fd7c 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fb77 	bl	800296a <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f000 fb3f 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000008 	.word	0x20000008
 80022dc:	200001b8 	.word	0x200001b8

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200001b8 	.word	0x200001b8

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffde 	bl	80022e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0ed      	b.n	800252e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fd18 	bl	8001d94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7ff ffb4 	bl	80022e0 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237a:	e012      	b.n	80023a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237c:	f7ff ffb0 	bl	80022e0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d90b      	bls.n	80023a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0c5      	b.n	800252e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0e5      	beq.n	800237c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0202 	bic.w	r2, r2, #2
 80023be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c0:	f7ff ff8e 	bl	80022e0 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c6:	e012      	b.n	80023ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c8:	f7ff ff8a 	bl	80022e0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d90b      	bls.n	80023ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2205      	movs	r2, #5
 80023e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09f      	b.n	800252e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e5      	bne.n	80023c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e9b      	ldrb	r3, [r3, #26]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0220 	bic.w	r2, r2, #32
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7edb      	ldrb	r3, [r3, #27]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0210 	orr.w	r2, r2, #16
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0208 	orr.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e007      	b.n	80024ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f5b      	ldrb	r3, [r3, #29]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12e      	bne.n	80025a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002562:	f7ff febd 	bl	80022e0 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002568:	e012      	b.n	8002590 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800256a:	f7ff feb9 	bl	80022e0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b0a      	cmp	r3, #10
 8002576:	d90b      	bls.n	8002590 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2205      	movs	r2, #5
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e012      	b.n	80025b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e5      	bne.n	800256a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e006      	b.n	80025b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025be:	b480      	push	{r7}
 80025c0:	b089      	sub	sp, #36	@ 0x24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_AddTxMessage+0x2c>
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	f040 80ad 	bne.w	8002744 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8095 	beq.w	8002734 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	0e1b      	lsrs	r3, r3, #24
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002614:	2201      	movs	r2, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	409a      	lsls	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10d      	bne.n	8002642 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3318      	adds	r3, #24
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e00f      	b.n	8002662 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800264c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002656:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3318      	adds	r3, #24
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	440b      	add	r3, r1
 8002660:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3318      	adds	r3, #24
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	440b      	add	r3, r1
 8002672:	3304      	adds	r3, #4
 8002674:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	7d1b      	ldrb	r3, [r3, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d111      	bne.n	80026a2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3318      	adds	r3, #24
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	6811      	ldr	r1, [r2, #0]
 8002692:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3318      	adds	r3, #24
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	440b      	add	r3, r1
 800269e:	3304      	adds	r3, #4
 80026a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3307      	adds	r3, #7
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	061a      	lsls	r2, r3, #24
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3306      	adds	r3, #6
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3305      	adds	r3, #5
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	4313      	orrs	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	3204      	adds	r2, #4
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	4610      	mov	r0, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6811      	ldr	r1, [r2, #0]
 80026ca:	ea43 0200 	orr.w	r2, r3, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80026d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3303      	adds	r3, #3
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	061a      	lsls	r2, r3, #24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3302      	adds	r3, #2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3301      	adds	r3, #1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	4313      	orrs	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4610      	mov	r0, r2
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	6811      	ldr	r1, [r2, #0]
 8002700:	ea43 0200 	orr.w	r2, r3, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800270e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3318      	adds	r3, #24
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3318      	adds	r3, #24
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	440b      	add	r3, r1
 800272e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e00e      	b.n	8002752 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e006      	b.n	8002752 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	@ (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	@ (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	@ (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	@ 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	@ 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff fca6 	bl	80022e0 <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d008      	beq.n	80029b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e052      	b.n	8002a5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0216 	bic.w	r2, r2, #22
 80029c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <HAL_DMA_Abort+0x62>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0208 	bic.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e013      	b.n	8002a2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fc6b 	bl	80022e0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d90c      	bls.n	8002a2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e015      	b.n	8002a5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e4      	bne.n	8002a06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	223f      	movs	r2, #63	@ 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e00c      	b.n	8002a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2205      	movs	r2, #5
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e165      	b.n	8002d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8154 	bne.w	8002d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d005      	beq.n	8002afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d130      	bne.n	8002b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0201 	and.w	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d017      	beq.n	8002b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d123      	bne.n	8002bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0203 	and.w	r2, r3, #3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80ae 	beq.w	8002d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4a:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_GPIO_Init+0x304>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	@ (8002db0 <HAL_GPIO_Init+0x308>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	@ (8002db4 <HAL_GPIO_Init+0x30c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x216>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	@ (8002db8 <HAL_GPIO_Init+0x310>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x212>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	@ (8002dbc <HAL_GPIO_Init+0x314>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc0 <HAL_GPIO_Init+0x318>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x20a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc4 <HAL_GPIO_Init+0x31c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x206>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	@ (8002dc8 <HAL_GPIO_Init+0x320>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x202>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	@ (8002dac <HAL_GPIO_Init+0x304>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae96 	bls.w	8002ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e12b      	b.n	800306e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fffa 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	@ 0x24
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e68:	f001 fbd2 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a81      	ldr	r2, [pc, #516]	@ (8003078 <HAL_I2C_Init+0x274>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d807      	bhi.n	8002e88 <HAL_I2C_Init+0x84>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a80      	ldr	r2, [pc, #512]	@ (800307c <HAL_I2C_Init+0x278>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e006      	b.n	8002e96 <HAL_I2C_Init+0x92>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003080 <HAL_I2C_Init+0x27c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0e7      	b.n	800306e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a78      	ldr	r2, [pc, #480]	@ (8003084 <HAL_I2C_Init+0x280>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8003078 <HAL_I2C_Init+0x274>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <HAL_I2C_Init+0xd4>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	e009      	b.n	8002eec <HAL_I2C_Init+0xe8>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	4a69      	ldr	r2, [pc, #420]	@ (8003088 <HAL_I2C_Init+0x284>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	3301      	adds	r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	495c      	ldr	r1, [pc, #368]	@ (8003078 <HAL_I2C_Init+0x274>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d819      	bhi.n	8002f40 <HAL_I2C_Init+0x13c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e59      	subs	r1, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1a:	1c59      	adds	r1, r3, #1
 8002f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f20:	400b      	ands	r3, r1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_I2C_Init+0x138>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e59      	subs	r1, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	e051      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	e04f      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <HAL_I2C_Init+0x168>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e012      	b.n	8002f92 <HAL_I2C_Init+0x18e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x196>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e022      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_I2C_Init+0x1bc>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e58      	subs	r0, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	440b      	add	r3, r1
 8002fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800300e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6911      	ldr	r1, [r2, #16]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	000186a0 	.word	0x000186a0
 800307c:	001e847f 	.word	0x001e847f
 8003080:	003d08ff 	.word	0x003d08ff
 8003084:	431bde83 	.word	0x431bde83
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff f91e 	bl	80022e0 <HAL_GetTick>
 80030a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	f040 80e0 	bne.w	8003274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2319      	movs	r3, #25
 80030ba:	2201      	movs	r2, #1
 80030bc:	4970      	ldr	r1, [pc, #448]	@ (8003280 <HAL_I2C_Master_Transmit+0x1f4>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 ff7e 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0d3      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2C_Master_Transmit+0x50>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0cc      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d007      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2221      	movs	r2, #33	@ 0x21
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2210      	movs	r2, #16
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	893a      	ldrh	r2, [r7, #8]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a50      	ldr	r2, [pc, #320]	@ (8003284 <HAL_I2C_Master_Transmit+0x1f8>)
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fd00 	bl	8003b50 <I2C_MasterRequestWrite>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e08d      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003170:	e066      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	6a39      	ldr	r1, [r7, #32]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f001 f83c 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b04      	cmp	r3, #4
 8003188:	d107      	bne.n	800319a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11b      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x188>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	6a39      	ldr	r1, [r7, #32]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f001 f833 	bl	8004284 <I2C_WaitOnBTFFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2b04      	cmp	r3, #4
 800322a:	d107      	bne.n	800323c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800323a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e01a      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d194      	bne.n	8003172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	00100002 	.word	0x00100002
 8003284:	ffff0000 	.word	0xffff0000

08003288 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08c      	sub	sp, #48	@ 0x30
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
 8003298:	4613      	mov	r3, r2
 800329a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7ff f820 	bl	80022e0 <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 8217 	bne.w	80036de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	497c      	ldr	r1, [pc, #496]	@ (80034ac <HAL_I2C_Master_Receive+0x224>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fe80 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	e20a      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_I2C_Master_Receive+0x50>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e203      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d007      	beq.n	80032fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2222      	movs	r2, #34	@ 0x22
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2210      	movs	r2, #16
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a5c      	ldr	r2, [pc, #368]	@ (80034b0 <HAL_I2C_Master_Receive+0x228>)
 800333e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fc84 	bl	8003c54 <I2C_MasterRequestRead>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c4      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e198      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	2b01      	cmp	r3, #1
 800338c:	d11b      	bne.n	80033c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e178      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d11b      	bne.n	8003406 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	e158      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800342c:	e144      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	2b03      	cmp	r3, #3
 8003434:	f200 80f1 	bhi.w	800361a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	2b01      	cmp	r3, #1
 800343e:	d123      	bne.n	8003488 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003442:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 ff65 	bl	8004314 <I2C_WaitOnRXNEFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e145      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003486:	e117      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	2b02      	cmp	r3, #2
 800348e:	d14e      	bne.n	800352e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	2200      	movs	r2, #0
 8003498:	4906      	ldr	r1, [pc, #24]	@ (80034b4 <HAL_I2C_Master_Receive+0x22c>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fd90 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e11a      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
 80034aa:	bf00      	nop
 80034ac:	00100002 	.word	0x00100002
 80034b0:	ffff0000 	.word	0xffff0000
 80034b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800352c:	e0c4      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	2200      	movs	r2, #0
 8003536:	496c      	ldr	r1, [pc, #432]	@ (80036e8 <HAL_I2C_Master_Receive+0x460>)
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fd41 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0cb      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	2200      	movs	r2, #0
 8003592:	4955      	ldr	r1, [pc, #340]	@ (80036e8 <HAL_I2C_Master_Receive+0x460>)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fd13 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e09d      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003618:	e04e      	b.n	80036b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fe78 	bl	8004314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e058      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d124      	bne.n	80036b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	2b03      	cmp	r3, #3
 8003674:	d107      	bne.n	8003686 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003684:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f47f aeb6 	bne.w	800342e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3728      	adds	r7, #40	@ 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00010004 	.word	0x00010004

080036ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	@ 0x30
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003706:	f7fe fdeb 	bl	80022e0 <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	f040 8214 	bne.w	8003b42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2319      	movs	r3, #25
 8003720:	2201      	movs	r2, #1
 8003722:	497b      	ldr	r1, [pc, #492]	@ (8003910 <HAL_I2C_Mem_Read+0x224>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fc4b 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	e207      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Mem_Read+0x56>
 800373e:	2302      	movs	r3, #2
 8003740:	e200      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d007      	beq.n	8003768 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2222      	movs	r2, #34	@ 0x22
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2240      	movs	r2, #64	@ 0x40
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003798:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003914 <HAL_I2C_Mem_Read+0x228>)
 80037a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	88f8      	ldrh	r0, [r7, #6]
 80037ac:	893a      	ldrh	r2, [r7, #8]
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4603      	mov	r3, r0
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fb18 	bl	8003df0 <I2C_RequestMemoryRead>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1bc      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e190      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d11b      	bne.n	800383a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e170      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	2b02      	cmp	r3, #2
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	e150      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003890:	e144      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	2b03      	cmp	r3, #3
 8003898:	f200 80f1 	bhi.w	8003a7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d123      	bne.n	80038ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fd33 	bl	8004314 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e145      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038ea:	e117      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d14e      	bne.n	8003992 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fa:	2200      	movs	r2, #0
 80038fc:	4906      	ldr	r1, [pc, #24]	@ (8003918 <HAL_I2C_Mem_Read+0x22c>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb5e 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e11a      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000
 8003918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003990:	e0c4      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2200      	movs	r2, #0
 800399a:	496c      	ldr	r1, [pc, #432]	@ (8003b4c <HAL_I2C_Mem_Read+0x460>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fb0f 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cb      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	2200      	movs	r2, #0
 80039f6:	4955      	ldr	r1, [pc, #340]	@ (8003b4c <HAL_I2C_Mem_Read+0x460>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fae1 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e09d      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a7c:	e04e      	b.n	8003b1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fc46 	bl	8004314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e058      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d124      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f aeb6 	bne.w	8003892 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	@ 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010004 	.word	0x00010004

08003b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d006      	beq.n	8003b7a <I2C_MasterRequestWrite+0x2a>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d003      	beq.n	8003b7a <I2C_MasterRequestWrite+0x2a>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b78:	d108      	bne.n	8003b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00b      	b.n	8003ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d107      	bne.n	8003ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa05 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	d103      	bne.n	8003bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e035      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	e01b      	b.n	8003c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	11db      	asrs	r3, r3, #7
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 030f 	orn	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <I2C_MasterRequestWrite+0xfc>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa4e 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e010      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4907      	ldr	r1, [pc, #28]	@ (8003c50 <I2C_MasterRequestWrite+0x100>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa3e 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	00010008 	.word	0x00010008
 8003c50:	00010002 	.word	0x00010002

08003c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	460b      	mov	r3, r1
 8003c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d006      	beq.n	8003c8e <I2C_MasterRequestRead+0x3a>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d003      	beq.n	8003c8e <I2C_MasterRequestRead+0x3a>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c8c:	d108      	bne.n	8003ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e00b      	b.n	8003cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	2b11      	cmp	r3, #17
 8003ca6:	d107      	bne.n	8003cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f97b 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cde:	d103      	bne.n	8003ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e079      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf4:	d108      	bne.n	8003d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e05f      	b.n	8003dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d08:	897b      	ldrh	r3, [r7, #10]
 8003d0a:	11db      	asrs	r3, r3, #7
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f063 030f 	orn	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4930      	ldr	r1, [pc, #192]	@ (8003de8 <I2C_MasterRequestRead+0x194>)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9c4 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e054      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4929      	ldr	r1, [pc, #164]	@ (8003dec <I2C_MasterRequestRead+0x198>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9b4 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e044      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f919 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da2:	d103      	bne.n	8003dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e017      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	11db      	asrs	r3, r3, #7
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f063 030e 	orn	r3, r3, #14
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4907      	ldr	r1, [pc, #28]	@ (8003dec <I2C_MasterRequestRead+0x198>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f970 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010008 	.word	0x00010008
 8003dec:	00010002 	.word	0x00010002

08003df0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f8c2 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e50:	d103      	bne.n	8003e5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0aa      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	4952      	ldr	r1, [pc, #328]	@ (8003fbc <I2C_RequestMemoryRead+0x1cc>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f91d 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e097      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f9a8 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d107      	bne.n	8003ec2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e076      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	e021      	b.n	8003f1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	6a39      	ldr	r1, [r7, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f982 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d107      	bne.n	8003f0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e050      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f12:	893b      	ldrh	r3, [r7, #8]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1e:	6a39      	ldr	r1, [r7, #32]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f967 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d107      	bne.n	8003f44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e035      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f82b 	bl	8003fc0 <I2C_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7e:	d103      	bne.n	8003f88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e013      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f8c:	897b      	ldrh	r3, [r7, #10]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	4906      	ldr	r1, [pc, #24]	@ (8003fbc <I2C_RequestMemoryRead+0x1cc>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f886 	bl	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	00010002 	.word	0x00010002

08003fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd0:	e048      	b.n	8004064 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d044      	beq.n	8004064 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fe f981 	bl	80022e0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d139      	bne.n	8004064 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10d      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	e00c      	b.n	8004030 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	d116      	bne.n	8004064 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e023      	b.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10d      	bne.n	800408a <I2C_WaitOnFlagUntilTimeout+0xca>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	e00c      	b.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	43da      	mvns	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d093      	beq.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c2:	e071      	b.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d2:	d123      	bne.n	800411c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e067      	b.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d041      	beq.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fe f8dc 	bl	80022e0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d136      	bne.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10c      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e00b      	b.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	43da      	mvns	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e021      	b.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10c      	bne.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e00b      	b.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f47f af6d 	bne.w	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004200:	e034      	b.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f8e3 	bl	80043ce <I2C_IsAcknowledgeFailed>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e034      	b.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d028      	beq.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe f861 	bl	80022e0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11d      	bne.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b80      	cmp	r3, #128	@ 0x80
 800423c:	d016      	beq.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e007      	b.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004276:	2b80      	cmp	r3, #128	@ 0x80
 8004278:	d1c3      	bne.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004290:	e034      	b.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f89b 	bl	80043ce <I2C_IsAcknowledgeFailed>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e034      	b.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d028      	beq.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe f819 	bl	80022e0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11d      	bne.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d016      	beq.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e007      	b.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d1c3      	bne.n	8004292 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004320:	e049      	b.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b10      	cmp	r3, #16
 800432e:	d119      	bne.n	8004364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0210 	mvn.w	r2, #16
 8004338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e030      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fd ffbc 	bl	80022e0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11d      	bne.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d016      	beq.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b40      	cmp	r3, #64	@ 0x40
 80043c2:	d1ae      	bne.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e4:	d11b      	bne.n	800441e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0cc      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b68      	ldr	r3, [pc, #416]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90c      	bls.n	8004468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b65      	ldr	r3, [pc, #404]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b63      	ldr	r3, [pc, #396]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b8      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004480:	4b59      	ldr	r3, [pc, #356]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a58      	ldr	r2, [pc, #352]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800448a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004498:	4b53      	ldr	r3, [pc, #332]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a52      	ldr	r2, [pc, #328]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b50      	ldr	r3, [pc, #320]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	494d      	ldr	r1, [pc, #308]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d044      	beq.n	800454c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d119      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b3f      	ldr	r3, [pc, #252]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3b      	ldr	r3, [pc, #236]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e067      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b37      	ldr	r3, [pc, #220]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4934      	ldr	r1, [pc, #208]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451c:	f7fd fee0 	bl	80022e0 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fd fedc 	bl	80022e0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e04f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2b      	ldr	r3, [pc, #172]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b25      	ldr	r3, [pc, #148]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d20c      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e032      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004580:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4916      	ldr	r1, [pc, #88]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459e:	4b12      	ldr	r3, [pc, #72]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	490e      	ldr	r1, [pc, #56]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045b2:	f000 f855 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	490a      	ldr	r1, [pc, #40]	@ (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	5ccb      	ldrb	r3, [r1, r3]
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045ce:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fe40 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023c00 	.word	0x40023c00
 80045e8:	40023800 	.word	0x40023800
 80045ec:	080071a0 	.word	0x080071a0
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000004 	.word	0x20000004

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	@ (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000000 	.word	0x20000000

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	@ (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	080071b0 	.word	0x080071b0

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	@ (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	080071b0 	.word	0x080071b0

08004660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b0ae      	sub	sp, #184	@ 0xb8
 8004666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004686:	4bcb      	ldr	r3, [pc, #812]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b0c      	cmp	r3, #12
 8004690:	f200 8206 	bhi.w	8004aa0 <HAL_RCC_GetSysClockFreq+0x440>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	08004aa1 	.word	0x08004aa1
 80046a4:	08004aa1 	.word	0x08004aa1
 80046a8:	08004aa1 	.word	0x08004aa1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	08004aa1 	.word	0x08004aa1
 80046b4:	08004aa1 	.word	0x08004aa1
 80046b8:	08004aa1 	.word	0x08004aa1
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	08004aa1 	.word	0x08004aa1
 80046c4:	08004aa1 	.word	0x08004aa1
 80046c8:	08004aa1 	.word	0x08004aa1
 80046cc:	080048d1 	.word	0x080048d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d0:	4bb9      	ldr	r3, [pc, #740]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80046d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046d6:	e1e7      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d8:	4bb8      	ldr	r3, [pc, #736]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80046da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046de:	e1e3      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e0:	4bb4      	ldr	r3, [pc, #720]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ec:	4bb1      	ldr	r3, [pc, #708]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d071      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f8:	4bae      	ldr	r3, [pc, #696]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004704:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800471a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	0159      	lsls	r1, r3, #5
 800472c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004730:	0150      	lsls	r0, r2, #5
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4621      	mov	r1, r4
 8004738:	1a51      	subs	r1, r2, r1
 800473a:	6439      	str	r1, [r7, #64]	@ 0x40
 800473c:	4629      	mov	r1, r5
 800473e:	eb63 0301 	sbc.w	r3, r3, r1
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004750:	4649      	mov	r1, r9
 8004752:	018b      	lsls	r3, r1, #6
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800475a:	4641      	mov	r1, r8
 800475c:	018a      	lsls	r2, r1, #6
 800475e:	4641      	mov	r1, r8
 8004760:	1a51      	subs	r1, r2, r1
 8004762:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004764:	4649      	mov	r1, r9
 8004766:	eb63 0301 	sbc.w	r3, r3, r1
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004778:	4649      	mov	r1, r9
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4641      	mov	r1, r8
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4641      	mov	r1, r8
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4622      	mov	r2, r4
 800478e:	189b      	adds	r3, r3, r2
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
 8004792:	462b      	mov	r3, r5
 8004794:	460a      	mov	r2, r1
 8004796:	eb42 0303 	adc.w	r3, r2, r3
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047a8:	4629      	mov	r1, r5
 80047aa:	024b      	lsls	r3, r1, #9
 80047ac:	4621      	mov	r1, r4
 80047ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047b2:	4621      	mov	r1, r4
 80047b4:	024a      	lsls	r2, r1, #9
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80047cc:	f7fc f9fe 	bl	8000bcc <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047da:	e067      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047dc:	4b75      	ldr	r3, [pc, #468]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80047ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047f6:	2300      	movs	r3, #0
 80047f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	0159      	lsls	r1, r3, #5
 800480c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004810:	0150      	lsls	r0, r2, #5
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4621      	mov	r1, r4
 8004818:	1a51      	subs	r1, r2, r1
 800481a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800481c:	4629      	mov	r1, r5
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004830:	4649      	mov	r1, r9
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	4641      	mov	r1, r8
 8004836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483a:	4641      	mov	r1, r8
 800483c:	018a      	lsls	r2, r1, #6
 800483e:	4641      	mov	r1, r8
 8004840:	ebb2 0a01 	subs.w	sl, r2, r1
 8004844:	4649      	mov	r1, r9
 8004846:	eb63 0b01 	sbc.w	fp, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004856:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800485a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800485e:	4692      	mov	sl, r2
 8004860:	469b      	mov	fp, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb1a 0303 	adds.w	r3, sl, r3
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	462b      	mov	r3, r5
 800486c:	eb4b 0303 	adc.w	r3, fp, r3
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800487e:	4629      	mov	r1, r5
 8004880:	028b      	lsls	r3, r1, #10
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004888:	4621      	mov	r1, r4
 800488a:	028a      	lsls	r2, r1, #10
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004894:	2200      	movs	r2, #0
 8004896:	673b      	str	r3, [r7, #112]	@ 0x70
 8004898:	677a      	str	r2, [r7, #116]	@ 0x74
 800489a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800489e:	f7fc f995 	bl	8000bcc <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4613      	mov	r3, r2
 80048a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048ac:	4b41      	ldr	r3, [pc, #260]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80048be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048ce:	e0eb      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d0:	4b38      	ldr	r3, [pc, #224]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048dc:	4b35      	ldr	r3, [pc, #212]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d06b      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4b32      	ldr	r3, [pc, #200]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	2200      	movs	r2, #0
 80048f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80048fc:	2300      	movs	r3, #0
 80048fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004900:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	f04f 0000 	mov.w	r0, #0
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	0159      	lsls	r1, r3, #5
 8004912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004916:	0150      	lsls	r0, r2, #5
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4621      	mov	r1, r4
 800491e:	1a51      	subs	r1, r2, r1
 8004920:	61b9      	str	r1, [r7, #24]
 8004922:	4629      	mov	r1, r5
 8004924:	eb63 0301 	sbc.w	r3, r3, r1
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004936:	4659      	mov	r1, fp
 8004938:	018b      	lsls	r3, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004940:	4651      	mov	r1, sl
 8004942:	018a      	lsls	r2, r1, #6
 8004944:	4651      	mov	r1, sl
 8004946:	ebb2 0801 	subs.w	r8, r2, r1
 800494a:	4659      	mov	r1, fp
 800494c:	eb63 0901 	sbc.w	r9, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004960:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004964:	4690      	mov	r8, r2
 8004966:	4699      	mov	r9, r3
 8004968:	4623      	mov	r3, r4
 800496a:	eb18 0303 	adds.w	r3, r8, r3
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	462b      	mov	r3, r5
 8004972:	eb49 0303 	adc.w	r3, r9, r3
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004984:	4629      	mov	r1, r5
 8004986:	024b      	lsls	r3, r1, #9
 8004988:	4621      	mov	r1, r4
 800498a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800498e:	4621      	mov	r1, r4
 8004990:	024a      	lsls	r2, r1, #9
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800499a:	2200      	movs	r2, #0
 800499c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800499e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049a4:	f7fc f912 	bl	8000bcc <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b2:	e065      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x420>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x458>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	2200      	movs	r2, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	4611      	mov	r1, r2
 80049cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80049d2:	2300      	movs	r3, #0
 80049d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80049da:	4642      	mov	r2, r8
 80049dc:	464b      	mov	r3, r9
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0159      	lsls	r1, r3, #5
 80049e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ec:	0150      	lsls	r0, r2, #5
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4641      	mov	r1, r8
 80049f4:	1a51      	subs	r1, r2, r1
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	4649      	mov	r1, r9
 80049fa:	eb63 0301 	sbc.w	r3, r3, r1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	018b      	lsls	r3, r1, #6
 8004a10:	4651      	mov	r1, sl
 8004a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a16:	4651      	mov	r1, sl
 8004a18:	018a      	lsls	r2, r1, #6
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	1a54      	subs	r4, r2, r1
 8004a1e:	4659      	mov	r1, fp
 8004a20:	eb63 0501 	sbc.w	r5, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	00eb      	lsls	r3, r5, #3
 8004a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a32:	00e2      	lsls	r2, r4, #3
 8004a34:	4614      	mov	r4, r2
 8004a36:	461d      	mov	r5, r3
 8004a38:	4643      	mov	r3, r8
 8004a3a:	18e3      	adds	r3, r4, r3
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	464b      	mov	r3, r9
 8004a40:	eb45 0303 	adc.w	r3, r5, r3
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a52:	4629      	mov	r1, r5
 8004a54:	028b      	lsls	r3, r1, #10
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	028a      	lsls	r2, r1, #10
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a68:	2200      	movs	r2, #0
 8004a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a72:	f7fc f8ab 	bl	8000bcc <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a80:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	0f1b      	lsrs	r3, r3, #28
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	37b8      	adds	r7, #184	@ 0xb8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400

08004ac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e28d      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8083 	beq.w	8004be6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ae0:	4b94      	ldr	r3, [pc, #592]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d019      	beq.n	8004b20 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004aec:	4b91      	ldr	r3, [pc, #580]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
        || \
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004af8:	4b8e      	ldr	r3, [pc, #568]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b04:	d00c      	beq.n	8004b20 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b06:	4b8b      	ldr	r3, [pc, #556]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d112      	bne.n	8004b38 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4b88      	ldr	r3, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b1e:	d10b      	bne.n	8004b38 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b20:	4b84      	ldr	r3, [pc, #528]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05b      	beq.n	8004be4 <HAL_RCC_OscConfig+0x124>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d157      	bne.n	8004be4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e25a      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_OscConfig+0x90>
 8004b42:	4b7c      	ldr	r3, [pc, #496]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a7b      	ldr	r2, [pc, #492]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e01d      	b.n	8004b8c <HAL_RCC_OscConfig+0xcc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0xb4>
 8004b5a:	4b76      	ldr	r3, [pc, #472]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a75      	ldr	r2, [pc, #468]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b73      	ldr	r3, [pc, #460]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a72      	ldr	r2, [pc, #456]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0xcc>
 8004b74:	4b6f      	ldr	r3, [pc, #444]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6e      	ldr	r2, [pc, #440]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b6c      	ldr	r3, [pc, #432]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6b      	ldr	r2, [pc, #428]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fba4 	bl	80022e0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fba0 	bl	80022e0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	@ 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e21f      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b61      	ldr	r3, [pc, #388]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0xdc>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fb90 	bl	80022e0 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fb8c 	bl	80022e0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	@ 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e20b      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	4b57      	ldr	r3, [pc, #348]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x104>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d06f      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bf2:	4b50      	ldr	r3, [pc, #320]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d105      	bne.n	8004c16 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d11c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b44      	ldr	r3, [pc, #272]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x186>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e1d3      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c46:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4937      	ldr	r1, [pc, #220]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5a:	e03a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c64:	4b34      	ldr	r3, [pc, #208]	@ (8004d38 <HAL_RCC_OscConfig+0x278>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fb39 	bl	80022e0 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd fb35 	bl	80022e0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1b4      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4925      	ldr	r1, [pc, #148]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	e015      	b.n	8004cd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <HAL_RCC_OscConfig+0x278>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd fb18 	bl	80022e0 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb4:	f7fd fb14 	bl	80022e0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e193      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d036      	beq.n	8004d4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fd faf8 	bl	80022e0 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf4:	f7fd faf4 	bl	80022e0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e173      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x234>
 8004d12:	e01b      	b.n	8004d4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fd fae1 	bl	80022e0 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	e00e      	b.n	8004d40 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d22:	f7fd fadd 	bl	80022e0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d907      	bls.n	8004d40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e15c      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	42470000 	.word	0x42470000
 8004d3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d40:	4b8a      	ldr	r3, [pc, #552]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ea      	bne.n	8004d22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8097 	beq.w	8004e88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5e:	4b83      	ldr	r3, [pc, #524]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10f      	bne.n	8004d8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	4a7e      	ldr	r2, [pc, #504]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b79      	ldr	r3, [pc, #484]	@ (8004f70 <HAL_RCC_OscConfig+0x4b0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d118      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d96:	4b76      	ldr	r3, [pc, #472]	@ (8004f70 <HAL_RCC_OscConfig+0x4b0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a75      	ldr	r2, [pc, #468]	@ (8004f70 <HAL_RCC_OscConfig+0x4b0>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fa9d 	bl	80022e0 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004daa:	f7fd fa99 	bl	80022e0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e118      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <HAL_RCC_OscConfig+0x4b0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_OscConfig+0x31e>
 8004dd0:	4b66      	ldr	r3, [pc, #408]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	4a65      	ldr	r2, [pc, #404]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ddc:	e01c      	b.n	8004e18 <HAL_RCC_OscConfig+0x358>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x340>
 8004de6:	4b61      	ldr	r3, [pc, #388]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a60      	ldr	r2, [pc, #384]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5d      	ldr	r2, [pc, #372]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0x358>
 8004e00:	4b5a      	ldr	r3, [pc, #360]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	4a59      	ldr	r2, [pc, #356]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0c:	4b57      	ldr	r3, [pc, #348]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a56      	ldr	r2, [pc, #344]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd fa5e 	bl	80022e0 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fd fa5a 	bl	80022e0 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0d7      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ee      	beq.n	8004e28 <HAL_RCC_OscConfig+0x368>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fa48 	bl	80022e0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd fa44 	bl	80022e0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0c1      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	4b40      	ldr	r3, [pc, #256]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ee      	bne.n	8004e54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	4a3a      	ldr	r2, [pc, #232]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80ad 	beq.w	8004fec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e92:	4b36      	ldr	r3, [pc, #216]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d060      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d145      	bne.n	8004f32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b33      	ldr	r3, [pc, #204]	@ (8004f74 <HAL_RCC_OscConfig+0x4b4>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fd fa18 	bl	80022e0 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fa14 	bl	80022e0 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e093      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b29      	ldr	r3, [pc, #164]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	491b      	ldr	r1, [pc, #108]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_RCC_OscConfig+0x4b4>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd f9e9 	bl	80022e0 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fd f9e5 	bl	80022e0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e064      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f24:	4b11      	ldr	r3, [pc, #68]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x452>
 8004f30:	e05c      	b.n	8004fec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_RCC_OscConfig+0x4b4>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd f9d2 	bl	80022e0 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd f9ce 	bl	80022e0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e04d      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x480>
 8004f5e:	e045      	b.n	8004fec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e040      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
 8004f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f78:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_RCC_OscConfig+0x538>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d030      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d129      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d122      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d119      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d10f      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800

08004ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e042      	b.n	8005094 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fc ff46 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	@ 0x24
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800503e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fdc7 	bl	8005bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d175      	bne.n	80051a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_UART_Transmit+0x2c>
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e06e      	b.n	80051aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2221      	movs	r2, #33	@ 0x21
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050da:	f7fd f901 	bl	80022e0 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f4:	d108      	bne.n	8005108 <HAL_UART_Transmit+0x6c>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e003      	b.n	8005110 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005110:	e02e      	b.n	8005170 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2200      	movs	r2, #0
 800511a:	2180      	movs	r1, #128	@ 0x80
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fb29 	bl	8005774 <UART_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e03a      	b.n	80051aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005148:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3302      	adds	r3, #2
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e007      	b.n	8005162 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	3301      	adds	r3, #1
 8005160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1cb      	bne.n	8005112 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	2140      	movs	r1, #64	@ 0x40
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 faf5 	bl	8005774 <UART_WaitOnFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d112      	bne.n	80051f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_UART_Receive_IT+0x26>
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e00b      	b.n	80051f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fb1c 	bl	8005826 <UART_Start_Receive_IT>
 80051ee:	4603      	mov	r3, r0
 80051f0:	e000      	b.n	80051f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800523a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_UART_IRQHandler+0x66>
 800524e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fbfc 	bl	8005a58 <UART_Receive_IT>
      return;
 8005260:	e25b      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80de 	beq.w	8005428 <HAL_UART_IRQHandler+0x22c>
 800526c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80d1 	beq.w	8005428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <HAL_UART_IRQHandler+0xae>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_UART_IRQHandler+0xd2>
 80052b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0xf6>
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d011      	beq.n	8005322 <HAL_UART_IRQHandler+0x126>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 81f2 	beq.w	8005710 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_UART_IRQHandler+0x14e>
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb87 	bl	8005a58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005354:	2b40      	cmp	r3, #64	@ 0x40
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_UART_IRQHandler+0x17a>
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d04f      	beq.n	8005416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa8f 	bl	800589a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d141      	bne.n	800540e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3314      	adds	r3, #20
 80053b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1d9      	bne.n	800538a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	4a7e      	ldr	r2, [pc, #504]	@ (80055dc <HAL_UART_IRQHandler+0x3e0>)
 80053e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd fb39 	bl	8002a62 <HAL_DMA_Abort_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00e      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f99e 	bl	8005748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e00a      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f99a 	bl	8005748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	e006      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f996 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005422:	e175      	b.n	8005710 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	bf00      	nop
    return;
 8005426:	e173      	b.n	8005710 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 814f 	bne.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8148 	beq.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8141 	beq.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546e:	2b40      	cmp	r3, #64	@ 0x40
 8005470:	f040 80b6 	bne.w	80055e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8145 	beq.w	8005714 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800548e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005492:	429a      	cmp	r2, r3
 8005494:	f080 813e 	bcs.w	8005714 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800549e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054aa:	f000 8088 	beq.w	80055be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d9      	bne.n	80054ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3314      	adds	r3, #20
 8005500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800550a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800551e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e1      	bne.n	80054fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800555a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800555c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e3      	bne.n	8005536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800558c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558e:	f023 0310 	bic.w	r3, r3, #16
 8005592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e3      	bne.n	800557c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fd f9e2 	bl	8002982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8c1 	bl	800575c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055da:	e09b      	b.n	8005714 <HAL_UART_IRQHandler+0x518>
 80055dc:	08005961 	.word	0x08005961
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 808e 	beq.w	8005718 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8089 	beq.w	8005718 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800562a:	647a      	str	r2, [r7, #68]	@ 0x44
 800562c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e3      	bne.n	8005606 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	623b      	str	r3, [r7, #32]
   return(result);
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005662:	633a      	str	r2, [r7, #48]	@ 0x30
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	60fb      	str	r3, [r7, #12]
   return(result);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	617b      	str	r3, [r7, #20]
   return(result);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e3      	bne.n	8005684 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f847 	bl	800575c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ce:	e023      	b.n	8005718 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_UART_IRQHandler+0x4f4>
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f94d 	bl	8005988 <UART_Transmit_IT>
    return;
 80056ee:	e014      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <HAL_UART_IRQHandler+0x51e>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f98d 	bl	8005a28 <UART_EndTransmit_IT>
    return;
 800570e:	e004      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
    return;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
      return;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
      return;
 8005718:	bf00      	nop
  }
}
 800571a:	37e8      	adds	r7, #232	@ 0xe8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	e03b      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d037      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fc fda7 	bl	80022e0 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e03a      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d023      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b80      	cmp	r3, #128	@ 0x80
 80057ba:	d020      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d01d      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d116      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f857 	bl	800589a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2208      	movs	r2, #8
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e00f      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d0b4      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	4613      	mov	r3, r2
 8005832:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	88fa      	ldrh	r2, [r7, #6]
 800583e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2222      	movs	r2, #34	@ 0x22
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800586a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0220 	orr.w	r2, r2, #32
 800588a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589a:	b480      	push	{r7}
 800589c:	b095      	sub	sp, #84	@ 0x54
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	2b01      	cmp	r3, #1
 8005910:	d119      	bne.n	8005946 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60bb      	str	r3, [r7, #8]
   return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005932:	61ba      	str	r2, [r7, #24]
 8005934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	613b      	str	r3, [r7, #16]
   return(result);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005954:	bf00      	nop
 8005956:	3754      	adds	r7, #84	@ 0x54
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fee4 	bl	8005748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b21      	cmp	r3, #33	@ 0x21
 800599a:	d13e      	bne.n	8005a1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a4:	d114      	bne.n	80059d0 <UART_Transmit_IT+0x48>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d110      	bne.n	80059d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	1c9a      	adds	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]
 80059ce:	e008      	b.n	80059e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6211      	str	r1, [r2, #32]
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4619      	mov	r1, r3
 80059f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
  }
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fe69 	bl	8005720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	@ 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b22      	cmp	r3, #34	@ 0x22
 8005a6a:	f040 80ae 	bne.w	8005bca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a76:	d117      	bne.n	8005aa8 <UART_Receive_IT+0x50>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d113      	bne.n	8005aa8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	1c9a      	adds	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa6:	e026      	b.n	8005af6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aba:	d007      	beq.n	8005acc <UART_Receive_IT+0x74>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <UART_Receive_IT+0x82>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	e008      	b.n	8005aec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4619      	mov	r1, r3
 8005b04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d15d      	bne.n	8005bc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0220 	bic.w	r2, r2, #32
 8005b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d135      	bne.n	8005bbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	613b      	str	r3, [r7, #16]
   return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b76:	623a      	str	r2, [r7, #32]
 8005b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	69f9      	ldr	r1, [r7, #28]
 8005b7c:	6a3a      	ldr	r2, [r7, #32]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d10a      	bne.n	8005bae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fdd1 	bl	800575c <HAL_UARTEx_RxEventCallback>
 8005bba:	e002      	b.n	8005bc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fdb9 	bl	8005734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e002      	b.n	8005bcc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3730      	adds	r7, #48	@ 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd8:	b0c0      	sub	sp, #256	@ 0x100
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	68d9      	ldr	r1, [r3, #12]
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	ea40 0301 	orr.w	r3, r0, r1
 8005bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c2c:	f021 010c 	bic.w	r1, r1, #12
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4e:	6999      	ldr	r1, [r3, #24]
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	ea40 0301 	orr.w	r3, r0, r1
 8005c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea0 <UART_SetConfig+0x2cc>)
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d005      	beq.n	8005c74 <UART_SetConfig+0xa0>
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea4 <UART_SetConfig+0x2d0>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d104      	bne.n	8005c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c74:	f7fe fce0 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8005c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c7c:	e003      	b.n	8005c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fe fcc7 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8005c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c90:	f040 810c 	bne.w	8005eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	462b      	mov	r3, r5
 8005caa:	1891      	adds	r1, r2, r2
 8005cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cae:	415b      	adcs	r3, r3
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	eb12 0801 	adds.w	r8, r2, r1
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	eb43 0901 	adc.w	r9, r3, r1
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cd6:	4690      	mov	r8, r2
 8005cd8:	4699      	mov	r9, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	eb18 0303 	adds.w	r3, r8, r3
 8005ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	eb49 0303 	adc.w	r3, r9, r3
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d02:	460b      	mov	r3, r1
 8005d04:	18db      	adds	r3, r3, r3
 8005d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d08:	4613      	mov	r3, r2
 8005d0a:	eb42 0303 	adc.w	r3, r2, r3
 8005d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d18:	f7fa ff58 	bl	8000bcc <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4b61      	ldr	r3, [pc, #388]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005d22:	fba3 2302 	umull	r2, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	011c      	lsls	r4, r3, #4
 8005d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	1891      	adds	r1, r2, r2
 8005d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d44:	415b      	adcs	r3, r3
 8005d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d52:	4649      	mov	r1, r9
 8005d54:	eb43 0b01 	adc.w	fp, r3, r1
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d6c:	4692      	mov	sl, r2
 8005d6e:	469b      	mov	fp, r3
 8005d70:	4643      	mov	r3, r8
 8005d72:	eb1a 0303 	adds.w	r3, sl, r3
 8005d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	18db      	adds	r3, r3, r3
 8005d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d9e:	4613      	mov	r3, r2
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dae:	f7fa ff0d 	bl	8000bcc <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005dba:	fba3 2301 	umull	r2, r3, r3, r1
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2264      	movs	r2, #100	@ 0x64
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	1acb      	subs	r3, r1, r3
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dce:	4b36      	ldr	r3, [pc, #216]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ddc:	441c      	add	r4, r3
 8005dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e00:	4641      	mov	r1, r8
 8005e02:	1851      	adds	r1, r2, r1
 8005e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e06:	4649      	mov	r1, r9
 8005e08:	414b      	adcs	r3, r1
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e18:	4659      	mov	r1, fp
 8005e1a:	00cb      	lsls	r3, r1, #3
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e22:	4651      	mov	r1, sl
 8005e24:	00ca      	lsls	r2, r1, #3
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e34:	464b      	mov	r3, r9
 8005e36:	460a      	mov	r2, r1
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e54:	460b      	mov	r3, r1
 8005e56:	18db      	adds	r3, r3, r3
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e6a:	f7fa feaf 	bl	8000bcc <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	@ 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3332      	adds	r3, #50	@ 0x32
 8005e86:	4a08      	ldr	r2, [pc, #32]	@ (8005ea8 <UART_SetConfig+0x2d4>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0207 	and.w	r2, r3, #7
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4422      	add	r2, r4
 8005e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e9c:	e106      	b.n	80060ac <UART_SetConfig+0x4d8>
 8005e9e:	bf00      	nop
 8005ea0:	40011000 	.word	0x40011000
 8005ea4:	40011400 	.word	0x40011400
 8005ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	6239      	str	r1, [r7, #32]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ece:	4641      	mov	r1, r8
 8005ed0:	1854      	adds	r4, r2, r1
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	eb43 0501 	adc.w	r5, r3, r1
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	00eb      	lsls	r3, r5, #3
 8005ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ee6:	00e2      	lsls	r2, r4, #3
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	4643      	mov	r3, r8
 8005eee:	18e3      	adds	r3, r4, r3
 8005ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	eb45 0303 	adc.w	r3, r5, r3
 8005efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	008b      	lsls	r3, r1, #2
 8005f1e:	4621      	mov	r1, r4
 8005f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f24:	4621      	mov	r1, r4
 8005f26:	008a      	lsls	r2, r1, #2
 8005f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f2c:	f7fa fe4e 	bl	8000bcc <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b60      	ldr	r3, [pc, #384]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005f36:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	011c      	lsls	r4, r3, #4
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	61b9      	str	r1, [r7, #24]
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6139      	str	r1, [r7, #16]
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fb8:	4649      	mov	r1, r9
 8005fba:	008b      	lsls	r3, r1, #2
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	008a      	lsls	r2, r1, #2
 8005fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fca:	f7fa fdff 	bl	8000bcc <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4b38      	ldr	r3, [pc, #224]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2264      	movs	r2, #100	@ 0x64
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	1acb      	subs	r3, r1, r3
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	3332      	adds	r3, #50	@ 0x32
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ff4:	441c      	add	r4, r3
 8005ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	415b      	adcs	r3, r3
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006046:	464b      	mov	r3, r9
 8006048:	460a      	mov	r2, r1
 800604a:	eb42 0303 	adc.w	r3, r2, r3
 800604e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	663b      	str	r3, [r7, #96]	@ 0x60
 800605a:	667a      	str	r2, [r7, #100]	@ 0x64
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006068:	4649      	mov	r1, r9
 800606a:	008b      	lsls	r3, r1, #2
 800606c:	4641      	mov	r1, r8
 800606e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006072:	4641      	mov	r1, r8
 8006074:	008a      	lsls	r2, r1, #2
 8006076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800607a:	f7fa fda7 	bl	8000bcc <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	@ 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	3332      	adds	r3, #50	@ 0x32
 8006096:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <UART_SetConfig+0x4e4>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4422      	add	r2, r4
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060b2:	46bd      	mov	sp, r7
 80060b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060b8:	51eb851f 	.word	0x51eb851f

080060bc <malloc>:
 80060bc:	4b02      	ldr	r3, [pc, #8]	@ (80060c8 <malloc+0xc>)
 80060be:	4601      	mov	r1, r0
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f000 b82d 	b.w	8006120 <_malloc_r>
 80060c6:	bf00      	nop
 80060c8:	20000018 	.word	0x20000018

080060cc <free>:
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <free+0xc>)
 80060ce:	4601      	mov	r1, r0
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f000 bb47 	b.w	8006764 <_free_r>
 80060d6:	bf00      	nop
 80060d8:	20000018 	.word	0x20000018

080060dc <sbrk_aligned>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4e0f      	ldr	r6, [pc, #60]	@ (800611c <sbrk_aligned+0x40>)
 80060e0:	460c      	mov	r4, r1
 80060e2:	6831      	ldr	r1, [r6, #0]
 80060e4:	4605      	mov	r5, r0
 80060e6:	b911      	cbnz	r1, 80060ee <sbrk_aligned+0x12>
 80060e8:	f000 faec 	bl	80066c4 <_sbrk_r>
 80060ec:	6030      	str	r0, [r6, #0]
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f000 fae7 	bl	80066c4 <_sbrk_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d103      	bne.n	8006102 <sbrk_aligned+0x26>
 80060fa:	f04f 34ff 	mov.w	r4, #4294967295
 80060fe:	4620      	mov	r0, r4
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d0f8      	beq.n	80060fe <sbrk_aligned+0x22>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fad8 	bl	80066c4 <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d1f2      	bne.n	80060fe <sbrk_aligned+0x22>
 8006118:	e7ef      	b.n	80060fa <sbrk_aligned+0x1e>
 800611a:	bf00      	nop
 800611c:	200001bc 	.word	0x200001bc

08006120 <_malloc_r>:
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4606      	mov	r6, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d904      	bls.n	8006146 <_malloc_r+0x26>
 800613c:	230c      	movs	r3, #12
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800621c <_malloc_r+0xfc>
 800614a:	f000 f869 	bl	8006220 <__malloc_lock>
 800614e:	f8d8 3000 	ldr.w	r3, [r8]
 8006152:	461c      	mov	r4, r3
 8006154:	bb44      	cbnz	r4, 80061a8 <_malloc_r+0x88>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff ffbf 	bl	80060dc <sbrk_aligned>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	4604      	mov	r4, r0
 8006162:	d158      	bne.n	8006216 <_malloc_r+0xf6>
 8006164:	f8d8 4000 	ldr.w	r4, [r8]
 8006168:	4627      	mov	r7, r4
 800616a:	2f00      	cmp	r7, #0
 800616c:	d143      	bne.n	80061f6 <_malloc_r+0xd6>
 800616e:	2c00      	cmp	r4, #0
 8006170:	d04b      	beq.n	800620a <_malloc_r+0xea>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	eb04 0903 	add.w	r9, r4, r3
 800617c:	f000 faa2 	bl	80066c4 <_sbrk_r>
 8006180:	4581      	cmp	r9, r0
 8006182:	d142      	bne.n	800620a <_malloc_r+0xea>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	1a6d      	subs	r5, r5, r1
 8006188:	4629      	mov	r1, r5
 800618a:	4630      	mov	r0, r6
 800618c:	f7ff ffa6 	bl	80060dc <sbrk_aligned>
 8006190:	3001      	adds	r0, #1
 8006192:	d03a      	beq.n	800620a <_malloc_r+0xea>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	442b      	add	r3, r5
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	f8d8 3000 	ldr.w	r3, [r8]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	bb62      	cbnz	r2, 80061fc <_malloc_r+0xdc>
 80061a2:	f8c8 7000 	str.w	r7, [r8]
 80061a6:	e00f      	b.n	80061c8 <_malloc_r+0xa8>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	1b52      	subs	r2, r2, r5
 80061ac:	d420      	bmi.n	80061f0 <_malloc_r+0xd0>
 80061ae:	2a0b      	cmp	r2, #11
 80061b0:	d917      	bls.n	80061e2 <_malloc_r+0xc2>
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	6025      	str	r5, [r4, #0]
 80061b8:	bf18      	it	ne
 80061ba:	6059      	strne	r1, [r3, #4]
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	bf08      	it	eq
 80061c0:	f8c8 1000 	streq.w	r1, [r8]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f82f 	bl	800622c <__malloc_unlock>
 80061ce:	f104 000b 	add.w	r0, r4, #11
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	f020 0007 	bic.w	r0, r0, #7
 80061d8:	1ac2      	subs	r2, r0, r3
 80061da:	bf1c      	itt	ne
 80061dc:	1a1b      	subne	r3, r3, r0
 80061de:	50a3      	strne	r3, [r4, r2]
 80061e0:	e7af      	b.n	8006142 <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	f8c8 2000 	streq.w	r2, [r8]
 80061ec:	605a      	strne	r2, [r3, #4]
 80061ee:	e7eb      	b.n	80061c8 <_malloc_r+0xa8>
 80061f0:	4623      	mov	r3, r4
 80061f2:	6864      	ldr	r4, [r4, #4]
 80061f4:	e7ae      	b.n	8006154 <_malloc_r+0x34>
 80061f6:	463c      	mov	r4, r7
 80061f8:	687f      	ldr	r7, [r7, #4]
 80061fa:	e7b6      	b.n	800616a <_malloc_r+0x4a>
 80061fc:	461a      	mov	r2, r3
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	42a3      	cmp	r3, r4
 8006202:	d1fb      	bne.n	80061fc <_malloc_r+0xdc>
 8006204:	2300      	movs	r3, #0
 8006206:	6053      	str	r3, [r2, #4]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa8>
 800620a:	230c      	movs	r3, #12
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	4630      	mov	r0, r6
 8006210:	f000 f80c 	bl	800622c <__malloc_unlock>
 8006214:	e794      	b.n	8006140 <_malloc_r+0x20>
 8006216:	6005      	str	r5, [r0, #0]
 8006218:	e7d6      	b.n	80061c8 <_malloc_r+0xa8>
 800621a:	bf00      	nop
 800621c:	200001c0 	.word	0x200001c0

08006220 <__malloc_lock>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__malloc_lock+0x8>)
 8006222:	f000 ba9c 	b.w	800675e <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000304 	.word	0x20000304

0800622c <__malloc_unlock>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__malloc_unlock+0x8>)
 800622e:	f000 ba97 	b.w	8006760 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000304 	.word	0x20000304

08006238 <std>:
 8006238:	2300      	movs	r3, #0
 800623a:	b510      	push	{r4, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	e9c0 3300 	strd	r3, r3, [r0]
 8006242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006246:	6083      	str	r3, [r0, #8]
 8006248:	8181      	strh	r1, [r0, #12]
 800624a:	6643      	str	r3, [r0, #100]	@ 0x64
 800624c:	81c2      	strh	r2, [r0, #14]
 800624e:	6183      	str	r3, [r0, #24]
 8006250:	4619      	mov	r1, r3
 8006252:	2208      	movs	r2, #8
 8006254:	305c      	adds	r0, #92	@ 0x5c
 8006256:	f000 f9f9 	bl	800664c <memset>
 800625a:	4b0d      	ldr	r3, [pc, #52]	@ (8006290 <std+0x58>)
 800625c:	6263      	str	r3, [r4, #36]	@ 0x24
 800625e:	4b0d      	ldr	r3, [pc, #52]	@ (8006294 <std+0x5c>)
 8006260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <std+0x60>)
 8006264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <std+0x64>)
 8006268:	6323      	str	r3, [r4, #48]	@ 0x30
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <std+0x68>)
 800626c:	6224      	str	r4, [r4, #32]
 800626e:	429c      	cmp	r4, r3
 8006270:	d006      	beq.n	8006280 <std+0x48>
 8006272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006276:	4294      	cmp	r4, r2
 8006278:	d002      	beq.n	8006280 <std+0x48>
 800627a:	33d0      	adds	r3, #208	@ 0xd0
 800627c:	429c      	cmp	r4, r3
 800627e:	d105      	bne.n	800628c <std+0x54>
 8006280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006288:	f000 ba68 	b.w	800675c <__retarget_lock_init_recursive>
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop
 8006290:	0800649d 	.word	0x0800649d
 8006294:	080064bf 	.word	0x080064bf
 8006298:	080064f7 	.word	0x080064f7
 800629c:	0800651b 	.word	0x0800651b
 80062a0:	200001c4 	.word	0x200001c4

080062a4 <stdio_exit_handler>:
 80062a4:	4a02      	ldr	r2, [pc, #8]	@ (80062b0 <stdio_exit_handler+0xc>)
 80062a6:	4903      	ldr	r1, [pc, #12]	@ (80062b4 <stdio_exit_handler+0x10>)
 80062a8:	4803      	ldr	r0, [pc, #12]	@ (80062b8 <stdio_exit_handler+0x14>)
 80062aa:	f000 b869 	b.w	8006380 <_fwalk_sglue>
 80062ae:	bf00      	nop
 80062b0:	2000000c 	.word	0x2000000c
 80062b4:	08006ea1 	.word	0x08006ea1
 80062b8:	2000001c 	.word	0x2000001c

080062bc <cleanup_stdio>:
 80062bc:	6841      	ldr	r1, [r0, #4]
 80062be:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <cleanup_stdio+0x34>)
 80062c0:	4299      	cmp	r1, r3
 80062c2:	b510      	push	{r4, lr}
 80062c4:	4604      	mov	r4, r0
 80062c6:	d001      	beq.n	80062cc <cleanup_stdio+0x10>
 80062c8:	f000 fdea 	bl	8006ea0 <_fflush_r>
 80062cc:	68a1      	ldr	r1, [r4, #8]
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <cleanup_stdio+0x38>)
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <cleanup_stdio+0x1e>
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fde3 	bl	8006ea0 <_fflush_r>
 80062da:	68e1      	ldr	r1, [r4, #12]
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <cleanup_stdio+0x3c>)
 80062de:	4299      	cmp	r1, r3
 80062e0:	d004      	beq.n	80062ec <cleanup_stdio+0x30>
 80062e2:	4620      	mov	r0, r4
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f000 bdda 	b.w	8006ea0 <_fflush_r>
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	200001c4 	.word	0x200001c4
 80062f4:	2000022c 	.word	0x2000022c
 80062f8:	20000294 	.word	0x20000294

080062fc <global_stdio_init.part.0>:
 80062fc:	b510      	push	{r4, lr}
 80062fe:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <global_stdio_init.part.0+0x30>)
 8006300:	4c0b      	ldr	r4, [pc, #44]	@ (8006330 <global_stdio_init.part.0+0x34>)
 8006302:	4a0c      	ldr	r2, [pc, #48]	@ (8006334 <global_stdio_init.part.0+0x38>)
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	4620      	mov	r0, r4
 8006308:	2200      	movs	r2, #0
 800630a:	2104      	movs	r1, #4
 800630c:	f7ff ff94 	bl	8006238 <std>
 8006310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006314:	2201      	movs	r2, #1
 8006316:	2109      	movs	r1, #9
 8006318:	f7ff ff8e 	bl	8006238 <std>
 800631c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006320:	2202      	movs	r2, #2
 8006322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006326:	2112      	movs	r1, #18
 8006328:	f7ff bf86 	b.w	8006238 <std>
 800632c:	200002fc 	.word	0x200002fc
 8006330:	200001c4 	.word	0x200001c4
 8006334:	080062a5 	.word	0x080062a5

08006338 <__sfp_lock_acquire>:
 8006338:	4801      	ldr	r0, [pc, #4]	@ (8006340 <__sfp_lock_acquire+0x8>)
 800633a:	f000 ba10 	b.w	800675e <__retarget_lock_acquire_recursive>
 800633e:	bf00      	nop
 8006340:	20000305 	.word	0x20000305

08006344 <__sfp_lock_release>:
 8006344:	4801      	ldr	r0, [pc, #4]	@ (800634c <__sfp_lock_release+0x8>)
 8006346:	f000 ba0b 	b.w	8006760 <__retarget_lock_release_recursive>
 800634a:	bf00      	nop
 800634c:	20000305 	.word	0x20000305

08006350 <__sinit>:
 8006350:	b510      	push	{r4, lr}
 8006352:	4604      	mov	r4, r0
 8006354:	f7ff fff0 	bl	8006338 <__sfp_lock_acquire>
 8006358:	6a23      	ldr	r3, [r4, #32]
 800635a:	b11b      	cbz	r3, 8006364 <__sinit+0x14>
 800635c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006360:	f7ff bff0 	b.w	8006344 <__sfp_lock_release>
 8006364:	4b04      	ldr	r3, [pc, #16]	@ (8006378 <__sinit+0x28>)
 8006366:	6223      	str	r3, [r4, #32]
 8006368:	4b04      	ldr	r3, [pc, #16]	@ (800637c <__sinit+0x2c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f5      	bne.n	800635c <__sinit+0xc>
 8006370:	f7ff ffc4 	bl	80062fc <global_stdio_init.part.0>
 8006374:	e7f2      	b.n	800635c <__sinit+0xc>
 8006376:	bf00      	nop
 8006378:	080062bd 	.word	0x080062bd
 800637c:	200002fc 	.word	0x200002fc

08006380 <_fwalk_sglue>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	4607      	mov	r7, r0
 8006386:	4688      	mov	r8, r1
 8006388:	4614      	mov	r4, r2
 800638a:	2600      	movs	r6, #0
 800638c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006390:	f1b9 0901 	subs.w	r9, r9, #1
 8006394:	d505      	bpl.n	80063a2 <_fwalk_sglue+0x22>
 8006396:	6824      	ldr	r4, [r4, #0]
 8006398:	2c00      	cmp	r4, #0
 800639a:	d1f7      	bne.n	800638c <_fwalk_sglue+0xc>
 800639c:	4630      	mov	r0, r6
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d907      	bls.n	80063b8 <_fwalk_sglue+0x38>
 80063a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ac:	3301      	adds	r3, #1
 80063ae:	d003      	beq.n	80063b8 <_fwalk_sglue+0x38>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4638      	mov	r0, r7
 80063b4:	47c0      	blx	r8
 80063b6:	4306      	orrs	r6, r0
 80063b8:	3568      	adds	r5, #104	@ 0x68
 80063ba:	e7e9      	b.n	8006390 <_fwalk_sglue+0x10>

080063bc <iprintf>:
 80063bc:	b40f      	push	{r0, r1, r2, r3}
 80063be:	b507      	push	{r0, r1, r2, lr}
 80063c0:	4906      	ldr	r1, [pc, #24]	@ (80063dc <iprintf+0x20>)
 80063c2:	ab04      	add	r3, sp, #16
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ca:	6881      	ldr	r1, [r0, #8]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f000 fa3d 	bl	800684c <_vfiprintf_r>
 80063d2:	b003      	add	sp, #12
 80063d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d8:	b004      	add	sp, #16
 80063da:	4770      	bx	lr
 80063dc:	20000018 	.word	0x20000018

080063e0 <_puts_r>:
 80063e0:	6a03      	ldr	r3, [r0, #32]
 80063e2:	b570      	push	{r4, r5, r6, lr}
 80063e4:	6884      	ldr	r4, [r0, #8]
 80063e6:	4605      	mov	r5, r0
 80063e8:	460e      	mov	r6, r1
 80063ea:	b90b      	cbnz	r3, 80063f0 <_puts_r+0x10>
 80063ec:	f7ff ffb0 	bl	8006350 <__sinit>
 80063f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f2:	07db      	lsls	r3, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_puts_r+0x22>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	0598      	lsls	r0, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_puts_r+0x22>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f000 f9ae 	bl	800675e <__retarget_lock_acquire_recursive>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d502      	bpl.n	800640e <_puts_r+0x2e>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d135      	bne.n	800647a <_puts_r+0x9a>
 800640e:	4621      	mov	r1, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f000 f8c5 	bl	80065a0 <__swsetup_r>
 8006416:	b380      	cbz	r0, 800647a <_puts_r+0x9a>
 8006418:	f04f 35ff 	mov.w	r5, #4294967295
 800641c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800641e:	07da      	lsls	r2, r3, #31
 8006420:	d405      	bmi.n	800642e <_puts_r+0x4e>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	059b      	lsls	r3, r3, #22
 8006426:	d402      	bmi.n	800642e <_puts_r+0x4e>
 8006428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800642a:	f000 f999 	bl	8006760 <__retarget_lock_release_recursive>
 800642e:	4628      	mov	r0, r5
 8006430:	bd70      	pop	{r4, r5, r6, pc}
 8006432:	2b00      	cmp	r3, #0
 8006434:	da04      	bge.n	8006440 <_puts_r+0x60>
 8006436:	69a2      	ldr	r2, [r4, #24]
 8006438:	429a      	cmp	r2, r3
 800643a:	dc17      	bgt.n	800646c <_puts_r+0x8c>
 800643c:	290a      	cmp	r1, #10
 800643e:	d015      	beq.n	800646c <_puts_r+0x8c>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	6022      	str	r2, [r4, #0]
 8006446:	7019      	strb	r1, [r3, #0]
 8006448:	68a3      	ldr	r3, [r4, #8]
 800644a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800644e:	3b01      	subs	r3, #1
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	2900      	cmp	r1, #0
 8006454:	d1ed      	bne.n	8006432 <_puts_r+0x52>
 8006456:	2b00      	cmp	r3, #0
 8006458:	da11      	bge.n	800647e <_puts_r+0x9e>
 800645a:	4622      	mov	r2, r4
 800645c:	210a      	movs	r1, #10
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f85f 	bl	8006522 <__swbuf_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d0d7      	beq.n	8006418 <_puts_r+0x38>
 8006468:	250a      	movs	r5, #10
 800646a:	e7d7      	b.n	800641c <_puts_r+0x3c>
 800646c:	4622      	mov	r2, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f857 	bl	8006522 <__swbuf_r>
 8006474:	3001      	adds	r0, #1
 8006476:	d1e7      	bne.n	8006448 <_puts_r+0x68>
 8006478:	e7ce      	b.n	8006418 <_puts_r+0x38>
 800647a:	3e01      	subs	r6, #1
 800647c:	e7e4      	b.n	8006448 <_puts_r+0x68>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	6022      	str	r2, [r4, #0]
 8006484:	220a      	movs	r2, #10
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e7ee      	b.n	8006468 <_puts_r+0x88>
	...

0800648c <puts>:
 800648c:	4b02      	ldr	r3, [pc, #8]	@ (8006498 <puts+0xc>)
 800648e:	4601      	mov	r1, r0
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f7ff bfa5 	b.w	80063e0 <_puts_r>
 8006496:	bf00      	nop
 8006498:	20000018 	.word	0x20000018

0800649c <__sread>:
 800649c:	b510      	push	{r4, lr}
 800649e:	460c      	mov	r4, r1
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	f000 f8fc 	bl	80066a0 <_read_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	bfab      	itete	ge
 80064ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064ae:	89a3      	ldrhlt	r3, [r4, #12]
 80064b0:	181b      	addge	r3, r3, r0
 80064b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064b6:	bfac      	ite	ge
 80064b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064ba:	81a3      	strhlt	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__swrite>:
 80064be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	461f      	mov	r7, r3
 80064c4:	898b      	ldrh	r3, [r1, #12]
 80064c6:	05db      	lsls	r3, r3, #23
 80064c8:	4605      	mov	r5, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	4616      	mov	r6, r2
 80064ce:	d505      	bpl.n	80064dc <__swrite+0x1e>
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	2302      	movs	r3, #2
 80064d6:	2200      	movs	r2, #0
 80064d8:	f000 f8d0 	bl	800667c <_lseek_r>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	f000 b8f7 	b.w	80066e4 <_write_r>

080064f6 <__sseek>:
 80064f6:	b510      	push	{r4, lr}
 80064f8:	460c      	mov	r4, r1
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 f8bd 	bl	800667c <_lseek_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	bf15      	itete	ne
 8006508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800650a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800650e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006512:	81a3      	strheq	r3, [r4, #12]
 8006514:	bf18      	it	ne
 8006516:	81a3      	strhne	r3, [r4, #12]
 8006518:	bd10      	pop	{r4, pc}

0800651a <__sclose>:
 800651a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651e:	f000 b89d 	b.w	800665c <_close_r>

08006522 <__swbuf_r>:
 8006522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006524:	460e      	mov	r6, r1
 8006526:	4614      	mov	r4, r2
 8006528:	4605      	mov	r5, r0
 800652a:	b118      	cbz	r0, 8006534 <__swbuf_r+0x12>
 800652c:	6a03      	ldr	r3, [r0, #32]
 800652e:	b90b      	cbnz	r3, 8006534 <__swbuf_r+0x12>
 8006530:	f7ff ff0e 	bl	8006350 <__sinit>
 8006534:	69a3      	ldr	r3, [r4, #24]
 8006536:	60a3      	str	r3, [r4, #8]
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	071a      	lsls	r2, r3, #28
 800653c:	d501      	bpl.n	8006542 <__swbuf_r+0x20>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	b943      	cbnz	r3, 8006554 <__swbuf_r+0x32>
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f000 f82b 	bl	80065a0 <__swsetup_r>
 800654a:	b118      	cbz	r0, 8006554 <__swbuf_r+0x32>
 800654c:	f04f 37ff 	mov.w	r7, #4294967295
 8006550:	4638      	mov	r0, r7
 8006552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	1a98      	subs	r0, r3, r2
 800655a:	6963      	ldr	r3, [r4, #20]
 800655c:	b2f6      	uxtb	r6, r6
 800655e:	4283      	cmp	r3, r0
 8006560:	4637      	mov	r7, r6
 8006562:	dc05      	bgt.n	8006570 <__swbuf_r+0x4e>
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f000 fc9a 	bl	8006ea0 <_fflush_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	d1ed      	bne.n	800654c <__swbuf_r+0x2a>
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	3b01      	subs	r3, #1
 8006574:	60a3      	str	r3, [r4, #8]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	701e      	strb	r6, [r3, #0]
 800657e:	6962      	ldr	r2, [r4, #20]
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	d004      	beq.n	8006590 <__swbuf_r+0x6e>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d5e1      	bpl.n	8006550 <__swbuf_r+0x2e>
 800658c:	2e0a      	cmp	r6, #10
 800658e:	d1df      	bne.n	8006550 <__swbuf_r+0x2e>
 8006590:	4621      	mov	r1, r4
 8006592:	4628      	mov	r0, r5
 8006594:	f000 fc84 	bl	8006ea0 <_fflush_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	d0d9      	beq.n	8006550 <__swbuf_r+0x2e>
 800659c:	e7d6      	b.n	800654c <__swbuf_r+0x2a>
	...

080065a0 <__swsetup_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4b29      	ldr	r3, [pc, #164]	@ (8006648 <__swsetup_r+0xa8>)
 80065a4:	4605      	mov	r5, r0
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	460c      	mov	r4, r1
 80065aa:	b118      	cbz	r0, 80065b4 <__swsetup_r+0x14>
 80065ac:	6a03      	ldr	r3, [r0, #32]
 80065ae:	b90b      	cbnz	r3, 80065b4 <__swsetup_r+0x14>
 80065b0:	f7ff fece 	bl	8006350 <__sinit>
 80065b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b8:	0719      	lsls	r1, r3, #28
 80065ba:	d422      	bmi.n	8006602 <__swsetup_r+0x62>
 80065bc:	06da      	lsls	r2, r3, #27
 80065be:	d407      	bmi.n	80065d0 <__swsetup_r+0x30>
 80065c0:	2209      	movs	r2, #9
 80065c2:	602a      	str	r2, [r5, #0]
 80065c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	e033      	b.n	8006638 <__swsetup_r+0x98>
 80065d0:	0758      	lsls	r0, r3, #29
 80065d2:	d512      	bpl.n	80065fa <__swsetup_r+0x5a>
 80065d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d6:	b141      	cbz	r1, 80065ea <__swsetup_r+0x4a>
 80065d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065dc:	4299      	cmp	r1, r3
 80065de:	d002      	beq.n	80065e6 <__swsetup_r+0x46>
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 f8bf 	bl	8006764 <_free_r>
 80065e6:	2300      	movs	r3, #0
 80065e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	2300      	movs	r3, #0
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f043 0308 	orr.w	r3, r3, #8
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	b94b      	cbnz	r3, 800661a <__swsetup_r+0x7a>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800660c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006610:	d003      	beq.n	800661a <__swsetup_r+0x7a>
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 fc91 	bl	8006f3c <__smakebuf_r>
 800661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661e:	f013 0201 	ands.w	r2, r3, #1
 8006622:	d00a      	beq.n	800663a <__swsetup_r+0x9a>
 8006624:	2200      	movs	r2, #0
 8006626:	60a2      	str	r2, [r4, #8]
 8006628:	6962      	ldr	r2, [r4, #20]
 800662a:	4252      	negs	r2, r2
 800662c:	61a2      	str	r2, [r4, #24]
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	b942      	cbnz	r2, 8006644 <__swsetup_r+0xa4>
 8006632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006636:	d1c5      	bne.n	80065c4 <__swsetup_r+0x24>
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	0799      	lsls	r1, r3, #30
 800663c:	bf58      	it	pl
 800663e:	6962      	ldrpl	r2, [r4, #20]
 8006640:	60a2      	str	r2, [r4, #8]
 8006642:	e7f4      	b.n	800662e <__swsetup_r+0x8e>
 8006644:	2000      	movs	r0, #0
 8006646:	e7f7      	b.n	8006638 <__swsetup_r+0x98>
 8006648:	20000018 	.word	0x20000018

0800664c <memset>:
 800664c:	4402      	add	r2, r0
 800664e:	4603      	mov	r3, r0
 8006650:	4293      	cmp	r3, r2
 8006652:	d100      	bne.n	8006656 <memset+0xa>
 8006654:	4770      	bx	lr
 8006656:	f803 1b01 	strb.w	r1, [r3], #1
 800665a:	e7f9      	b.n	8006650 <memset+0x4>

0800665c <_close_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	@ (8006678 <_close_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fb fd2d 	bl	80020c6 <_close>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_close_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_close_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000300 	.word	0x20000300

0800667c <_lseek_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	@ (800669c <_lseek_r+0x20>)
 8006680:	4604      	mov	r4, r0
 8006682:	4608      	mov	r0, r1
 8006684:	4611      	mov	r1, r2
 8006686:	2200      	movs	r2, #0
 8006688:	602a      	str	r2, [r5, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f7fb fd42 	bl	8002114 <_lseek>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_lseek_r+0x1e>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	b103      	cbz	r3, 800669a <_lseek_r+0x1e>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20000300 	.word	0x20000300

080066a0 <_read_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d07      	ldr	r5, [pc, #28]	@ (80066c0 <_read_r+0x20>)
 80066a4:	4604      	mov	r4, r0
 80066a6:	4608      	mov	r0, r1
 80066a8:	4611      	mov	r1, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	602a      	str	r2, [r5, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f7fb fcd0 	bl	8002054 <_read>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_read_r+0x1e>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_read_r+0x1e>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	20000300 	.word	0x20000300

080066c4 <_sbrk_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d06      	ldr	r5, [pc, #24]	@ (80066e0 <_sbrk_r+0x1c>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fb fd2e 	bl	8002130 <_sbrk>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_sbrk_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_sbrk_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20000300 	.word	0x20000300

080066e4 <_write_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d07      	ldr	r5, [pc, #28]	@ (8006704 <_write_r+0x20>)
 80066e8:	4604      	mov	r4, r0
 80066ea:	4608      	mov	r0, r1
 80066ec:	4611      	mov	r1, r2
 80066ee:	2200      	movs	r2, #0
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f7fb fccb 	bl	800208e <_write>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_write_r+0x1e>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_write_r+0x1e>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20000300 	.word	0x20000300

08006708 <__errno>:
 8006708:	4b01      	ldr	r3, [pc, #4]	@ (8006710 <__errno+0x8>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000018 	.word	0x20000018

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	@ (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	@ (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	@ (8006758 <__libc_init_array+0x44>)
 8006728:	f000 fc66 	bl	8006ff8 <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	080071f4 	.word	0x080071f4
 8006750:	080071f4 	.word	0x080071f4
 8006754:	080071f4 	.word	0x080071f4
 8006758:	080071f8 	.word	0x080071f8

0800675c <__retarget_lock_init_recursive>:
 800675c:	4770      	bx	lr

0800675e <__retarget_lock_acquire_recursive>:
 800675e:	4770      	bx	lr

08006760 <__retarget_lock_release_recursive>:
 8006760:	4770      	bx	lr
	...

08006764 <_free_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4605      	mov	r5, r0
 8006768:	2900      	cmp	r1, #0
 800676a:	d041      	beq.n	80067f0 <_free_r+0x8c>
 800676c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006770:	1f0c      	subs	r4, r1, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	bfb8      	it	lt
 8006776:	18e4      	addlt	r4, r4, r3
 8006778:	f7ff fd52 	bl	8006220 <__malloc_lock>
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <_free_r+0x90>)
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	b933      	cbnz	r3, 8006790 <_free_r+0x2c>
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	6014      	str	r4, [r2, #0]
 8006786:	4628      	mov	r0, r5
 8006788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678c:	f7ff bd4e 	b.w	800622c <__malloc_unlock>
 8006790:	42a3      	cmp	r3, r4
 8006792:	d908      	bls.n	80067a6 <_free_r+0x42>
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	1821      	adds	r1, r4, r0
 8006798:	428b      	cmp	r3, r1
 800679a:	bf01      	itttt	eq
 800679c:	6819      	ldreq	r1, [r3, #0]
 800679e:	685b      	ldreq	r3, [r3, #4]
 80067a0:	1809      	addeq	r1, r1, r0
 80067a2:	6021      	streq	r1, [r4, #0]
 80067a4:	e7ed      	b.n	8006782 <_free_r+0x1e>
 80067a6:	461a      	mov	r2, r3
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	b10b      	cbz	r3, 80067b0 <_free_r+0x4c>
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d9fa      	bls.n	80067a6 <_free_r+0x42>
 80067b0:	6811      	ldr	r1, [r2, #0]
 80067b2:	1850      	adds	r0, r2, r1
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d10b      	bne.n	80067d0 <_free_r+0x6c>
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	4401      	add	r1, r0
 80067bc:	1850      	adds	r0, r2, r1
 80067be:	4283      	cmp	r3, r0
 80067c0:	6011      	str	r1, [r2, #0]
 80067c2:	d1e0      	bne.n	8006786 <_free_r+0x22>
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	6053      	str	r3, [r2, #4]
 80067ca:	4408      	add	r0, r1
 80067cc:	6010      	str	r0, [r2, #0]
 80067ce:	e7da      	b.n	8006786 <_free_r+0x22>
 80067d0:	d902      	bls.n	80067d8 <_free_r+0x74>
 80067d2:	230c      	movs	r3, #12
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	e7d6      	b.n	8006786 <_free_r+0x22>
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	1821      	adds	r1, r4, r0
 80067dc:	428b      	cmp	r3, r1
 80067de:	bf04      	itt	eq
 80067e0:	6819      	ldreq	r1, [r3, #0]
 80067e2:	685b      	ldreq	r3, [r3, #4]
 80067e4:	6063      	str	r3, [r4, #4]
 80067e6:	bf04      	itt	eq
 80067e8:	1809      	addeq	r1, r1, r0
 80067ea:	6021      	streq	r1, [r4, #0]
 80067ec:	6054      	str	r4, [r2, #4]
 80067ee:	e7ca      	b.n	8006786 <_free_r+0x22>
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	200001c0 	.word	0x200001c0

080067f8 <__sfputc_r>:
 80067f8:	6893      	ldr	r3, [r2, #8]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	b410      	push	{r4}
 8006800:	6093      	str	r3, [r2, #8]
 8006802:	da08      	bge.n	8006816 <__sfputc_r+0x1e>
 8006804:	6994      	ldr	r4, [r2, #24]
 8006806:	42a3      	cmp	r3, r4
 8006808:	db01      	blt.n	800680e <__sfputc_r+0x16>
 800680a:	290a      	cmp	r1, #10
 800680c:	d103      	bne.n	8006816 <__sfputc_r+0x1e>
 800680e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006812:	f7ff be86 	b.w	8006522 <__swbuf_r>
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	1c58      	adds	r0, r3, #1
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	7019      	strb	r1, [r3, #0]
 800681e:	4608      	mov	r0, r1
 8006820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006824:	4770      	bx	lr

08006826 <__sfputs_r>:
 8006826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006828:	4606      	mov	r6, r0
 800682a:	460f      	mov	r7, r1
 800682c:	4614      	mov	r4, r2
 800682e:	18d5      	adds	r5, r2, r3
 8006830:	42ac      	cmp	r4, r5
 8006832:	d101      	bne.n	8006838 <__sfputs_r+0x12>
 8006834:	2000      	movs	r0, #0
 8006836:	e007      	b.n	8006848 <__sfputs_r+0x22>
 8006838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683c:	463a      	mov	r2, r7
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ffda 	bl	80067f8 <__sfputc_r>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d1f3      	bne.n	8006830 <__sfputs_r+0xa>
 8006848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800684c <_vfiprintf_r>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	460d      	mov	r5, r1
 8006852:	b09d      	sub	sp, #116	@ 0x74
 8006854:	4614      	mov	r4, r2
 8006856:	4698      	mov	r8, r3
 8006858:	4606      	mov	r6, r0
 800685a:	b118      	cbz	r0, 8006864 <_vfiprintf_r+0x18>
 800685c:	6a03      	ldr	r3, [r0, #32]
 800685e:	b90b      	cbnz	r3, 8006864 <_vfiprintf_r+0x18>
 8006860:	f7ff fd76 	bl	8006350 <__sinit>
 8006864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d405      	bmi.n	8006876 <_vfiprintf_r+0x2a>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	059a      	lsls	r2, r3, #22
 800686e:	d402      	bmi.n	8006876 <_vfiprintf_r+0x2a>
 8006870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006872:	f7ff ff74 	bl	800675e <__retarget_lock_acquire_recursive>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	d501      	bpl.n	8006880 <_vfiprintf_r+0x34>
 800687c:	692b      	ldr	r3, [r5, #16]
 800687e:	b99b      	cbnz	r3, 80068a8 <_vfiprintf_r+0x5c>
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff fe8c 	bl	80065a0 <__swsetup_r>
 8006888:	b170      	cbz	r0, 80068a8 <_vfiprintf_r+0x5c>
 800688a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800688c:	07dc      	lsls	r4, r3, #31
 800688e:	d504      	bpl.n	800689a <_vfiprintf_r+0x4e>
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	b01d      	add	sp, #116	@ 0x74
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689a:	89ab      	ldrh	r3, [r5, #12]
 800689c:	0598      	lsls	r0, r3, #22
 800689e:	d4f7      	bmi.n	8006890 <_vfiprintf_r+0x44>
 80068a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068a2:	f7ff ff5d 	bl	8006760 <__retarget_lock_release_recursive>
 80068a6:	e7f3      	b.n	8006890 <_vfiprintf_r+0x44>
 80068a8:	2300      	movs	r3, #0
 80068aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ac:	2320      	movs	r3, #32
 80068ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b6:	2330      	movs	r3, #48	@ 0x30
 80068b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a68 <_vfiprintf_r+0x21c>
 80068bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068c0:	f04f 0901 	mov.w	r9, #1
 80068c4:	4623      	mov	r3, r4
 80068c6:	469a      	mov	sl, r3
 80068c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068cc:	b10a      	cbz	r2, 80068d2 <_vfiprintf_r+0x86>
 80068ce:	2a25      	cmp	r2, #37	@ 0x25
 80068d0:	d1f9      	bne.n	80068c6 <_vfiprintf_r+0x7a>
 80068d2:	ebba 0b04 	subs.w	fp, sl, r4
 80068d6:	d00b      	beq.n	80068f0 <_vfiprintf_r+0xa4>
 80068d8:	465b      	mov	r3, fp
 80068da:	4622      	mov	r2, r4
 80068dc:	4629      	mov	r1, r5
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff ffa1 	bl	8006826 <__sfputs_r>
 80068e4:	3001      	adds	r0, #1
 80068e6:	f000 80a7 	beq.w	8006a38 <_vfiprintf_r+0x1ec>
 80068ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ec:	445a      	add	r2, fp
 80068ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80068f0:	f89a 3000 	ldrb.w	r3, [sl]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 809f 	beq.w	8006a38 <_vfiprintf_r+0x1ec>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006904:	f10a 0a01 	add.w	sl, sl, #1
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006910:	931a      	str	r3, [sp, #104]	@ 0x68
 8006912:	4654      	mov	r4, sl
 8006914:	2205      	movs	r2, #5
 8006916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691a:	4853      	ldr	r0, [pc, #332]	@ (8006a68 <_vfiprintf_r+0x21c>)
 800691c:	f7f9 fc78 	bl	8000210 <memchr>
 8006920:	9a04      	ldr	r2, [sp, #16]
 8006922:	b9d8      	cbnz	r0, 800695c <_vfiprintf_r+0x110>
 8006924:	06d1      	lsls	r1, r2, #27
 8006926:	bf44      	itt	mi
 8006928:	2320      	movmi	r3, #32
 800692a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800692e:	0713      	lsls	r3, r2, #28
 8006930:	bf44      	itt	mi
 8006932:	232b      	movmi	r3, #43	@ 0x2b
 8006934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006938:	f89a 3000 	ldrb.w	r3, [sl]
 800693c:	2b2a      	cmp	r3, #42	@ 0x2a
 800693e:	d015      	beq.n	800696c <_vfiprintf_r+0x120>
 8006940:	9a07      	ldr	r2, [sp, #28]
 8006942:	4654      	mov	r4, sl
 8006944:	2000      	movs	r0, #0
 8006946:	f04f 0c0a 	mov.w	ip, #10
 800694a:	4621      	mov	r1, r4
 800694c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006950:	3b30      	subs	r3, #48	@ 0x30
 8006952:	2b09      	cmp	r3, #9
 8006954:	d94b      	bls.n	80069ee <_vfiprintf_r+0x1a2>
 8006956:	b1b0      	cbz	r0, 8006986 <_vfiprintf_r+0x13a>
 8006958:	9207      	str	r2, [sp, #28]
 800695a:	e014      	b.n	8006986 <_vfiprintf_r+0x13a>
 800695c:	eba0 0308 	sub.w	r3, r0, r8
 8006960:	fa09 f303 	lsl.w	r3, r9, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	46a2      	mov	sl, r4
 800696a:	e7d2      	b.n	8006912 <_vfiprintf_r+0xc6>
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	1d19      	adds	r1, r3, #4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	9103      	str	r1, [sp, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	bfbb      	ittet	lt
 8006978:	425b      	neglt	r3, r3
 800697a:	f042 0202 	orrlt.w	r2, r2, #2
 800697e:	9307      	strge	r3, [sp, #28]
 8006980:	9307      	strlt	r3, [sp, #28]
 8006982:	bfb8      	it	lt
 8006984:	9204      	strlt	r2, [sp, #16]
 8006986:	7823      	ldrb	r3, [r4, #0]
 8006988:	2b2e      	cmp	r3, #46	@ 0x2e
 800698a:	d10a      	bne.n	80069a2 <_vfiprintf_r+0x156>
 800698c:	7863      	ldrb	r3, [r4, #1]
 800698e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006990:	d132      	bne.n	80069f8 <_vfiprintf_r+0x1ac>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	9203      	str	r2, [sp, #12]
 800699a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800699e:	3402      	adds	r4, #2
 80069a0:	9305      	str	r3, [sp, #20]
 80069a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a78 <_vfiprintf_r+0x22c>
 80069a6:	7821      	ldrb	r1, [r4, #0]
 80069a8:	2203      	movs	r2, #3
 80069aa:	4650      	mov	r0, sl
 80069ac:	f7f9 fc30 	bl	8000210 <memchr>
 80069b0:	b138      	cbz	r0, 80069c2 <_vfiprintf_r+0x176>
 80069b2:	9b04      	ldr	r3, [sp, #16]
 80069b4:	eba0 000a 	sub.w	r0, r0, sl
 80069b8:	2240      	movs	r2, #64	@ 0x40
 80069ba:	4082      	lsls	r2, r0
 80069bc:	4313      	orrs	r3, r2
 80069be:	3401      	adds	r4, #1
 80069c0:	9304      	str	r3, [sp, #16]
 80069c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c6:	4829      	ldr	r0, [pc, #164]	@ (8006a6c <_vfiprintf_r+0x220>)
 80069c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069cc:	2206      	movs	r2, #6
 80069ce:	f7f9 fc1f 	bl	8000210 <memchr>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d03f      	beq.n	8006a56 <_vfiprintf_r+0x20a>
 80069d6:	4b26      	ldr	r3, [pc, #152]	@ (8006a70 <_vfiprintf_r+0x224>)
 80069d8:	bb1b      	cbnz	r3, 8006a22 <_vfiprintf_r+0x1d6>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	3307      	adds	r3, #7
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	3308      	adds	r3, #8
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	443b      	add	r3, r7
 80069ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ec:	e76a      	b.n	80068c4 <_vfiprintf_r+0x78>
 80069ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f2:	460c      	mov	r4, r1
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7a8      	b.n	800694a <_vfiprintf_r+0xfe>
 80069f8:	2300      	movs	r3, #0
 80069fa:	3401      	adds	r4, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4619      	mov	r1, r3
 8006a00:	f04f 0c0a 	mov.w	ip, #10
 8006a04:	4620      	mov	r0, r4
 8006a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0a:	3a30      	subs	r2, #48	@ 0x30
 8006a0c:	2a09      	cmp	r2, #9
 8006a0e:	d903      	bls.n	8006a18 <_vfiprintf_r+0x1cc>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0c6      	beq.n	80069a2 <_vfiprintf_r+0x156>
 8006a14:	9105      	str	r1, [sp, #20]
 8006a16:	e7c4      	b.n	80069a2 <_vfiprintf_r+0x156>
 8006a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7f0      	b.n	8006a04 <_vfiprintf_r+0x1b8>
 8006a22:	ab03      	add	r3, sp, #12
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	462a      	mov	r2, r5
 8006a28:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <_vfiprintf_r+0x228>)
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f3af 8000 	nop.w
 8006a32:	4607      	mov	r7, r0
 8006a34:	1c78      	adds	r0, r7, #1
 8006a36:	d1d6      	bne.n	80069e6 <_vfiprintf_r+0x19a>
 8006a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d405      	bmi.n	8006a4a <_vfiprintf_r+0x1fe>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	059a      	lsls	r2, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_vfiprintf_r+0x1fe>
 8006a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a46:	f7ff fe8b 	bl	8006760 <__retarget_lock_release_recursive>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	065b      	lsls	r3, r3, #25
 8006a4e:	f53f af1f 	bmi.w	8006890 <_vfiprintf_r+0x44>
 8006a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a54:	e71e      	b.n	8006894 <_vfiprintf_r+0x48>
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	462a      	mov	r2, r5
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <_vfiprintf_r+0x228>)
 8006a5e:	a904      	add	r1, sp, #16
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f879 	bl	8006b58 <_printf_i>
 8006a66:	e7e4      	b.n	8006a32 <_vfiprintf_r+0x1e6>
 8006a68:	080071b8 	.word	0x080071b8
 8006a6c:	080071c2 	.word	0x080071c2
 8006a70:	00000000 	.word	0x00000000
 8006a74:	08006827 	.word	0x08006827
 8006a78:	080071be 	.word	0x080071be

08006a7c <_printf_common>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	4616      	mov	r6, r2
 8006a82:	4698      	mov	r8, r3
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	bfb8      	it	lt
 8006a90:	4613      	movlt	r3, r2
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a98:	4607      	mov	r7, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_printf_common+0x26>
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	0699      	lsls	r1, r3, #26
 8006aa6:	bf42      	ittt	mi
 8006aa8:	6833      	ldrmi	r3, [r6, #0]
 8006aaa:	3302      	addmi	r3, #2
 8006aac:	6033      	strmi	r3, [r6, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	f015 0506 	ands.w	r5, r5, #6
 8006ab4:	d106      	bne.n	8006ac4 <_printf_common+0x48>
 8006ab6:	f104 0a19 	add.w	sl, r4, #25
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	6832      	ldr	r2, [r6, #0]
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	dc26      	bgt.n	8006b12 <_printf_common+0x96>
 8006ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	3b00      	subs	r3, #0
 8006acc:	bf18      	it	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	0692      	lsls	r2, r2, #26
 8006ad2:	d42b      	bmi.n	8006b2c <_printf_common+0xb0>
 8006ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c8      	blx	r9
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d01e      	beq.n	8006b20 <_printf_common+0xa4>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	f003 0306 	and.w	r3, r3, #6
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf02      	ittt	eq
 8006aee:	68e5      	ldreq	r5, [r4, #12]
 8006af0:	6833      	ldreq	r3, [r6, #0]
 8006af2:	1aed      	subeq	r5, r5, r3
 8006af4:	68a3      	ldr	r3, [r4, #8]
 8006af6:	bf0c      	ite	eq
 8006af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006afc:	2500      	movne	r5, #0
 8006afe:	4293      	cmp	r3, r2
 8006b00:	bfc4      	itt	gt
 8006b02:	1a9b      	subgt	r3, r3, r2
 8006b04:	18ed      	addgt	r5, r5, r3
 8006b06:	2600      	movs	r6, #0
 8006b08:	341a      	adds	r4, #26
 8006b0a:	42b5      	cmp	r5, r6
 8006b0c:	d11a      	bne.n	8006b44 <_printf_common+0xc8>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e008      	b.n	8006b24 <_printf_common+0xa8>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4652      	mov	r2, sl
 8006b16:	4641      	mov	r1, r8
 8006b18:	4638      	mov	r0, r7
 8006b1a:	47c8      	blx	r9
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d103      	bne.n	8006b28 <_printf_common+0xac>
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b28:	3501      	adds	r5, #1
 8006b2a:	e7c6      	b.n	8006aba <_printf_common+0x3e>
 8006b2c:	18e1      	adds	r1, r4, r3
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	2030      	movs	r0, #48	@ 0x30
 8006b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b36:	4422      	add	r2, r4
 8006b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b40:	3302      	adds	r3, #2
 8006b42:	e7c7      	b.n	8006ad4 <_printf_common+0x58>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4622      	mov	r2, r4
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d0e6      	beq.n	8006b20 <_printf_common+0xa4>
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7d9      	b.n	8006b0a <_printf_common+0x8e>
	...

08006b58 <_printf_i>:
 8006b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	7e0f      	ldrb	r7, [r1, #24]
 8006b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b60:	2f78      	cmp	r7, #120	@ 0x78
 8006b62:	4691      	mov	r9, r2
 8006b64:	4680      	mov	r8, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	469a      	mov	sl, r3
 8006b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b6e:	d807      	bhi.n	8006b80 <_printf_i+0x28>
 8006b70:	2f62      	cmp	r7, #98	@ 0x62
 8006b72:	d80a      	bhi.n	8006b8a <_printf_i+0x32>
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	f000 80d2 	beq.w	8006d1e <_printf_i+0x1c6>
 8006b7a:	2f58      	cmp	r7, #88	@ 0x58
 8006b7c:	f000 80b9 	beq.w	8006cf2 <_printf_i+0x19a>
 8006b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b88:	e03a      	b.n	8006c00 <_printf_i+0xa8>
 8006b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b8e:	2b15      	cmp	r3, #21
 8006b90:	d8f6      	bhi.n	8006b80 <_printf_i+0x28>
 8006b92:	a101      	add	r1, pc, #4	@ (adr r1, 8006b98 <_printf_i+0x40>)
 8006b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b98:	08006bf1 	.word	0x08006bf1
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006b81 	.word	0x08006b81
 8006ba4:	08006b81 	.word	0x08006b81
 8006ba8:	08006b81 	.word	0x08006b81
 8006bac:	08006b81 	.word	0x08006b81
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006b81 	.word	0x08006b81
 8006bb8:	08006b81 	.word	0x08006b81
 8006bbc:	08006b81 	.word	0x08006b81
 8006bc0:	08006b81 	.word	0x08006b81
 8006bc4:	08006d05 	.word	0x08006d05
 8006bc8:	08006c2f 	.word	0x08006c2f
 8006bcc:	08006cbf 	.word	0x08006cbf
 8006bd0:	08006b81 	.word	0x08006b81
 8006bd4:	08006b81 	.word	0x08006b81
 8006bd8:	08006d27 	.word	0x08006d27
 8006bdc:	08006b81 	.word	0x08006b81
 8006be0:	08006c2f 	.word	0x08006c2f
 8006be4:	08006b81 	.word	0x08006b81
 8006be8:	08006b81 	.word	0x08006b81
 8006bec:	08006cc7 	.word	0x08006cc7
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6032      	str	r2, [r6, #0]
 8006bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c00:	2301      	movs	r3, #1
 8006c02:	e09d      	b.n	8006d40 <_printf_i+0x1e8>
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	1d19      	adds	r1, r3, #4
 8006c0a:	6031      	str	r1, [r6, #0]
 8006c0c:	0606      	lsls	r6, r0, #24
 8006c0e:	d501      	bpl.n	8006c14 <_printf_i+0xbc>
 8006c10:	681d      	ldr	r5, [r3, #0]
 8006c12:	e003      	b.n	8006c1c <_printf_i+0xc4>
 8006c14:	0645      	lsls	r5, r0, #25
 8006c16:	d5fb      	bpl.n	8006c10 <_printf_i+0xb8>
 8006c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	da03      	bge.n	8006c28 <_printf_i+0xd0>
 8006c20:	232d      	movs	r3, #45	@ 0x2d
 8006c22:	426d      	negs	r5, r5
 8006c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c28:	4859      	ldr	r0, [pc, #356]	@ (8006d90 <_printf_i+0x238>)
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	e011      	b.n	8006c52 <_printf_i+0xfa>
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	0608      	lsls	r0, r1, #24
 8006c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0xe8>
 8006c3a:	0649      	lsls	r1, r1, #25
 8006c3c:	bf48      	it	mi
 8006c3e:	b2ad      	uxthmi	r5, r5
 8006c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c42:	4853      	ldr	r0, [pc, #332]	@ (8006d90 <_printf_i+0x238>)
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	bf14      	ite	ne
 8006c48:	230a      	movne	r3, #10
 8006c4a:	2308      	moveq	r3, #8
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c52:	6866      	ldr	r6, [r4, #4]
 8006c54:	60a6      	str	r6, [r4, #8]
 8006c56:	2e00      	cmp	r6, #0
 8006c58:	bfa2      	ittt	ge
 8006c5a:	6821      	ldrge	r1, [r4, #0]
 8006c5c:	f021 0104 	bicge.w	r1, r1, #4
 8006c60:	6021      	strge	r1, [r4, #0]
 8006c62:	b90d      	cbnz	r5, 8006c68 <_printf_i+0x110>
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	d04b      	beq.n	8006d00 <_printf_i+0x1a8>
 8006c68:	4616      	mov	r6, r2
 8006c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c72:	5dc7      	ldrb	r7, [r0, r7]
 8006c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c78:	462f      	mov	r7, r5
 8006c7a:	42bb      	cmp	r3, r7
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	d9f4      	bls.n	8006c6a <_printf_i+0x112>
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d10b      	bne.n	8006c9c <_printf_i+0x144>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	07df      	lsls	r7, r3, #31
 8006c88:	d508      	bpl.n	8006c9c <_printf_i+0x144>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	6861      	ldr	r1, [r4, #4]
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	bfde      	ittt	le
 8006c92:	2330      	movle	r3, #48	@ 0x30
 8006c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c9c:	1b92      	subs	r2, r2, r6
 8006c9e:	6122      	str	r2, [r4, #16]
 8006ca0:	f8cd a000 	str.w	sl, [sp]
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	aa03      	add	r2, sp, #12
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff fee6 	bl	8006a7c <_printf_common>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d14a      	bne.n	8006d4a <_printf_i+0x1f2>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b004      	add	sp, #16
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f043 0320 	orr.w	r3, r3, #32
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	4833      	ldr	r0, [pc, #204]	@ (8006d94 <_printf_i+0x23c>)
 8006cc8:	2778      	movs	r7, #120	@ 0x78
 8006cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	6831      	ldr	r1, [r6, #0]
 8006cd2:	061f      	lsls	r7, r3, #24
 8006cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cd8:	d402      	bmi.n	8006ce0 <_printf_i+0x188>
 8006cda:	065f      	lsls	r7, r3, #25
 8006cdc:	bf48      	it	mi
 8006cde:	b2ad      	uxthmi	r5, r5
 8006ce0:	6031      	str	r1, [r6, #0]
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	bf44      	itt	mi
 8006ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cea:	6023      	strmi	r3, [r4, #0]
 8006cec:	b11d      	cbz	r5, 8006cf6 <_printf_i+0x19e>
 8006cee:	2310      	movs	r3, #16
 8006cf0:	e7ac      	b.n	8006c4c <_printf_i+0xf4>
 8006cf2:	4827      	ldr	r0, [pc, #156]	@ (8006d90 <_printf_i+0x238>)
 8006cf4:	e7e9      	b.n	8006cca <_printf_i+0x172>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	e7f6      	b.n	8006cee <_printf_i+0x196>
 8006d00:	4616      	mov	r6, r2
 8006d02:	e7bd      	b.n	8006c80 <_printf_i+0x128>
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	6961      	ldr	r1, [r4, #20]
 8006d0a:	1d18      	adds	r0, r3, #4
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	062e      	lsls	r6, r5, #24
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	d501      	bpl.n	8006d18 <_printf_i+0x1c0>
 8006d14:	6019      	str	r1, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <_printf_i+0x1c6>
 8006d18:	0668      	lsls	r0, r5, #25
 8006d1a:	d5fb      	bpl.n	8006d14 <_printf_i+0x1bc>
 8006d1c:	8019      	strh	r1, [r3, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	4616      	mov	r6, r2
 8006d24:	e7bc      	b.n	8006ca0 <_printf_i+0x148>
 8006d26:	6833      	ldr	r3, [r6, #0]
 8006d28:	1d1a      	adds	r2, r3, #4
 8006d2a:	6032      	str	r2, [r6, #0]
 8006d2c:	681e      	ldr	r6, [r3, #0]
 8006d2e:	6862      	ldr	r2, [r4, #4]
 8006d30:	2100      	movs	r1, #0
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7f9 fa6c 	bl	8000210 <memchr>
 8006d38:	b108      	cbz	r0, 8006d3e <_printf_i+0x1e6>
 8006d3a:	1b80      	subs	r0, r0, r6
 8006d3c:	6060      	str	r0, [r4, #4]
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	2300      	movs	r3, #0
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d48:	e7aa      	b.n	8006ca0 <_printf_i+0x148>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d0ad      	beq.n	8006cb4 <_printf_i+0x15c>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	079b      	lsls	r3, r3, #30
 8006d5c:	d413      	bmi.n	8006d86 <_printf_i+0x22e>
 8006d5e:	68e0      	ldr	r0, [r4, #12]
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	4298      	cmp	r0, r3
 8006d64:	bfb8      	it	lt
 8006d66:	4618      	movlt	r0, r3
 8006d68:	e7a6      	b.n	8006cb8 <_printf_i+0x160>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4640      	mov	r0, r8
 8006d72:	47d0      	blx	sl
 8006d74:	3001      	adds	r0, #1
 8006d76:	d09d      	beq.n	8006cb4 <_printf_i+0x15c>
 8006d78:	3501      	adds	r5, #1
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	9903      	ldr	r1, [sp, #12]
 8006d7e:	1a5b      	subs	r3, r3, r1
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dcf2      	bgt.n	8006d6a <_printf_i+0x212>
 8006d84:	e7eb      	b.n	8006d5e <_printf_i+0x206>
 8006d86:	2500      	movs	r5, #0
 8006d88:	f104 0619 	add.w	r6, r4, #25
 8006d8c:	e7f5      	b.n	8006d7a <_printf_i+0x222>
 8006d8e:	bf00      	nop
 8006d90:	080071c9 	.word	0x080071c9
 8006d94:	080071da 	.word	0x080071da

08006d98 <__sflush_r>:
 8006d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	0716      	lsls	r6, r2, #28
 8006da2:	4605      	mov	r5, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	d454      	bmi.n	8006e52 <__sflush_r+0xba>
 8006da8:	684b      	ldr	r3, [r1, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dc02      	bgt.n	8006db4 <__sflush_r+0x1c>
 8006dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd48      	ble.n	8006e46 <__sflush_r+0xae>
 8006db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d045      	beq.n	8006e46 <__sflush_r+0xae>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dc0:	682f      	ldr	r7, [r5, #0]
 8006dc2:	6a21      	ldr	r1, [r4, #32]
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	d030      	beq.n	8006e2a <__sflush_r+0x92>
 8006dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	0759      	lsls	r1, r3, #29
 8006dce:	d505      	bpl.n	8006ddc <__sflush_r+0x44>
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dd6:	b10b      	cbz	r3, 8006ddc <__sflush_r+0x44>
 8006dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de0:	6a21      	ldr	r1, [r4, #32]
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b0      	blx	r6
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	d106      	bne.n	8006dfa <__sflush_r+0x62>
 8006dec:	6829      	ldr	r1, [r5, #0]
 8006dee:	291d      	cmp	r1, #29
 8006df0:	d82b      	bhi.n	8006e4a <__sflush_r+0xb2>
 8006df2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e9c <__sflush_r+0x104>)
 8006df4:	410a      	asrs	r2, r1
 8006df6:	07d6      	lsls	r6, r2, #31
 8006df8:	d427      	bmi.n	8006e4a <__sflush_r+0xb2>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6062      	str	r2, [r4, #4]
 8006dfe:	04d9      	lsls	r1, r3, #19
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	d504      	bpl.n	8006e10 <__sflush_r+0x78>
 8006e06:	1c42      	adds	r2, r0, #1
 8006e08:	d101      	bne.n	8006e0e <__sflush_r+0x76>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b903      	cbnz	r3, 8006e10 <__sflush_r+0x78>
 8006e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e12:	602f      	str	r7, [r5, #0]
 8006e14:	b1b9      	cbz	r1, 8006e46 <__sflush_r+0xae>
 8006e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d002      	beq.n	8006e24 <__sflush_r+0x8c>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7ff fca0 	bl	8006764 <_free_r>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e28:	e00d      	b.n	8006e46 <__sflush_r+0xae>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b0      	blx	r6
 8006e30:	4602      	mov	r2, r0
 8006e32:	1c50      	adds	r0, r2, #1
 8006e34:	d1c9      	bne.n	8006dca <__sflush_r+0x32>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0c6      	beq.n	8006dca <__sflush_r+0x32>
 8006e3c:	2b1d      	cmp	r3, #29
 8006e3e:	d001      	beq.n	8006e44 <__sflush_r+0xac>
 8006e40:	2b16      	cmp	r3, #22
 8006e42:	d11e      	bne.n	8006e82 <__sflush_r+0xea>
 8006e44:	602f      	str	r7, [r5, #0]
 8006e46:	2000      	movs	r0, #0
 8006e48:	e022      	b.n	8006e90 <__sflush_r+0xf8>
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4e:	b21b      	sxth	r3, r3
 8006e50:	e01b      	b.n	8006e8a <__sflush_r+0xf2>
 8006e52:	690f      	ldr	r7, [r1, #16]
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	d0f6      	beq.n	8006e46 <__sflush_r+0xae>
 8006e58:	0793      	lsls	r3, r2, #30
 8006e5a:	680e      	ldr	r6, [r1, #0]
 8006e5c:	bf08      	it	eq
 8006e5e:	694b      	ldreq	r3, [r1, #20]
 8006e60:	600f      	str	r7, [r1, #0]
 8006e62:	bf18      	it	ne
 8006e64:	2300      	movne	r3, #0
 8006e66:	eba6 0807 	sub.w	r8, r6, r7
 8006e6a:	608b      	str	r3, [r1, #8]
 8006e6c:	f1b8 0f00 	cmp.w	r8, #0
 8006e70:	dde9      	ble.n	8006e46 <__sflush_r+0xae>
 8006e72:	6a21      	ldr	r1, [r4, #32]
 8006e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e76:	4643      	mov	r3, r8
 8006e78:	463a      	mov	r2, r7
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b0      	blx	r6
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	dc08      	bgt.n	8006e94 <__sflush_r+0xfc>
 8006e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	4407      	add	r7, r0
 8006e96:	eba8 0800 	sub.w	r8, r8, r0
 8006e9a:	e7e7      	b.n	8006e6c <__sflush_r+0xd4>
 8006e9c:	dfbffffe 	.word	0xdfbffffe

08006ea0 <_fflush_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	690b      	ldr	r3, [r1, #16]
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	b913      	cbnz	r3, 8006eb0 <_fflush_r+0x10>
 8006eaa:	2500      	movs	r5, #0
 8006eac:	4628      	mov	r0, r5
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	b118      	cbz	r0, 8006eba <_fflush_r+0x1a>
 8006eb2:	6a03      	ldr	r3, [r0, #32]
 8006eb4:	b90b      	cbnz	r3, 8006eba <_fflush_r+0x1a>
 8006eb6:	f7ff fa4b 	bl	8006350 <__sinit>
 8006eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f3      	beq.n	8006eaa <_fflush_r+0xa>
 8006ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ec4:	07d0      	lsls	r0, r2, #31
 8006ec6:	d404      	bmi.n	8006ed2 <_fflush_r+0x32>
 8006ec8:	0599      	lsls	r1, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_fflush_r+0x32>
 8006ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ece:	f7ff fc46 	bl	800675e <__retarget_lock_acquire_recursive>
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	f7ff ff5f 	bl	8006d98 <__sflush_r>
 8006eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006edc:	07da      	lsls	r2, r3, #31
 8006ede:	4605      	mov	r5, r0
 8006ee0:	d4e4      	bmi.n	8006eac <_fflush_r+0xc>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	059b      	lsls	r3, r3, #22
 8006ee6:	d4e1      	bmi.n	8006eac <_fflush_r+0xc>
 8006ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eea:	f7ff fc39 	bl	8006760 <__retarget_lock_release_recursive>
 8006eee:	e7dd      	b.n	8006eac <_fflush_r+0xc>

08006ef0 <__swhatbuf_r>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	b096      	sub	sp, #88	@ 0x58
 8006efc:	4615      	mov	r5, r2
 8006efe:	461e      	mov	r6, r3
 8006f00:	da0d      	bge.n	8006f1e <__swhatbuf_r+0x2e>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2340      	movne	r3, #64	@ 0x40
 8006f10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f14:	2000      	movs	r0, #0
 8006f16:	6031      	str	r1, [r6, #0]
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	b016      	add	sp, #88	@ 0x58
 8006f1c:	bd70      	pop	{r4, r5, r6, pc}
 8006f1e:	466a      	mov	r2, sp
 8006f20:	f000 f848 	bl	8006fb4 <_fstat_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	dbec      	blt.n	8006f02 <__swhatbuf_r+0x12>
 8006f28:	9901      	ldr	r1, [sp, #4]
 8006f2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f32:	4259      	negs	r1, r3
 8006f34:	4159      	adcs	r1, r3
 8006f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f3a:	e7eb      	b.n	8006f14 <__swhatbuf_r+0x24>

08006f3c <__smakebuf_r>:
 8006f3c:	898b      	ldrh	r3, [r1, #12]
 8006f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f40:	079d      	lsls	r5, r3, #30
 8006f42:	4606      	mov	r6, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	d507      	bpl.n	8006f58 <__smakebuf_r+0x1c>
 8006f48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	2301      	movs	r3, #1
 8006f52:	6163      	str	r3, [r4, #20]
 8006f54:	b003      	add	sp, #12
 8006f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f58:	ab01      	add	r3, sp, #4
 8006f5a:	466a      	mov	r2, sp
 8006f5c:	f7ff ffc8 	bl	8006ef0 <__swhatbuf_r>
 8006f60:	9f00      	ldr	r7, [sp, #0]
 8006f62:	4605      	mov	r5, r0
 8006f64:	4639      	mov	r1, r7
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff f8da 	bl	8006120 <_malloc_r>
 8006f6c:	b948      	cbnz	r0, 8006f82 <__smakebuf_r+0x46>
 8006f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f72:	059a      	lsls	r2, r3, #22
 8006f74:	d4ee      	bmi.n	8006f54 <__smakebuf_r+0x18>
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	e7e2      	b.n	8006f48 <__smakebuf_r+0xc>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	6020      	str	r0, [r4, #0]
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f92:	b15b      	cbz	r3, 8006fac <__smakebuf_r+0x70>
 8006f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 f81d 	bl	8006fd8 <_isatty_r>
 8006f9e:	b128      	cbz	r0, 8006fac <__smakebuf_r+0x70>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f023 0303 	bic.w	r3, r3, #3
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	431d      	orrs	r5, r3
 8006fb0:	81a5      	strh	r5, [r4, #12]
 8006fb2:	e7cf      	b.n	8006f54 <__smakebuf_r+0x18>

08006fb4 <_fstat_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	@ (8006fd4 <_fstat_r+0x20>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	f7fb f88c 	bl	80020de <_fstat>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d102      	bne.n	8006fd0 <_fstat_r+0x1c>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	b103      	cbz	r3, 8006fd0 <_fstat_r+0x1c>
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000300 	.word	0x20000300

08006fd8 <_isatty_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	@ (8006ff4 <_isatty_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fb f88b 	bl	80020fe <_isatty>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_isatty_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_isatty_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000300 	.word	0x20000300

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
