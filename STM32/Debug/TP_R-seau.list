
TP_R-seau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f4  080083f4  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080083f4  080083f4  000093f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083fc  080083fc  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083fc  080083fc  000093fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008404  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000070  08008474  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08008474  0000a34c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a7  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230e  00000000  00000000  00018947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0001ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  0001b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023001  00000000  00000000  0001c2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1a  00000000  00000000  0003f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa36  00000000  00000000  0004ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ec  00000000  00000000  0011f97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00123c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fb0 	.word	0x08007fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007fb0 	.word	0x08007fb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_ldivmod>:
 8000b3c:	b97b      	cbnz	r3, 8000b5e <__aeabi_ldivmod+0x22>
 8000b3e:	b972      	cbnz	r2, 8000b5e <__aeabi_ldivmod+0x22>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bfbe      	ittt	lt
 8000b44:	2000      	movlt	r0, #0
 8000b46:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b4a:	e006      	blt.n	8000b5a <__aeabi_ldivmod+0x1e>
 8000b4c:	bf08      	it	eq
 8000b4e:	2800      	cmpeq	r0, #0
 8000b50:	bf1c      	itt	ne
 8000b52:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b56:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5a:	f000 b9b5 	b.w	8000ec8 <__aeabi_idiv0>
 8000b5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b66:	2900      	cmp	r1, #0
 8000b68:	db09      	blt.n	8000b7e <__aeabi_ldivmod+0x42>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db1a      	blt.n	8000ba4 <__aeabi_ldivmod+0x68>
 8000b6e:	f000 f84d 	bl	8000c0c <__udivmoddi4>
 8000b72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4770      	bx	lr
 8000b7e:	4240      	negs	r0, r0
 8000b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db1b      	blt.n	8000bc0 <__aeabi_ldivmod+0x84>
 8000b88:	f000 f840 	bl	8000c0c <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4240      	negs	r0, r0
 8000b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba2:	4770      	bx	lr
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	f000 f82f 	bl	8000c0c <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4240      	negs	r0, r0
 8000bba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f821 	bl	8000c0c <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b96a 	b.w	8000ec8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	460c      	mov	r4, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14e      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c18:	4694      	mov	ip, r2
 8000c1a:	458c      	cmp	ip, r1
 8000c1c:	4686      	mov	lr, r0
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	d962      	bls.n	8000cea <__udivmoddi4+0xde>
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	4319      	orrs	r1, r3
 8000c36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb04 f106 	mul.w	r1, r4, r6
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c62:	f080 8112 	bcs.w	8000e8a <__udivmoddi4+0x27e>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 810f 	bls.w	8000e8a <__udivmoddi4+0x27e>
 8000c6c:	3c02      	subs	r4, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb00 f606 	mul.w	r6, r0, r6
 8000c86:	429e      	cmp	r6, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x94>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c92:	f080 80fc 	bcs.w	8000e8e <__udivmoddi4+0x282>
 8000c96:	429e      	cmp	r6, r3
 8000c98:	f240 80f9 	bls.w	8000e8e <__udivmoddi4+0x282>
 8000c9c:	4463      	add	r3, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11d      	cbz	r5, 8000cb2 <__udivmoddi4+0xa6>
 8000caa:	40d3      	lsrs	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d905      	bls.n	8000cc6 <__udivmoddi4+0xba>
 8000cba:	b10d      	cbz	r5, 8000cc0 <__udivmoddi4+0xb4>
 8000cbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e7f5      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cc6:	fab3 f183 	clz	r1, r3
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	d146      	bne.n	8000d5c <__udivmoddi4+0x150>
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xcc>
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	f0c0 80f0 	bcc.w	8000eb8 <__udivmoddi4+0x2ac>
 8000cd8:	1a86      	subs	r6, r0, r2
 8000cda:	eb64 0303 	sbc.w	r3, r4, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	2d00      	cmp	r5, #0
 8000ce2:	d0e6      	beq.n	8000cb2 <__udivmoddi4+0xa6>
 8000ce4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce8:	e7e3      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	f040 8090 	bne.w	8000e10 <__udivmoddi4+0x204>
 8000cf0:	eba1 040c 	sub.w	r4, r1, ip
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa1f f78c 	uxth.w	r7, ip
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0e:	fb07 f006 	mul.w	r0, r7, r6
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x11c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x11a>
 8000d20:	4298      	cmp	r0, r3
 8000d22:	f200 80cd 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000d26:	4626      	mov	r6, r4
 8000d28:	1a1c      	subs	r4, r3, r0
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d32:	fb08 4410 	mls	r4, r8, r0, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb00 f707 	mul.w	r7, r0, r7
 8000d3e:	429f      	cmp	r7, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x148>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x146>
 8000d4c:	429f      	cmp	r7, r3
 8000d4e:	f200 80b0 	bhi.w	8000eb2 <__udivmoddi4+0x2a6>
 8000d52:	4620      	mov	r0, r4
 8000d54:	1bdb      	subs	r3, r3, r7
 8000d56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0x9c>
 8000d5c:	f1c1 0620 	rsb	r6, r1, #32
 8000d60:	408b      	lsls	r3, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	431f      	orrs	r7, r3
 8000d68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d70:	ea43 030c 	orr.w	r3, r3, ip
 8000d74:	40f4      	lsrs	r4, r6
 8000d76:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7a:	0c38      	lsrs	r0, r7, #16
 8000d7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d80:	fbb4 fef0 	udiv	lr, r4, r0
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	fb00 441e 	mls	r4, r0, lr, r4
 8000d8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d90:	fb0e f90c 	mul.w	r9, lr, ip
 8000d94:	45a1      	cmp	r9, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	d90a      	bls.n	8000db2 <__udivmoddi4+0x1a6>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da2:	f080 8084 	bcs.w	8000eae <__udivmoddi4+0x2a2>
 8000da6:	45a1      	cmp	r9, r4
 8000da8:	f240 8081 	bls.w	8000eae <__udivmoddi4+0x2a2>
 8000dac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x1d2>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd4:	d267      	bcs.n	8000ea6 <__udivmoddi4+0x29a>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0x29a>
 8000dda:	3b02      	subs	r3, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de2:	fba0 9302 	umull	r9, r3, r0, r2
 8000de6:	eba4 040c 	sub.w	r4, r4, ip
 8000dea:	429c      	cmp	r4, r3
 8000dec:	46ce      	mov	lr, r9
 8000dee:	469c      	mov	ip, r3
 8000df0:	d351      	bcc.n	8000e96 <__udivmoddi4+0x28a>
 8000df2:	d04e      	beq.n	8000e92 <__udivmoddi4+0x286>
 8000df4:	b155      	cbz	r5, 8000e0c <__udivmoddi4+0x200>
 8000df6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000e02:	40cb      	lsrs	r3, r1
 8000e04:	431e      	orrs	r6, r3
 8000e06:	40cc      	lsrs	r4, r1
 8000e08:	e9c5 6400 	strd	r6, r4, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e750      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f103 	lsr.w	r1, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e20:	4094      	lsls	r4, r2
 8000e22:	430c      	orrs	r4, r1
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e2c:	fa1f f78c 	uxth.w	r7, ip
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3110 	mls	r1, r8, r0, r3
 8000e38:	0c23      	lsrs	r3, r4, #16
 8000e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3e:	fb00 f107 	mul.w	r1, r0, r7
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x24c>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4e:	d22c      	bcs.n	8000eaa <__udivmoddi4+0x29e>
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d92a      	bls.n	8000eaa <__udivmoddi4+0x29e>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e60:	fb08 3311 	mls	r3, r8, r1, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb01 f307 	mul.w	r3, r1, r7
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x276>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e78:	d213      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d911      	bls.n	8000ea2 <__udivmoddi4+0x296>
 8000e7e:	3902      	subs	r1, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	1ae4      	subs	r4, r4, r3
 8000e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e88:	e739      	b.n	8000cfe <__udivmoddi4+0xf2>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	e6f0      	b.n	8000c70 <__udivmoddi4+0x64>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e706      	b.n	8000ca0 <__udivmoddi4+0x94>
 8000e92:	45c8      	cmp	r8, r9
 8000e94:	d2ae      	bcs.n	8000df4 <__udivmoddi4+0x1e8>
 8000e96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7a8      	b.n	8000df4 <__udivmoddi4+0x1e8>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	e7ed      	b.n	8000e82 <__udivmoddi4+0x276>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e799      	b.n	8000dde <__udivmoddi4+0x1d2>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e7d4      	b.n	8000e58 <__udivmoddi4+0x24c>
 8000eae:	46d6      	mov	lr, sl
 8000eb0:	e77f      	b.n	8000db2 <__udivmoddi4+0x1a6>
 8000eb2:	4463      	add	r3, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e74d      	b.n	8000d54 <__udivmoddi4+0x148>
 8000eb8:	4606      	mov	r6, r0
 8000eba:	4623      	mov	r3, r4
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e70f      	b.n	8000ce0 <__udivmoddi4+0xd4>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	e730      	b.n	8000d28 <__udivmoddi4+0x11c>
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <BMP280_get_trimming>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

void BMP280_get_trimming() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af04      	add	r7, sp, #16
    uint8_t calib_data[24];
    HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, 1, calib_data, 24, HAL_MAX_DELAY);
 8000ed2:	23ee      	movs	r3, #238	@ 0xee
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2318      	movs	r3, #24
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	2288      	movs	r2, #136	@ 0x88
 8000ee8:	483b      	ldr	r0, [pc, #236]	@ (8000fd8 <BMP280_get_trimming+0x10c>)
 8000eea:	f002 fd43 	bl	8003974 <HAL_I2C_Mem_Read>

    dig_T1 = (calib_data[1] << 8) | calib_data[0];
 8000eee:	787b      	ldrb	r3, [r7, #1]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	783b      	ldrb	r3, [r7, #0]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <BMP280_get_trimming+0x110>)
 8000f00:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib_data[3] << 8) | calib_data[2];
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	78bb      	ldrb	r3, [r7, #2]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <BMP280_get_trimming+0x114>)
 8000f12:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <BMP280_get_trimming+0x118>)
 8000f24:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calib_data[7] << 8) | calib_data[6];
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <BMP280_get_trimming+0x11c>)
 8000f38:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8000f3a:	7a7b      	ldrb	r3, [r7, #9]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7a3b      	ldrb	r3, [r7, #8]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <BMP280_get_trimming+0x120>)
 8000f4a:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	7abb      	ldrb	r3, [r7, #10]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <BMP280_get_trimming+0x124>)
 8000f5c:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calib_data[13] << 8) | calib_data[12];
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	7b3b      	ldrb	r3, [r7, #12]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <BMP280_get_trimming+0x128>)
 8000f6e:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calib_data[15] << 8) | calib_data[14];
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <BMP280_get_trimming+0x12c>)
 8000f80:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calib_data[17] << 8) | calib_data[16];
 8000f82:	7c7b      	ldrb	r3, [r7, #17]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7c3b      	ldrb	r3, [r7, #16]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <BMP280_get_trimming+0x130>)
 8000f92:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calib_data[19] << 8) | calib_data[18];
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7cbb      	ldrb	r3, [r7, #18]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <BMP280_get_trimming+0x134>)
 8000fa4:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calib_data[21] << 8) | calib_data[20];
 8000fa6:	7d7b      	ldrb	r3, [r7, #21]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7d3b      	ldrb	r3, [r7, #20]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <BMP280_get_trimming+0x138>)
 8000fb6:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calib_data[23] << 8) | calib_data[22];
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <BMP280_get_trimming+0x13c>)
 8000fc8:	801a      	strh	r2, [r3, #0]

    printf("Calibration parameters read successfully.\n");
 8000fca:	4810      	ldr	r0, [pc, #64]	@ (800100c <BMP280_get_trimming+0x140>)
 8000fcc:	f005 fb98 	bl	8006700 <puts>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	2000008c 	.word	0x2000008c
 8000fe0:	2000008e 	.word	0x2000008e
 8000fe4:	20000090 	.word	0x20000090
 8000fe8:	20000092 	.word	0x20000092
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	20000096 	.word	0x20000096
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	2000009a 	.word	0x2000009a
 8000ffc:	2000009c 	.word	0x2000009c
 8001000:	2000009e 	.word	0x2000009e
 8001004:	200000a0 	.word	0x200000a0
 8001008:	200000a2 	.word	0x200000a2
 800100c:	08007fc8 	.word	0x08007fc8

08001010 <BMP280_check>:


int BMP280_check() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8001016:	23d0      	movs	r3, #208	@ 0xd0
 8001018:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800101a:	23ee      	movs	r3, #238	@ 0xee
 800101c:	4619      	mov	r1, r3
 800101e:	1d3a      	adds	r2, r7, #4
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	481a      	ldr	r0, [pc, #104]	@ (8001094 <BMP280_check+0x84>)
 800102a:	f002 f973 	bl	8003314 <HAL_I2C_Master_Transmit>
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8001038:	4817      	ldr	r0, [pc, #92]	@ (8001098 <BMP280_check+0x88>)
 800103a:	f005 fb61 	bl	8006700 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 800103e:	23ee      	movs	r3, #238	@ 0xee
 8001040:	4619      	mov	r1, r3
 8001042:	2301      	movs	r3, #1
 8001044:	4618      	mov	r0, r3
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4603      	mov	r3, r0
 8001050:	4810      	ldr	r0, [pc, #64]	@ (8001094 <BMP280_check+0x84>)
 8001052:	f002 fa5d 	bl	8003510 <HAL_I2C_Master_Receive>
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <BMP280_check+0x8c>)
 8001062:	f005 fb4d 	bl	8006700 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <BMP280_check+0x90>)
 800106c:	f005 fae0 	bl	8006630 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8001070:	793b      	ldrb	r3, [r7, #4]
 8001072:	2258      	movs	r2, #88	@ 0x58
 8001074:	4293      	cmp	r3, r2
 8001076:	d104      	bne.n	8001082 <BMP280_check+0x72>
		printf("Ok\r\n");
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <BMP280_check+0x94>)
 800107a:	f005 fb41 	bl	8006700 <puts>
		return 0;
 800107e:	2300      	movs	r3, #0
 8001080:	e003      	b.n	800108a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <BMP280_check+0x98>)
 8001084:	f005 fb3c 	bl	8006700 <puts>
		return 1;
 8001088:	2301      	movs	r3, #1
	}
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000d0 	.word	0x200000d0
 8001098:	08007ff4 	.word	0x08007ff4
 800109c:	08008018 	.word	0x08008018
 80010a0:	0800803c 	.word	0x0800803c
 80010a4:	08008048 	.word	0x08008048
 80010a8:	0800804c 	.word	0x0800804c

080010ac <BMP280_init>:

int BMP280_init() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80010b2:	2357      	movs	r3, #87	@ 0x57
 80010b4:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <BMP280_init+0x44>)
 80010b8:	f005 fb22 	bl	8006700 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 80010bc:	22f4      	movs	r2, #244	@ 0xf4
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f000 f81a 	bl	80010fc <BMP280_Write_Reg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <BMP280_init+0x34>
		printf("Config Ok\r\n");
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <BMP280_init+0x48>)
 80010d4:	f005 fb14 	bl	8006700 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 80010d8:	f7ff fef8 	bl	8000ecc <BMP280_get_trimming>
	return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e003      	b.n	80010e8 <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <BMP280_init+0x4c>)
 80010e2:	f005 fb0d 	bl	8006700 <puts>
		return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08008058 	.word	0x08008058
 80010f4:	08008068 	.word	0x08008068
 80010f8:	08008074 	.word	0x08008074

080010fc <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af02      	add	r7, sp, #8
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8001114:	23ee      	movs	r3, #238	@ 0xee
 8001116:	4619      	mov	r1, r3
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2302      	movs	r3, #2
 8001124:	4814      	ldr	r0, [pc, #80]	@ (8001178 <BMP280_Write_Reg+0x7c>)
 8001126:	f002 f8f5 	bl	8003314 <HAL_I2C_Master_Transmit>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 8001134:	4811      	ldr	r0, [pc, #68]	@ (800117c <BMP280_Write_Reg+0x80>)
 8001136:	f005 fae3 	bl	8006700 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800113a:	23ee      	movs	r3, #238	@ 0xee
 800113c:	4619      	mov	r1, r3
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	480b      	ldr	r0, [pc, #44]	@ (8001178 <BMP280_Write_Reg+0x7c>)
 800114c:	f002 f9e0 	bl	8003510 <HAL_I2C_Master_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 800115a:	4809      	ldr	r0, [pc, #36]	@ (8001180 <BMP280_Write_Reg+0x84>)
 800115c:	f005 fad0 	bl	8006700 <puts>
	}

	if (buf[0] == value) {
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	79ba      	ldrb	r2, [r7, #6]
 8001164:	429a      	cmp	r2, r3
 8001166:	d101      	bne.n	800116c <BMP280_Write_Reg+0x70>
		return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 800116c:	2301      	movs	r3, #1
	}
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000d0 	.word	0x200000d0
 800117c:	08008084 	.word	0x08008084
 8001180:	080080a0 	.word	0x080080a0

08001184 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001194:	23ee      	movs	r3, #238	@ 0xee
 8001196:	4619      	mov	r1, r3
 8001198:	1dfa      	adds	r2, r7, #7
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <BMP280_Read_Reg+0x70>)
 80011a4:	f002 f8b6 	bl	8003314 <HAL_I2C_Master_Transmit>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <BMP280_Read_Reg+0x74>)
 80011b4:	f005 faa4 	bl	8006700 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 f8b8 	bl	8006330 <malloc>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80011c4:	23ee      	movs	r3, #238	@ 0xee
 80011c6:	4619      	mov	r1, r3
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <BMP280_Read_Reg+0x70>)
 80011d6:	f002 f99b 	bl	8003510 <HAL_I2C_Master_Receive>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <BMP280_Read_Reg+0x78>)
 80011e6:	f005 fa8b 	bl	8006700 <puts>
	}

	return buf;
 80011ea:	68bb      	ldr	r3, [r7, #8]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000d0 	.word	0x200000d0
 80011f8:	08008084 	.word	0x08008084
 80011fc:	080080a0 	.word	0x080080a0

08001200 <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    BMP280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	10da      	asrs	r2, r3, #3
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <bmp280_compensate_T_int32+0x74>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <bmp280_compensate_T_int32+0x78>)
 8001216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	12db      	asrs	r3, r3, #11
 8001220:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	111b      	asrs	r3, r3, #4
 8001226:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <bmp280_compensate_T_int32+0x74>)
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	1112      	asrs	r2, r2, #4
 8001230:	4910      	ldr	r1, [pc, #64]	@ (8001274 <bmp280_compensate_T_int32+0x74>)
 8001232:	8809      	ldrh	r1, [r1, #0]
 8001234:	1a52      	subs	r2, r2, r1
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	131b      	asrs	r3, r3, #12
            ((BMP280_S32_t)dig_T3)) >> 14;
 800123c:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <bmp280_compensate_T_int32+0x7c>)
 800123e:	f9b2 2000 	ldrsh.w	r2, [r2]
    var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	139b      	asrs	r3, r3, #14
 8001248:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <bmp280_compensate_T_int32+0x80>)
 8001252:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <bmp280_compensate_T_int32+0x80>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3380      	adds	r3, #128	@ 0x80
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
    return T;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2000008c 	.word	0x2000008c
 8001278:	2000008e 	.word	0x2000008e
 800127c:	20000090 	.word	0x20000090
 8001280:	200000a4 	.word	0x200000a4

08001284 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8001284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001288:	b0ca      	sub	sp, #296	@ 0x128
 800128a:	af00      	add	r7, sp, #0
 800128c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    BMP280_S64_t var1, var2, p;
    var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001290:	4baf      	ldr	r3, [pc, #700]	@ (8001550 <bmp280_compensate_P_int64+0x2cc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	17da      	asrs	r2, r3, #31
 8001296:	461c      	mov	r4, r3
 8001298:	4615      	mov	r5, r2
 800129a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800129e:	f145 3bff 	adc.w	fp, r5, #4294967295
 80012a2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 80012a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012ae:	fb03 f102 	mul.w	r1, r3, r2
 80012b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	18ca      	adds	r2, r1, r3
 80012c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012c4:	fba3 8903 	umull	r8, r9, r3, r3
 80012c8:	eb02 0309 	add.w	r3, r2, r9
 80012cc:	4699      	mov	r9, r3
 80012ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001554 <bmp280_compensate_P_int64+0x2d0>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	17da      	asrs	r2, r3, #31
 80012d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	4603      	mov	r3, r0
 80012e6:	fb03 f209 	mul.w	r2, r3, r9
 80012ea:	460b      	mov	r3, r1
 80012ec:	fb08 f303 	mul.w	r3, r8, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	4602      	mov	r2, r0
 80012f4:	fba8 1202 	umull	r1, r2, r8, r2
 80012f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012fc:	460a      	mov	r2, r1
 80012fe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001306:	4413      	add	r3, r2
 8001308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800130c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001310:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001314:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 8001318:	4b8f      	ldr	r3, [pc, #572]	@ (8001558 <bmp280_compensate_P_int64+0x2d4>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	b21b      	sxth	r3, r3
 8001320:	17da      	asrs	r2, r3, #31
 8001322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001326:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800132a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800132e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001332:	462a      	mov	r2, r5
 8001334:	fb02 f203 	mul.w	r2, r2, r3
 8001338:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800133c:	4621      	mov	r1, r4
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	441a      	add	r2, r3
 8001344:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001348:	4621      	mov	r1, r4
 800134a:	fba3 1301 	umull	r1, r3, r3, r1
 800134e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001352:	460b      	mov	r3, r1
 8001354:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800136e:	462b      	mov	r3, r5
 8001370:	0459      	lsls	r1, r3, #17
 8001372:	4623      	mov	r3, r4
 8001374:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001378:	4623      	mov	r3, r4
 800137a:	0458      	lsls	r0, r3, #17
 800137c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001380:	1814      	adds	r4, r2, r0
 8001382:	643c      	str	r4, [r7, #64]	@ 0x40
 8001384:	414b      	adcs	r3, r1
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
 8001388:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800138c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8001390:	4b72      	ldr	r3, [pc, #456]	@ (800155c <bmp280_compensate_P_int64+0x2d8>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	b21b      	sxth	r3, r3
 8001398:	17da      	asrs	r2, r3, #31
 800139a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800139e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80013a2:	f04f 0000 	mov.w	r0, #0
 80013a6:	f04f 0100 	mov.w	r1, #0
 80013aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013ae:	00d9      	lsls	r1, r3, #3
 80013b0:	2000      	movs	r0, #0
 80013b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013b6:	1814      	adds	r4, r2, r0
 80013b8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80013ba:	414b      	adcs	r3, r1
 80013bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80013c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 80013c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ce:	fb03 f102 	mul.w	r1, r3, r2
 80013d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	18ca      	adds	r2, r1, r3
 80013e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013e4:	fba3 1303 	umull	r1, r3, r3, r3
 80013e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013ec:	460b      	mov	r3, r1
 80013ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013f6:	18d3      	adds	r3, r2, r3
 80013f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <bmp280_compensate_P_int64+0x2dc>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	b21b      	sxth	r3, r3
 8001404:	17da      	asrs	r2, r3, #31
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800140a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800140e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001412:	462b      	mov	r3, r5
 8001414:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001418:	4642      	mov	r2, r8
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	464b      	mov	r3, r9
 8001420:	4621      	mov	r1, r4
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	4622      	mov	r2, r4
 800142a:	4641      	mov	r1, r8
 800142c:	fba2 1201 	umull	r1, r2, r2, r1
 8001430:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001434:	460a      	mov	r2, r1
 8001436:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800143a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800143e:	4413      	add	r3, r2
 8001440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001444:	f04f 0000 	mov.w	r0, #0
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001450:	4623      	mov	r3, r4
 8001452:	0a18      	lsrs	r0, r3, #8
 8001454:	462b      	mov	r3, r5
 8001456:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800145a:	462b      	mov	r3, r5
 800145c:	1219      	asrs	r1, r3, #8
 800145e:	4b41      	ldr	r3, [pc, #260]	@ (8001564 <bmp280_compensate_P_int64+0x2e0>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	b21b      	sxth	r3, r3
 8001466:	17da      	asrs	r2, r3, #31
 8001468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800146c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001470:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001474:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001478:	464a      	mov	r2, r9
 800147a:	fb02 f203 	mul.w	r2, r2, r3
 800147e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001482:	4644      	mov	r4, r8
 8001484:	fb04 f303 	mul.w	r3, r4, r3
 8001488:	441a      	add	r2, r3
 800148a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800148e:	4644      	mov	r4, r8
 8001490:	fba3 4304 	umull	r4, r3, r3, r4
 8001494:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001498:	4623      	mov	r3, r4
 800149a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800149e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80014a2:	18d3      	adds	r3, r2, r3
 80014a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80014b4:	464c      	mov	r4, r9
 80014b6:	0323      	lsls	r3, r4, #12
 80014b8:	4644      	mov	r4, r8
 80014ba:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014be:	4644      	mov	r4, r8
 80014c0:	0322      	lsls	r2, r4, #12
 80014c2:	1884      	adds	r4, r0, r2
 80014c4:	633c      	str	r4, [r7, #48]	@ 0x30
 80014c6:	eb41 0303 	adc.w	r3, r1, r3
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80014cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 80014d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014d8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014dc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014e0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014e4:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <bmp280_compensate_P_int64+0x2e4>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014f4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014f8:	462b      	mov	r3, r5
 80014fa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014fe:	4642      	mov	r2, r8
 8001500:	fb02 f203 	mul.w	r2, r2, r3
 8001504:	464b      	mov	r3, r9
 8001506:	4621      	mov	r1, r4
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	4622      	mov	r2, r4
 8001510:	4641      	mov	r1, r8
 8001512:	fba2 1201 	umull	r1, r2, r2, r1
 8001516:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800151a:	460a      	mov	r2, r1
 800151c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001520:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001524:	4413      	add	r3, r2
 8001526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001536:	4629      	mov	r1, r5
 8001538:	104a      	asrs	r2, r1, #1
 800153a:	4629      	mov	r1, r5
 800153c:	17cb      	asrs	r3, r1, #31
 800153e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0)
 8001542:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001546:	4313      	orrs	r3, r2
 8001548:	d110      	bne.n	800156c <bmp280_compensate_P_int64+0x2e8>
    {
        return 0; // avoid exception caused by division by zero
 800154a:	2300      	movs	r3, #0
 800154c:	e154      	b.n	80017f8 <bmp280_compensate_P_int64+0x574>
 800154e:	bf00      	nop
 8001550:	200000a4 	.word	0x200000a4
 8001554:	2000009c 	.word	0x2000009c
 8001558:	2000009a 	.word	0x2000009a
 800155c:	20000098 	.word	0x20000098
 8001560:	20000096 	.word	0x20000096
 8001564:	20000094 	.word	0x20000094
 8001568:	20000092 	.word	0x20000092
    }

    p = 1048576 - adc_P;
 800156c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001570:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001574:	17da      	asrs	r2, r3, #31
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800157a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800157e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8001582:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001586:	105b      	asrs	r3, r3, #1
 8001588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800158c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001590:	07db      	lsls	r3, r3, #31
 8001592:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001596:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800159a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800159e:	4621      	mov	r1, r4
 80015a0:	1a89      	subs	r1, r1, r2
 80015a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80015a4:	4629      	mov	r1, r5
 80015a6:	eb61 0303 	sbc.w	r3, r1, r3
 80015aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015ac:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015b0:	4622      	mov	r2, r4
 80015b2:	462b      	mov	r3, r5
 80015b4:	1891      	adds	r1, r2, r2
 80015b6:	6239      	str	r1, [r7, #32]
 80015b8:	415b      	adcs	r3, r3
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80015bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c0:	4621      	mov	r1, r4
 80015c2:	1851      	adds	r1, r2, r1
 80015c4:	61b9      	str	r1, [r7, #24]
 80015c6:	4629      	mov	r1, r5
 80015c8:	414b      	adcs	r3, r1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015d8:	4649      	mov	r1, r9
 80015da:	018b      	lsls	r3, r1, #6
 80015dc:	4641      	mov	r1, r8
 80015de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015e2:	4641      	mov	r1, r8
 80015e4:	018a      	lsls	r2, r1, #6
 80015e6:	4641      	mov	r1, r8
 80015e8:	1889      	adds	r1, r1, r2
 80015ea:	6139      	str	r1, [r7, #16]
 80015ec:	4649      	mov	r1, r9
 80015ee:	eb43 0101 	adc.w	r1, r3, r1
 80015f2:	6179      	str	r1, [r7, #20]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001600:	4649      	mov	r1, r9
 8001602:	008b      	lsls	r3, r1, #2
 8001604:	4641      	mov	r1, r8
 8001606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800160a:	4641      	mov	r1, r8
 800160c:	008a      	lsls	r2, r1, #2
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	4603      	mov	r3, r0
 8001614:	4622      	mov	r2, r4
 8001616:	189b      	adds	r3, r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	460b      	mov	r3, r1
 800161c:	462a      	mov	r2, r5
 800161e:	eb42 0303 	adc.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001630:	4649      	mov	r1, r9
 8001632:	008b      	lsls	r3, r1, #2
 8001634:	4641      	mov	r1, r8
 8001636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800163a:	4641      	mov	r1, r8
 800163c:	008a      	lsls	r2, r1, #2
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	4603      	mov	r3, r0
 8001644:	4622      	mov	r2, r4
 8001646:	189b      	adds	r3, r3, r2
 8001648:	673b      	str	r3, [r7, #112]	@ 0x70
 800164a:	462b      	mov	r3, r5
 800164c:	460a      	mov	r2, r1
 800164e:	eb42 0303 	adc.w	r3, r2, r3
 8001652:	677b      	str	r3, [r7, #116]	@ 0x74
 8001654:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001658:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800165c:	f7ff fa6e 	bl	8000b3c <__aeabi_ldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001668:	4b66      	ldr	r3, [pc, #408]	@ (8001804 <bmp280_compensate_P_int64+0x580>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	b21b      	sxth	r3, r3
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001674:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001676:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	0b50      	lsrs	r0, r2, #13
 8001684:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001688:	1359      	asrs	r1, r3, #13
 800168a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800168e:	462b      	mov	r3, r5
 8001690:	fb00 f203 	mul.w	r2, r0, r3
 8001694:	4623      	mov	r3, r4
 8001696:	fb03 f301 	mul.w	r3, r3, r1
 800169a:	4413      	add	r3, r2
 800169c:	4622      	mov	r2, r4
 800169e:	fba2 1200 	umull	r1, r2, r2, r0
 80016a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80016a6:	460a      	mov	r2, r1
 80016a8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80016ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80016b0:	4413      	add	r3, r2
 80016b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0b50      	lsrs	r0, r2, #13
 80016c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016c8:	1359      	asrs	r1, r3, #13
 80016ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016ce:	462b      	mov	r3, r5
 80016d0:	fb00 f203 	mul.w	r2, r0, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	fb03 f301 	mul.w	r3, r3, r1
 80016da:	4413      	add	r3, r2
 80016dc:	4622      	mov	r2, r4
 80016de:	fba2 1200 	umull	r1, r2, r2, r0
 80016e2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016e6:	460a      	mov	r2, r1
 80016e8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016f0:	4413      	add	r3, r2
 80016f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001702:	4621      	mov	r1, r4
 8001704:	0e4a      	lsrs	r2, r1, #25
 8001706:	4629      	mov	r1, r5
 8001708:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800170c:	4629      	mov	r1, r5
 800170e:	164b      	asrs	r3, r1, #25
 8001710:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8001714:	4b3c      	ldr	r3, [pc, #240]	@ (8001808 <bmp280_compensate_P_int64+0x584>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001720:	667a      	str	r2, [r7, #100]	@ 0x64
 8001722:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001726:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800172a:	462a      	mov	r2, r5
 800172c:	fb02 f203 	mul.w	r2, r2, r3
 8001730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001734:	4621      	mov	r1, r4
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001740:	4621      	mov	r1, r4
 8001742:	fba2 1201 	umull	r1, r2, r2, r1
 8001746:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800174a:	460a      	mov	r2, r1
 800174c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001750:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001754:	4413      	add	r3, r2
 8001756:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001766:	4621      	mov	r1, r4
 8001768:	0cca      	lsrs	r2, r1, #19
 800176a:	4629      	mov	r1, r5
 800176c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001770:	4629      	mov	r1, r5
 8001772:	14cb      	asrs	r3, r1, #19
 8001774:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = (((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7) << 4));
 8001778:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800177c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001780:	1884      	adds	r4, r0, r2
 8001782:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001784:	eb41 0303 	adc.w	r3, r1, r3
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800178a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800178e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001792:	4621      	mov	r1, r4
 8001794:	1889      	adds	r1, r1, r2
 8001796:	6539      	str	r1, [r7, #80]	@ 0x50
 8001798:	4629      	mov	r1, r5
 800179a:	eb43 0101 	adc.w	r1, r3, r1
 800179e:	6579      	str	r1, [r7, #84]	@ 0x54
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80017ac:	4623      	mov	r3, r4
 80017ae:	0a18      	lsrs	r0, r3, #8
 80017b0:	462b      	mov	r3, r5
 80017b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017b6:	462b      	mov	r3, r5
 80017b8:	1219      	asrs	r1, r3, #8
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <bmp280_compensate_P_int64+0x588>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	17da      	asrs	r2, r3, #31
 80017c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017d4:	464c      	mov	r4, r9
 80017d6:	0123      	lsls	r3, r4, #4
 80017d8:	4644      	mov	r4, r8
 80017da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017de:	4644      	mov	r4, r8
 80017e0:	0122      	lsls	r2, r4, #4
 80017e2:	1884      	adds	r4, r0, r2
 80017e4:	603c      	str	r4, [r7, #0]
 80017e6:	eb41 0303 	adc.w	r3, r1, r3
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (BMP280_U32_t)p;
 80017f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001804:	200000a2 	.word	0x200000a2
 8001808:	200000a0 	.word	0x200000a0
 800180c:	2000009e 	.word	0x2000009e

08001810 <BMP280_get_temperature>:
BMP280_S32_t BMP280_get_temperature() {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
    uint8_t *buf;
    BMP280_S32_t adc_T;

    buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8001816:	23fa      	movs	r3, #250	@ 0xfa
 8001818:	2203      	movs	r2, #3
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fcb1 	bl	8001184 <BMP280_Read_Reg>
 8001822:	6078      	str	r0, [r7, #4]

    adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	031a      	lsls	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4313      	orrs	r3, r2
            | ((BMP280_S32_t)(buf[2]) >> 4);
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	3202      	adds	r2, #2
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	0912      	lsrs	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
    adc_T = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 800183e:	4313      	orrs	r3, r2
 8001840:	603b      	str	r3, [r7, #0]

    free(buf);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 fd7c 	bl	8006340 <free>

    return adc_T;
 8001848:	683b      	ldr	r3, [r7, #0]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
    uint8_t *buf;
    BMP280_S32_t adc_P;

    buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8001858:	23f7      	movs	r3, #247	@ 0xf7
 800185a:	2203      	movs	r2, #3
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc90 	bl	8001184 <BMP280_Read_Reg>
 8001864:	6078      	str	r0, [r7, #4]

    adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	031a      	lsls	r2, r3, #12
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4313      	orrs	r3, r2
            | ((BMP280_S32_t)(buf[2]) >> 4);
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	3202      	adds	r2, #2
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	0912      	lsrs	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
    adc_P = ((BMP280_S32_t)(buf[0]) << 12) | ((BMP280_S32_t)(buf[1]) << 4)
 8001880:	4313      	orrs	r3, r2
 8001882:	603b      	str	r3, [r7, #0]

    free(buf);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f004 fd5b 	bl	8006340 <free>

    return adc_P;
 800188a:	683b      	ldr	r3, [r7, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
BMP280_S32_t comp_temp;
BMP280_U32_t comp_press;
void handleCommand(char *command, BMP280_S32_t comp_temp, BMP280_U32_t comp_press);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <HAL_UART_RxCpltCallback+0x48>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d115      	bne.n	80018d2 <HAL_UART_RxCpltCallback+0x3e>
        printf("Commande reçue : %s\r\n", rxBuffer);
 80018a6:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018a8:	480e      	ldr	r0, [pc, #56]	@ (80018e4 <HAL_UART_RxCpltCallback+0x50>)
 80018aa:	f004 fec1 	bl	8006630 <iprintf>
        handleCommand(rxBuffer, comp_temp, comp_press);  // Passez les variables en paramètre
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_UART_RxCpltCallback+0x54>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_UART_RxCpltCallback+0x58>)
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018ba:	f000 f81b 	bl	80018f4 <handleCommand>
        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80018be:	2207      	movs	r2, #7
 80018c0:	2100      	movs	r1, #0
 80018c2:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018c4:	f005 f85c 	bl	8006980 <memset>
        HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 80018c8:	2207      	movs	r2, #7
 80018ca:	4905      	ldr	r1, [pc, #20]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018cc:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <HAL_UART_RxCpltCallback+0x5c>)
 80018ce:	f003 fdb4 	bl	800543a <HAL_UART_Receive_IT>
    }
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004c00 	.word	0x40004c00
 80018e0:	200001b4 	.word	0x200001b4
 80018e4:	08008100 	.word	0x08008100
 80018e8:	200001f0 	.word	0x200001f0
 80018ec:	200001f4 	.word	0x200001f4
 80018f0:	20000124 	.word	0x20000124

080018f4 <handleCommand>:

void handleCommand(char *command, BMP280_S32_t comp_temp, BMP280_U32_t comp_press) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
    if (strncmp(command, "GET_T", 5) == 0) {
 8001900:	2205      	movs	r2, #5
 8001902:	4952      	ldr	r1, [pc, #328]	@ (8001a4c <handleCommand+0x158>)
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f005 f843 	bl	8006990 <strncmp>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d120      	bne.n	8001952 <handleCommand+0x5e>
        // Renvoie la température compensée actuelle
        float temperature_value = comp_temp / 100.0; // Conversion en °C
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f7fe fe27 	bl	8000564 <__aeabi_i2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <handleCommand+0x15c>)
 800191c:	f7fe ffb6 	bl	800088c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8b8 	bl	8000a9c <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	617b      	str	r3, [r7, #20]
        snprintf(txBuffer, sizeof(txBuffer), "T=+%.d\r\n", temperature_value);
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f7fe fe29 	bl	8000588 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9cd 2300 	strd	r2, r3, [sp]
 800193e:	4a45      	ldr	r2, [pc, #276]	@ (8001a54 <handleCommand+0x160>)
 8001940:	2132      	movs	r1, #50	@ 0x32
 8001942:	4845      	ldr	r0, [pc, #276]	@ (8001a58 <handleCommand+0x164>)
 8001944:	f004 fee4 	bl	8006710 <sniprintf>
        printf("Sending: %s", txBuffer);  // Affiche ce qui est envoyé
 8001948:	4943      	ldr	r1, [pc, #268]	@ (8001a58 <handleCommand+0x164>)
 800194a:	4844      	ldr	r0, [pc, #272]	@ (8001a5c <handleCommand+0x168>)
 800194c:	f004 fe70 	bl	8006630 <iprintf>
 8001950:	e067      	b.n	8001a22 <handleCommand+0x12e>
    } else if (strncmp(command, "GET_P", 5) == 0) {
 8001952:	2205      	movs	r2, #5
 8001954:	4942      	ldr	r1, [pc, #264]	@ (8001a60 <handleCommand+0x16c>)
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f005 f81a 	bl	8006990 <strncmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10a      	bne.n	8001978 <handleCommand+0x84>
        // Renvoie la pression actuelle
        snprintf(txBuffer, sizeof(txBuffer), "P=%ldPa\r\n", comp_press);  // Format corrigé
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a3f      	ldr	r2, [pc, #252]	@ (8001a64 <handleCommand+0x170>)
 8001966:	2132      	movs	r1, #50	@ 0x32
 8001968:	483b      	ldr	r0, [pc, #236]	@ (8001a58 <handleCommand+0x164>)
 800196a:	f004 fed1 	bl	8006710 <sniprintf>
        printf("Sending: %s", txBuffer);  // Affiche ce qui est envoyé
 800196e:	493a      	ldr	r1, [pc, #232]	@ (8001a58 <handleCommand+0x164>)
 8001970:	483a      	ldr	r0, [pc, #232]	@ (8001a5c <handleCommand+0x168>)
 8001972:	f004 fe5d 	bl	8006630 <iprintf>
 8001976:	e054      	b.n	8001a22 <handleCommand+0x12e>
    } else if (strncmp(command, "SET_K=", 6) == 0) {
 8001978:	2206      	movs	r2, #6
 800197a:	493b      	ldr	r1, [pc, #236]	@ (8001a68 <handleCommand+0x174>)
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f005 f807 	bl	8006990 <strncmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <handleCommand+0xae>
        sscanf(command + 6, "%d", &K_value);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3306      	adds	r3, #6
 800198c:	4a37      	ldr	r2, [pc, #220]	@ (8001a6c <handleCommand+0x178>)
 800198e:	4938      	ldr	r1, [pc, #224]	@ (8001a70 <handleCommand+0x17c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fef1 	bl	8006778 <siscanf>
        snprintf(txBuffer, sizeof(txBuffer), "SET_K=OK\r\n");
 8001996:	4a37      	ldr	r2, [pc, #220]	@ (8001a74 <handleCommand+0x180>)
 8001998:	2132      	movs	r1, #50	@ 0x32
 800199a:	482f      	ldr	r0, [pc, #188]	@ (8001a58 <handleCommand+0x164>)
 800199c:	f004 feb8 	bl	8006710 <sniprintf>
 80019a0:	e03f      	b.n	8001a22 <handleCommand+0x12e>
    } else if (strncmp(command, "GET_K", 5) == 0) {
 80019a2:	2205      	movs	r2, #5
 80019a4:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <handleCommand+0x184>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f004 fff2 	bl	8006990 <strncmp>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11b      	bne.n	80019ea <handleCommand+0xf6>
        snprintf(txBuffer, sizeof(txBuffer), "K=%d.%04d\r\n", K_value / 100, K_value % 100);
 80019b2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <handleCommand+0x178>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a31      	ldr	r2, [pc, #196]	@ (8001a7c <handleCommand+0x188>)
 80019b8:	fb82 1203 	smull	r1, r2, r2, r3
 80019bc:	1152      	asrs	r2, r2, #5
 80019be:	17db      	asrs	r3, r3, #31
 80019c0:	1ad0      	subs	r0, r2, r3
 80019c2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <handleCommand+0x178>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <handleCommand+0x188>)
 80019c8:	fb83 1302 	smull	r1, r3, r3, r2
 80019cc:	1159      	asrs	r1, r3, #5
 80019ce:	17d3      	asrs	r3, r2, #31
 80019d0:	1acb      	subs	r3, r1, r3
 80019d2:	2164      	movs	r1, #100	@ 0x64
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4603      	mov	r3, r0
 80019de:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <handleCommand+0x18c>)
 80019e0:	2132      	movs	r1, #50	@ 0x32
 80019e2:	481d      	ldr	r0, [pc, #116]	@ (8001a58 <handleCommand+0x164>)
 80019e4:	f004 fe94 	bl	8006710 <sniprintf>
 80019e8:	e01b      	b.n	8001a22 <handleCommand+0x12e>
    } else if (strncmp(command, "GET_A", 5) == 0) {
 80019ea:	2205      	movs	r2, #5
 80019ec:	4925      	ldr	r1, [pc, #148]	@ (8001a84 <handleCommand+0x190>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f004 ffce 	bl	8006990 <strncmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <handleCommand+0x124>
        snprintf(txBuffer, sizeof(txBuffer), "A=%.4f\r\n", angle);
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <handleCommand+0x194>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdc2 	bl	8000588 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 2300 	strd	r2, r3, [sp]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <handleCommand+0x198>)
 8001a0e:	2132      	movs	r1, #50	@ 0x32
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <handleCommand+0x164>)
 8001a12:	f004 fe7d 	bl	8006710 <sniprintf>
 8001a16:	e004      	b.n	8001a22 <handleCommand+0x12e>
    } else {
        snprintf(txBuffer, sizeof(txBuffer), "Unknown Command\r\n");
 8001a18:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <handleCommand+0x19c>)
 8001a1a:	2132      	movs	r1, #50	@ 0x32
 8001a1c:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <handleCommand+0x164>)
 8001a1e:	f004 fe77 	bl	8006710 <sniprintf>
    }

    // Envoie de la réponse via UART4
    HAL_UART_Transmit(&huart4, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <handleCommand+0x164>)
 8001a24:	f7fe fbf4 	bl	8000210 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	4909      	ldr	r1, [pc, #36]	@ (8001a58 <handleCommand+0x164>)
 8001a32:	4818      	ldr	r0, [pc, #96]	@ (8001a94 <handleCommand+0x1a0>)
 8001a34:	f003 fc76 	bl	8005324 <HAL_UART_Transmit>
    // Relance la réception UART après traitement de la commande
    HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4917      	ldr	r1, [pc, #92]	@ (8001a98 <handleCommand+0x1a4>)
 8001a3c:	4815      	ldr	r0, [pc, #84]	@ (8001a94 <handleCommand+0x1a0>)
 8001a3e:	f003 fcfc 	bl	800543a <HAL_UART_Receive_IT>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08008118 	.word	0x08008118
 8001a50:	40590000 	.word	0x40590000
 8001a54:	08008120 	.word	0x08008120
 8001a58:	200001bc 	.word	0x200001bc
 8001a5c:	0800812c 	.word	0x0800812c
 8001a60:	08008138 	.word	0x08008138
 8001a64:	08008140 	.word	0x08008140
 8001a68:	0800814c 	.word	0x0800814c
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	08008154 	.word	0x08008154
 8001a74:	08008158 	.word	0x08008158
 8001a78:	08008164 	.word	0x08008164
 8001a7c:	51eb851f 	.word	0x51eb851f
 8001a80:	0800816c 	.word	0x0800816c
 8001a84:	08008178 	.word	0x08008178
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	08008180 	.word	0x08008180
 8001a90:	0800818c 	.word	0x0800818c
 8001a94:	20000124 	.word	0x20000124
 8001a98:	200001b4 	.word	0x200001b4

08001a9c <rotate_motor_dynamic>:

// Fonction pour ajuster l'angle du moteur
void rotate_motor_dynamic(uint8_t angle, uint8_t direction) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef pHeader;
	uint8_t data[2];
	uint32_t pTxMailbox;

	// Configurer l'en-tête CAN
	pHeader.StdId = 0x61;
 8001aac:	2361      	movs	r3, #97	@ 0x61
 8001aae:	613b      	str	r3, [r7, #16]
	pHeader.IDE = CAN_ID_STD;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
	pHeader.RTR = CAN_RTR_DATA;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
	pHeader.DLC = 2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]

	// Configurer les données
	data[0] = angle;     // Angle dynamique
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	733b      	strb	r3, [r7, #12]
	data[1] = direction; // Direction
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	737b      	strb	r3, [r7, #13]

	// Envoi du message CAN
	if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	f107 0110 	add.w	r1, r7, #16
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <rotate_motor_dynamic+0x5c>)
 8001ad2:	f000 feb8 	bl	8002846 <HAL_CAN_AddTxMessage>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <rotate_motor_dynamic+0x46>
		Error_Handler();
 8001adc:	f000 fa70 	bl	8001fc0 <Error_Handler>
	} else {
		printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
	}
}
 8001ae0:	e005      	b.n	8001aee <rotate_motor_dynamic+0x52>
		printf("Message CAN envoyé : angle=%d, direction=%d\r\n", angle, direction);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	79ba      	ldrb	r2, [r7, #6]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4804      	ldr	r0, [pc, #16]	@ (8001afc <rotate_motor_dynamic+0x60>)
 8001aea:	f004 fda1 	bl	8006630 <iprintf>
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000a8 	.word	0x200000a8
 8001afc:	080081a0 	.word	0x080081a0

08001b00 <calculate_angle>:

// Fonction pour calculer l'angle basé sur la température
uint8_t calculate_angle(float temp) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t angle = 5 + (temp - TEMP_CIBLE) * 5; // Augmente l'angle en fonction de la température
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <calculate_angle+0x6c>)
 8001b16:	f7fe fbd7 	bl	80002c8 <__aeabi_dsub>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <calculate_angle+0x70>)
 8001b28:	f7fe fd86 	bl	8000638 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <calculate_angle+0x70>)
 8001b3a:	f7fe fbc7 	bl	80002cc <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7fe ff89 	bl	8000a5c <__aeabi_d2uiz>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
	if (angle > 90) angle = 90; // Limite à 90°
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b52:	d901      	bls.n	8001b58 <calculate_angle+0x58>
 8001b54:	235a      	movs	r3, #90	@ 0x5a
 8001b56:	73fb      	strb	r3, [r7, #15]
	if (angle < 5) angle = 5;   // Limite à 5°
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d801      	bhi.n	8001b62 <calculate_angle+0x62>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	73fb      	strb	r3, [r7, #15]
	return angle;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40390000 	.word	0x40390000
 8001b70:	40140000 	.word	0x40140000

08001b74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b7a:	f000 fc8f 	bl	800249c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b7e:	f000 f88b 	bl	8001c98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b82:	f000 f9af 	bl	8001ee4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001b86:	f000 f983 	bl	8001e90 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001b8a:	f000 f957 	bl	8001e3c <MX_UART4_Init>
	MX_CAN1_Init();
 8001b8e:	f000 f8f1 	bl	8001d74 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001b92:	f000 f925 	bl	8001de0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	BMP280_S32_t raw_temp, raw_press;
		BMP280_S32_t comp_temp;
		BMP280_U32_t comp_press;
		printf("======= Démarrage du système =======\r\n");
 8001b96:	4837      	ldr	r0, [pc, #220]	@ (8001c74 <main+0x100>)
 8001b98:	f004 fdb2 	bl	8006700 <puts>
		BMP280_check();
 8001b9c:	f7ff fa38 	bl	8001010 <BMP280_check>
		BMP280_init();HAL_CAN_Start(&hcan1);
 8001ba0:	f7ff fa84 	bl	80010ac <BMP280_init>
 8001ba4:	4834      	ldr	r0, [pc, #208]	@ (8001c78 <main+0x104>)
 8001ba6:	f000 fe0a 	bl	80027be <HAL_CAN_Start>

		// Activation de la réception UART
		HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 8001baa:	2207      	movs	r2, #7
 8001bac:	4933      	ldr	r1, [pc, #204]	@ (8001c7c <main+0x108>)
 8001bae:	4834      	ldr	r0, [pc, #208]	@ (8001c80 <main+0x10c>)
 8001bb0:	f003 fc43 	bl	800543a <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		raw_temp = BMP280_get_temperature();
 8001bb4:	f7ff fe2c 	bl	8001810 <BMP280_get_temperature>
 8001bb8:	6178      	str	r0, [r7, #20]
		raw_press = BMP280_get_pressure();
 8001bba:	f7ff fe4a 	bl	8001852 <BMP280_get_pressure>
 8001bbe:	6138      	str	r0, [r7, #16]

		// Compensation des valeurs
		comp_temp = bmp280_compensate_T_int32(raw_temp);
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f7ff fb1d 	bl	8001200 <bmp280_compensate_T_int32>
 8001bc6:	60f8      	str	r0, [r7, #12]
		comp_press = bmp280_compensate_P_int64(raw_press);
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f7ff fb5b 	bl	8001284 <bmp280_compensate_P_int64>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60bb      	str	r3, [r7, #8]

		// Affichage des données sur Minicom
		printf("------------------------------------------------\r\n");
 8001bd2:	482c      	ldr	r0, [pc, #176]	@ (8001c84 <main+0x110>)
 8001bd4:	f004 fd94 	bl	8006700 <puts>
		printf("Température compensée : %ld.%02ld°C\r\n", comp_temp / 100, abs(comp_temp % 100));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a2b      	ldr	r2, [pc, #172]	@ (8001c88 <main+0x114>)
 8001bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001be0:	1152      	asrs	r2, r2, #5
 8001be2:	17db      	asrs	r3, r3, #31
 8001be4:	1ad0      	subs	r0, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <main+0x114>)
 8001bea:	fb83 1302 	smull	r1, r3, r3, r2
 8001bee:	1159      	asrs	r1, r3, #5
 8001bf0:	17d3      	asrs	r3, r2, #31
 8001bf2:	1acb      	subs	r3, r1, r3
 8001bf4:	2164      	movs	r1, #100	@ 0x64
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bfb8      	it	lt
 8001c00:	425b      	neglt	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	4601      	mov	r1, r0
 8001c06:	4821      	ldr	r0, [pc, #132]	@ (8001c8c <main+0x118>)
 8001c08:	f004 fd12 	bl	8006630 <iprintf>
		printf("Pression compensée : %ld.%02ld hPa\r\n", comp_press / 25600, (comp_press / 256) % 100);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c88 <main+0x114>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0b59      	lsrs	r1, r3, #13
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0a1a      	lsrs	r2, r3, #8
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <main+0x114>)
 8001c1c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	2064      	movs	r0, #100	@ 0x64
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4818      	ldr	r0, [pc, #96]	@ (8001c90 <main+0x11c>)
 8001c2e:	f004 fcff 	bl	8006630 <iprintf>

		// Calcul de l'angle en fonction de la température
		uint8_t angle = calculate_angle(comp_temp / 100.0);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7fe fc96 	bl	8000564 <__aeabi_i2d>
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <main+0x120>)
 8001c3e:	f7fe fe25 	bl	800088c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ff27 	bl	8000a9c <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	ee00 3a10 	vmov	s0, r3
 8001c54:	f7ff ff54 	bl	8001b00 <calculate_angle>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]

		// Faire tourner le moteur avec l'angle calculé
		rotate_motor_dynamic(angle, 0); // 0 pour sens horaire
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff1b 	bl	8001a9c <rotate_motor_dynamic>

		// Attendre un peu avant de refaire le calcul
		HAL_Delay(1000);
 8001c66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c6a:	f000 fc89 	bl	8002580 <HAL_Delay>
	{
 8001c6e:	bf00      	nop
 8001c70:	e7a0      	b.n	8001bb4 <main+0x40>
 8001c72:	bf00      	nop
 8001c74:	080081d0 	.word	0x080081d0
 8001c78:	200000a8 	.word	0x200000a8
 8001c7c:	200001b4 	.word	0x200001b4
 8001c80:	20000124 	.word	0x20000124
 8001c84:	080081f8 	.word	0x080081f8
 8001c88:	51eb851f 	.word	0x51eb851f
 8001c8c:	0800822c 	.word	0x0800822c
 8001c90:	08008258 	.word	0x08008258
 8001c94:	40590000 	.word	0x40590000

08001c98 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	@ 0x50
 8001c9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	2234      	movs	r2, #52	@ 0x34
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fe6a 	bl	8006980 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <SystemClock_Config+0xd4>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <SystemClock_Config+0xd4>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ccc:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <SystemClock_Config+0xd4>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <SystemClock_Config+0xd8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ce4:	4a22      	ldr	r2, [pc, #136]	@ (8001d70 <SystemClock_Config+0xd8>)
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <SystemClock_Config+0xd8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d00:	2310      	movs	r3, #16
 8001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001d10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d16:	2304      	movs	r3, #4
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f80e 	bl	8004d48 <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001d32:	f000 f945 	bl	8001fc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	230f      	movs	r3, #15
 8001d38:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d46:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	2102      	movs	r1, #2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 fcae 	bl	80046b4 <HAL_RCC_ClockConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001d5e:	f000 f92f 	bl	8001fc0 <Error_Handler>
	}
}
 8001d62:	bf00      	nop
 8001d64:	3750      	adds	r7, #80	@ 0x50
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d7a:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <MX_CAN1_Init+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d80:	2206      	movs	r2, #6
 8001d82:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d92:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001d96:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001d9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d9e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	@ (8001dd8 <MX_CAN1_Init+0x64>)
 8001dc6:	f000 fbff 	bl	80025c8 <HAL_CAN_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001dd0:	f000 f8f6 	bl	8001fc0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200000a8 	.word	0x200000a8
 8001ddc:	40006400 	.word	0x40006400

08001de0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001de6:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <MX_I2C1_Init+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001dec:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_I2C1_Init+0x58>)
 8001dee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001dfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e02:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e1e:	f001 f935 	bl	800308c <HAL_I2C_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001e28:	f000 f8ca 	bl	8001fc0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200000d0 	.word	0x200000d0
 8001e34:	40005400 	.word	0x40005400
 8001e38:	000186a0 	.word	0x000186a0

08001e3c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_UART4_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_UART4_Init+0x4c>)
 8001e74:	f003 fa06 	bl	8005284 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001e7e:	f000 f89f 	bl	8001fc0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000124 	.word	0x20000124
 8001e8c:	40004c00 	.word	0x40004c00

08001e90 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <MX_USART2_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec8:	f003 f9dc 	bl	8005284 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001ed2:	f000 f875 	bl	8001fc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000016c 	.word	0x2000016c
 8001ee0:	40004400 	.word	0x40004400

08001ee4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a25      	ldr	r2, [pc, #148]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <MX_GPIO_Init+0xd0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	4812      	ldr	r0, [pc, #72]	@ (8001fb8 <MX_GPIO_Init+0xd4>)
 8001f70:	f001 f872 	bl	8003058 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <MX_GPIO_Init+0xd8>)
 8001f8c:	f000 fed0 	bl	8002d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001f90:	2320      	movs	r3, #32
 8001f92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <MX_GPIO_Init+0xd4>)
 8001fa8:	f000 fec2 	bl	8002d30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	@ 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <Error_Handler+0x8>

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_MspInit+0x4c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800200a:	2007      	movs	r0, #7
 800200c:	f000 fdbc 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_CAN_MspInit+0x84>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 8002048:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_CAN_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002076:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002088:	2309      	movs	r3, #9
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_CAN_MspInit+0x8c>)
 8002094:	f000 fe4c 	bl	8002d30 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40006400 	.word	0x40006400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_I2C_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ea:	23c0      	movs	r3, #192	@ 0xc0
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ee:	2312      	movs	r3, #18
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020fa:	2304      	movs	r3, #4
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <HAL_I2C_MspInit+0x8c>)
 8002106:	f000 fe13 	bl	8002d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 8002114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40005400 	.word	0x40005400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	@ 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a36      	ldr	r2, [pc, #216]	@ (8002234 <HAL_UART_MspInit+0xf8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d134      	bne.n	80021c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002168:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a2d      	ldr	r2, [pc, #180]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002196:	2303      	movs	r3, #3
 8002198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021a6:	2308      	movs	r3, #8
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4619      	mov	r1, r3
 80021b0:	4822      	ldr	r0, [pc, #136]	@ (800223c <HAL_UART_MspInit+0x100>)
 80021b2:	f000 fdbd 	bl	8002d30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2034      	movs	r0, #52	@ 0x34
 80021bc:	f000 fcef 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021c0:	2034      	movs	r0, #52	@ 0x34
 80021c2:	f000 fd08 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c6:	e030      	b.n	800222a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <HAL_UART_MspInit+0x104>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12b      	bne.n	800222a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_UART_MspInit+0xfc>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800220a:	230c      	movs	r3, #12
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221a:	2307      	movs	r3, #7
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <HAL_UART_MspInit+0x100>)
 8002226:	f000 fd83 	bl	8002d30 <HAL_GPIO_Init>
}
 800222a:	bf00      	nop
 800222c:	3730      	adds	r7, #48	@ 0x30
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004c00 	.word	0x40004c00
 8002238:	40023800 	.word	0x40023800
 800223c:	40020000 	.word	0x40020000
 8002240:	40004400 	.word	0x40004400

08002244 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800224c:	1d39      	adds	r1, r7, #4
 800224e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002252:	2201      	movs	r2, #1
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <__io_putchar+0x20>)
 8002256:	f003 f865 	bl	8005324 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 800225a:	687b      	ldr	r3, [r7, #4]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000016c 	.word	0x2000016c

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <NMI_Handler+0x4>

08002270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <MemManage_Handler+0x4>

08002280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <UsageFault_Handler+0x4>

08002290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022be:	f000 f93f 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <UART4_IRQHandler+0x10>)
 80022ce:	f003 f8d9 	bl	8005484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000124 	.word	0x20000124

080022dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00a      	b.n	8002304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ee:	f3af 8000 	nop.w
 80022f2:	4601      	mov	r1, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf0      	blt.n	80022ee <_read+0x12>
  }

  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e009      	b.n	800233c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff87 	bl	8002244 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf1      	blt.n	8002328 <_write+0x12>
  }
  return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_close>:

int _close(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002376:	605a      	str	r2, [r3, #4]
  return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_isatty>:

int _isatty(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f004 fb3a 	bl	8006a60 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	@ (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20020000 	.word	0x20020000
 8002418:	00000400 	.word	0x00000400
 800241c:	200001f8 	.word	0x200001f8
 8002420:	20000350 	.word	0x20000350

08002424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002480 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800244c:	f7ff ffea 	bl	8002424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002476:	f004 faf9 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff fb7b 	bl	8001b74 <main>
  bx  lr    
 800247e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800248c:	08008404 	.word	0x08008404
  ldr r2, =_sbss
 8002490:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002494:	2000034c 	.word	0x2000034c

08002498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_Init+0x40>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_Init+0x40>)
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_Init+0x40>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 fb5f 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fd7c 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fb77 	bl	8002bf2 <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f000 fb3f 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	@ (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008
 8002538:	20000010 	.word	0x20000010
 800253c:	2000000c 	.word	0x2000000c

08002540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000010 	.word	0x20000010
 8002564:	200001fc 	.word	0x200001fc

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200001fc 	.word	0x200001fc

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000010 	.word	0x20000010

080025c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0ed      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fd18 	bl	800201c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff ffb4 	bl	8002568 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002602:	e012      	b.n	800262a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002604:	f7ff ffb0 	bl	8002568 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0c5      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0e5      	beq.n	8002604 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0202 	bic.w	r2, r2, #2
 8002646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7ff ff8e 	bl	8002568 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800264e:	e012      	b.n	8002676 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002650:	f7ff ff8a 	bl	8002568 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d90b      	bls.n	8002676 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2205      	movs	r2, #5
 800266e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e09f      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e5      	bne.n	8002650 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7e1b      	ldrb	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d108      	bne.n	800269e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e007      	b.n	80026ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7e5b      	ldrb	r3, [r3, #25]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e007      	b.n	80026d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e9b      	ldrb	r3, [r3, #26]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e007      	b.n	8002702 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0220 	bic.w	r2, r2, #32
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7edb      	ldrb	r3, [r3, #27]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0210 	bic.w	r2, r2, #16
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0210 	orr.w	r2, r2, #16
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7f1b      	ldrb	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e007      	b.n	8002756 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0208 	bic.w	r2, r2, #8
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7f5b      	ldrb	r3, [r3, #29]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0204 	orr.w	r2, r2, #4
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d12e      	bne.n	8002830 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ea:	f7ff febd 	bl	8002568 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f0:	e012      	b.n	8002818 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f2:	f7ff feb9 	bl	8002568 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b0a      	cmp	r3, #10
 80027fe:	d90b      	bls.n	8002818 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2205      	movs	r2, #5
 8002810:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e012      	b.n	800283e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e5      	bne.n	80027f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e006      	b.n	800283e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002846:	b480      	push	{r7}
 8002848:	b089      	sub	sp, #36	@ 0x24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d003      	beq.n	8002872 <HAL_CAN_AddTxMessage+0x2c>
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b02      	cmp	r3, #2
 800286e:	f040 80ad 	bne.w	80029cc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8095 	beq.w	80029bc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	0e1b      	lsrs	r3, r3, #24
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800289c:	2201      	movs	r2, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	409a      	lsls	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	6809      	ldr	r1, [r1, #0]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3318      	adds	r3, #24
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	440b      	add	r3, r1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e00f      	b.n	80028ea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3318      	adds	r3, #24
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3318      	adds	r3, #24
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	440b      	add	r3, r1
 80028fa:	3304      	adds	r3, #4
 80028fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	7d1b      	ldrb	r3, [r3, #20]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d111      	bne.n	800292a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3318      	adds	r3, #24
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	6811      	ldr	r1, [r2, #0]
 800291a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3318      	adds	r3, #24
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3307      	adds	r3, #7
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	061a      	lsls	r2, r3, #24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3306      	adds	r3, #6
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3305      	adds	r3, #5
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	4313      	orrs	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	3204      	adds	r2, #4
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	4610      	mov	r0, r2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	6811      	ldr	r1, [r2, #0]
 8002952:	ea43 0200 	orr.w	r2, r3, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002960:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3303      	adds	r3, #3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	061a      	lsls	r2, r3, #24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3302      	adds	r3, #2
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3301      	adds	r3, #1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	4313      	orrs	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	4610      	mov	r0, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	ea43 0200 	orr.w	r2, r3, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002996:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3318      	adds	r3, #24
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6811      	ldr	r1, [r2, #0]
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3318      	adds	r3, #24
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	440b      	add	r3, r1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e00e      	b.n	80029da <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e006      	b.n	80029da <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	@ (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	@ (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff fca6 	bl	8002568 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d008      	beq.n	8002c3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e052      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0216 	bic.w	r2, r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <HAL_DMA_Abort+0x62>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0208 	bic.w	r2, r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8c:	e013      	b.n	8002cb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8e:	f7ff fc6b 	bl	8002568 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d90c      	bls.n	8002cb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e015      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e4      	bne.n	8002c8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	223f      	movs	r2, #63	@ 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00c      	b.n	8002d22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e165      	b.n	8003018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8154 	bne.w	8003012 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80ae 	beq.w	8003012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b5d      	ldr	r3, [pc, #372]	@ (8003030 <HAL_GPIO_Init+0x300>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	@ (8003030 <HAL_GPIO_Init+0x300>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	@ (8003030 <HAL_GPIO_Init+0x300>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_GPIO_Init+0x308>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x21a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_GPIO_Init+0x30c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x216>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	@ (8003040 <HAL_GPIO_Init+0x310>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x212>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	@ (8003044 <HAL_GPIO_Init+0x314>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4b      	ldr	r2, [pc, #300]	@ (8003048 <HAL_GPIO_Init+0x318>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x20a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	@ (800304c <HAL_GPIO_Init+0x31c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a49      	ldr	r2, [pc, #292]	@ (8003050 <HAL_GPIO_Init+0x320>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x202>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a31      	ldr	r2, [pc, #196]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <HAL_GPIO_Init+0x324>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <HAL_GPIO_Init+0x324>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae96 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	@ 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40021400 	.word	0x40021400
 8003050:	40021800 	.word	0x40021800
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003074:	e003      	b.n	800307e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12b      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fffa 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	@ 0x24
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f0:	f001 fbd2 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a81      	ldr	r2, [pc, #516]	@ (8003300 <HAL_I2C_Init+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d807      	bhi.n	8003110 <HAL_I2C_Init+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a80      	ldr	r2, [pc, #512]	@ (8003304 <HAL_I2C_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e006      	b.n	800311e <HAL_I2C_Init+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a7d      	ldr	r2, [pc, #500]	@ (8003308 <HAL_I2C_Init+0x27c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0e7      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a78      	ldr	r2, [pc, #480]	@ (800330c <HAL_I2C_Init+0x280>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <HAL_I2C_Init+0x274>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <HAL_I2C_Init+0xd4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	e009      	b.n	8003174 <HAL_I2C_Init+0xe8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a69      	ldr	r2, [pc, #420]	@ (8003310 <HAL_I2C_Init+0x284>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003186:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	495c      	ldr	r1, [pc, #368]	@ (8003300 <HAL_I2C_Init+0x274>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d819      	bhi.n	80031c8 <HAL_I2C_Init+0x13c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_I2C_Init+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	e051      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x168>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x18e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x196>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff f91e 	bl	8002568 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80e0 	bne.w	80034fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4970      	ldr	r1, [pc, #448]	@ (8003508 <HAL_I2C_Master_Transmit+0x1f4>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 ff7e 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0d3      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	@ 0x21
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a50      	ldr	r2, [pc, #320]	@ (800350c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fd00 	bl	8003dd8 <I2C_MasterRequestWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 f83c 	bl	800447c <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Master_Transmit+0x188>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f001 f833 	bl	800450c <I2C_WaitOnBTFFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d107      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01a      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d194      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	@ 0x30
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
 8003520:	4613      	mov	r3, r2
 8003522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff f820 	bl	8002568 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 8217 	bne.w	8003966 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	497c      	ldr	r1, [pc, #496]	@ (8003734 <HAL_I2C_Master_Receive+0x224>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fe80 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e20a      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2C_Master_Receive+0x50>
 800355c:	2302      	movs	r3, #2
 800355e:	e203      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d007      	beq.n	8003586 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2222      	movs	r2, #34	@ 0x22
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2210      	movs	r2, #16
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	893a      	ldrh	r2, [r7, #8]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003738 <HAL_I2C_Master_Receive+0x228>)
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fc84 	bl	8003edc <I2C_MasterRequestRead>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1c4      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e198      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	d11b      	bne.n	800364e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e178      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11b      	bne.n	800368e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	e158      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800369c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036b4:	e144      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	f200 80f1 	bhi.w	80038a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d123      	bne.n	8003710 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 ff65 	bl	800459c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e145      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800370e:	e117      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b02      	cmp	r3, #2
 8003716:	d14e      	bne.n	80037b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	2200      	movs	r2, #0
 8003720:	4906      	ldr	r1, [pc, #24]	@ (800373c <HAL_I2C_Master_Receive+0x22c>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fd90 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e11a      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
 8003732:	bf00      	nop
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000
 800373c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037b4:	e0c4      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	496c      	ldr	r1, [pc, #432]	@ (8003970 <HAL_I2C_Master_Receive+0x460>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fd41 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cb      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	4955      	ldr	r1, [pc, #340]	@ (8003970 <HAL_I2C_Master_Receive+0x460>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fd13 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e09d      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038a0:	e04e      	b.n	8003940 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fe78 	bl	800459c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e058      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d124      	bne.n	8003940 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f aeb6 	bne.w	80036b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3728      	adds	r7, #40	@ 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	00010004 	.word	0x00010004

08003974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	@ 0x30
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	817b      	strh	r3, [r7, #10]
 8003986:	460b      	mov	r3, r1
 8003988:	813b      	strh	r3, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800398e:	f7fe fdeb 	bl	8002568 <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	f040 8214 	bne.w	8003dca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2319      	movs	r3, #25
 80039a8:	2201      	movs	r2, #1
 80039aa:	497b      	ldr	r1, [pc, #492]	@ (8003b98 <HAL_I2C_Mem_Read+0x224>)
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fc4b 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	e207      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Mem_Read+0x56>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e200      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d007      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2222      	movs	r2, #34	@ 0x22
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_I2C_Mem_Read+0x228>)
 8003a30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a32:	88f8      	ldrh	r0, [r7, #6]
 8003a34:	893a      	ldrh	r2, [r7, #8]
 8003a36:	8979      	ldrh	r1, [r7, #10]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4603      	mov	r3, r0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fb18 	bl	8004078 <I2C_RequestMemoryRead>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1bc      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d113      	bne.n	8003a82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	623b      	str	r3, [r7, #32]
 8003a6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e190      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d11b      	bne.n	8003ac2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e170      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	e150      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b18:	e144      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	f200 80f1 	bhi.w	8003d06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d123      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fd33 	bl	800459c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e145      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b72:	e117      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d14e      	bne.n	8003c1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	2200      	movs	r2, #0
 8003b84:	4906      	ldr	r1, [pc, #24]	@ (8003ba0 <HAL_I2C_Mem_Read+0x22c>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb5e 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e11a      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
 8003b96:	bf00      	nop
 8003b98:	00100002 	.word	0x00100002
 8003b9c:	ffff0000 	.word	0xffff0000
 8003ba0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c18:	e0c4      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	2200      	movs	r2, #0
 8003c22:	496c      	ldr	r1, [pc, #432]	@ (8003dd4 <HAL_I2C_Mem_Read+0x460>)
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb0f 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0cb      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4955      	ldr	r1, [pc, #340]	@ (8003dd4 <HAL_I2C_Mem_Read+0x460>)
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fae1 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e09d      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d04:	e04e      	b.n	8003da4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fc46 	bl	800459c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e058      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d124      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f aeb6 	bne.w	8003b1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	@ 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	00010004 	.word	0x00010004

08003dd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	460b      	mov	r3, r1
 8003de6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d006      	beq.n	8003e02 <I2C_MasterRequestWrite+0x2a>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d003      	beq.n	8003e02 <I2C_MasterRequestWrite+0x2a>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e00:	d108      	bne.n	8003e14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e00b      	b.n	8003e2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	2b12      	cmp	r3, #18
 8003e1a:	d107      	bne.n	8003e2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa05 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e52:	d103      	bne.n	8003e5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e035      	b.n	8003ecc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e68:	d108      	bne.n	8003e7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	e01b      	b.n	8003eb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e7c:	897b      	ldrh	r3, [r7, #10]
 8003e7e:	11db      	asrs	r3, r3, #7
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0306 	and.w	r3, r3, #6
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f063 030f 	orn	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <I2C_MasterRequestWrite+0xfc>)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fa4e 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e010      	b.n	8003ecc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003eaa:	897b      	ldrh	r3, [r7, #10]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4907      	ldr	r1, [pc, #28]	@ (8003ed8 <I2C_MasterRequestWrite+0x100>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa3e 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	00010008 	.word	0x00010008
 8003ed8:	00010002 	.word	0x00010002

08003edc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d006      	beq.n	8003f16 <I2C_MasterRequestRead+0x3a>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <I2C_MasterRequestRead+0x3a>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e00b      	b.n	8003f40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b11      	cmp	r3, #17
 8003f2e:	d107      	bne.n	8003f40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f97b 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f66:	d103      	bne.n	8003f70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e079      	b.n	8004068 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e05f      	b.n	8004050 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	11db      	asrs	r3, r3, #7
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0306 	and.w	r3, r3, #6
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f063 030f 	orn	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4930      	ldr	r1, [pc, #192]	@ (8004070 <I2C_MasterRequestRead+0x194>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f9c4 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e054      	b.n	8004068 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4929      	ldr	r1, [pc, #164]	@ (8004074 <I2C_MasterRequestRead+0x198>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f9b4 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e044      	b.n	8004068 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004002:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f919 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402a:	d103      	bne.n	8004034 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e017      	b.n	8004068 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004038:	897b      	ldrh	r3, [r7, #10]
 800403a:	11db      	asrs	r3, r3, #7
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 0306 	and.w	r3, r3, #6
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f063 030e 	orn	r3, r3, #14
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4907      	ldr	r1, [pc, #28]	@ (8004074 <I2C_MasterRequestRead+0x198>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f970 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	00010008 	.word	0x00010008
 8004074:	00010002 	.word	0x00010002

08004078 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f8c2 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d8:	d103      	bne.n	80040e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0aa      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040e6:	897b      	ldrh	r3, [r7, #10]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	4952      	ldr	r1, [pc, #328]	@ (8004244 <I2C_RequestMemoryRead+0x1cc>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f91d 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e097      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	6a39      	ldr	r1, [r7, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f9a8 	bl	800447c <I2C_WaitOnTXEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d107      	bne.n	800414a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e076      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004154:	893b      	ldrh	r3, [r7, #8]
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	e021      	b.n	80041a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004160:	893b      	ldrh	r3, [r7, #8]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	b29b      	uxth	r3, r3
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	6a39      	ldr	r1, [r7, #32]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f982 	bl	800447c <I2C_WaitOnTXEFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	2b04      	cmp	r3, #4
 8004184:	d107      	bne.n	8004196 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e050      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800419a:	893b      	ldrh	r3, [r7, #8]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a6:	6a39      	ldr	r1, [r7, #32]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f967 	bl	800447c <I2C_WaitOnTXEFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d107      	bne.n	80041cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e035      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f82b 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004206:	d103      	bne.n	8004210 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e013      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	4906      	ldr	r1, [pc, #24]	@ (8004244 <I2C_RequestMemoryRead+0x1cc>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f886 	bl	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	00010002 	.word	0x00010002

08004248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004258:	e048      	b.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d044      	beq.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fe f981 	bl	8002568 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d139      	bne.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10d      	bne.n	800429e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	43da      	mvns	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	e00c      	b.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	43da      	mvns	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4013      	ands	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d116      	bne.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e023      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10d      	bne.n	8004312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	e00c      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	43da      	mvns	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d093      	beq.n	800425a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434a:	e071      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435a:	d123      	bne.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e067      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d041      	beq.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fe f8dc 	bl	8002568 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d136      	bne.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10c      	bne.n	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	43da      	mvns	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e00b      	b.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e021      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10c      	bne.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e00b      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f af6d 	bne.w	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004488:	e034      	b.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f8e3 	bl	8004656 <I2C_IsAcknowledgeFailed>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e034      	b.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d028      	beq.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe f861 	bl	8002568 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11d      	bne.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c2:	2b80      	cmp	r3, #128	@ 0x80
 80044c4:	d016      	beq.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e007      	b.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d1c3      	bne.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004518:	e034      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f89b 	bl	8004656 <I2C_IsAcknowledgeFailed>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e034      	b.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d028      	beq.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe f819 	bl	8002568 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d11d      	bne.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d016      	beq.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d1c3      	bne.n	800451a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045a8:	e049      	b.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d119      	bne.n	80045ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0210 	mvn.w	r2, #16
 80045c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e030      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7fd ffbc 	bl	8002568 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11d      	bne.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	d016      	beq.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b40      	cmp	r3, #64	@ 0x40
 800464a:	d1ae      	bne.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466c:	d11b      	bne.n	80046a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004676:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0cc      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b68      	ldr	r3, [pc, #416]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90c      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b65      	ldr	r3, [pc, #404]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a58      	ldr	r2, [pc, #352]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a52      	ldr	r2, [pc, #328]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800472a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d044      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d003      	beq.n	8004772 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	2b03      	cmp	r3, #3
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b3f      	ldr	r3, [pc, #252]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e067      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b37      	ldr	r3, [pc, #220]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4934      	ldr	r1, [pc, #208]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fd fee0 	bl	8002568 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fd fedc 	bl	8002568 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20c      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b22      	ldr	r3, [pc, #136]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f855 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	@ (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd fe40 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023c00 	.word	0x40023c00
 8004870:	40023800 	.word	0x40023800
 8004874:	0800828c 	.word	0x0800828c
 8004878:	20000008 	.word	0x20000008
 800487c:	2000000c 	.word	0x2000000c

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000008 	.word	0x20000008

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0800829c 	.word	0x0800829c

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0b5b      	lsrs	r3, r3, #13
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800829c 	.word	0x0800829c

080048e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b0ae      	sub	sp, #184	@ 0xb8
 80048ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490e:	4bcb      	ldr	r3, [pc, #812]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b0c      	cmp	r3, #12
 8004918:	f200 8206 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x440>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <HAL_RCC_GetSysClockFreq+0x3c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004d29 	.word	0x08004d29
 800492c:	08004d29 	.word	0x08004d29
 8004930:	08004d29 	.word	0x08004d29
 8004934:	08004961 	.word	0x08004961
 8004938:	08004d29 	.word	0x08004d29
 800493c:	08004d29 	.word	0x08004d29
 8004940:	08004d29 	.word	0x08004d29
 8004944:	08004969 	.word	0x08004969
 8004948:	08004d29 	.word	0x08004d29
 800494c:	08004d29 	.word	0x08004d29
 8004950:	08004d29 	.word	0x08004d29
 8004954:	08004b59 	.word	0x08004b59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4bb9      	ldr	r3, [pc, #740]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x358>)
 800495a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800495e:	e1e7      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004960:	4bb8      	ldr	r3, [pc, #736]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004966:	e1e3      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004968:	4bb4      	ldr	r3, [pc, #720]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004974:	4bb1      	ldr	r3, [pc, #708]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d071      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4bae      	ldr	r3, [pc, #696]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800498c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	f04f 0000 	mov.w	r0, #0
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	0159      	lsls	r1, r3, #5
 80049b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b8:	0150      	lsls	r0, r2, #5
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4621      	mov	r1, r4
 80049c0:	1a51      	subs	r1, r2, r1
 80049c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80049d8:	4649      	mov	r1, r9
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e2:	4641      	mov	r1, r8
 80049e4:	018a      	lsls	r2, r1, #6
 80049e6:	4641      	mov	r1, r8
 80049e8:	1a51      	subs	r1, r2, r1
 80049ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049ec:	4649      	mov	r1, r9
 80049ee:	eb63 0301 	sbc.w	r3, r3, r1
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004a00:	4649      	mov	r1, r9
 8004a02:	00cb      	lsls	r3, r1, #3
 8004a04:	4641      	mov	r1, r8
 8004a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	00ca      	lsls	r2, r1, #3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	4622      	mov	r2, r4
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	eb42 0303 	adc.w	r3, r2, r3
 8004a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a30:	4629      	mov	r1, r5
 8004a32:	024b      	lsls	r3, r1, #9
 8004a34:	4621      	mov	r1, r4
 8004a36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	024a      	lsls	r2, r1, #9
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004a54:	f7fc f8c2 	bl	8000bdc <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a62:	e067      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4b75      	ldr	r3, [pc, #468]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a70:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a7e:	2300      	movs	r3, #0
 8004a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004ab8:	4649      	mov	r1, r9
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004acc:	4649      	mov	r1, r9
 8004ace:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ade:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae6:	4692      	mov	sl, r2
 8004ae8:	469b      	mov	fp, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	eb1a 0303 	adds.w	r3, sl, r3
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	462b      	mov	r3, r5
 8004af4:	eb4b 0303 	adc.w	r3, fp, r3
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b06:	4629      	mov	r1, r5
 8004b08:	028b      	lsls	r3, r1, #10
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b10:	4621      	mov	r1, r4
 8004b12:	028a      	lsls	r2, r1, #10
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b20:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004b26:	f7fc f859 	bl	8000bdc <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4613      	mov	r3, r2
 8004b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b34:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b56:	e0eb      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b58:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b64:	4b35      	ldr	r3, [pc, #212]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d06b      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b70:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	2200      	movs	r2, #0
 8004b78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b84:	2300      	movs	r3, #0
 8004b86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	462b      	mov	r3, r5
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9e:	0150      	lsls	r0, r2, #5
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	1a51      	subs	r1, r2, r1
 8004ba8:	61b9      	str	r1, [r7, #24]
 8004baa:	4629      	mov	r1, r5
 8004bac:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	018b      	lsls	r3, r1, #6
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bc8:	4651      	mov	r1, sl
 8004bca:	018a      	lsls	r2, r1, #6
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	eb63 0901 	sbc.w	r9, r3, r1
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004be4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004be8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bec:	4690      	mov	r8, r2
 8004bee:	4699      	mov	r9, r3
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	eb18 0303 	adds.w	r3, r8, r3
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	eb49 0303 	adc.w	r3, r9, r3
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	024b      	lsls	r3, r1, #9
 8004c10:	4621      	mov	r1, r4
 8004c12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c16:	4621      	mov	r1, r4
 8004c18:	024a      	lsls	r2, r1, #9
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c22:	2200      	movs	r2, #0
 8004c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c2c:	f7fb ffd6 	bl	8000bdc <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c3a:	e065      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x420>
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c48:	4b3d      	ldr	r3, [pc, #244]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	4611      	mov	r1, r2
 8004c54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c62:	4642      	mov	r2, r8
 8004c64:	464b      	mov	r3, r9
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	0159      	lsls	r1, r3, #5
 8004c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c74:	0150      	lsls	r0, r2, #5
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1a51      	subs	r1, r2, r1
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	4649      	mov	r1, r9
 8004c82:	eb63 0301 	sbc.w	r3, r3, r1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c94:	4659      	mov	r1, fp
 8004c96:	018b      	lsls	r3, r1, #6
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	018a      	lsls	r2, r1, #6
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	1a54      	subs	r4, r2, r1
 8004ca6:	4659      	mov	r1, fp
 8004ca8:	eb63 0501 	sbc.w	r5, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	00eb      	lsls	r3, r5, #3
 8004cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cba:	00e2      	lsls	r2, r4, #3
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	18e3      	adds	r3, r4, r3
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	eb45 0303 	adc.w	r3, r5, r3
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	028b      	lsls	r3, r1, #10
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	028a      	lsls	r2, r1, #10
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004cf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cfa:	f7fb ff6f 	bl	8000bdc <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d08:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0f1b      	lsrs	r3, r3, #28
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d26:	e003      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	37b8      	adds	r7, #184	@ 0xb8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400

08004d48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e28d      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8083 	beq.w	8004e6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d68:	4b94      	ldr	r3, [pc, #592]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d019      	beq.n	8004da8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d74:	4b91      	ldr	r3, [pc, #580]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d80:	4b8e      	ldr	r3, [pc, #568]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d8c:	d00c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d112      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9a:	4b88      	ldr	r3, [pc, #544]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da6:	d10b      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da8:	4b84      	ldr	r3, [pc, #528]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05b      	beq.n	8004e6c <HAL_RCC_OscConfig+0x124>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d157      	bne.n	8004e6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e25a      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x90>
 8004dca:	4b7c      	ldr	r3, [pc, #496]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7b      	ldr	r2, [pc, #492]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e01d      	b.n	8004e14 <HAL_RCC_OscConfig+0xcc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0xb4>
 8004de2:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4b73      	ldr	r3, [pc, #460]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a72      	ldr	r2, [pc, #456]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCC_OscConfig+0xcc>
 8004dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a6e      	ldr	r2, [pc, #440]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b6c      	ldr	r3, [pc, #432]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fba4 	bl	8002568 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fd fba0 	bl	8002568 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	@ 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e21f      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b61      	ldr	r3, [pc, #388]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0xdc>
 8004e42:	e014      	b.n	8004e6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fb90 	bl	8002568 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7fd fb8c 	bl	8002568 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e20b      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	4b57      	ldr	r3, [pc, #348]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x104>
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d06f      	beq.n	8004f5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e7a:	4b50      	ldr	r3, [pc, #320]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d017      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e86:	4b4d      	ldr	r3, [pc, #308]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d105      	bne.n	8004e9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e92:	4b4a      	ldr	r3, [pc, #296]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d11c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eaa:	4b44      	ldr	r3, [pc, #272]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d116      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb6:	4b41      	ldr	r3, [pc, #260]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_RCC_OscConfig+0x186>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d001      	beq.n	8004ece <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e1d3      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ece:	4b3b      	ldr	r3, [pc, #236]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4937      	ldr	r1, [pc, #220]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee2:	e03a      	b.n	8004f5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eec:	4b34      	ldr	r3, [pc, #208]	@ (8004fc0 <HAL_RCC_OscConfig+0x278>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fd fb39 	bl	8002568 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efa:	f7fd fb35 	bl	8002568 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1b4      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4925      	ldr	r1, [pc, #148]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]
 8004f2c:	e015      	b.n	8004f5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_RCC_OscConfig+0x278>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd fb18 	bl	8002568 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3c:	f7fd fb14 	bl	8002568 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e193      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d036      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6e:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <HAL_RCC_OscConfig+0x27c>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fd faf8 	bl	8002568 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7c:	f7fd faf4 	bl	8002568 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e173      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x234>
 8004f9a:	e01b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9c:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fae1 	bl	8002568 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	e00e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fd fadd 	bl	8002568 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d907      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e15c      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	42470000 	.word	0x42470000
 8004fc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ea      	bne.n	8004faa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8097 	beq.w	8005110 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b83      	ldr	r3, [pc, #524]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	@ 0x40
 8005002:	4b7c      	ldr	r3, [pc, #496]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005012:	4b79      	ldr	r3, [pc, #484]	@ (80051f8 <HAL_RCC_OscConfig+0x4b0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d118      	bne.n	8005050 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501e:	4b76      	ldr	r3, [pc, #472]	@ (80051f8 <HAL_RCC_OscConfig+0x4b0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a75      	ldr	r2, [pc, #468]	@ (80051f8 <HAL_RCC_OscConfig+0x4b0>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502a:	f7fd fa9d 	bl	8002568 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005032:	f7fd fa99 	bl	8002568 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e118      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	4b6c      	ldr	r3, [pc, #432]	@ (80051f8 <HAL_RCC_OscConfig+0x4b0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d106      	bne.n	8005066 <HAL_RCC_OscConfig+0x31e>
 8005058:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	4a65      	ldr	r2, [pc, #404]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70
 8005064:	e01c      	b.n	80050a0 <HAL_RCC_OscConfig+0x358>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b05      	cmp	r3, #5
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x340>
 800506e:	4b61      	ldr	r3, [pc, #388]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a60      	ldr	r2, [pc, #384]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	4b5e      	ldr	r3, [pc, #376]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a5d      	ldr	r2, [pc, #372]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0x358>
 8005088:	4b5a      	ldr	r3, [pc, #360]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a59      	ldr	r2, [pc, #356]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	4b57      	ldr	r3, [pc, #348]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	4a56      	ldr	r2, [pc, #344]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	f023 0304 	bic.w	r3, r3, #4
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd fa5e 	bl	8002568 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fd fa5a 	bl	8002568 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0d7      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c6:	4b4b      	ldr	r3, [pc, #300]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ee      	beq.n	80050b0 <HAL_RCC_OscConfig+0x368>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fd fa48 	bl	8002568 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fd fa44 	bl	8002568 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0c1      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f2:	4b40      	ldr	r3, [pc, #256]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ee      	bne.n	80050dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d105      	bne.n	8005110 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005104:	4b3b      	ldr	r3, [pc, #236]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	4a3a      	ldr	r2, [pc, #232]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800510e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80ad 	beq.w	8005274 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800511a:	4b36      	ldr	r3, [pc, #216]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b08      	cmp	r3, #8
 8005124:	d060      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d145      	bne.n	80051ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b33      	ldr	r3, [pc, #204]	@ (80051fc <HAL_RCC_OscConfig+0x4b4>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd fa18 	bl	8002568 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fd fa14 	bl	8002568 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e093      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	3b01      	subs	r3, #1
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	071b      	lsls	r3, r3, #28
 8005186:	491b      	ldr	r1, [pc, #108]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <HAL_RCC_OscConfig+0x4b4>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fd f9e9 	bl	8002568 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fd f9e5 	bl	8002568 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e064      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	4b11      	ldr	r3, [pc, #68]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x452>
 80051b8:	e05c      	b.n	8005274 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <HAL_RCC_OscConfig+0x4b4>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd f9d2 	bl	8002568 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fd f9ce 	bl	8002568 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e04d      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x480>
 80051e6:	e045      	b.n	8005274 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e040      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40007000 	.word	0x40007000
 80051fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005200:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCC_OscConfig+0x538>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d030      	beq.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d129      	bne.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d122      	bne.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005238:	4293      	cmp	r3, r2
 800523a:	d119      	bne.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	3b01      	subs	r3, #1
 800524a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d10f      	bne.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d107      	bne.n	8005270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800

08005284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc ff46 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	@ 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fdbd 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	d175      	bne.n	8005430 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_UART_Transmit+0x2c>
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e06e      	b.n	8005432 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2221      	movs	r2, #33	@ 0x21
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005362:	f7fd f901 	bl	8002568 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005398:	e02e      	b.n	80053f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	@ 0x80
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fb1f 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e03a      	b.n	8005432 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e007      	b.n	80053ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1cb      	bne.n	800539a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2140      	movs	r1, #64	@ 0x40
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 faeb 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b20      	cmp	r3, #32
 8005452:	d112      	bne.n	800547a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Receive_IT+0x26>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e00b      	b.n	800547c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	461a      	mov	r2, r3
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb12 	bl	8005a9a <UART_Start_Receive_IT>
 8005476:	4603      	mov	r3, r0
 8005478:	e000      	b.n	800547c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b0ba      	sub	sp, #232	@ 0xe8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_UART_IRQHandler+0x66>
 80054d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fbf2 	bl	8005ccc <UART_Receive_IT>
      return;
 80054e8:	e25b      	b.n	80059a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80de 	beq.w	80056b0 <HAL_UART_IRQHandler+0x22c>
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005504:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80d1 	beq.w	80056b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_UART_IRQHandler+0xae>
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552a:	f043 0201 	orr.w	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_UART_IRQHandler+0xd2>
 800553e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f043 0202 	orr.w	r2, r3, #2
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_UART_IRQHandler+0xf6>
 8005562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f043 0204 	orr.w	r2, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d011      	beq.n	80055aa <HAL_UART_IRQHandler+0x126>
 8005586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f043 0208 	orr.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 81f2 	beq.w	8005998 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_UART_IRQHandler+0x14e>
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fb7d 	bl	8005ccc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055dc:	2b40      	cmp	r3, #64	@ 0x40
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_UART_IRQHandler+0x17a>
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04f      	beq.n	800569e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa85 	bl	8005b0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d141      	bne.n	8005696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800562c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3314      	adds	r3, #20
 800563a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800563e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800564a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1d9      	bne.n	8005612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d013      	beq.n	800568e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	4a7e      	ldr	r2, [pc, #504]	@ (8005864 <HAL_UART_IRQHandler+0x3e0>)
 800566c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005672:	4618      	mov	r0, r3
 8005674:	f7fd fb39 	bl	8002cea <HAL_DMA_Abort_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	e00e      	b.n	80056ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f994 	bl	80059bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e00a      	b.n	80056ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f990 	bl	80059bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e006      	b.n	80056ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f98c 	bl	80059bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056aa:	e175      	b.n	8005998 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	bf00      	nop
    return;
 80056ae:	e173      	b.n	8005998 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f040 814f 	bne.w	8005958 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8148 	beq.w	8005958 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8141 	beq.w	8005958 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b40      	cmp	r3, #64	@ 0x40
 80056f8:	f040 80b6 	bne.w	8005868 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8145 	beq.w	800599c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800571a:	429a      	cmp	r2, r3
 800571c:	f080 813e 	bcs.w	800599c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005726:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005732:	f000 8088 	beq.w	8005846 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800574c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005762:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800576e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800577a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1d9      	bne.n	8005736 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3314      	adds	r3, #20
 80057a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e1      	bne.n	8005782 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e3      	bne.n	80057be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005828:	65ba      	str	r2, [r7, #88]	@ 0x58
 800582a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800582e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e3      	bne.n	8005804 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	4618      	mov	r0, r3
 8005842:	f7fd f9e2 	bl	8002c0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005854:	b29b      	uxth	r3, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f8b7 	bl	80059d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005862:	e09b      	b.n	800599c <HAL_UART_IRQHandler+0x518>
 8005864:	08005bd5 	.word	0x08005bd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005870:	b29b      	uxth	r3, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 808e 	beq.w	80059a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8089 	beq.w	80059a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3314      	adds	r3, #20
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	623b      	str	r3, [r7, #32]
   return(result);
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e3      	bne.n	80058c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60fb      	str	r3, [r7, #12]
   return(result);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005930:	61fa      	str	r2, [r7, #28]
 8005932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	617b      	str	r3, [r7, #20]
   return(result);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e3      	bne.n	800590c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800594a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f83d 	bl	80059d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005956:	e023      	b.n	80059a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <HAL_UART_IRQHandler+0x4f4>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f943 	bl	8005bfc <UART_Transmit_IT>
    return;
 8005976:	e014      	b.n	80059a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <HAL_UART_IRQHandler+0x51e>
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f983 	bl	8005c9c <UART_EndTransmit_IT>
    return;
 8005996:	e004      	b.n	80059a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005998:	bf00      	nop
 800599a:	e002      	b.n	80059a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80059a0:	bf00      	nop
  }
}
 80059a2:	37e8      	adds	r7, #232	@ 0xe8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f8:	e03b      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d037      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a02:	f7fc fdb1 	bl	8002568 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d302      	bcc.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e03a      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d023      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b80      	cmp	r3, #128	@ 0x80
 8005a2e:	d020      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b40      	cmp	r3, #64	@ 0x40
 8005a34:	d01d      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d116      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f857 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2208      	movs	r2, #8
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d0b4      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2222      	movs	r2, #34	@ 0x22
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ade:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0220 	orr.w	r2, r2, #32
 8005afe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b095      	sub	sp, #84	@ 0x54
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b36:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3314      	adds	r3, #20
 8005b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e5      	bne.n	8005b4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d119      	bne.n	8005bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba6:	61ba      	str	r2, [r7, #24]
 8005ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bc8:	bf00      	nop
 8005bca:	3754      	adds	r7, #84	@ 0x54
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fee4 	bl	80059bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b21      	cmp	r3, #33	@ 0x21
 8005c0e:	d13e      	bne.n	8005c8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c18:	d114      	bne.n	8005c44 <UART_Transmit_IT+0x48>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]
 8005c42:	e008      	b.n	8005c56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	1c59      	adds	r1, r3, #1
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6211      	str	r1, [r2, #32]
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4619      	mov	r1, r3
 8005c64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fe73 	bl	80059a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b22      	cmp	r3, #34	@ 0x22
 8005cde:	f040 80ae 	bne.w	8005e3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cea:	d117      	bne.n	8005d1c <UART_Receive_IT+0x50>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	1c9a      	adds	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d1a:	e026      	b.n	8005d6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d007      	beq.n	8005d40 <UART_Receive_IT+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <UART_Receive_IT+0x82>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e008      	b.n	8005d60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d15d      	bne.n	8005e3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0220 	bic.w	r2, r2, #32
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d135      	bne.n	8005e30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dea:	623a      	str	r2, [r7, #32]
 8005dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e5      	bne.n	8005dca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d10a      	bne.n	8005e22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fdd1 	bl	80059d0 <HAL_UARTEx_RxEventCallback>
 8005e2e:	e002      	b.n	8005e36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fb fd2f 	bl	8001894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e002      	b.n	8005e40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3730      	adds	r7, #48	@ 0x30
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b0c0      	sub	sp, #256	@ 0x100
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	ea40 0301 	orr.w	r3, r0, r1
 8005e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ea0:	f021 010c 	bic.w	r1, r1, #12
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	6999      	ldr	r1, [r3, #24]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	ea40 0301 	orr.w	r3, r0, r1
 8005ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d005      	beq.n	8005ee8 <UART_SetConfig+0xa0>
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8006118 <UART_SetConfig+0x2d0>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fcea 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ef0:	e003      	b.n	8005efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef2:	f7fe fcd1 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f04:	f040 810c 	bne.w	8006120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f22:	415b      	adcs	r3, r3
 8005f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	eb12 0801 	adds.w	r8, r2, r1
 8005f30:	4629      	mov	r1, r5
 8005f32:	eb43 0901 	adc.w	r9, r3, r1
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	eb18 0303 	adds.w	r3, r8, r3
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb49 0303 	adc.w	r3, r9, r3
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f76:	460b      	mov	r3, r1
 8005f78:	18db      	adds	r3, r3, r3
 8005f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f8c:	f7fa fe26 	bl	8000bdc <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b61      	ldr	r3, [pc, #388]	@ (800611c <UART_SetConfig+0x2d4>)
 8005f96:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	011c      	lsls	r4, r3, #4
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe0:	4692      	mov	sl, r2
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	4643      	mov	r3, r8
 8005fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	643b      	str	r3, [r7, #64]	@ 0x40
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
 800601a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800601e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006022:	f7fa fddb 	bl	8000bdc <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b3b      	ldr	r3, [pc, #236]	@ (800611c <UART_SetConfig+0x2d4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	@ 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006042:	4b36      	ldr	r3, [pc, #216]	@ (800611c <UART_SetConfig+0x2d4>)
 8006044:	fba3 2302 	umull	r2, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006050:	441c      	add	r4, r3
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800605c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	1891      	adds	r1, r2, r2
 800606a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800606c:	415b      	adcs	r3, r3
 800606e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006074:	4641      	mov	r1, r8
 8006076:	1851      	adds	r1, r2, r1
 8006078:	6339      	str	r1, [r7, #48]	@ 0x30
 800607a:	4649      	mov	r1, r9
 800607c:	414b      	adcs	r3, r1
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800608c:	4659      	mov	r1, fp
 800608e:	00cb      	lsls	r3, r1, #3
 8006090:	4651      	mov	r1, sl
 8006092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006096:	4651      	mov	r1, sl
 8006098:	00ca      	lsls	r2, r1, #3
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	4642      	mov	r2, r8
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a8:	464b      	mov	r3, r9
 80060aa:	460a      	mov	r2, r1
 80060ac:	eb42 0303 	adc.w	r3, r2, r3
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060c8:	460b      	mov	r3, r1
 80060ca:	18db      	adds	r3, r3, r3
 80060cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ce:	4613      	mov	r3, r2
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060de:	f7fa fd7d 	bl	8000bdc <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <UART_SetConfig+0x2d4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	@ 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	3332      	adds	r3, #50	@ 0x32
 80060fa:	4a08      	ldr	r2, [pc, #32]	@ (800611c <UART_SetConfig+0x2d4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 0207 	and.w	r2, r3, #7
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4422      	add	r2, r4
 800610e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006110:	e106      	b.n	8006320 <UART_SetConfig+0x4d8>
 8006112:	bf00      	nop
 8006114:	40011000 	.word	0x40011000
 8006118:	40011400 	.word	0x40011400
 800611c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800612a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800612e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006132:	4642      	mov	r2, r8
 8006134:	464b      	mov	r3, r9
 8006136:	1891      	adds	r1, r2, r2
 8006138:	6239      	str	r1, [r7, #32]
 800613a:	415b      	adcs	r3, r3
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
 800613e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006142:	4641      	mov	r1, r8
 8006144:	1854      	adds	r4, r2, r1
 8006146:	4649      	mov	r1, r9
 8006148:	eb43 0501 	adc.w	r5, r3, r1
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006168:	464b      	mov	r3, r9
 800616a:	eb45 0303 	adc.w	r3, r5, r3
 800616e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800617e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800618e:	4629      	mov	r1, r5
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	4621      	mov	r1, r4
 8006194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006198:	4621      	mov	r1, r4
 800619a:	008a      	lsls	r2, r1, #2
 800619c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061a0:	f7fa fd1c 	bl	8000bdc <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b60      	ldr	r3, [pc, #384]	@ (800632c <UART_SetConfig+0x4e4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	61b9      	str	r1, [r7, #24]
 80061cc:	415b      	adcs	r3, r3
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6139      	str	r1, [r7, #16]
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800621e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800622c:	4649      	mov	r1, r9
 800622e:	008b      	lsls	r3, r1, #2
 8006230:	4641      	mov	r1, r8
 8006232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006236:	4641      	mov	r1, r8
 8006238:	008a      	lsls	r2, r1, #2
 800623a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800623e:	f7fa fccd 	bl	8000bdc <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4611      	mov	r1, r2
 8006248:	4b38      	ldr	r3, [pc, #224]	@ (800632c <UART_SetConfig+0x4e4>)
 800624a:	fba3 2301 	umull	r2, r3, r3, r1
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2264      	movs	r2, #100	@ 0x64
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	3332      	adds	r3, #50	@ 0x32
 800625c:	4a33      	ldr	r2, [pc, #204]	@ (800632c <UART_SetConfig+0x4e4>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006268:	441c      	add	r4, r3
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626e:	2200      	movs	r2, #0
 8006270:	673b      	str	r3, [r7, #112]	@ 0x70
 8006272:	677a      	str	r2, [r7, #116]	@ 0x74
 8006274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	415b      	adcs	r3, r3
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006288:	4641      	mov	r1, r8
 800628a:	1851      	adds	r1, r2, r1
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	4649      	mov	r1, r9
 8006290:	414b      	adcs	r3, r1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062a0:	4659      	mov	r1, fp
 80062a2:	00cb      	lsls	r3, r1, #3
 80062a4:	4651      	mov	r1, sl
 80062a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062aa:	4651      	mov	r1, sl
 80062ac:	00ca      	lsls	r2, r1, #3
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4642      	mov	r2, r8
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ba:	464b      	mov	r3, r9
 80062bc:	460a      	mov	r2, r1
 80062be:	eb42 0303 	adc.w	r3, r2, r3
 80062c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062dc:	4649      	mov	r1, r9
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	4641      	mov	r1, r8
 80062e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e6:	4641      	mov	r1, r8
 80062e8:	008a      	lsls	r2, r1, #2
 80062ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062ee:	f7fa fc75 	bl	8000bdc <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <UART_SetConfig+0x4e4>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	@ 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	3332      	adds	r3, #50	@ 0x32
 800630a:	4a08      	ldr	r2, [pc, #32]	@ (800632c <UART_SetConfig+0x4e4>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4422      	add	r2, r4
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006326:	46bd      	mov	sp, r7
 8006328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632c:	51eb851f 	.word	0x51eb851f

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	@ (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 b82d 	b.w	8006394 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	20000020 	.word	0x20000020

08006340 <free>:
 8006340:	4b02      	ldr	r3, [pc, #8]	@ (800634c <free+0xc>)
 8006342:	4601      	mov	r1, r0
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	f000 bbb9 	b.w	8006abc <_free_r>
 800634a:	bf00      	nop
 800634c:	20000020 	.word	0x20000020

08006350 <sbrk_aligned>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	4e0f      	ldr	r6, [pc, #60]	@ (8006390 <sbrk_aligned+0x40>)
 8006354:	460c      	mov	r4, r1
 8006356:	6831      	ldr	r1, [r6, #0]
 8006358:	4605      	mov	r5, r0
 800635a:	b911      	cbnz	r1, 8006362 <sbrk_aligned+0x12>
 800635c:	f000 fb5e 	bl	8006a1c <_sbrk_r>
 8006360:	6030      	str	r0, [r6, #0]
 8006362:	4621      	mov	r1, r4
 8006364:	4628      	mov	r0, r5
 8006366:	f000 fb59 	bl	8006a1c <_sbrk_r>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	d103      	bne.n	8006376 <sbrk_aligned+0x26>
 800636e:	f04f 34ff 	mov.w	r4, #4294967295
 8006372:	4620      	mov	r0, r4
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	1cc4      	adds	r4, r0, #3
 8006378:	f024 0403 	bic.w	r4, r4, #3
 800637c:	42a0      	cmp	r0, r4
 800637e:	d0f8      	beq.n	8006372 <sbrk_aligned+0x22>
 8006380:	1a21      	subs	r1, r4, r0
 8006382:	4628      	mov	r0, r5
 8006384:	f000 fb4a 	bl	8006a1c <_sbrk_r>
 8006388:	3001      	adds	r0, #1
 800638a:	d1f2      	bne.n	8006372 <sbrk_aligned+0x22>
 800638c:	e7ef      	b.n	800636e <sbrk_aligned+0x1e>
 800638e:	bf00      	nop
 8006390:	20000200 	.word	0x20000200

08006394 <_malloc_r>:
 8006394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006398:	1ccd      	adds	r5, r1, #3
 800639a:	f025 0503 	bic.w	r5, r5, #3
 800639e:	3508      	adds	r5, #8
 80063a0:	2d0c      	cmp	r5, #12
 80063a2:	bf38      	it	cc
 80063a4:	250c      	movcc	r5, #12
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	4606      	mov	r6, r0
 80063aa:	db01      	blt.n	80063b0 <_malloc_r+0x1c>
 80063ac:	42a9      	cmp	r1, r5
 80063ae:	d904      	bls.n	80063ba <_malloc_r+0x26>
 80063b0:	230c      	movs	r3, #12
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	2000      	movs	r0, #0
 80063b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006490 <_malloc_r+0xfc>
 80063be:	f000 f869 	bl	8006494 <__malloc_lock>
 80063c2:	f8d8 3000 	ldr.w	r3, [r8]
 80063c6:	461c      	mov	r4, r3
 80063c8:	bb44      	cbnz	r4, 800641c <_malloc_r+0x88>
 80063ca:	4629      	mov	r1, r5
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff ffbf 	bl	8006350 <sbrk_aligned>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	4604      	mov	r4, r0
 80063d6:	d158      	bne.n	800648a <_malloc_r+0xf6>
 80063d8:	f8d8 4000 	ldr.w	r4, [r8]
 80063dc:	4627      	mov	r7, r4
 80063de:	2f00      	cmp	r7, #0
 80063e0:	d143      	bne.n	800646a <_malloc_r+0xd6>
 80063e2:	2c00      	cmp	r4, #0
 80063e4:	d04b      	beq.n	800647e <_malloc_r+0xea>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	4639      	mov	r1, r7
 80063ea:	4630      	mov	r0, r6
 80063ec:	eb04 0903 	add.w	r9, r4, r3
 80063f0:	f000 fb14 	bl	8006a1c <_sbrk_r>
 80063f4:	4581      	cmp	r9, r0
 80063f6:	d142      	bne.n	800647e <_malloc_r+0xea>
 80063f8:	6821      	ldr	r1, [r4, #0]
 80063fa:	1a6d      	subs	r5, r5, r1
 80063fc:	4629      	mov	r1, r5
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ffa6 	bl	8006350 <sbrk_aligned>
 8006404:	3001      	adds	r0, #1
 8006406:	d03a      	beq.n	800647e <_malloc_r+0xea>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	442b      	add	r3, r5
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	f8d8 3000 	ldr.w	r3, [r8]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	bb62      	cbnz	r2, 8006470 <_malloc_r+0xdc>
 8006416:	f8c8 7000 	str.w	r7, [r8]
 800641a:	e00f      	b.n	800643c <_malloc_r+0xa8>
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	1b52      	subs	r2, r2, r5
 8006420:	d420      	bmi.n	8006464 <_malloc_r+0xd0>
 8006422:	2a0b      	cmp	r2, #11
 8006424:	d917      	bls.n	8006456 <_malloc_r+0xc2>
 8006426:	1961      	adds	r1, r4, r5
 8006428:	42a3      	cmp	r3, r4
 800642a:	6025      	str	r5, [r4, #0]
 800642c:	bf18      	it	ne
 800642e:	6059      	strne	r1, [r3, #4]
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	bf08      	it	eq
 8006434:	f8c8 1000 	streq.w	r1, [r8]
 8006438:	5162      	str	r2, [r4, r5]
 800643a:	604b      	str	r3, [r1, #4]
 800643c:	4630      	mov	r0, r6
 800643e:	f000 f82f 	bl	80064a0 <__malloc_unlock>
 8006442:	f104 000b 	add.w	r0, r4, #11
 8006446:	1d23      	adds	r3, r4, #4
 8006448:	f020 0007 	bic.w	r0, r0, #7
 800644c:	1ac2      	subs	r2, r0, r3
 800644e:	bf1c      	itt	ne
 8006450:	1a1b      	subne	r3, r3, r0
 8006452:	50a3      	strne	r3, [r4, r2]
 8006454:	e7af      	b.n	80063b6 <_malloc_r+0x22>
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	42a3      	cmp	r3, r4
 800645a:	bf0c      	ite	eq
 800645c:	f8c8 2000 	streq.w	r2, [r8]
 8006460:	605a      	strne	r2, [r3, #4]
 8006462:	e7eb      	b.n	800643c <_malloc_r+0xa8>
 8006464:	4623      	mov	r3, r4
 8006466:	6864      	ldr	r4, [r4, #4]
 8006468:	e7ae      	b.n	80063c8 <_malloc_r+0x34>
 800646a:	463c      	mov	r4, r7
 800646c:	687f      	ldr	r7, [r7, #4]
 800646e:	e7b6      	b.n	80063de <_malloc_r+0x4a>
 8006470:	461a      	mov	r2, r3
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	42a3      	cmp	r3, r4
 8006476:	d1fb      	bne.n	8006470 <_malloc_r+0xdc>
 8006478:	2300      	movs	r3, #0
 800647a:	6053      	str	r3, [r2, #4]
 800647c:	e7de      	b.n	800643c <_malloc_r+0xa8>
 800647e:	230c      	movs	r3, #12
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f80c 	bl	80064a0 <__malloc_unlock>
 8006488:	e794      	b.n	80063b4 <_malloc_r+0x20>
 800648a:	6005      	str	r5, [r0, #0]
 800648c:	e7d6      	b.n	800643c <_malloc_r+0xa8>
 800648e:	bf00      	nop
 8006490:	20000204 	.word	0x20000204

08006494 <__malloc_lock>:
 8006494:	4801      	ldr	r0, [pc, #4]	@ (800649c <__malloc_lock+0x8>)
 8006496:	f000 bb0e 	b.w	8006ab6 <__retarget_lock_acquire_recursive>
 800649a:	bf00      	nop
 800649c:	20000348 	.word	0x20000348

080064a0 <__malloc_unlock>:
 80064a0:	4801      	ldr	r0, [pc, #4]	@ (80064a8 <__malloc_unlock+0x8>)
 80064a2:	f000 bb09 	b.w	8006ab8 <__retarget_lock_release_recursive>
 80064a6:	bf00      	nop
 80064a8:	20000348 	.word	0x20000348

080064ac <std>:
 80064ac:	2300      	movs	r3, #0
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	e9c0 3300 	strd	r3, r3, [r0]
 80064b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ba:	6083      	str	r3, [r0, #8]
 80064bc:	8181      	strh	r1, [r0, #12]
 80064be:	6643      	str	r3, [r0, #100]	@ 0x64
 80064c0:	81c2      	strh	r2, [r0, #14]
 80064c2:	6183      	str	r3, [r0, #24]
 80064c4:	4619      	mov	r1, r3
 80064c6:	2208      	movs	r2, #8
 80064c8:	305c      	adds	r0, #92	@ 0x5c
 80064ca:	f000 fa59 	bl	8006980 <memset>
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x58>)
 80064d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x5c>)
 80064d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x60>)
 80064d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x64>)
 80064dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <std+0x68>)
 80064e0:	6224      	str	r4, [r4, #32]
 80064e2:	429c      	cmp	r4, r3
 80064e4:	d006      	beq.n	80064f4 <std+0x48>
 80064e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ea:	4294      	cmp	r4, r2
 80064ec:	d002      	beq.n	80064f4 <std+0x48>
 80064ee:	33d0      	adds	r3, #208	@ 0xd0
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d105      	bne.n	8006500 <std+0x54>
 80064f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f000 bada 	b.w	8006ab4 <__retarget_lock_init_recursive>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	bf00      	nop
 8006504:	080067cd 	.word	0x080067cd
 8006508:	080067f3 	.word	0x080067f3
 800650c:	0800682b 	.word	0x0800682b
 8006510:	0800684f 	.word	0x0800684f
 8006514:	20000208 	.word	0x20000208

08006518 <stdio_exit_handler>:
 8006518:	4a02      	ldr	r2, [pc, #8]	@ (8006524 <stdio_exit_handler+0xc>)
 800651a:	4903      	ldr	r1, [pc, #12]	@ (8006528 <stdio_exit_handler+0x10>)
 800651c:	4803      	ldr	r0, [pc, #12]	@ (800652c <stdio_exit_handler+0x14>)
 800651e:	f000 b869 	b.w	80065f4 <_fwalk_sglue>
 8006522:	bf00      	nop
 8006524:	20000014 	.word	0x20000014
 8006528:	08007add 	.word	0x08007add
 800652c:	20000024 	.word	0x20000024

08006530 <cleanup_stdio>:
 8006530:	6841      	ldr	r1, [r0, #4]
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <cleanup_stdio+0x34>)
 8006534:	4299      	cmp	r1, r3
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	d001      	beq.n	8006540 <cleanup_stdio+0x10>
 800653c:	f001 face 	bl	8007adc <_fflush_r>
 8006540:	68a1      	ldr	r1, [r4, #8]
 8006542:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <cleanup_stdio+0x38>)
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <cleanup_stdio+0x1e>
 8006548:	4620      	mov	r0, r4
 800654a:	f001 fac7 	bl	8007adc <_fflush_r>
 800654e:	68e1      	ldr	r1, [r4, #12]
 8006550:	4b06      	ldr	r3, [pc, #24]	@ (800656c <cleanup_stdio+0x3c>)
 8006552:	4299      	cmp	r1, r3
 8006554:	d004      	beq.n	8006560 <cleanup_stdio+0x30>
 8006556:	4620      	mov	r0, r4
 8006558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655c:	f001 babe 	b.w	8007adc <_fflush_r>
 8006560:	bd10      	pop	{r4, pc}
 8006562:	bf00      	nop
 8006564:	20000208 	.word	0x20000208
 8006568:	20000270 	.word	0x20000270
 800656c:	200002d8 	.word	0x200002d8

08006570 <global_stdio_init.part.0>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <global_stdio_init.part.0+0x30>)
 8006574:	4c0b      	ldr	r4, [pc, #44]	@ (80065a4 <global_stdio_init.part.0+0x34>)
 8006576:	4a0c      	ldr	r2, [pc, #48]	@ (80065a8 <global_stdio_init.part.0+0x38>)
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	4620      	mov	r0, r4
 800657c:	2200      	movs	r2, #0
 800657e:	2104      	movs	r1, #4
 8006580:	f7ff ff94 	bl	80064ac <std>
 8006584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006588:	2201      	movs	r2, #1
 800658a:	2109      	movs	r1, #9
 800658c:	f7ff ff8e 	bl	80064ac <std>
 8006590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006594:	2202      	movs	r2, #2
 8006596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659a:	2112      	movs	r1, #18
 800659c:	f7ff bf86 	b.w	80064ac <std>
 80065a0:	20000340 	.word	0x20000340
 80065a4:	20000208 	.word	0x20000208
 80065a8:	08006519 	.word	0x08006519

080065ac <__sfp_lock_acquire>:
 80065ac:	4801      	ldr	r0, [pc, #4]	@ (80065b4 <__sfp_lock_acquire+0x8>)
 80065ae:	f000 ba82 	b.w	8006ab6 <__retarget_lock_acquire_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000349 	.word	0x20000349

080065b8 <__sfp_lock_release>:
 80065b8:	4801      	ldr	r0, [pc, #4]	@ (80065c0 <__sfp_lock_release+0x8>)
 80065ba:	f000 ba7d 	b.w	8006ab8 <__retarget_lock_release_recursive>
 80065be:	bf00      	nop
 80065c0:	20000349 	.word	0x20000349

080065c4 <__sinit>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	f7ff fff0 	bl	80065ac <__sfp_lock_acquire>
 80065cc:	6a23      	ldr	r3, [r4, #32]
 80065ce:	b11b      	cbz	r3, 80065d8 <__sinit+0x14>
 80065d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d4:	f7ff bff0 	b.w	80065b8 <__sfp_lock_release>
 80065d8:	4b04      	ldr	r3, [pc, #16]	@ (80065ec <__sinit+0x28>)
 80065da:	6223      	str	r3, [r4, #32]
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <__sinit+0x2c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f5      	bne.n	80065d0 <__sinit+0xc>
 80065e4:	f7ff ffc4 	bl	8006570 <global_stdio_init.part.0>
 80065e8:	e7f2      	b.n	80065d0 <__sinit+0xc>
 80065ea:	bf00      	nop
 80065ec:	08006531 	.word	0x08006531
 80065f0:	20000340 	.word	0x20000340

080065f4 <_fwalk_sglue>:
 80065f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f8:	4607      	mov	r7, r0
 80065fa:	4688      	mov	r8, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	2600      	movs	r6, #0
 8006600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006604:	f1b9 0901 	subs.w	r9, r9, #1
 8006608:	d505      	bpl.n	8006616 <_fwalk_sglue+0x22>
 800660a:	6824      	ldr	r4, [r4, #0]
 800660c:	2c00      	cmp	r4, #0
 800660e:	d1f7      	bne.n	8006600 <_fwalk_sglue+0xc>
 8006610:	4630      	mov	r0, r6
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d907      	bls.n	800662c <_fwalk_sglue+0x38>
 800661c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006620:	3301      	adds	r3, #1
 8006622:	d003      	beq.n	800662c <_fwalk_sglue+0x38>
 8006624:	4629      	mov	r1, r5
 8006626:	4638      	mov	r0, r7
 8006628:	47c0      	blx	r8
 800662a:	4306      	orrs	r6, r0
 800662c:	3568      	adds	r5, #104	@ 0x68
 800662e:	e7e9      	b.n	8006604 <_fwalk_sglue+0x10>

08006630 <iprintf>:
 8006630:	b40f      	push	{r0, r1, r2, r3}
 8006632:	b507      	push	{r0, r1, r2, lr}
 8006634:	4906      	ldr	r1, [pc, #24]	@ (8006650 <iprintf+0x20>)
 8006636:	ab04      	add	r3, sp, #16
 8006638:	6808      	ldr	r0, [r1, #0]
 800663a:	f853 2b04 	ldr.w	r2, [r3], #4
 800663e:	6881      	ldr	r1, [r0, #8]
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	f000 fdd3 	bl	80071ec <_vfiprintf_r>
 8006646:	b003      	add	sp, #12
 8006648:	f85d eb04 	ldr.w	lr, [sp], #4
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	20000020 	.word	0x20000020

08006654 <_puts_r>:
 8006654:	6a03      	ldr	r3, [r0, #32]
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	6884      	ldr	r4, [r0, #8]
 800665a:	4605      	mov	r5, r0
 800665c:	460e      	mov	r6, r1
 800665e:	b90b      	cbnz	r3, 8006664 <_puts_r+0x10>
 8006660:	f7ff ffb0 	bl	80065c4 <__sinit>
 8006664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d405      	bmi.n	8006676 <_puts_r+0x22>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	0598      	lsls	r0, r3, #22
 800666e:	d402      	bmi.n	8006676 <_puts_r+0x22>
 8006670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006672:	f000 fa20 	bl	8006ab6 <__retarget_lock_acquire_recursive>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	0719      	lsls	r1, r3, #28
 800667a:	d502      	bpl.n	8006682 <_puts_r+0x2e>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d135      	bne.n	80066ee <_puts_r+0x9a>
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 f925 	bl	80068d4 <__swsetup_r>
 800668a:	b380      	cbz	r0, 80066ee <_puts_r+0x9a>
 800668c:	f04f 35ff 	mov.w	r5, #4294967295
 8006690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006692:	07da      	lsls	r2, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_puts_r+0x4e>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	059b      	lsls	r3, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_puts_r+0x4e>
 800669c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800669e:	f000 fa0b 	bl	8006ab8 <__retarget_lock_release_recursive>
 80066a2:	4628      	mov	r0, r5
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da04      	bge.n	80066b4 <_puts_r+0x60>
 80066aa:	69a2      	ldr	r2, [r4, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	dc17      	bgt.n	80066e0 <_puts_r+0x8c>
 80066b0:	290a      	cmp	r1, #10
 80066b2:	d015      	beq.n	80066e0 <_puts_r+0x8c>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	7019      	strb	r1, [r3, #0]
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d1ed      	bne.n	80066a6 <_puts_r+0x52>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da11      	bge.n	80066f2 <_puts_r+0x9e>
 80066ce:	4622      	mov	r2, r4
 80066d0:	210a      	movs	r1, #10
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f8bf 	bl	8006856 <__swbuf_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	d0d7      	beq.n	800668c <_puts_r+0x38>
 80066dc:	250a      	movs	r5, #10
 80066de:	e7d7      	b.n	8006690 <_puts_r+0x3c>
 80066e0:	4622      	mov	r2, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 f8b7 	bl	8006856 <__swbuf_r>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d1e7      	bne.n	80066bc <_puts_r+0x68>
 80066ec:	e7ce      	b.n	800668c <_puts_r+0x38>
 80066ee:	3e01      	subs	r6, #1
 80066f0:	e7e4      	b.n	80066bc <_puts_r+0x68>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	220a      	movs	r2, #10
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	e7ee      	b.n	80066dc <_puts_r+0x88>
	...

08006700 <puts>:
 8006700:	4b02      	ldr	r3, [pc, #8]	@ (800670c <puts+0xc>)
 8006702:	4601      	mov	r1, r0
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	f7ff bfa5 	b.w	8006654 <_puts_r>
 800670a:	bf00      	nop
 800670c:	20000020 	.word	0x20000020

08006710 <sniprintf>:
 8006710:	b40c      	push	{r2, r3}
 8006712:	b530      	push	{r4, r5, lr}
 8006714:	4b17      	ldr	r3, [pc, #92]	@ (8006774 <sniprintf+0x64>)
 8006716:	1e0c      	subs	r4, r1, #0
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	b09d      	sub	sp, #116	@ 0x74
 800671c:	da08      	bge.n	8006730 <sniprintf+0x20>
 800671e:	238b      	movs	r3, #139	@ 0x8b
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b01d      	add	sp, #116	@ 0x74
 8006728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800672c:	b002      	add	sp, #8
 800672e:	4770      	bx	lr
 8006730:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006734:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006738:	bf14      	ite	ne
 800673a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800673e:	4623      	moveq	r3, r4
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	9307      	str	r3, [sp, #28]
 8006744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	9006      	str	r0, [sp, #24]
 800674c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006750:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006752:	ab21      	add	r3, sp, #132	@ 0x84
 8006754:	a902      	add	r1, sp, #8
 8006756:	4628      	mov	r0, r5
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	f000 fa55 	bl	8006c08 <_svfiprintf_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	bfbc      	itt	lt
 8006762:	238b      	movlt	r3, #139	@ 0x8b
 8006764:	602b      	strlt	r3, [r5, #0]
 8006766:	2c00      	cmp	r4, #0
 8006768:	d0dd      	beq.n	8006726 <sniprintf+0x16>
 800676a:	9b02      	ldr	r3, [sp, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e7d9      	b.n	8006726 <sniprintf+0x16>
 8006772:	bf00      	nop
 8006774:	20000020 	.word	0x20000020

08006778 <siscanf>:
 8006778:	b40e      	push	{r1, r2, r3}
 800677a:	b530      	push	{r4, r5, lr}
 800677c:	b09c      	sub	sp, #112	@ 0x70
 800677e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006780:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006784:	f854 5b04 	ldr.w	r5, [r4], #4
 8006788:	f8ad 2014 	strh.w	r2, [sp, #20]
 800678c:	9002      	str	r0, [sp, #8]
 800678e:	9006      	str	r0, [sp, #24]
 8006790:	f7f9 fd3e 	bl	8000210 <strlen>
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <siscanf+0x4c>)
 8006796:	9003      	str	r0, [sp, #12]
 8006798:	9007      	str	r0, [sp, #28]
 800679a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800679c:	480a      	ldr	r0, [pc, #40]	@ (80067c8 <siscanf+0x50>)
 800679e:	9401      	str	r4, [sp, #4]
 80067a0:	2300      	movs	r3, #0
 80067a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80067a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067ae:	462a      	mov	r2, r5
 80067b0:	4623      	mov	r3, r4
 80067b2:	a902      	add	r1, sp, #8
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f000 fb7b 	bl	8006eb0 <__ssvfiscanf_r>
 80067ba:	b01c      	add	sp, #112	@ 0x70
 80067bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c0:	b003      	add	sp, #12
 80067c2:	4770      	bx	lr
 80067c4:	080067ef 	.word	0x080067ef
 80067c8:	20000020 	.word	0x20000020

080067cc <__sread>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	f000 f910 	bl	80069f8 <_read_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	bfab      	itete	ge
 80067dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067de:	89a3      	ldrhlt	r3, [r4, #12]
 80067e0:	181b      	addge	r3, r3, r0
 80067e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067e6:	bfac      	ite	ge
 80067e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067ea:	81a3      	strhlt	r3, [r4, #12]
 80067ec:	bd10      	pop	{r4, pc}

080067ee <__seofread>:
 80067ee:	2000      	movs	r0, #0
 80067f0:	4770      	bx	lr

080067f2 <__swrite>:
 80067f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f6:	461f      	mov	r7, r3
 80067f8:	898b      	ldrh	r3, [r1, #12]
 80067fa:	05db      	lsls	r3, r3, #23
 80067fc:	4605      	mov	r5, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	4616      	mov	r6, r2
 8006802:	d505      	bpl.n	8006810 <__swrite+0x1e>
 8006804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006808:	2302      	movs	r3, #2
 800680a:	2200      	movs	r2, #0
 800680c:	f000 f8e2 	bl	80069d4 <_lseek_r>
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	4632      	mov	r2, r6
 800681e:	463b      	mov	r3, r7
 8006820:	4628      	mov	r0, r5
 8006822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	f000 b909 	b.w	8006a3c <_write_r>

0800682a <__sseek>:
 800682a:	b510      	push	{r4, lr}
 800682c:	460c      	mov	r4, r1
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	f000 f8cf 	bl	80069d4 <_lseek_r>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	bf15      	itete	ne
 800683c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800683e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006846:	81a3      	strheq	r3, [r4, #12]
 8006848:	bf18      	it	ne
 800684a:	81a3      	strhne	r3, [r4, #12]
 800684c:	bd10      	pop	{r4, pc}

0800684e <__sclose>:
 800684e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006852:	f000 b8af 	b.w	80069b4 <_close_r>

08006856 <__swbuf_r>:
 8006856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006858:	460e      	mov	r6, r1
 800685a:	4614      	mov	r4, r2
 800685c:	4605      	mov	r5, r0
 800685e:	b118      	cbz	r0, 8006868 <__swbuf_r+0x12>
 8006860:	6a03      	ldr	r3, [r0, #32]
 8006862:	b90b      	cbnz	r3, 8006868 <__swbuf_r+0x12>
 8006864:	f7ff feae 	bl	80065c4 <__sinit>
 8006868:	69a3      	ldr	r3, [r4, #24]
 800686a:	60a3      	str	r3, [r4, #8]
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	071a      	lsls	r2, r3, #28
 8006870:	d501      	bpl.n	8006876 <__swbuf_r+0x20>
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	b943      	cbnz	r3, 8006888 <__swbuf_r+0x32>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f82b 	bl	80068d4 <__swsetup_r>
 800687e:	b118      	cbz	r0, 8006888 <__swbuf_r+0x32>
 8006880:	f04f 37ff 	mov.w	r7, #4294967295
 8006884:	4638      	mov	r0, r7
 8006886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	6922      	ldr	r2, [r4, #16]
 800688c:	1a98      	subs	r0, r3, r2
 800688e:	6963      	ldr	r3, [r4, #20]
 8006890:	b2f6      	uxtb	r6, r6
 8006892:	4283      	cmp	r3, r0
 8006894:	4637      	mov	r7, r6
 8006896:	dc05      	bgt.n	80068a4 <__swbuf_r+0x4e>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f001 f91e 	bl	8007adc <_fflush_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1ed      	bne.n	8006880 <__swbuf_r+0x2a>
 80068a4:	68a3      	ldr	r3, [r4, #8]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	60a3      	str	r3, [r4, #8]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	6022      	str	r2, [r4, #0]
 80068b0:	701e      	strb	r6, [r3, #0]
 80068b2:	6962      	ldr	r2, [r4, #20]
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d004      	beq.n	80068c4 <__swbuf_r+0x6e>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	07db      	lsls	r3, r3, #31
 80068be:	d5e1      	bpl.n	8006884 <__swbuf_r+0x2e>
 80068c0:	2e0a      	cmp	r6, #10
 80068c2:	d1df      	bne.n	8006884 <__swbuf_r+0x2e>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f001 f908 	bl	8007adc <_fflush_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d0d9      	beq.n	8006884 <__swbuf_r+0x2e>
 80068d0:	e7d6      	b.n	8006880 <__swbuf_r+0x2a>
	...

080068d4 <__swsetup_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4b29      	ldr	r3, [pc, #164]	@ (800697c <__swsetup_r+0xa8>)
 80068d8:	4605      	mov	r5, r0
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	460c      	mov	r4, r1
 80068de:	b118      	cbz	r0, 80068e8 <__swsetup_r+0x14>
 80068e0:	6a03      	ldr	r3, [r0, #32]
 80068e2:	b90b      	cbnz	r3, 80068e8 <__swsetup_r+0x14>
 80068e4:	f7ff fe6e 	bl	80065c4 <__sinit>
 80068e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ec:	0719      	lsls	r1, r3, #28
 80068ee:	d422      	bmi.n	8006936 <__swsetup_r+0x62>
 80068f0:	06da      	lsls	r2, r3, #27
 80068f2:	d407      	bmi.n	8006904 <__swsetup_r+0x30>
 80068f4:	2209      	movs	r2, #9
 80068f6:	602a      	str	r2, [r5, #0]
 80068f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	e033      	b.n	800696c <__swsetup_r+0x98>
 8006904:	0758      	lsls	r0, r3, #29
 8006906:	d512      	bpl.n	800692e <__swsetup_r+0x5a>
 8006908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800690a:	b141      	cbz	r1, 800691e <__swsetup_r+0x4a>
 800690c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006910:	4299      	cmp	r1, r3
 8006912:	d002      	beq.n	800691a <__swsetup_r+0x46>
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f8d1 	bl	8006abc <_free_r>
 800691a:	2300      	movs	r3, #0
 800691c:	6363      	str	r3, [r4, #52]	@ 0x34
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	2300      	movs	r3, #0
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f043 0308 	orr.w	r3, r3, #8
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	b94b      	cbnz	r3, 800694e <__swsetup_r+0x7a>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006944:	d003      	beq.n	800694e <__swsetup_r+0x7a>
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f001 f915 	bl	8007b78 <__smakebuf_r>
 800694e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006952:	f013 0201 	ands.w	r2, r3, #1
 8006956:	d00a      	beq.n	800696e <__swsetup_r+0x9a>
 8006958:	2200      	movs	r2, #0
 800695a:	60a2      	str	r2, [r4, #8]
 800695c:	6962      	ldr	r2, [r4, #20]
 800695e:	4252      	negs	r2, r2
 8006960:	61a2      	str	r2, [r4, #24]
 8006962:	6922      	ldr	r2, [r4, #16]
 8006964:	b942      	cbnz	r2, 8006978 <__swsetup_r+0xa4>
 8006966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800696a:	d1c5      	bne.n	80068f8 <__swsetup_r+0x24>
 800696c:	bd38      	pop	{r3, r4, r5, pc}
 800696e:	0799      	lsls	r1, r3, #30
 8006970:	bf58      	it	pl
 8006972:	6962      	ldrpl	r2, [r4, #20]
 8006974:	60a2      	str	r2, [r4, #8]
 8006976:	e7f4      	b.n	8006962 <__swsetup_r+0x8e>
 8006978:	2000      	movs	r0, #0
 800697a:	e7f7      	b.n	800696c <__swsetup_r+0x98>
 800697c:	20000020 	.word	0x20000020

08006980 <memset>:
 8006980:	4402      	add	r2, r0
 8006982:	4603      	mov	r3, r0
 8006984:	4293      	cmp	r3, r2
 8006986:	d100      	bne.n	800698a <memset+0xa>
 8006988:	4770      	bx	lr
 800698a:	f803 1b01 	strb.w	r1, [r3], #1
 800698e:	e7f9      	b.n	8006984 <memset+0x4>

08006990 <strncmp>:
 8006990:	b510      	push	{r4, lr}
 8006992:	b16a      	cbz	r2, 80069b0 <strncmp+0x20>
 8006994:	3901      	subs	r1, #1
 8006996:	1884      	adds	r4, r0, r2
 8006998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800699c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d103      	bne.n	80069ac <strncmp+0x1c>
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d001      	beq.n	80069ac <strncmp+0x1c>
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d1f5      	bne.n	8006998 <strncmp+0x8>
 80069ac:	1ad0      	subs	r0, r2, r3
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	4610      	mov	r0, r2
 80069b2:	e7fc      	b.n	80069ae <strncmp+0x1e>

080069b4 <_close_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d06      	ldr	r5, [pc, #24]	@ (80069d0 <_close_r+0x1c>)
 80069b8:	2300      	movs	r3, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fb fcc5 	bl	800234e <_close>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_close_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_close_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20000344 	.word	0x20000344

080069d4 <_lseek_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d07      	ldr	r5, [pc, #28]	@ (80069f4 <_lseek_r+0x20>)
 80069d8:	4604      	mov	r4, r0
 80069da:	4608      	mov	r0, r1
 80069dc:	4611      	mov	r1, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	602a      	str	r2, [r5, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f7fb fcda 	bl	800239c <_lseek>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_lseek_r+0x1e>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_lseek_r+0x1e>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000344 	.word	0x20000344

080069f8 <_read_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	@ (8006a18 <_read_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fb fc68 	bl	80022dc <_read>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_read_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_read_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000344 	.word	0x20000344

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	@ (8006a38 <_sbrk_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fb fcc6 	bl	80023b8 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000344 	.word	0x20000344

08006a3c <_write_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	@ (8006a5c <_write_r+0x20>)
 8006a40:	4604      	mov	r4, r0
 8006a42:	4608      	mov	r0, r1
 8006a44:	4611      	mov	r1, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	602a      	str	r2, [r5, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f7fb fc63 	bl	8002316 <_write>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_write_r+0x1e>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_write_r+0x1e>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	20000344 	.word	0x20000344

08006a60 <__errno>:
 8006a60:	4b01      	ldr	r3, [pc, #4]	@ (8006a68 <__errno+0x8>)
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000020 	.word	0x20000020

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8006aa4 <__libc_init_array+0x38>)
 8006a70:	4c0d      	ldr	r4, [pc, #52]	@ (8006aa8 <__libc_init_array+0x3c>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	2600      	movs	r6, #0
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8006aac <__libc_init_array+0x40>)
 8006a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ab0 <__libc_init_array+0x44>)
 8006a80:	f001 fa96 	bl	8007fb0 <_init>
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	2600      	movs	r6, #0
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	080083fc 	.word	0x080083fc
 8006aa8:	080083fc 	.word	0x080083fc
 8006aac:	080083fc 	.word	0x080083fc
 8006ab0:	08008400 	.word	0x08008400

08006ab4 <__retarget_lock_init_recursive>:
 8006ab4:	4770      	bx	lr

08006ab6 <__retarget_lock_acquire_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <__retarget_lock_release_recursive>:
 8006ab8:	4770      	bx	lr
	...

08006abc <_free_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4605      	mov	r5, r0
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d041      	beq.n	8006b48 <_free_r+0x8c>
 8006ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac8:	1f0c      	subs	r4, r1, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bfb8      	it	lt
 8006ace:	18e4      	addlt	r4, r4, r3
 8006ad0:	f7ff fce0 	bl	8006494 <__malloc_lock>
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b4c <_free_r+0x90>)
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	b933      	cbnz	r3, 8006ae8 <_free_r+0x2c>
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	6014      	str	r4, [r2, #0]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae4:	f7ff bcdc 	b.w	80064a0 <__malloc_unlock>
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d908      	bls.n	8006afe <_free_r+0x42>
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	1821      	adds	r1, r4, r0
 8006af0:	428b      	cmp	r3, r1
 8006af2:	bf01      	itttt	eq
 8006af4:	6819      	ldreq	r1, [r3, #0]
 8006af6:	685b      	ldreq	r3, [r3, #4]
 8006af8:	1809      	addeq	r1, r1, r0
 8006afa:	6021      	streq	r1, [r4, #0]
 8006afc:	e7ed      	b.n	8006ada <_free_r+0x1e>
 8006afe:	461a      	mov	r2, r3
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b10b      	cbz	r3, 8006b08 <_free_r+0x4c>
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d9fa      	bls.n	8006afe <_free_r+0x42>
 8006b08:	6811      	ldr	r1, [r2, #0]
 8006b0a:	1850      	adds	r0, r2, r1
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d10b      	bne.n	8006b28 <_free_r+0x6c>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	4401      	add	r1, r0
 8006b14:	1850      	adds	r0, r2, r1
 8006b16:	4283      	cmp	r3, r0
 8006b18:	6011      	str	r1, [r2, #0]
 8006b1a:	d1e0      	bne.n	8006ade <_free_r+0x22>
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	6053      	str	r3, [r2, #4]
 8006b22:	4408      	add	r0, r1
 8006b24:	6010      	str	r0, [r2, #0]
 8006b26:	e7da      	b.n	8006ade <_free_r+0x22>
 8006b28:	d902      	bls.n	8006b30 <_free_r+0x74>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	e7d6      	b.n	8006ade <_free_r+0x22>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	1821      	adds	r1, r4, r0
 8006b34:	428b      	cmp	r3, r1
 8006b36:	bf04      	itt	eq
 8006b38:	6819      	ldreq	r1, [r3, #0]
 8006b3a:	685b      	ldreq	r3, [r3, #4]
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	bf04      	itt	eq
 8006b40:	1809      	addeq	r1, r1, r0
 8006b42:	6021      	streq	r1, [r4, #0]
 8006b44:	6054      	str	r4, [r2, #4]
 8006b46:	e7ca      	b.n	8006ade <_free_r+0x22>
 8006b48:	bd38      	pop	{r3, r4, r5, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000204 	.word	0x20000204

08006b50 <__ssputs_r>:
 8006b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	688e      	ldr	r6, [r1, #8]
 8006b56:	461f      	mov	r7, r3
 8006b58:	42be      	cmp	r6, r7
 8006b5a:	680b      	ldr	r3, [r1, #0]
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	4690      	mov	r8, r2
 8006b62:	d82d      	bhi.n	8006bc0 <__ssputs_r+0x70>
 8006b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b6c:	d026      	beq.n	8006bbc <__ssputs_r+0x6c>
 8006b6e:	6965      	ldr	r5, [r4, #20]
 8006b70:	6909      	ldr	r1, [r1, #16]
 8006b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b76:	eba3 0901 	sub.w	r9, r3, r1
 8006b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b7e:	1c7b      	adds	r3, r7, #1
 8006b80:	444b      	add	r3, r9
 8006b82:	106d      	asrs	r5, r5, #1
 8006b84:	429d      	cmp	r5, r3
 8006b86:	bf38      	it	cc
 8006b88:	461d      	movcc	r5, r3
 8006b8a:	0553      	lsls	r3, r2, #21
 8006b8c:	d527      	bpl.n	8006bde <__ssputs_r+0x8e>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f7ff fc00 	bl	8006394 <_malloc_r>
 8006b94:	4606      	mov	r6, r0
 8006b96:	b360      	cbz	r0, 8006bf2 <__ssputs_r+0xa2>
 8006b98:	6921      	ldr	r1, [r4, #16]
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	f001 f8d8 	bl	8007d50 <memcpy>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	6126      	str	r6, [r4, #16]
 8006bae:	6165      	str	r5, [r4, #20]
 8006bb0:	444e      	add	r6, r9
 8006bb2:	eba5 0509 	sub.w	r5, r5, r9
 8006bb6:	6026      	str	r6, [r4, #0]
 8006bb8:	60a5      	str	r5, [r4, #8]
 8006bba:	463e      	mov	r6, r7
 8006bbc:	42be      	cmp	r6, r7
 8006bbe:	d900      	bls.n	8006bc2 <__ssputs_r+0x72>
 8006bc0:	463e      	mov	r6, r7
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	f001 f885 	bl	8007cd6 <memmove>
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	1b9b      	subs	r3, r3, r6
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4433      	add	r3, r6
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	462a      	mov	r2, r5
 8006be0:	f001 f8c4 	bl	8007d6c <_realloc_r>
 8006be4:	4606      	mov	r6, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d1e0      	bne.n	8006bac <__ssputs_r+0x5c>
 8006bea:	6921      	ldr	r1, [r4, #16]
 8006bec:	4650      	mov	r0, sl
 8006bee:	f7ff ff65 	bl	8006abc <_free_r>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	f8ca 3000 	str.w	r3, [sl]
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e7e9      	b.n	8006bda <__ssputs_r+0x8a>
	...

08006c08 <_svfiprintf_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4698      	mov	r8, r3
 8006c0e:	898b      	ldrh	r3, [r1, #12]
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	b09d      	sub	sp, #116	@ 0x74
 8006c14:	4607      	mov	r7, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	4614      	mov	r4, r2
 8006c1a:	d510      	bpl.n	8006c3e <_svfiprintf_r+0x36>
 8006c1c:	690b      	ldr	r3, [r1, #16]
 8006c1e:	b973      	cbnz	r3, 8006c3e <_svfiprintf_r+0x36>
 8006c20:	2140      	movs	r1, #64	@ 0x40
 8006c22:	f7ff fbb7 	bl	8006394 <_malloc_r>
 8006c26:	6028      	str	r0, [r5, #0]
 8006c28:	6128      	str	r0, [r5, #16]
 8006c2a:	b930      	cbnz	r0, 8006c3a <_svfiprintf_r+0x32>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	b01d      	add	sp, #116	@ 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	2340      	movs	r3, #64	@ 0x40
 8006c3c:	616b      	str	r3, [r5, #20]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c42:	2320      	movs	r3, #32
 8006c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4c:	2330      	movs	r3, #48	@ 0x30
 8006c4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006dec <_svfiprintf_r+0x1e4>
 8006c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c56:	f04f 0901 	mov.w	r9, #1
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c62:	b10a      	cbz	r2, 8006c68 <_svfiprintf_r+0x60>
 8006c64:	2a25      	cmp	r2, #37	@ 0x25
 8006c66:	d1f9      	bne.n	8006c5c <_svfiprintf_r+0x54>
 8006c68:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6c:	d00b      	beq.n	8006c86 <_svfiprintf_r+0x7e>
 8006c6e:	465b      	mov	r3, fp
 8006c70:	4622      	mov	r2, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ff6b 	bl	8006b50 <__ssputs_r>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f000 80a7 	beq.w	8006dce <_svfiprintf_r+0x1c6>
 8006c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c82:	445a      	add	r2, fp
 8006c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c86:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 809f 	beq.w	8006dce <_svfiprintf_r+0x1c6>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f04f 32ff 	mov.w	r2, #4294967295
 8006c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9a:	f10a 0a01 	add.w	sl, sl, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2205      	movs	r2, #5
 8006cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb0:	484e      	ldr	r0, [pc, #312]	@ (8006dec <_svfiprintf_r+0x1e4>)
 8006cb2:	f7f9 fab5 	bl	8000220 <memchr>
 8006cb6:	9a04      	ldr	r2, [sp, #16]
 8006cb8:	b9d8      	cbnz	r0, 8006cf2 <_svfiprintf_r+0xea>
 8006cba:	06d0      	lsls	r0, r2, #27
 8006cbc:	bf44      	itt	mi
 8006cbe:	2320      	movmi	r3, #32
 8006cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc4:	0711      	lsls	r1, r2, #28
 8006cc6:	bf44      	itt	mi
 8006cc8:	232b      	movmi	r3, #43	@ 0x2b
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cce:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd4:	d015      	beq.n	8006d02 <_svfiprintf_r+0xfa>
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	4654      	mov	r4, sl
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f04f 0c0a 	mov.w	ip, #10
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce6:	3b30      	subs	r3, #48	@ 0x30
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d94b      	bls.n	8006d84 <_svfiprintf_r+0x17c>
 8006cec:	b1b0      	cbz	r0, 8006d1c <_svfiprintf_r+0x114>
 8006cee:	9207      	str	r2, [sp, #28]
 8006cf0:	e014      	b.n	8006d1c <_svfiprintf_r+0x114>
 8006cf2:	eba0 0308 	sub.w	r3, r0, r8
 8006cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	46a2      	mov	sl, r4
 8006d00:	e7d2      	b.n	8006ca8 <_svfiprintf_r+0xa0>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d19      	adds	r1, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9103      	str	r1, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfbb      	ittet	lt
 8006d0e:	425b      	neglt	r3, r3
 8006d10:	f042 0202 	orrlt.w	r2, r2, #2
 8006d14:	9307      	strge	r3, [sp, #28]
 8006d16:	9307      	strlt	r3, [sp, #28]
 8006d18:	bfb8      	it	lt
 8006d1a:	9204      	strlt	r2, [sp, #16]
 8006d1c:	7823      	ldrb	r3, [r4, #0]
 8006d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d20:	d10a      	bne.n	8006d38 <_svfiprintf_r+0x130>
 8006d22:	7863      	ldrb	r3, [r4, #1]
 8006d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d26:	d132      	bne.n	8006d8e <_svfiprintf_r+0x186>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	1d1a      	adds	r2, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	9203      	str	r2, [sp, #12]
 8006d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d34:	3402      	adds	r4, #2
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dfc <_svfiprintf_r+0x1f4>
 8006d3c:	7821      	ldrb	r1, [r4, #0]
 8006d3e:	2203      	movs	r2, #3
 8006d40:	4650      	mov	r0, sl
 8006d42:	f7f9 fa6d 	bl	8000220 <memchr>
 8006d46:	b138      	cbz	r0, 8006d58 <_svfiprintf_r+0x150>
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	eba0 000a 	sub.w	r0, r0, sl
 8006d4e:	2240      	movs	r2, #64	@ 0x40
 8006d50:	4082      	lsls	r2, r0
 8006d52:	4313      	orrs	r3, r2
 8006d54:	3401      	adds	r4, #1
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5c:	4824      	ldr	r0, [pc, #144]	@ (8006df0 <_svfiprintf_r+0x1e8>)
 8006d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d62:	2206      	movs	r2, #6
 8006d64:	f7f9 fa5c 	bl	8000220 <memchr>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d036      	beq.n	8006dda <_svfiprintf_r+0x1d2>
 8006d6c:	4b21      	ldr	r3, [pc, #132]	@ (8006df4 <_svfiprintf_r+0x1ec>)
 8006d6e:	bb1b      	cbnz	r3, 8006db8 <_svfiprintf_r+0x1b0>
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	3307      	adds	r3, #7
 8006d74:	f023 0307 	bic.w	r3, r3, #7
 8006d78:	3308      	adds	r3, #8
 8006d7a:	9303      	str	r3, [sp, #12]
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	4433      	add	r3, r6
 8006d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d82:	e76a      	b.n	8006c5a <_svfiprintf_r+0x52>
 8006d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d88:	460c      	mov	r4, r1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	e7a8      	b.n	8006ce0 <_svfiprintf_r+0xd8>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	3401      	adds	r4, #1
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	4619      	mov	r1, r3
 8006d96:	f04f 0c0a 	mov.w	ip, #10
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da0:	3a30      	subs	r2, #48	@ 0x30
 8006da2:	2a09      	cmp	r2, #9
 8006da4:	d903      	bls.n	8006dae <_svfiprintf_r+0x1a6>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0c6      	beq.n	8006d38 <_svfiprintf_r+0x130>
 8006daa:	9105      	str	r1, [sp, #20]
 8006dac:	e7c4      	b.n	8006d38 <_svfiprintf_r+0x130>
 8006dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db2:	4604      	mov	r4, r0
 8006db4:	2301      	movs	r3, #1
 8006db6:	e7f0      	b.n	8006d9a <_svfiprintf_r+0x192>
 8006db8:	ab03      	add	r3, sp, #12
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <_svfiprintf_r+0x1f0>)
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f3af 8000 	nop.w
 8006dc8:	1c42      	adds	r2, r0, #1
 8006dca:	4606      	mov	r6, r0
 8006dcc:	d1d6      	bne.n	8006d7c <_svfiprintf_r+0x174>
 8006dce:	89ab      	ldrh	r3, [r5, #12]
 8006dd0:	065b      	lsls	r3, r3, #25
 8006dd2:	f53f af2d 	bmi.w	8006c30 <_svfiprintf_r+0x28>
 8006dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dd8:	e72c      	b.n	8006c34 <_svfiprintf_r+0x2c>
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	462a      	mov	r2, r5
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <_svfiprintf_r+0x1f0>)
 8006de2:	a904      	add	r1, sp, #16
 8006de4:	4638      	mov	r0, r7
 8006de6:	f000 fb87 	bl	80074f8 <_printf_i>
 8006dea:	e7ed      	b.n	8006dc8 <_svfiprintf_r+0x1c0>
 8006dec:	080082a4 	.word	0x080082a4
 8006df0:	080082ae 	.word	0x080082ae
 8006df4:	00000000 	.word	0x00000000
 8006df8:	08006b51 	.word	0x08006b51
 8006dfc:	080082aa 	.word	0x080082aa

08006e00 <_sungetc_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	1c4b      	adds	r3, r1, #1
 8006e04:	4614      	mov	r4, r2
 8006e06:	d103      	bne.n	8006e10 <_sungetc_r+0x10>
 8006e08:	f04f 35ff 	mov.w	r5, #4294967295
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	8993      	ldrh	r3, [r2, #12]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	8193      	strh	r3, [r2, #12]
 8006e18:	6853      	ldr	r3, [r2, #4]
 8006e1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e1c:	b2cd      	uxtb	r5, r1
 8006e1e:	b18a      	cbz	r2, 8006e44 <_sungetc_r+0x44>
 8006e20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e22:	429a      	cmp	r2, r3
 8006e24:	dd08      	ble.n	8006e38 <_sungetc_r+0x38>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	6022      	str	r2, [r4, #0]
 8006e2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	3301      	adds	r3, #1
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	e7e9      	b.n	8006e0c <_sungetc_r+0xc>
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f000 ff12 	bl	8007c62 <__submore>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0f1      	beq.n	8006e26 <_sungetc_r+0x26>
 8006e42:	e7e1      	b.n	8006e08 <_sungetc_r+0x8>
 8006e44:	6921      	ldr	r1, [r4, #16]
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	b141      	cbz	r1, 8006e5c <_sungetc_r+0x5c>
 8006e4a:	4291      	cmp	r1, r2
 8006e4c:	d206      	bcs.n	8006e5c <_sungetc_r+0x5c>
 8006e4e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006e52:	42a9      	cmp	r1, r5
 8006e54:	d102      	bne.n	8006e5c <_sungetc_r+0x5c>
 8006e56:	3a01      	subs	r2, #1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	e7ea      	b.n	8006e32 <_sungetc_r+0x32>
 8006e5c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e66:	2303      	movs	r3, #3
 8006e68:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	2301      	movs	r3, #1
 8006e74:	e7de      	b.n	8006e34 <_sungetc_r+0x34>

08006e76 <__ssrefill_r>:
 8006e76:	b510      	push	{r4, lr}
 8006e78:	460c      	mov	r4, r1
 8006e7a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006e7c:	b169      	cbz	r1, 8006e9a <__ssrefill_r+0x24>
 8006e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e82:	4299      	cmp	r1, r3
 8006e84:	d001      	beq.n	8006e8a <__ssrefill_r+0x14>
 8006e86:	f7ff fe19 	bl	8006abc <_free_r>
 8006e8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e8c:	6063      	str	r3, [r4, #4]
 8006e8e:	2000      	movs	r0, #0
 8006e90:	6360      	str	r0, [r4, #52]	@ 0x34
 8006e92:	b113      	cbz	r3, 8006e9a <__ssrefill_r+0x24>
 8006e94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	bd10      	pop	{r4, pc}
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	e7f3      	b.n	8006e98 <__ssrefill_r+0x22>

08006eb0 <__ssvfiscanf_r>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006eba:	2100      	movs	r1, #0
 8006ebc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006ec0:	49a5      	ldr	r1, [pc, #660]	@ (8007158 <__ssvfiscanf_r+0x2a8>)
 8006ec2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006ec4:	f10d 0804 	add.w	r8, sp, #4
 8006ec8:	49a4      	ldr	r1, [pc, #656]	@ (800715c <__ssvfiscanf_r+0x2ac>)
 8006eca:	4fa5      	ldr	r7, [pc, #660]	@ (8007160 <__ssvfiscanf_r+0x2b0>)
 8006ecc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	7813      	ldrb	r3, [r2, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8158 	beq.w	800718e <__ssvfiscanf_r+0x2de>
 8006ede:	5cf9      	ldrb	r1, [r7, r3]
 8006ee0:	f011 0108 	ands.w	r1, r1, #8
 8006ee4:	f102 0501 	add.w	r5, r2, #1
 8006ee8:	d019      	beq.n	8006f1e <__ssvfiscanf_r+0x6e>
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dd0f      	ble.n	8006f10 <__ssvfiscanf_r+0x60>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	5cba      	ldrb	r2, [r7, r2]
 8006ef6:	0712      	lsls	r2, r2, #28
 8006ef8:	d401      	bmi.n	8006efe <__ssvfiscanf_r+0x4e>
 8006efa:	462a      	mov	r2, r5
 8006efc:	e7eb      	b.n	8006ed6 <__ssvfiscanf_r+0x26>
 8006efe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006f00:	3201      	adds	r2, #1
 8006f02:	9245      	str	r2, [sp, #276]	@ 0x114
 8006f04:	6862      	ldr	r2, [r4, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	3a01      	subs	r2, #1
 8006f0a:	6062      	str	r2, [r4, #4]
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	e7ec      	b.n	8006eea <__ssvfiscanf_r+0x3a>
 8006f10:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006f12:	4621      	mov	r1, r4
 8006f14:	4630      	mov	r0, r6
 8006f16:	4798      	blx	r3
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d0e9      	beq.n	8006ef0 <__ssvfiscanf_r+0x40>
 8006f1c:	e7ed      	b.n	8006efa <__ssvfiscanf_r+0x4a>
 8006f1e:	2b25      	cmp	r3, #37	@ 0x25
 8006f20:	d012      	beq.n	8006f48 <__ssvfiscanf_r+0x98>
 8006f22:	4699      	mov	r9, r3
 8006f24:	6863      	ldr	r3, [r4, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f340 8093 	ble.w	8007052 <__ssvfiscanf_r+0x1a2>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	7813      	ldrb	r3, [r2, #0]
 8006f30:	454b      	cmp	r3, r9
 8006f32:	f040 812c 	bne.w	800718e <__ssvfiscanf_r+0x2de>
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006f3e:	3201      	adds	r2, #1
 8006f40:	3301      	adds	r3, #1
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	9345      	str	r3, [sp, #276]	@ 0x114
 8006f46:	e7d8      	b.n	8006efa <__ssvfiscanf_r+0x4a>
 8006f48:	9141      	str	r1, [sp, #260]	@ 0x104
 8006f4a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006f4c:	7853      	ldrb	r3, [r2, #1]
 8006f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f50:	bf02      	ittt	eq
 8006f52:	2310      	moveq	r3, #16
 8006f54:	1c95      	addeq	r5, r2, #2
 8006f56:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006f58:	220a      	movs	r2, #10
 8006f5a:	46a9      	mov	r9, r5
 8006f5c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006f60:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006f64:	2b09      	cmp	r3, #9
 8006f66:	d91e      	bls.n	8006fa6 <__ssvfiscanf_r+0xf6>
 8006f68:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007164 <__ssvfiscanf_r+0x2b4>
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f7f9 f956 	bl	8000220 <memchr>
 8006f74:	b138      	cbz	r0, 8006f86 <__ssvfiscanf_r+0xd6>
 8006f76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006f78:	eba0 000a 	sub.w	r0, r0, sl
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4083      	lsls	r3, r0
 8006f80:	4313      	orrs	r3, r2
 8006f82:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f84:	464d      	mov	r5, r9
 8006f86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f8a:	2b78      	cmp	r3, #120	@ 0x78
 8006f8c:	d806      	bhi.n	8006f9c <__ssvfiscanf_r+0xec>
 8006f8e:	2b57      	cmp	r3, #87	@ 0x57
 8006f90:	d810      	bhi.n	8006fb4 <__ssvfiscanf_r+0x104>
 8006f92:	2b25      	cmp	r3, #37	@ 0x25
 8006f94:	d0c5      	beq.n	8006f22 <__ssvfiscanf_r+0x72>
 8006f96:	d857      	bhi.n	8007048 <__ssvfiscanf_r+0x198>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d065      	beq.n	8007068 <__ssvfiscanf_r+0x1b8>
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006fa0:	230a      	movs	r3, #10
 8006fa2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006fa4:	e078      	b.n	8007098 <__ssvfiscanf_r+0x1e8>
 8006fa6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006fa8:	fb02 1103 	mla	r1, r2, r3, r1
 8006fac:	3930      	subs	r1, #48	@ 0x30
 8006fae:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006fb0:	464d      	mov	r5, r9
 8006fb2:	e7d2      	b.n	8006f5a <__ssvfiscanf_r+0xaa>
 8006fb4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006fb8:	2a20      	cmp	r2, #32
 8006fba:	d8ef      	bhi.n	8006f9c <__ssvfiscanf_r+0xec>
 8006fbc:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc4 <__ssvfiscanf_r+0x114>)
 8006fbe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08007077 	.word	0x08007077
 8006fc8:	08006f9d 	.word	0x08006f9d
 8006fcc:	08006f9d 	.word	0x08006f9d
 8006fd0:	080070d1 	.word	0x080070d1
 8006fd4:	08006f9d 	.word	0x08006f9d
 8006fd8:	08006f9d 	.word	0x08006f9d
 8006fdc:	08006f9d 	.word	0x08006f9d
 8006fe0:	08006f9d 	.word	0x08006f9d
 8006fe4:	08006f9d 	.word	0x08006f9d
 8006fe8:	08006f9d 	.word	0x08006f9d
 8006fec:	08006f9d 	.word	0x08006f9d
 8006ff0:	080070e7 	.word	0x080070e7
 8006ff4:	080070cd 	.word	0x080070cd
 8006ff8:	0800704f 	.word	0x0800704f
 8006ffc:	0800704f 	.word	0x0800704f
 8007000:	0800704f 	.word	0x0800704f
 8007004:	08006f9d 	.word	0x08006f9d
 8007008:	08007089 	.word	0x08007089
 800700c:	08006f9d 	.word	0x08006f9d
 8007010:	08006f9d 	.word	0x08006f9d
 8007014:	08006f9d 	.word	0x08006f9d
 8007018:	08006f9d 	.word	0x08006f9d
 800701c:	080070f7 	.word	0x080070f7
 8007020:	08007091 	.word	0x08007091
 8007024:	0800706f 	.word	0x0800706f
 8007028:	08006f9d 	.word	0x08006f9d
 800702c:	08006f9d 	.word	0x08006f9d
 8007030:	080070f3 	.word	0x080070f3
 8007034:	08006f9d 	.word	0x08006f9d
 8007038:	080070cd 	.word	0x080070cd
 800703c:	08006f9d 	.word	0x08006f9d
 8007040:	08006f9d 	.word	0x08006f9d
 8007044:	08007077 	.word	0x08007077
 8007048:	3b45      	subs	r3, #69	@ 0x45
 800704a:	2b02      	cmp	r3, #2
 800704c:	d8a6      	bhi.n	8006f9c <__ssvfiscanf_r+0xec>
 800704e:	2305      	movs	r3, #5
 8007050:	e021      	b.n	8007096 <__ssvfiscanf_r+0x1e6>
 8007052:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007054:	4621      	mov	r1, r4
 8007056:	4630      	mov	r0, r6
 8007058:	4798      	blx	r3
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f af66 	beq.w	8006f2c <__ssvfiscanf_r+0x7c>
 8007060:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007062:	2800      	cmp	r0, #0
 8007064:	f040 808b 	bne.w	800717e <__ssvfiscanf_r+0x2ce>
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	e08b      	b.n	8007186 <__ssvfiscanf_r+0x2d6>
 800706e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007070:	f042 0220 	orr.w	r2, r2, #32
 8007074:	9241      	str	r2, [sp, #260]	@ 0x104
 8007076:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800707c:	9241      	str	r2, [sp, #260]	@ 0x104
 800707e:	2210      	movs	r2, #16
 8007080:	2b6e      	cmp	r3, #110	@ 0x6e
 8007082:	9242      	str	r2, [sp, #264]	@ 0x108
 8007084:	d902      	bls.n	800708c <__ssvfiscanf_r+0x1dc>
 8007086:	e005      	b.n	8007094 <__ssvfiscanf_r+0x1e4>
 8007088:	2300      	movs	r3, #0
 800708a:	9342      	str	r3, [sp, #264]	@ 0x108
 800708c:	2303      	movs	r3, #3
 800708e:	e002      	b.n	8007096 <__ssvfiscanf_r+0x1e6>
 8007090:	2308      	movs	r3, #8
 8007092:	9342      	str	r3, [sp, #264]	@ 0x108
 8007094:	2304      	movs	r3, #4
 8007096:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	dd39      	ble.n	8007112 <__ssvfiscanf_r+0x262>
 800709e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80070a0:	0659      	lsls	r1, r3, #25
 80070a2:	d404      	bmi.n	80070ae <__ssvfiscanf_r+0x1fe>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	5cba      	ldrb	r2, [r7, r2]
 80070aa:	0712      	lsls	r2, r2, #28
 80070ac:	d438      	bmi.n	8007120 <__ssvfiscanf_r+0x270>
 80070ae:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	dc47      	bgt.n	8007144 <__ssvfiscanf_r+0x294>
 80070b4:	466b      	mov	r3, sp
 80070b6:	4622      	mov	r2, r4
 80070b8:	a941      	add	r1, sp, #260	@ 0x104
 80070ba:	4630      	mov	r0, r6
 80070bc:	f000 fb3c 	bl	8007738 <_scanf_chars>
 80070c0:	2801      	cmp	r0, #1
 80070c2:	d064      	beq.n	800718e <__ssvfiscanf_r+0x2de>
 80070c4:	2802      	cmp	r0, #2
 80070c6:	f47f af18 	bne.w	8006efa <__ssvfiscanf_r+0x4a>
 80070ca:	e7c9      	b.n	8007060 <__ssvfiscanf_r+0x1b0>
 80070cc:	220a      	movs	r2, #10
 80070ce:	e7d7      	b.n	8007080 <__ssvfiscanf_r+0x1d0>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4640      	mov	r0, r8
 80070d4:	f000 fd8c 	bl	8007bf0 <__sccl>
 80070d8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80070da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070de:	9341      	str	r3, [sp, #260]	@ 0x104
 80070e0:	4605      	mov	r5, r0
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7d7      	b.n	8007096 <__ssvfiscanf_r+0x1e6>
 80070e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80070e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80070ee:	2300      	movs	r3, #0
 80070f0:	e7d1      	b.n	8007096 <__ssvfiscanf_r+0x1e6>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e7cf      	b.n	8007096 <__ssvfiscanf_r+0x1e6>
 80070f6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80070f8:	06c3      	lsls	r3, r0, #27
 80070fa:	f53f aefe 	bmi.w	8006efa <__ssvfiscanf_r+0x4a>
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007102:	1d19      	adds	r1, r3, #4
 8007104:	9100      	str	r1, [sp, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	07c0      	lsls	r0, r0, #31
 800710a:	bf4c      	ite	mi
 800710c:	801a      	strhmi	r2, [r3, #0]
 800710e:	601a      	strpl	r2, [r3, #0]
 8007110:	e6f3      	b.n	8006efa <__ssvfiscanf_r+0x4a>
 8007112:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007114:	4621      	mov	r1, r4
 8007116:	4630      	mov	r0, r6
 8007118:	4798      	blx	r3
 800711a:	2800      	cmp	r0, #0
 800711c:	d0bf      	beq.n	800709e <__ssvfiscanf_r+0x1ee>
 800711e:	e79f      	b.n	8007060 <__ssvfiscanf_r+0x1b0>
 8007120:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007122:	3201      	adds	r2, #1
 8007124:	9245      	str	r2, [sp, #276]	@ 0x114
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	3a01      	subs	r2, #1
 800712a:	2a00      	cmp	r2, #0
 800712c:	6062      	str	r2, [r4, #4]
 800712e:	dd02      	ble.n	8007136 <__ssvfiscanf_r+0x286>
 8007130:	3301      	adds	r3, #1
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	e7b6      	b.n	80070a4 <__ssvfiscanf_r+0x1f4>
 8007136:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007138:	4621      	mov	r1, r4
 800713a:	4630      	mov	r0, r6
 800713c:	4798      	blx	r3
 800713e:	2800      	cmp	r0, #0
 8007140:	d0b0      	beq.n	80070a4 <__ssvfiscanf_r+0x1f4>
 8007142:	e78d      	b.n	8007060 <__ssvfiscanf_r+0x1b0>
 8007144:	2b04      	cmp	r3, #4
 8007146:	dc0f      	bgt.n	8007168 <__ssvfiscanf_r+0x2b8>
 8007148:	466b      	mov	r3, sp
 800714a:	4622      	mov	r2, r4
 800714c:	a941      	add	r1, sp, #260	@ 0x104
 800714e:	4630      	mov	r0, r6
 8007150:	f000 fb4c 	bl	80077ec <_scanf_i>
 8007154:	e7b4      	b.n	80070c0 <__ssvfiscanf_r+0x210>
 8007156:	bf00      	nop
 8007158:	08006e01 	.word	0x08006e01
 800715c:	08006e77 	.word	0x08006e77
 8007160:	080082f3 	.word	0x080082f3
 8007164:	080082aa 	.word	0x080082aa
 8007168:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <__ssvfiscanf_r+0x2e4>)
 800716a:	2b00      	cmp	r3, #0
 800716c:	f43f aec5 	beq.w	8006efa <__ssvfiscanf_r+0x4a>
 8007170:	466b      	mov	r3, sp
 8007172:	4622      	mov	r2, r4
 8007174:	a941      	add	r1, sp, #260	@ 0x104
 8007176:	4630      	mov	r0, r6
 8007178:	f3af 8000 	nop.w
 800717c:	e7a0      	b.n	80070c0 <__ssvfiscanf_r+0x210>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	065b      	lsls	r3, r3, #25
 8007182:	f53f af71 	bmi.w	8007068 <__ssvfiscanf_r+0x1b8>
 8007186:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800718a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007190:	e7f9      	b.n	8007186 <__ssvfiscanf_r+0x2d6>
 8007192:	bf00      	nop
 8007194:	00000000 	.word	0x00000000

08007198 <__sfputc_r>:
 8007198:	6893      	ldr	r3, [r2, #8]
 800719a:	3b01      	subs	r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	b410      	push	{r4}
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	da08      	bge.n	80071b6 <__sfputc_r+0x1e>
 80071a4:	6994      	ldr	r4, [r2, #24]
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	db01      	blt.n	80071ae <__sfputc_r+0x16>
 80071aa:	290a      	cmp	r1, #10
 80071ac:	d103      	bne.n	80071b6 <__sfputc_r+0x1e>
 80071ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b2:	f7ff bb50 	b.w	8006856 <__swbuf_r>
 80071b6:	6813      	ldr	r3, [r2, #0]
 80071b8:	1c58      	adds	r0, r3, #1
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	7019      	strb	r1, [r3, #0]
 80071be:	4608      	mov	r0, r1
 80071c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <__sfputs_r>:
 80071c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	18d5      	adds	r5, r2, r3
 80071d0:	42ac      	cmp	r4, r5
 80071d2:	d101      	bne.n	80071d8 <__sfputs_r+0x12>
 80071d4:	2000      	movs	r0, #0
 80071d6:	e007      	b.n	80071e8 <__sfputs_r+0x22>
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	463a      	mov	r2, r7
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ffda 	bl	8007198 <__sfputc_r>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d1f3      	bne.n	80071d0 <__sfputs_r+0xa>
 80071e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ec <_vfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	460d      	mov	r5, r1
 80071f2:	b09d      	sub	sp, #116	@ 0x74
 80071f4:	4614      	mov	r4, r2
 80071f6:	4698      	mov	r8, r3
 80071f8:	4606      	mov	r6, r0
 80071fa:	b118      	cbz	r0, 8007204 <_vfiprintf_r+0x18>
 80071fc:	6a03      	ldr	r3, [r0, #32]
 80071fe:	b90b      	cbnz	r3, 8007204 <_vfiprintf_r+0x18>
 8007200:	f7ff f9e0 	bl	80065c4 <__sinit>
 8007204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007206:	07d9      	lsls	r1, r3, #31
 8007208:	d405      	bmi.n	8007216 <_vfiprintf_r+0x2a>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d402      	bmi.n	8007216 <_vfiprintf_r+0x2a>
 8007210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007212:	f7ff fc50 	bl	8006ab6 <__retarget_lock_acquire_recursive>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	071b      	lsls	r3, r3, #28
 800721a:	d501      	bpl.n	8007220 <_vfiprintf_r+0x34>
 800721c:	692b      	ldr	r3, [r5, #16]
 800721e:	b99b      	cbnz	r3, 8007248 <_vfiprintf_r+0x5c>
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f7ff fb56 	bl	80068d4 <__swsetup_r>
 8007228:	b170      	cbz	r0, 8007248 <_vfiprintf_r+0x5c>
 800722a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800722c:	07dc      	lsls	r4, r3, #31
 800722e:	d504      	bpl.n	800723a <_vfiprintf_r+0x4e>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	@ 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	0598      	lsls	r0, r3, #22
 800723e:	d4f7      	bmi.n	8007230 <_vfiprintf_r+0x44>
 8007240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007242:	f7ff fc39 	bl	8006ab8 <__retarget_lock_release_recursive>
 8007246:	e7f3      	b.n	8007230 <_vfiprintf_r+0x44>
 8007248:	2300      	movs	r3, #0
 800724a:	9309      	str	r3, [sp, #36]	@ 0x24
 800724c:	2320      	movs	r3, #32
 800724e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007252:	f8cd 800c 	str.w	r8, [sp, #12]
 8007256:	2330      	movs	r3, #48	@ 0x30
 8007258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007408 <_vfiprintf_r+0x21c>
 800725c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007260:	f04f 0901 	mov.w	r9, #1
 8007264:	4623      	mov	r3, r4
 8007266:	469a      	mov	sl, r3
 8007268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726c:	b10a      	cbz	r2, 8007272 <_vfiprintf_r+0x86>
 800726e:	2a25      	cmp	r2, #37	@ 0x25
 8007270:	d1f9      	bne.n	8007266 <_vfiprintf_r+0x7a>
 8007272:	ebba 0b04 	subs.w	fp, sl, r4
 8007276:	d00b      	beq.n	8007290 <_vfiprintf_r+0xa4>
 8007278:	465b      	mov	r3, fp
 800727a:	4622      	mov	r2, r4
 800727c:	4629      	mov	r1, r5
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ffa1 	bl	80071c6 <__sfputs_r>
 8007284:	3001      	adds	r0, #1
 8007286:	f000 80a7 	beq.w	80073d8 <_vfiprintf_r+0x1ec>
 800728a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728c:	445a      	add	r2, fp
 800728e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007290:	f89a 3000 	ldrb.w	r3, [sl]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 809f 	beq.w	80073d8 <_vfiprintf_r+0x1ec>
 800729a:	2300      	movs	r3, #0
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a4:	f10a 0a01 	add.w	sl, sl, #1
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80072b2:	4654      	mov	r4, sl
 80072b4:	2205      	movs	r2, #5
 80072b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ba:	4853      	ldr	r0, [pc, #332]	@ (8007408 <_vfiprintf_r+0x21c>)
 80072bc:	f7f8 ffb0 	bl	8000220 <memchr>
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	b9d8      	cbnz	r0, 80072fc <_vfiprintf_r+0x110>
 80072c4:	06d1      	lsls	r1, r2, #27
 80072c6:	bf44      	itt	mi
 80072c8:	2320      	movmi	r3, #32
 80072ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ce:	0713      	lsls	r3, r2, #28
 80072d0:	bf44      	itt	mi
 80072d2:	232b      	movmi	r3, #43	@ 0x2b
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d8:	f89a 3000 	ldrb.w	r3, [sl]
 80072dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80072de:	d015      	beq.n	800730c <_vfiprintf_r+0x120>
 80072e0:	9a07      	ldr	r2, [sp, #28]
 80072e2:	4654      	mov	r4, sl
 80072e4:	2000      	movs	r0, #0
 80072e6:	f04f 0c0a 	mov.w	ip, #10
 80072ea:	4621      	mov	r1, r4
 80072ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f0:	3b30      	subs	r3, #48	@ 0x30
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	d94b      	bls.n	800738e <_vfiprintf_r+0x1a2>
 80072f6:	b1b0      	cbz	r0, 8007326 <_vfiprintf_r+0x13a>
 80072f8:	9207      	str	r2, [sp, #28]
 80072fa:	e014      	b.n	8007326 <_vfiprintf_r+0x13a>
 80072fc:	eba0 0308 	sub.w	r3, r0, r8
 8007300:	fa09 f303 	lsl.w	r3, r9, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	46a2      	mov	sl, r4
 800730a:	e7d2      	b.n	80072b2 <_vfiprintf_r+0xc6>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	9103      	str	r1, [sp, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	bfbb      	ittet	lt
 8007318:	425b      	neglt	r3, r3
 800731a:	f042 0202 	orrlt.w	r2, r2, #2
 800731e:	9307      	strge	r3, [sp, #28]
 8007320:	9307      	strlt	r3, [sp, #28]
 8007322:	bfb8      	it	lt
 8007324:	9204      	strlt	r2, [sp, #16]
 8007326:	7823      	ldrb	r3, [r4, #0]
 8007328:	2b2e      	cmp	r3, #46	@ 0x2e
 800732a:	d10a      	bne.n	8007342 <_vfiprintf_r+0x156>
 800732c:	7863      	ldrb	r3, [r4, #1]
 800732e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007330:	d132      	bne.n	8007398 <_vfiprintf_r+0x1ac>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	1d1a      	adds	r2, r3, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	9203      	str	r2, [sp, #12]
 800733a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800733e:	3402      	adds	r4, #2
 8007340:	9305      	str	r3, [sp, #20]
 8007342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007418 <_vfiprintf_r+0x22c>
 8007346:	7821      	ldrb	r1, [r4, #0]
 8007348:	2203      	movs	r2, #3
 800734a:	4650      	mov	r0, sl
 800734c:	f7f8 ff68 	bl	8000220 <memchr>
 8007350:	b138      	cbz	r0, 8007362 <_vfiprintf_r+0x176>
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	eba0 000a 	sub.w	r0, r0, sl
 8007358:	2240      	movs	r2, #64	@ 0x40
 800735a:	4082      	lsls	r2, r0
 800735c:	4313      	orrs	r3, r2
 800735e:	3401      	adds	r4, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007366:	4829      	ldr	r0, [pc, #164]	@ (800740c <_vfiprintf_r+0x220>)
 8007368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800736c:	2206      	movs	r2, #6
 800736e:	f7f8 ff57 	bl	8000220 <memchr>
 8007372:	2800      	cmp	r0, #0
 8007374:	d03f      	beq.n	80073f6 <_vfiprintf_r+0x20a>
 8007376:	4b26      	ldr	r3, [pc, #152]	@ (8007410 <_vfiprintf_r+0x224>)
 8007378:	bb1b      	cbnz	r3, 80073c2 <_vfiprintf_r+0x1d6>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	3307      	adds	r3, #7
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	3308      	adds	r3, #8
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007388:	443b      	add	r3, r7
 800738a:	9309      	str	r3, [sp, #36]	@ 0x24
 800738c:	e76a      	b.n	8007264 <_vfiprintf_r+0x78>
 800738e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007392:	460c      	mov	r4, r1
 8007394:	2001      	movs	r0, #1
 8007396:	e7a8      	b.n	80072ea <_vfiprintf_r+0xfe>
 8007398:	2300      	movs	r3, #0
 800739a:	3401      	adds	r4, #1
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	4619      	mov	r1, r3
 80073a0:	f04f 0c0a 	mov.w	ip, #10
 80073a4:	4620      	mov	r0, r4
 80073a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073aa:	3a30      	subs	r2, #48	@ 0x30
 80073ac:	2a09      	cmp	r2, #9
 80073ae:	d903      	bls.n	80073b8 <_vfiprintf_r+0x1cc>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0c6      	beq.n	8007342 <_vfiprintf_r+0x156>
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	e7c4      	b.n	8007342 <_vfiprintf_r+0x156>
 80073b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073bc:	4604      	mov	r4, r0
 80073be:	2301      	movs	r3, #1
 80073c0:	e7f0      	b.n	80073a4 <_vfiprintf_r+0x1b8>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <_vfiprintf_r+0x228>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4630      	mov	r0, r6
 80073ce:	f3af 8000 	nop.w
 80073d2:	4607      	mov	r7, r0
 80073d4:	1c78      	adds	r0, r7, #1
 80073d6:	d1d6      	bne.n	8007386 <_vfiprintf_r+0x19a>
 80073d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_vfiprintf_r+0x1fe>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_vfiprintf_r+0x1fe>
 80073e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073e6:	f7ff fb67 	bl	8006ab8 <__retarget_lock_release_recursive>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	065b      	lsls	r3, r3, #25
 80073ee:	f53f af1f 	bmi.w	8007230 <_vfiprintf_r+0x44>
 80073f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f4:	e71e      	b.n	8007234 <_vfiprintf_r+0x48>
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462a      	mov	r2, r5
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <_vfiprintf_r+0x228>)
 80073fe:	a904      	add	r1, sp, #16
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f879 	bl	80074f8 <_printf_i>
 8007406:	e7e4      	b.n	80073d2 <_vfiprintf_r+0x1e6>
 8007408:	080082a4 	.word	0x080082a4
 800740c:	080082ae 	.word	0x080082ae
 8007410:	00000000 	.word	0x00000000
 8007414:	080071c7 	.word	0x080071c7
 8007418:	080082aa 	.word	0x080082aa

0800741c <_printf_common>:
 800741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	4616      	mov	r6, r2
 8007422:	4698      	mov	r8, r3
 8007424:	688a      	ldr	r2, [r1, #8]
 8007426:	690b      	ldr	r3, [r1, #16]
 8007428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800742c:	4293      	cmp	r3, r2
 800742e:	bfb8      	it	lt
 8007430:	4613      	movlt	r3, r2
 8007432:	6033      	str	r3, [r6, #0]
 8007434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007438:	4607      	mov	r7, r0
 800743a:	460c      	mov	r4, r1
 800743c:	b10a      	cbz	r2, 8007442 <_printf_common+0x26>
 800743e:	3301      	adds	r3, #1
 8007440:	6033      	str	r3, [r6, #0]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	0699      	lsls	r1, r3, #26
 8007446:	bf42      	ittt	mi
 8007448:	6833      	ldrmi	r3, [r6, #0]
 800744a:	3302      	addmi	r3, #2
 800744c:	6033      	strmi	r3, [r6, #0]
 800744e:	6825      	ldr	r5, [r4, #0]
 8007450:	f015 0506 	ands.w	r5, r5, #6
 8007454:	d106      	bne.n	8007464 <_printf_common+0x48>
 8007456:	f104 0a19 	add.w	sl, r4, #25
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	6832      	ldr	r2, [r6, #0]
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	42ab      	cmp	r3, r5
 8007462:	dc26      	bgt.n	80074b2 <_printf_common+0x96>
 8007464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	3b00      	subs	r3, #0
 800746c:	bf18      	it	ne
 800746e:	2301      	movne	r3, #1
 8007470:	0692      	lsls	r2, r2, #26
 8007472:	d42b      	bmi.n	80074cc <_printf_common+0xb0>
 8007474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007478:	4641      	mov	r1, r8
 800747a:	4638      	mov	r0, r7
 800747c:	47c8      	blx	r9
 800747e:	3001      	adds	r0, #1
 8007480:	d01e      	beq.n	80074c0 <_printf_common+0xa4>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	6922      	ldr	r2, [r4, #16]
 8007486:	f003 0306 	and.w	r3, r3, #6
 800748a:	2b04      	cmp	r3, #4
 800748c:	bf02      	ittt	eq
 800748e:	68e5      	ldreq	r5, [r4, #12]
 8007490:	6833      	ldreq	r3, [r6, #0]
 8007492:	1aed      	subeq	r5, r5, r3
 8007494:	68a3      	ldr	r3, [r4, #8]
 8007496:	bf0c      	ite	eq
 8007498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800749c:	2500      	movne	r5, #0
 800749e:	4293      	cmp	r3, r2
 80074a0:	bfc4      	itt	gt
 80074a2:	1a9b      	subgt	r3, r3, r2
 80074a4:	18ed      	addgt	r5, r5, r3
 80074a6:	2600      	movs	r6, #0
 80074a8:	341a      	adds	r4, #26
 80074aa:	42b5      	cmp	r5, r6
 80074ac:	d11a      	bne.n	80074e4 <_printf_common+0xc8>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e008      	b.n	80074c4 <_printf_common+0xa8>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4652      	mov	r2, sl
 80074b6:	4641      	mov	r1, r8
 80074b8:	4638      	mov	r0, r7
 80074ba:	47c8      	blx	r9
 80074bc:	3001      	adds	r0, #1
 80074be:	d103      	bne.n	80074c8 <_printf_common+0xac>
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	3501      	adds	r5, #1
 80074ca:	e7c6      	b.n	800745a <_printf_common+0x3e>
 80074cc:	18e1      	adds	r1, r4, r3
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	2030      	movs	r0, #48	@ 0x30
 80074d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074d6:	4422      	add	r2, r4
 80074d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074e0:	3302      	adds	r3, #2
 80074e2:	e7c7      	b.n	8007474 <_printf_common+0x58>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4622      	mov	r2, r4
 80074e8:	4641      	mov	r1, r8
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c8      	blx	r9
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0e6      	beq.n	80074c0 <_printf_common+0xa4>
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7d9      	b.n	80074aa <_printf_common+0x8e>
	...

080074f8 <_printf_i>:
 80074f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	7e0f      	ldrb	r7, [r1, #24]
 80074fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007500:	2f78      	cmp	r7, #120	@ 0x78
 8007502:	4691      	mov	r9, r2
 8007504:	4680      	mov	r8, r0
 8007506:	460c      	mov	r4, r1
 8007508:	469a      	mov	sl, r3
 800750a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800750e:	d807      	bhi.n	8007520 <_printf_i+0x28>
 8007510:	2f62      	cmp	r7, #98	@ 0x62
 8007512:	d80a      	bhi.n	800752a <_printf_i+0x32>
 8007514:	2f00      	cmp	r7, #0
 8007516:	f000 80d2 	beq.w	80076be <_printf_i+0x1c6>
 800751a:	2f58      	cmp	r7, #88	@ 0x58
 800751c:	f000 80b9 	beq.w	8007692 <_printf_i+0x19a>
 8007520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007528:	e03a      	b.n	80075a0 <_printf_i+0xa8>
 800752a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800752e:	2b15      	cmp	r3, #21
 8007530:	d8f6      	bhi.n	8007520 <_printf_i+0x28>
 8007532:	a101      	add	r1, pc, #4	@ (adr r1, 8007538 <_printf_i+0x40>)
 8007534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007538:	08007591 	.word	0x08007591
 800753c:	080075a5 	.word	0x080075a5
 8007540:	08007521 	.word	0x08007521
 8007544:	08007521 	.word	0x08007521
 8007548:	08007521 	.word	0x08007521
 800754c:	08007521 	.word	0x08007521
 8007550:	080075a5 	.word	0x080075a5
 8007554:	08007521 	.word	0x08007521
 8007558:	08007521 	.word	0x08007521
 800755c:	08007521 	.word	0x08007521
 8007560:	08007521 	.word	0x08007521
 8007564:	080076a5 	.word	0x080076a5
 8007568:	080075cf 	.word	0x080075cf
 800756c:	0800765f 	.word	0x0800765f
 8007570:	08007521 	.word	0x08007521
 8007574:	08007521 	.word	0x08007521
 8007578:	080076c7 	.word	0x080076c7
 800757c:	08007521 	.word	0x08007521
 8007580:	080075cf 	.word	0x080075cf
 8007584:	08007521 	.word	0x08007521
 8007588:	08007521 	.word	0x08007521
 800758c:	08007667 	.word	0x08007667
 8007590:	6833      	ldr	r3, [r6, #0]
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6032      	str	r2, [r6, #0]
 8007598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800759c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075a0:	2301      	movs	r3, #1
 80075a2:	e09d      	b.n	80076e0 <_printf_i+0x1e8>
 80075a4:	6833      	ldr	r3, [r6, #0]
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	6031      	str	r1, [r6, #0]
 80075ac:	0606      	lsls	r6, r0, #24
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0xbc>
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	e003      	b.n	80075bc <_printf_i+0xc4>
 80075b4:	0645      	lsls	r5, r0, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0xb8>
 80075b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075bc:	2d00      	cmp	r5, #0
 80075be:	da03      	bge.n	80075c8 <_printf_i+0xd0>
 80075c0:	232d      	movs	r3, #45	@ 0x2d
 80075c2:	426d      	negs	r5, r5
 80075c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c8:	4859      	ldr	r0, [pc, #356]	@ (8007730 <_printf_i+0x238>)
 80075ca:	230a      	movs	r3, #10
 80075cc:	e011      	b.n	80075f2 <_printf_i+0xfa>
 80075ce:	6821      	ldr	r1, [r4, #0]
 80075d0:	6833      	ldr	r3, [r6, #0]
 80075d2:	0608      	lsls	r0, r1, #24
 80075d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80075d8:	d402      	bmi.n	80075e0 <_printf_i+0xe8>
 80075da:	0649      	lsls	r1, r1, #25
 80075dc:	bf48      	it	mi
 80075de:	b2ad      	uxthmi	r5, r5
 80075e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80075e2:	4853      	ldr	r0, [pc, #332]	@ (8007730 <_printf_i+0x238>)
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	bf14      	ite	ne
 80075e8:	230a      	movne	r3, #10
 80075ea:	2308      	moveq	r3, #8
 80075ec:	2100      	movs	r1, #0
 80075ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075f2:	6866      	ldr	r6, [r4, #4]
 80075f4:	60a6      	str	r6, [r4, #8]
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	bfa2      	ittt	ge
 80075fa:	6821      	ldrge	r1, [r4, #0]
 80075fc:	f021 0104 	bicge.w	r1, r1, #4
 8007600:	6021      	strge	r1, [r4, #0]
 8007602:	b90d      	cbnz	r5, 8007608 <_printf_i+0x110>
 8007604:	2e00      	cmp	r6, #0
 8007606:	d04b      	beq.n	80076a0 <_printf_i+0x1a8>
 8007608:	4616      	mov	r6, r2
 800760a:	fbb5 f1f3 	udiv	r1, r5, r3
 800760e:	fb03 5711 	mls	r7, r3, r1, r5
 8007612:	5dc7      	ldrb	r7, [r0, r7]
 8007614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007618:	462f      	mov	r7, r5
 800761a:	42bb      	cmp	r3, r7
 800761c:	460d      	mov	r5, r1
 800761e:	d9f4      	bls.n	800760a <_printf_i+0x112>
 8007620:	2b08      	cmp	r3, #8
 8007622:	d10b      	bne.n	800763c <_printf_i+0x144>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07df      	lsls	r7, r3, #31
 8007628:	d508      	bpl.n	800763c <_printf_i+0x144>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	4299      	cmp	r1, r3
 8007630:	bfde      	ittt	le
 8007632:	2330      	movle	r3, #48	@ 0x30
 8007634:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007638:	f106 36ff 	addle.w	r6, r6, #4294967295
 800763c:	1b92      	subs	r2, r2, r6
 800763e:	6122      	str	r2, [r4, #16]
 8007640:	f8cd a000 	str.w	sl, [sp]
 8007644:	464b      	mov	r3, r9
 8007646:	aa03      	add	r2, sp, #12
 8007648:	4621      	mov	r1, r4
 800764a:	4640      	mov	r0, r8
 800764c:	f7ff fee6 	bl	800741c <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	d14a      	bne.n	80076ea <_printf_i+0x1f2>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b004      	add	sp, #16
 800765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	f043 0320 	orr.w	r3, r3, #32
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	4833      	ldr	r0, [pc, #204]	@ (8007734 <_printf_i+0x23c>)
 8007668:	2778      	movs	r7, #120	@ 0x78
 800766a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	6831      	ldr	r1, [r6, #0]
 8007672:	061f      	lsls	r7, r3, #24
 8007674:	f851 5b04 	ldr.w	r5, [r1], #4
 8007678:	d402      	bmi.n	8007680 <_printf_i+0x188>
 800767a:	065f      	lsls	r7, r3, #25
 800767c:	bf48      	it	mi
 800767e:	b2ad      	uxthmi	r5, r5
 8007680:	6031      	str	r1, [r6, #0]
 8007682:	07d9      	lsls	r1, r3, #31
 8007684:	bf44      	itt	mi
 8007686:	f043 0320 	orrmi.w	r3, r3, #32
 800768a:	6023      	strmi	r3, [r4, #0]
 800768c:	b11d      	cbz	r5, 8007696 <_printf_i+0x19e>
 800768e:	2310      	movs	r3, #16
 8007690:	e7ac      	b.n	80075ec <_printf_i+0xf4>
 8007692:	4827      	ldr	r0, [pc, #156]	@ (8007730 <_printf_i+0x238>)
 8007694:	e7e9      	b.n	800766a <_printf_i+0x172>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f023 0320 	bic.w	r3, r3, #32
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	e7f6      	b.n	800768e <_printf_i+0x196>
 80076a0:	4616      	mov	r6, r2
 80076a2:	e7bd      	b.n	8007620 <_printf_i+0x128>
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	6961      	ldr	r1, [r4, #20]
 80076aa:	1d18      	adds	r0, r3, #4
 80076ac:	6030      	str	r0, [r6, #0]
 80076ae:	062e      	lsls	r6, r5, #24
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0x1c0>
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0x1c6>
 80076b8:	0668      	lsls	r0, r5, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0x1bc>
 80076bc:	8019      	strh	r1, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	4616      	mov	r6, r2
 80076c4:	e7bc      	b.n	8007640 <_printf_i+0x148>
 80076c6:	6833      	ldr	r3, [r6, #0]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	6032      	str	r2, [r6, #0]
 80076cc:	681e      	ldr	r6, [r3, #0]
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 fda4 	bl	8000220 <memchr>
 80076d8:	b108      	cbz	r0, 80076de <_printf_i+0x1e6>
 80076da:	1b80      	subs	r0, r0, r6
 80076dc:	6060      	str	r0, [r4, #4]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	2300      	movs	r3, #0
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076e8:	e7aa      	b.n	8007640 <_printf_i+0x148>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	4632      	mov	r2, r6
 80076ee:	4649      	mov	r1, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	47d0      	blx	sl
 80076f4:	3001      	adds	r0, #1
 80076f6:	d0ad      	beq.n	8007654 <_printf_i+0x15c>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	079b      	lsls	r3, r3, #30
 80076fc:	d413      	bmi.n	8007726 <_printf_i+0x22e>
 80076fe:	68e0      	ldr	r0, [r4, #12]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	4298      	cmp	r0, r3
 8007704:	bfb8      	it	lt
 8007706:	4618      	movlt	r0, r3
 8007708:	e7a6      	b.n	8007658 <_printf_i+0x160>
 800770a:	2301      	movs	r3, #1
 800770c:	4632      	mov	r2, r6
 800770e:	4649      	mov	r1, r9
 8007710:	4640      	mov	r0, r8
 8007712:	47d0      	blx	sl
 8007714:	3001      	adds	r0, #1
 8007716:	d09d      	beq.n	8007654 <_printf_i+0x15c>
 8007718:	3501      	adds	r5, #1
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	1a5b      	subs	r3, r3, r1
 8007720:	42ab      	cmp	r3, r5
 8007722:	dcf2      	bgt.n	800770a <_printf_i+0x212>
 8007724:	e7eb      	b.n	80076fe <_printf_i+0x206>
 8007726:	2500      	movs	r5, #0
 8007728:	f104 0619 	add.w	r6, r4, #25
 800772c:	e7f5      	b.n	800771a <_printf_i+0x222>
 800772e:	bf00      	nop
 8007730:	080082b5 	.word	0x080082b5
 8007734:	080082c6 	.word	0x080082c6

08007738 <_scanf_chars>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	4615      	mov	r5, r2
 800773e:	688a      	ldr	r2, [r1, #8]
 8007740:	4680      	mov	r8, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b932      	cbnz	r2, 8007754 <_scanf_chars+0x1c>
 8007746:	698a      	ldr	r2, [r1, #24]
 8007748:	2a00      	cmp	r2, #0
 800774a:	bf14      	ite	ne
 800774c:	f04f 32ff 	movne.w	r2, #4294967295
 8007750:	2201      	moveq	r2, #1
 8007752:	608a      	str	r2, [r1, #8]
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80077e8 <_scanf_chars+0xb0>
 800775a:	06d1      	lsls	r1, r2, #27
 800775c:	bf5f      	itttt	pl
 800775e:	681a      	ldrpl	r2, [r3, #0]
 8007760:	1d11      	addpl	r1, r2, #4
 8007762:	6019      	strpl	r1, [r3, #0]
 8007764:	6816      	ldrpl	r6, [r2, #0]
 8007766:	2700      	movs	r7, #0
 8007768:	69a0      	ldr	r0, [r4, #24]
 800776a:	b188      	cbz	r0, 8007790 <_scanf_chars+0x58>
 800776c:	2801      	cmp	r0, #1
 800776e:	d107      	bne.n	8007780 <_scanf_chars+0x48>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	6963      	ldr	r3, [r4, #20]
 8007776:	5c9b      	ldrb	r3, [r3, r2]
 8007778:	b953      	cbnz	r3, 8007790 <_scanf_chars+0x58>
 800777a:	2f00      	cmp	r7, #0
 800777c:	d031      	beq.n	80077e2 <_scanf_chars+0xaa>
 800777e:	e022      	b.n	80077c6 <_scanf_chars+0x8e>
 8007780:	2802      	cmp	r0, #2
 8007782:	d120      	bne.n	80077c6 <_scanf_chars+0x8e>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f819 3003 	ldrb.w	r3, [r9, r3]
 800778c:	071b      	lsls	r3, r3, #28
 800778e:	d41a      	bmi.n	80077c6 <_scanf_chars+0x8e>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	06da      	lsls	r2, r3, #27
 8007794:	bf5e      	ittt	pl
 8007796:	682b      	ldrpl	r3, [r5, #0]
 8007798:	781b      	ldrbpl	r3, [r3, #0]
 800779a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800779e:	682a      	ldr	r2, [r5, #0]
 80077a0:	686b      	ldr	r3, [r5, #4]
 80077a2:	3201      	adds	r2, #1
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	68a2      	ldr	r2, [r4, #8]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	3a01      	subs	r2, #1
 80077ac:	606b      	str	r3, [r5, #4]
 80077ae:	3701      	adds	r7, #1
 80077b0:	60a2      	str	r2, [r4, #8]
 80077b2:	b142      	cbz	r2, 80077c6 <_scanf_chars+0x8e>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dcd7      	bgt.n	8007768 <_scanf_chars+0x30>
 80077b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80077bc:	4629      	mov	r1, r5
 80077be:	4640      	mov	r0, r8
 80077c0:	4798      	blx	r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0d0      	beq.n	8007768 <_scanf_chars+0x30>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	f013 0310 	ands.w	r3, r3, #16
 80077cc:	d105      	bne.n	80077da <_scanf_chars+0xa2>
 80077ce:	68e2      	ldr	r2, [r4, #12]
 80077d0:	3201      	adds	r2, #1
 80077d2:	60e2      	str	r2, [r4, #12]
 80077d4:	69a2      	ldr	r2, [r4, #24]
 80077d6:	b102      	cbz	r2, 80077da <_scanf_chars+0xa2>
 80077d8:	7033      	strb	r3, [r6, #0]
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	443b      	add	r3, r7
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2000      	movs	r0, #0
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	bf00      	nop
 80077e8:	080082f3 	.word	0x080082f3

080077ec <_scanf_i>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	4698      	mov	r8, r3
 80077f2:	4b74      	ldr	r3, [pc, #464]	@ (80079c4 <_scanf_i+0x1d8>)
 80077f4:	460c      	mov	r4, r1
 80077f6:	4682      	mov	sl, r0
 80077f8:	4616      	mov	r6, r2
 80077fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077fe:	b087      	sub	sp, #28
 8007800:	ab03      	add	r3, sp, #12
 8007802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007806:	4b70      	ldr	r3, [pc, #448]	@ (80079c8 <_scanf_i+0x1dc>)
 8007808:	69a1      	ldr	r1, [r4, #24]
 800780a:	4a70      	ldr	r2, [pc, #448]	@ (80079cc <_scanf_i+0x1e0>)
 800780c:	2903      	cmp	r1, #3
 800780e:	bf08      	it	eq
 8007810:	461a      	moveq	r2, r3
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	1e5a      	subs	r2, r3, #1
 8007818:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800781c:	bf88      	it	hi
 800781e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007822:	4627      	mov	r7, r4
 8007824:	bf82      	ittt	hi
 8007826:	eb03 0905 	addhi.w	r9, r3, r5
 800782a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800782e:	60a3      	strhi	r3, [r4, #8]
 8007830:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007834:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007838:	bf98      	it	ls
 800783a:	f04f 0900 	movls.w	r9, #0
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	463d      	mov	r5, r7
 8007842:	f04f 0b00 	mov.w	fp, #0
 8007846:	6831      	ldr	r1, [r6, #0]
 8007848:	ab03      	add	r3, sp, #12
 800784a:	7809      	ldrb	r1, [r1, #0]
 800784c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007850:	2202      	movs	r2, #2
 8007852:	f7f8 fce5 	bl	8000220 <memchr>
 8007856:	b328      	cbz	r0, 80078a4 <_scanf_i+0xb8>
 8007858:	f1bb 0f01 	cmp.w	fp, #1
 800785c:	d159      	bne.n	8007912 <_scanf_i+0x126>
 800785e:	6862      	ldr	r2, [r4, #4]
 8007860:	b92a      	cbnz	r2, 800786e <_scanf_i+0x82>
 8007862:	6822      	ldr	r2, [r4, #0]
 8007864:	2108      	movs	r1, #8
 8007866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800786a:	6061      	str	r1, [r4, #4]
 800786c:	6022      	str	r2, [r4, #0]
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007874:	6022      	str	r2, [r4, #0]
 8007876:	68a2      	ldr	r2, [r4, #8]
 8007878:	1e51      	subs	r1, r2, #1
 800787a:	60a1      	str	r1, [r4, #8]
 800787c:	b192      	cbz	r2, 80078a4 <_scanf_i+0xb8>
 800787e:	6832      	ldr	r2, [r6, #0]
 8007880:	1c51      	adds	r1, r2, #1
 8007882:	6031      	str	r1, [r6, #0]
 8007884:	7812      	ldrb	r2, [r2, #0]
 8007886:	f805 2b01 	strb.w	r2, [r5], #1
 800788a:	6872      	ldr	r2, [r6, #4]
 800788c:	3a01      	subs	r2, #1
 800788e:	2a00      	cmp	r2, #0
 8007890:	6072      	str	r2, [r6, #4]
 8007892:	dc07      	bgt.n	80078a4 <_scanf_i+0xb8>
 8007894:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007898:	4631      	mov	r1, r6
 800789a:	4650      	mov	r0, sl
 800789c:	4790      	blx	r2
 800789e:	2800      	cmp	r0, #0
 80078a0:	f040 8085 	bne.w	80079ae <_scanf_i+0x1c2>
 80078a4:	f10b 0b01 	add.w	fp, fp, #1
 80078a8:	f1bb 0f03 	cmp.w	fp, #3
 80078ac:	d1cb      	bne.n	8007846 <_scanf_i+0x5a>
 80078ae:	6863      	ldr	r3, [r4, #4]
 80078b0:	b90b      	cbnz	r3, 80078b6 <_scanf_i+0xca>
 80078b2:	230a      	movs	r3, #10
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	4945      	ldr	r1, [pc, #276]	@ (80079d0 <_scanf_i+0x1e4>)
 80078ba:	6960      	ldr	r0, [r4, #20]
 80078bc:	1ac9      	subs	r1, r1, r3
 80078be:	f000 f997 	bl	8007bf0 <__sccl>
 80078c2:	f04f 0b00 	mov.w	fp, #0
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d03d      	beq.n	800794a <_scanf_i+0x15e>
 80078ce:	6831      	ldr	r1, [r6, #0]
 80078d0:	6960      	ldr	r0, [r4, #20]
 80078d2:	f891 c000 	ldrb.w	ip, [r1]
 80078d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80078da:	2800      	cmp	r0, #0
 80078dc:	d035      	beq.n	800794a <_scanf_i+0x15e>
 80078de:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80078e2:	d124      	bne.n	800792e <_scanf_i+0x142>
 80078e4:	0510      	lsls	r0, r2, #20
 80078e6:	d522      	bpl.n	800792e <_scanf_i+0x142>
 80078e8:	f10b 0b01 	add.w	fp, fp, #1
 80078ec:	f1b9 0f00 	cmp.w	r9, #0
 80078f0:	d003      	beq.n	80078fa <_scanf_i+0x10e>
 80078f2:	3301      	adds	r3, #1
 80078f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	6873      	ldr	r3, [r6, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	6073      	str	r3, [r6, #4]
 8007902:	dd1b      	ble.n	800793c <_scanf_i+0x150>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	3b01      	subs	r3, #1
 800790e:	60a3      	str	r3, [r4, #8]
 8007910:	e7d9      	b.n	80078c6 <_scanf_i+0xda>
 8007912:	f1bb 0f02 	cmp.w	fp, #2
 8007916:	d1ae      	bne.n	8007876 <_scanf_i+0x8a>
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800791e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007922:	d1bf      	bne.n	80078a4 <_scanf_i+0xb8>
 8007924:	2110      	movs	r1, #16
 8007926:	6061      	str	r1, [r4, #4]
 8007928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800792c:	e7a2      	b.n	8007874 <_scanf_i+0x88>
 800792e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	780b      	ldrb	r3, [r1, #0]
 8007936:	f805 3b01 	strb.w	r3, [r5], #1
 800793a:	e7de      	b.n	80078fa <_scanf_i+0x10e>
 800793c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007940:	4631      	mov	r1, r6
 8007942:	4650      	mov	r0, sl
 8007944:	4798      	blx	r3
 8007946:	2800      	cmp	r0, #0
 8007948:	d0df      	beq.n	800790a <_scanf_i+0x11e>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	05d9      	lsls	r1, r3, #23
 800794e:	d50d      	bpl.n	800796c <_scanf_i+0x180>
 8007950:	42bd      	cmp	r5, r7
 8007952:	d909      	bls.n	8007968 <_scanf_i+0x17c>
 8007954:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007958:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800795c:	4632      	mov	r2, r6
 800795e:	4650      	mov	r0, sl
 8007960:	4798      	blx	r3
 8007962:	f105 39ff 	add.w	r9, r5, #4294967295
 8007966:	464d      	mov	r5, r9
 8007968:	42bd      	cmp	r5, r7
 800796a:	d028      	beq.n	80079be <_scanf_i+0x1d2>
 800796c:	6822      	ldr	r2, [r4, #0]
 800796e:	f012 0210 	ands.w	r2, r2, #16
 8007972:	d113      	bne.n	800799c <_scanf_i+0x1b0>
 8007974:	702a      	strb	r2, [r5, #0]
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	9e01      	ldr	r6, [sp, #4]
 800797a:	4639      	mov	r1, r7
 800797c:	4650      	mov	r0, sl
 800797e:	47b0      	blx	r6
 8007980:	f8d8 3000 	ldr.w	r3, [r8]
 8007984:	6821      	ldr	r1, [r4, #0]
 8007986:	1d1a      	adds	r2, r3, #4
 8007988:	f8c8 2000 	str.w	r2, [r8]
 800798c:	f011 0f20 	tst.w	r1, #32
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	d00f      	beq.n	80079b4 <_scanf_i+0x1c8>
 8007994:	6018      	str	r0, [r3, #0]
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60e3      	str	r3, [r4, #12]
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	1bed      	subs	r5, r5, r7
 80079a0:	445d      	add	r5, fp
 80079a2:	442b      	add	r3, r5
 80079a4:	6123      	str	r3, [r4, #16]
 80079a6:	2000      	movs	r0, #0
 80079a8:	b007      	add	sp, #28
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	f04f 0b00 	mov.w	fp, #0
 80079b2:	e7ca      	b.n	800794a <_scanf_i+0x15e>
 80079b4:	07ca      	lsls	r2, r1, #31
 80079b6:	bf4c      	ite	mi
 80079b8:	8018      	strhmi	r0, [r3, #0]
 80079ba:	6018      	strpl	r0, [r3, #0]
 80079bc:	e7eb      	b.n	8007996 <_scanf_i+0x1aa>
 80079be:	2001      	movs	r0, #1
 80079c0:	e7f2      	b.n	80079a8 <_scanf_i+0x1bc>
 80079c2:	bf00      	nop
 80079c4:	08008280 	.word	0x08008280
 80079c8:	08007ebd 	.word	0x08007ebd
 80079cc:	08007f9d 	.word	0x08007f9d
 80079d0:	080082e7 	.word	0x080082e7

080079d4 <__sflush_r>:
 80079d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079dc:	0716      	lsls	r6, r2, #28
 80079de:	4605      	mov	r5, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	d454      	bmi.n	8007a8e <__sflush_r+0xba>
 80079e4:	684b      	ldr	r3, [r1, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dc02      	bgt.n	80079f0 <__sflush_r+0x1c>
 80079ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dd48      	ble.n	8007a82 <__sflush_r+0xae>
 80079f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d045      	beq.n	8007a82 <__sflush_r+0xae>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079fc:	682f      	ldr	r7, [r5, #0]
 80079fe:	6a21      	ldr	r1, [r4, #32]
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	d030      	beq.n	8007a66 <__sflush_r+0x92>
 8007a04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	0759      	lsls	r1, r3, #29
 8007a0a:	d505      	bpl.n	8007a18 <__sflush_r+0x44>
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a12:	b10b      	cbz	r3, 8007a18 <__sflush_r+0x44>
 8007a14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a1c:	6a21      	ldr	r1, [r4, #32]
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b0      	blx	r6
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	d106      	bne.n	8007a36 <__sflush_r+0x62>
 8007a28:	6829      	ldr	r1, [r5, #0]
 8007a2a:	291d      	cmp	r1, #29
 8007a2c:	d82b      	bhi.n	8007a86 <__sflush_r+0xb2>
 8007a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ad8 <__sflush_r+0x104>)
 8007a30:	410a      	asrs	r2, r1
 8007a32:	07d6      	lsls	r6, r2, #31
 8007a34:	d427      	bmi.n	8007a86 <__sflush_r+0xb2>
 8007a36:	2200      	movs	r2, #0
 8007a38:	6062      	str	r2, [r4, #4]
 8007a3a:	04d9      	lsls	r1, r3, #19
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	6022      	str	r2, [r4, #0]
 8007a40:	d504      	bpl.n	8007a4c <__sflush_r+0x78>
 8007a42:	1c42      	adds	r2, r0, #1
 8007a44:	d101      	bne.n	8007a4a <__sflush_r+0x76>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b903      	cbnz	r3, 8007a4c <__sflush_r+0x78>
 8007a4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a4e:	602f      	str	r7, [r5, #0]
 8007a50:	b1b9      	cbz	r1, 8007a82 <__sflush_r+0xae>
 8007a52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a56:	4299      	cmp	r1, r3
 8007a58:	d002      	beq.n	8007a60 <__sflush_r+0x8c>
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f7ff f82e 	bl	8006abc <_free_r>
 8007a60:	2300      	movs	r3, #0
 8007a62:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a64:	e00d      	b.n	8007a82 <__sflush_r+0xae>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b0      	blx	r6
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	1c50      	adds	r0, r2, #1
 8007a70:	d1c9      	bne.n	8007a06 <__sflush_r+0x32>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0c6      	beq.n	8007a06 <__sflush_r+0x32>
 8007a78:	2b1d      	cmp	r3, #29
 8007a7a:	d001      	beq.n	8007a80 <__sflush_r+0xac>
 8007a7c:	2b16      	cmp	r3, #22
 8007a7e:	d11e      	bne.n	8007abe <__sflush_r+0xea>
 8007a80:	602f      	str	r7, [r5, #0]
 8007a82:	2000      	movs	r0, #0
 8007a84:	e022      	b.n	8007acc <__sflush_r+0xf8>
 8007a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8a:	b21b      	sxth	r3, r3
 8007a8c:	e01b      	b.n	8007ac6 <__sflush_r+0xf2>
 8007a8e:	690f      	ldr	r7, [r1, #16]
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	d0f6      	beq.n	8007a82 <__sflush_r+0xae>
 8007a94:	0793      	lsls	r3, r2, #30
 8007a96:	680e      	ldr	r6, [r1, #0]
 8007a98:	bf08      	it	eq
 8007a9a:	694b      	ldreq	r3, [r1, #20]
 8007a9c:	600f      	str	r7, [r1, #0]
 8007a9e:	bf18      	it	ne
 8007aa0:	2300      	movne	r3, #0
 8007aa2:	eba6 0807 	sub.w	r8, r6, r7
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	f1b8 0f00 	cmp.w	r8, #0
 8007aac:	dde9      	ble.n	8007a82 <__sflush_r+0xae>
 8007aae:	6a21      	ldr	r1, [r4, #32]
 8007ab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ab2:	4643      	mov	r3, r8
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b0      	blx	r6
 8007aba:	2800      	cmp	r0, #0
 8007abc:	dc08      	bgt.n	8007ad0 <__sflush_r+0xfc>
 8007abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	4407      	add	r7, r0
 8007ad2:	eba8 0800 	sub.w	r8, r8, r0
 8007ad6:	e7e7      	b.n	8007aa8 <__sflush_r+0xd4>
 8007ad8:	dfbffffe 	.word	0xdfbffffe

08007adc <_fflush_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b913      	cbnz	r3, 8007aec <_fflush_r+0x10>
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	4628      	mov	r0, r5
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	b118      	cbz	r0, 8007af6 <_fflush_r+0x1a>
 8007aee:	6a03      	ldr	r3, [r0, #32]
 8007af0:	b90b      	cbnz	r3, 8007af6 <_fflush_r+0x1a>
 8007af2:	f7fe fd67 	bl	80065c4 <__sinit>
 8007af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f3      	beq.n	8007ae6 <_fflush_r+0xa>
 8007afe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b00:	07d0      	lsls	r0, r2, #31
 8007b02:	d404      	bmi.n	8007b0e <_fflush_r+0x32>
 8007b04:	0599      	lsls	r1, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_fflush_r+0x32>
 8007b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0a:	f7fe ffd4 	bl	8006ab6 <__retarget_lock_acquire_recursive>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	4621      	mov	r1, r4
 8007b12:	f7ff ff5f 	bl	80079d4 <__sflush_r>
 8007b16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b18:	07da      	lsls	r2, r3, #31
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	d4e4      	bmi.n	8007ae8 <_fflush_r+0xc>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	059b      	lsls	r3, r3, #22
 8007b22:	d4e1      	bmi.n	8007ae8 <_fflush_r+0xc>
 8007b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b26:	f7fe ffc7 	bl	8006ab8 <__retarget_lock_release_recursive>
 8007b2a:	e7dd      	b.n	8007ae8 <_fflush_r+0xc>

08007b2c <__swhatbuf_r>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b34:	2900      	cmp	r1, #0
 8007b36:	b096      	sub	sp, #88	@ 0x58
 8007b38:	4615      	mov	r5, r2
 8007b3a:	461e      	mov	r6, r3
 8007b3c:	da0d      	bge.n	8007b5a <__swhatbuf_r+0x2e>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b44:	f04f 0100 	mov.w	r1, #0
 8007b48:	bf14      	ite	ne
 8007b4a:	2340      	movne	r3, #64	@ 0x40
 8007b4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b50:	2000      	movs	r0, #0
 8007b52:	6031      	str	r1, [r6, #0]
 8007b54:	602b      	str	r3, [r5, #0]
 8007b56:	b016      	add	sp, #88	@ 0x58
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	466a      	mov	r2, sp
 8007b5c:	f000 f8d6 	bl	8007d0c <_fstat_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	dbec      	blt.n	8007b3e <__swhatbuf_r+0x12>
 8007b64:	9901      	ldr	r1, [sp, #4]
 8007b66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b6e:	4259      	negs	r1, r3
 8007b70:	4159      	adcs	r1, r3
 8007b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b76:	e7eb      	b.n	8007b50 <__swhatbuf_r+0x24>

08007b78 <__smakebuf_r>:
 8007b78:	898b      	ldrh	r3, [r1, #12]
 8007b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7c:	079d      	lsls	r5, r3, #30
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	d507      	bpl.n	8007b94 <__smakebuf_r+0x1c>
 8007b84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	6163      	str	r3, [r4, #20]
 8007b90:	b003      	add	sp, #12
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b94:	ab01      	add	r3, sp, #4
 8007b96:	466a      	mov	r2, sp
 8007b98:	f7ff ffc8 	bl	8007b2c <__swhatbuf_r>
 8007b9c:	9f00      	ldr	r7, [sp, #0]
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7fe fbf6 	bl	8006394 <_malloc_r>
 8007ba8:	b948      	cbnz	r0, 8007bbe <__smakebuf_r+0x46>
 8007baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bae:	059a      	lsls	r2, r3, #22
 8007bb0:	d4ee      	bmi.n	8007b90 <__smakebuf_r+0x18>
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	f043 0302 	orr.w	r3, r3, #2
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	e7e2      	b.n	8007b84 <__smakebuf_r+0xc>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	6020      	str	r0, [r4, #0]
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bce:	b15b      	cbz	r3, 8007be8 <__smakebuf_r+0x70>
 8007bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f8ab 	bl	8007d30 <_isatty_r>
 8007bda:	b128      	cbz	r0, 8007be8 <__smakebuf_r+0x70>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	431d      	orrs	r5, r3
 8007bec:	81a5      	strh	r5, [r4, #12]
 8007bee:	e7cf      	b.n	8007b90 <__smakebuf_r+0x18>

08007bf0 <__sccl>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	780b      	ldrb	r3, [r1, #0]
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	2b5e      	cmp	r3, #94	@ 0x5e
 8007bf8:	bf0b      	itete	eq
 8007bfa:	784b      	ldrbeq	r3, [r1, #1]
 8007bfc:	1c4a      	addne	r2, r1, #1
 8007bfe:	1c8a      	addeq	r2, r1, #2
 8007c00:	2100      	movne	r1, #0
 8007c02:	bf08      	it	eq
 8007c04:	2101      	moveq	r1, #1
 8007c06:	3801      	subs	r0, #1
 8007c08:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007c0c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007c10:	42a8      	cmp	r0, r5
 8007c12:	d1fb      	bne.n	8007c0c <__sccl+0x1c>
 8007c14:	b90b      	cbnz	r3, 8007c1a <__sccl+0x2a>
 8007c16:	1e50      	subs	r0, r2, #1
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	f081 0101 	eor.w	r1, r1, #1
 8007c1e:	54e1      	strb	r1, [r4, r3]
 8007c20:	4610      	mov	r0, r2
 8007c22:	4602      	mov	r2, r0
 8007c24:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c28:	2d2d      	cmp	r5, #45	@ 0x2d
 8007c2a:	d005      	beq.n	8007c38 <__sccl+0x48>
 8007c2c:	2d5d      	cmp	r5, #93	@ 0x5d
 8007c2e:	d016      	beq.n	8007c5e <__sccl+0x6e>
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	d0f1      	beq.n	8007c18 <__sccl+0x28>
 8007c34:	462b      	mov	r3, r5
 8007c36:	e7f2      	b.n	8007c1e <__sccl+0x2e>
 8007c38:	7846      	ldrb	r6, [r0, #1]
 8007c3a:	2e5d      	cmp	r6, #93	@ 0x5d
 8007c3c:	d0fa      	beq.n	8007c34 <__sccl+0x44>
 8007c3e:	42b3      	cmp	r3, r6
 8007c40:	dcf8      	bgt.n	8007c34 <__sccl+0x44>
 8007c42:	3002      	adds	r0, #2
 8007c44:	461a      	mov	r2, r3
 8007c46:	3201      	adds	r2, #1
 8007c48:	4296      	cmp	r6, r2
 8007c4a:	54a1      	strb	r1, [r4, r2]
 8007c4c:	dcfb      	bgt.n	8007c46 <__sccl+0x56>
 8007c4e:	1af2      	subs	r2, r6, r3
 8007c50:	3a01      	subs	r2, #1
 8007c52:	1c5d      	adds	r5, r3, #1
 8007c54:	42b3      	cmp	r3, r6
 8007c56:	bfa8      	it	ge
 8007c58:	2200      	movge	r2, #0
 8007c5a:	18ab      	adds	r3, r5, r2
 8007c5c:	e7e1      	b.n	8007c22 <__sccl+0x32>
 8007c5e:	4610      	mov	r0, r2
 8007c60:	e7da      	b.n	8007c18 <__sccl+0x28>

08007c62 <__submore>:
 8007c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c66:	460c      	mov	r4, r1
 8007c68:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007c6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	d11d      	bne.n	8007cae <__submore+0x4c>
 8007c72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c76:	f7fe fb8d 	bl	8006394 <_malloc_r>
 8007c7a:	b918      	cbnz	r0, 8007c84 <__submore+0x22>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c88:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c8a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007c8e:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c90:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007c94:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007c98:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007c9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ca0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007ca4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007ca8:	6020      	str	r0, [r4, #0]
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7e8      	b.n	8007c80 <__submore+0x1e>
 8007cae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007cb0:	0077      	lsls	r7, r6, #1
 8007cb2:	463a      	mov	r2, r7
 8007cb4:	f000 f85a 	bl	8007d6c <_realloc_r>
 8007cb8:	4605      	mov	r5, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d0de      	beq.n	8007c7c <__submore+0x1a>
 8007cbe:	eb00 0806 	add.w	r8, r0, r6
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f000 f842 	bl	8007d50 <memcpy>
 8007ccc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007cd0:	f8c4 8000 	str.w	r8, [r4]
 8007cd4:	e7e9      	b.n	8007caa <__submore+0x48>

08007cd6 <memmove>:
 8007cd6:	4288      	cmp	r0, r1
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	eb01 0402 	add.w	r4, r1, r2
 8007cde:	d902      	bls.n	8007ce6 <memmove+0x10>
 8007ce0:	4284      	cmp	r4, r0
 8007ce2:	4623      	mov	r3, r4
 8007ce4:	d807      	bhi.n	8007cf6 <memmove+0x20>
 8007ce6:	1e43      	subs	r3, r0, #1
 8007ce8:	42a1      	cmp	r1, r4
 8007cea:	d008      	beq.n	8007cfe <memmove+0x28>
 8007cec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cf4:	e7f8      	b.n	8007ce8 <memmove+0x12>
 8007cf6:	4402      	add	r2, r0
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	d100      	bne.n	8007d00 <memmove+0x2a>
 8007cfe:	bd10      	pop	{r4, pc}
 8007d00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d04:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d08:	e7f7      	b.n	8007cfa <memmove+0x24>
	...

08007d0c <_fstat_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	@ (8007d2c <_fstat_r+0x20>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f7fa fb24 	bl	8002366 <_fstat>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_fstat_r+0x1c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_fstat_r+0x1c>
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000344 	.word	0x20000344

08007d30 <_isatty_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	@ (8007d4c <_isatty_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7fa fb23 	bl	8002386 <_isatty>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_isatty_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_isatty_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20000344 	.word	0x20000344

08007d50 <memcpy>:
 8007d50:	440a      	add	r2, r1
 8007d52:	4291      	cmp	r1, r2
 8007d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	4770      	bx	lr
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d66:	4291      	cmp	r1, r2
 8007d68:	d1f9      	bne.n	8007d5e <memcpy+0xe>
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <_realloc_r>:
 8007d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d70:	4680      	mov	r8, r0
 8007d72:	4615      	mov	r5, r2
 8007d74:	460c      	mov	r4, r1
 8007d76:	b921      	cbnz	r1, 8007d82 <_realloc_r+0x16>
 8007d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	f7fe bb09 	b.w	8006394 <_malloc_r>
 8007d82:	b92a      	cbnz	r2, 8007d90 <_realloc_r+0x24>
 8007d84:	f7fe fe9a 	bl	8006abc <_free_r>
 8007d88:	2400      	movs	r4, #0
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	f000 f906 	bl	8007fa0 <_malloc_usable_size_r>
 8007d94:	4285      	cmp	r5, r0
 8007d96:	4606      	mov	r6, r0
 8007d98:	d802      	bhi.n	8007da0 <_realloc_r+0x34>
 8007d9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d9e:	d8f4      	bhi.n	8007d8a <_realloc_r+0x1e>
 8007da0:	4629      	mov	r1, r5
 8007da2:	4640      	mov	r0, r8
 8007da4:	f7fe faf6 	bl	8006394 <_malloc_r>
 8007da8:	4607      	mov	r7, r0
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d0ec      	beq.n	8007d88 <_realloc_r+0x1c>
 8007dae:	42b5      	cmp	r5, r6
 8007db0:	462a      	mov	r2, r5
 8007db2:	4621      	mov	r1, r4
 8007db4:	bf28      	it	cs
 8007db6:	4632      	movcs	r2, r6
 8007db8:	f7ff ffca 	bl	8007d50 <memcpy>
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	f7fe fe7c 	bl	8006abc <_free_r>
 8007dc4:	463c      	mov	r4, r7
 8007dc6:	e7e0      	b.n	8007d8a <_realloc_r+0x1e>

08007dc8 <_strtol_l.constprop.0>:
 8007dc8:	2b24      	cmp	r3, #36	@ 0x24
 8007dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dce:	4686      	mov	lr, r0
 8007dd0:	4690      	mov	r8, r2
 8007dd2:	d801      	bhi.n	8007dd8 <_strtol_l.constprop.0+0x10>
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d106      	bne.n	8007de6 <_strtol_l.constprop.0+0x1e>
 8007dd8:	f7fe fe42 	bl	8006a60 <__errno>
 8007ddc:	2316      	movs	r3, #22
 8007dde:	6003      	str	r3, [r0, #0]
 8007de0:	2000      	movs	r0, #0
 8007de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de6:	4834      	ldr	r0, [pc, #208]	@ (8007eb8 <_strtol_l.constprop.0+0xf0>)
 8007de8:	460d      	mov	r5, r1
 8007dea:	462a      	mov	r2, r5
 8007dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df0:	5d06      	ldrb	r6, [r0, r4]
 8007df2:	f016 0608 	ands.w	r6, r6, #8
 8007df6:	d1f8      	bne.n	8007dea <_strtol_l.constprop.0+0x22>
 8007df8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007dfa:	d12d      	bne.n	8007e58 <_strtol_l.constprop.0+0x90>
 8007dfc:	782c      	ldrb	r4, [r5, #0]
 8007dfe:	2601      	movs	r6, #1
 8007e00:	1c95      	adds	r5, r2, #2
 8007e02:	f033 0210 	bics.w	r2, r3, #16
 8007e06:	d109      	bne.n	8007e1c <_strtol_l.constprop.0+0x54>
 8007e08:	2c30      	cmp	r4, #48	@ 0x30
 8007e0a:	d12a      	bne.n	8007e62 <_strtol_l.constprop.0+0x9a>
 8007e0c:	782a      	ldrb	r2, [r5, #0]
 8007e0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e12:	2a58      	cmp	r2, #88	@ 0x58
 8007e14:	d125      	bne.n	8007e62 <_strtol_l.constprop.0+0x9a>
 8007e16:	786c      	ldrb	r4, [r5, #1]
 8007e18:	2310      	movs	r3, #16
 8007e1a:	3502      	adds	r5, #2
 8007e1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e24:	2200      	movs	r2, #0
 8007e26:	fbbc f9f3 	udiv	r9, ip, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e34:	2f09      	cmp	r7, #9
 8007e36:	d81b      	bhi.n	8007e70 <_strtol_l.constprop.0+0xa8>
 8007e38:	463c      	mov	r4, r7
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	dd27      	ble.n	8007e8e <_strtol_l.constprop.0+0xc6>
 8007e3e:	1c57      	adds	r7, r2, #1
 8007e40:	d007      	beq.n	8007e52 <_strtol_l.constprop.0+0x8a>
 8007e42:	4581      	cmp	r9, r0
 8007e44:	d320      	bcc.n	8007e88 <_strtol_l.constprop.0+0xc0>
 8007e46:	d101      	bne.n	8007e4c <_strtol_l.constprop.0+0x84>
 8007e48:	45a2      	cmp	sl, r4
 8007e4a:	db1d      	blt.n	8007e88 <_strtol_l.constprop.0+0xc0>
 8007e4c:	fb00 4003 	mla	r0, r0, r3, r4
 8007e50:	2201      	movs	r2, #1
 8007e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e56:	e7eb      	b.n	8007e30 <_strtol_l.constprop.0+0x68>
 8007e58:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e5a:	bf04      	itt	eq
 8007e5c:	782c      	ldrbeq	r4, [r5, #0]
 8007e5e:	1c95      	addeq	r5, r2, #2
 8007e60:	e7cf      	b.n	8007e02 <_strtol_l.constprop.0+0x3a>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1da      	bne.n	8007e1c <_strtol_l.constprop.0+0x54>
 8007e66:	2c30      	cmp	r4, #48	@ 0x30
 8007e68:	bf0c      	ite	eq
 8007e6a:	2308      	moveq	r3, #8
 8007e6c:	230a      	movne	r3, #10
 8007e6e:	e7d5      	b.n	8007e1c <_strtol_l.constprop.0+0x54>
 8007e70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e74:	2f19      	cmp	r7, #25
 8007e76:	d801      	bhi.n	8007e7c <_strtol_l.constprop.0+0xb4>
 8007e78:	3c37      	subs	r4, #55	@ 0x37
 8007e7a:	e7de      	b.n	8007e3a <_strtol_l.constprop.0+0x72>
 8007e7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e80:	2f19      	cmp	r7, #25
 8007e82:	d804      	bhi.n	8007e8e <_strtol_l.constprop.0+0xc6>
 8007e84:	3c57      	subs	r4, #87	@ 0x57
 8007e86:	e7d8      	b.n	8007e3a <_strtol_l.constprop.0+0x72>
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	e7e1      	b.n	8007e52 <_strtol_l.constprop.0+0x8a>
 8007e8e:	1c53      	adds	r3, r2, #1
 8007e90:	d108      	bne.n	8007ea4 <_strtol_l.constprop.0+0xdc>
 8007e92:	2322      	movs	r3, #34	@ 0x22
 8007e94:	f8ce 3000 	str.w	r3, [lr]
 8007e98:	4660      	mov	r0, ip
 8007e9a:	f1b8 0f00 	cmp.w	r8, #0
 8007e9e:	d0a0      	beq.n	8007de2 <_strtol_l.constprop.0+0x1a>
 8007ea0:	1e69      	subs	r1, r5, #1
 8007ea2:	e006      	b.n	8007eb2 <_strtol_l.constprop.0+0xea>
 8007ea4:	b106      	cbz	r6, 8007ea8 <_strtol_l.constprop.0+0xe0>
 8007ea6:	4240      	negs	r0, r0
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	d099      	beq.n	8007de2 <_strtol_l.constprop.0+0x1a>
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d1f6      	bne.n	8007ea0 <_strtol_l.constprop.0+0xd8>
 8007eb2:	f8c8 1000 	str.w	r1, [r8]
 8007eb6:	e794      	b.n	8007de2 <_strtol_l.constprop.0+0x1a>
 8007eb8:	080082f3 	.word	0x080082f3

08007ebc <_strtol_r>:
 8007ebc:	f7ff bf84 	b.w	8007dc8 <_strtol_l.constprop.0>

08007ec0 <_strtoul_l.constprop.0>:
 8007ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4e34      	ldr	r6, [pc, #208]	@ (8007f98 <_strtoul_l.constprop.0+0xd8>)
 8007ec6:	4686      	mov	lr, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed0:	5d37      	ldrb	r7, [r6, r4]
 8007ed2:	f017 0708 	ands.w	r7, r7, #8
 8007ed6:	d1f8      	bne.n	8007eca <_strtoul_l.constprop.0+0xa>
 8007ed8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007eda:	d12f      	bne.n	8007f3c <_strtoul_l.constprop.0+0x7c>
 8007edc:	782c      	ldrb	r4, [r5, #0]
 8007ede:	2701      	movs	r7, #1
 8007ee0:	1c85      	adds	r5, r0, #2
 8007ee2:	f033 0010 	bics.w	r0, r3, #16
 8007ee6:	d109      	bne.n	8007efc <_strtoul_l.constprop.0+0x3c>
 8007ee8:	2c30      	cmp	r4, #48	@ 0x30
 8007eea:	d12c      	bne.n	8007f46 <_strtoul_l.constprop.0+0x86>
 8007eec:	7828      	ldrb	r0, [r5, #0]
 8007eee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007ef2:	2858      	cmp	r0, #88	@ 0x58
 8007ef4:	d127      	bne.n	8007f46 <_strtoul_l.constprop.0+0x86>
 8007ef6:	786c      	ldrb	r4, [r5, #1]
 8007ef8:	2310      	movs	r3, #16
 8007efa:	3502      	adds	r5, #2
 8007efc:	f04f 38ff 	mov.w	r8, #4294967295
 8007f00:	2600      	movs	r6, #0
 8007f02:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f06:	fb03 f908 	mul.w	r9, r3, r8
 8007f0a:	ea6f 0909 	mvn.w	r9, r9
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007f14:	f1bc 0f09 	cmp.w	ip, #9
 8007f18:	d81c      	bhi.n	8007f54 <_strtoul_l.constprop.0+0x94>
 8007f1a:	4664      	mov	r4, ip
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	dd2a      	ble.n	8007f76 <_strtoul_l.constprop.0+0xb6>
 8007f20:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007f24:	d007      	beq.n	8007f36 <_strtoul_l.constprop.0+0x76>
 8007f26:	4580      	cmp	r8, r0
 8007f28:	d322      	bcc.n	8007f70 <_strtoul_l.constprop.0+0xb0>
 8007f2a:	d101      	bne.n	8007f30 <_strtoul_l.constprop.0+0x70>
 8007f2c:	45a1      	cmp	r9, r4
 8007f2e:	db1f      	blt.n	8007f70 <_strtoul_l.constprop.0+0xb0>
 8007f30:	fb00 4003 	mla	r0, r0, r3, r4
 8007f34:	2601      	movs	r6, #1
 8007f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3a:	e7e9      	b.n	8007f10 <_strtoul_l.constprop.0+0x50>
 8007f3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f3e:	bf04      	itt	eq
 8007f40:	782c      	ldrbeq	r4, [r5, #0]
 8007f42:	1c85      	addeq	r5, r0, #2
 8007f44:	e7cd      	b.n	8007ee2 <_strtoul_l.constprop.0+0x22>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1d8      	bne.n	8007efc <_strtoul_l.constprop.0+0x3c>
 8007f4a:	2c30      	cmp	r4, #48	@ 0x30
 8007f4c:	bf0c      	ite	eq
 8007f4e:	2308      	moveq	r3, #8
 8007f50:	230a      	movne	r3, #10
 8007f52:	e7d3      	b.n	8007efc <_strtoul_l.constprop.0+0x3c>
 8007f54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007f58:	f1bc 0f19 	cmp.w	ip, #25
 8007f5c:	d801      	bhi.n	8007f62 <_strtoul_l.constprop.0+0xa2>
 8007f5e:	3c37      	subs	r4, #55	@ 0x37
 8007f60:	e7dc      	b.n	8007f1c <_strtoul_l.constprop.0+0x5c>
 8007f62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007f66:	f1bc 0f19 	cmp.w	ip, #25
 8007f6a:	d804      	bhi.n	8007f76 <_strtoul_l.constprop.0+0xb6>
 8007f6c:	3c57      	subs	r4, #87	@ 0x57
 8007f6e:	e7d5      	b.n	8007f1c <_strtoul_l.constprop.0+0x5c>
 8007f70:	f04f 36ff 	mov.w	r6, #4294967295
 8007f74:	e7df      	b.n	8007f36 <_strtoul_l.constprop.0+0x76>
 8007f76:	1c73      	adds	r3, r6, #1
 8007f78:	d106      	bne.n	8007f88 <_strtoul_l.constprop.0+0xc8>
 8007f7a:	2322      	movs	r3, #34	@ 0x22
 8007f7c:	f8ce 3000 	str.w	r3, [lr]
 8007f80:	4630      	mov	r0, r6
 8007f82:	b932      	cbnz	r2, 8007f92 <_strtoul_l.constprop.0+0xd2>
 8007f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f88:	b107      	cbz	r7, 8007f8c <_strtoul_l.constprop.0+0xcc>
 8007f8a:	4240      	negs	r0, r0
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d0f9      	beq.n	8007f84 <_strtoul_l.constprop.0+0xc4>
 8007f90:	b106      	cbz	r6, 8007f94 <_strtoul_l.constprop.0+0xd4>
 8007f92:	1e69      	subs	r1, r5, #1
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	e7f5      	b.n	8007f84 <_strtoul_l.constprop.0+0xc4>
 8007f98:	080082f3 	.word	0x080082f3

08007f9c <_strtoul_r>:
 8007f9c:	f7ff bf90 	b.w	8007ec0 <_strtoul_l.constprop.0>

08007fa0 <_malloc_usable_size_r>:
 8007fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa4:	1f18      	subs	r0, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bfbc      	itt	lt
 8007faa:	580b      	ldrlt	r3, [r1, r0]
 8007fac:	18c0      	addlt	r0, r0, r3
 8007fae:	4770      	bx	lr

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
